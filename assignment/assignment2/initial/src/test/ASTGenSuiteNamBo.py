# import unittest
# from TestUtils import TestAST
# from AST import *

# class ASTGenSuite(unittest.TestCase):
#     def test_2172(self):
#         input = '''Class U{Constructor (e:Float ;Es,__,S:Array [Array [Array [Array [String ,044],0B110101],0B1_0],053_0_66];_,_x,SO:String ){}Destructor (){} }'''
#         expect = """Program([ClassDecl(Id(U),[MethodDecl(Id(Constructor),Instance,[param(Id(e),FloatType),param(Id(Es),ArrayType(22070,ArrayType(2,ArrayType(53,ArrayType(36,StringType))))),param(Id(__),ArrayType(22070,ArrayType(2,ArrayType(53,ArrayType(36,StringType))))),param(Id(S),ArrayType(22070,ArrayType(2,ArrayType(53,ArrayType(36,StringType))))),param(Id(_),StringType),param(Id(_x),StringType),param(Id(SO),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 100))

#     def test_2173(self):
#         input = '''Class N_{Destructor (){ {} }Val $22,$_j,AL:Array [String ,92];Destructor (){Continue ;} }Class y23:IZ{}Class B:_{$_5r_(M4:p__;_:s31;_,_,o,M:Boolean ){Continue ;}Destructor (){ {} }}'''
#         expect = """Program([ClassDecl(Id(N_),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),AttributeDecl(Static,ConstDecl(Id($22),ArrayType(92,StringType),None)),AttributeDecl(Static,ConstDecl(Id($_j),ArrayType(92,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(AL),ArrayType(92,StringType),None)),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))]),ClassDecl(Id(y23),Id(IZ),[]),ClassDecl(Id(B),Id(_),[MethodDecl(Id($_5r_),Static,[param(Id(M4),ClassType(Id(p__))),param(Id(_),ClassType(Id(s31))),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(o),BoolType),param(Id(M),BoolType)],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 101))

#     def test_2174(self):
#         input = '''Class _{}Class _7O98:q4{Var _:_Fk7;}Class _68{Constructor (){} }Class O{Destructor (){}_(k:Array [Array [Array [Array [Array [Int ,0X42],0b11],0B1],061],4]){} }'''
#         expect = """Program([ClassDecl(Id(_),[]),ClassDecl(Id(_7O98),Id(q4),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_Fk7)),NullLiteral()))]),ClassDecl(Id(_68),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(O),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(k),ArrayType(4,ArrayType(49,ArrayType(1,ArrayType(3,ArrayType(66,IntType))))))],Block([]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 102))

#     def test_2175(self):
#         input = '''Class _7:_H{Constructor (__:Array [Array [String ,0553],75_1_19_4];_,_p4:Float ){Break ;}Var _:_;Val _:Array [Array [Array [String ,0111],7],0xD];}'''
#         expect = """Program([ClassDecl(Id(_7),Id(_H),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(751194,ArrayType(363,StringType))),param(Id(_),FloatType),param(Id(_p4),FloatType)],Block([Break])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(13,ArrayType(7,ArrayType(73,StringType))),None))])])"""
#         self.assertTrue(TestAST.test(input, expect, 103))

#     def test_2176(self):
#         input = '''Class L:Y{Var J__1C_,_:Array [Float ,0B10000];$y2H(L,_:Int ;z:Array [Array [Array [Array [Array [Array [Float ,05],05],05],0B10000],0X9B],5];__,_b_,x:Float ;z3,L,K,_,_,_1hs,_,_,___l:Float ){} }Class _46_9p:v814{}Class s{Var h,$1,$8:Array [Int ,73];$9(qW:Float ;e,NmxH_:Boolean ){} }Class _:o_7Z{}'''
#         expect = """Program([ClassDecl(Id(L),Id(Y),[AttributeDecl(Instance,VarDecl(Id(J__1C_),ArrayType(16,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(16,FloatType))),MethodDecl(Id($y2H),Static,[param(Id(L),IntType),param(Id(_),IntType),param(Id(z),ArrayType(5,ArrayType(155,ArrayType(16,ArrayType(5,ArrayType(5,ArrayType(5,FloatType))))))),param(Id(__),FloatType),param(Id(_b_),FloatType),param(Id(x),FloatType),param(Id(z3),FloatType),param(Id(L),FloatType),param(Id(K),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_1hs),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(___l),FloatType)],Block([]))]),ClassDecl(Id(_46_9p),Id(v814),[]),ClassDecl(Id(s),[AttributeDecl(Instance,VarDecl(Id(h),ArrayType(73,IntType))),AttributeDecl(Static,VarDecl(Id($1),ArrayType(73,IntType))),AttributeDecl(Static,VarDecl(Id($8),ArrayType(73,IntType))),MethodDecl(Id($9),Static,[param(Id(qW),FloatType),param(Id(e),BoolType),param(Id(NmxH_),BoolType)],Block([]))]),ClassDecl(Id(_),Id(o_7Z),[])])"""
#         self.assertTrue(TestAST.test(input, expect, 104))

#     def test_2177(self):
#         input = '''Class y__Kj4{c(_:Array [Array [Array [String ,066],0b1101],4_8_8]){} }Class Z{Val _,_q:_;Destructor (){Break ;} }Class Y6h1:l{_ym1(){} }'''
#         expect = """Program([ClassDecl(Id(y__Kj4),[MethodDecl(Id(c),Instance,[param(Id(_),ArrayType(488,ArrayType(13,ArrayType(54,StringType))))],Block([]))]),ClassDecl(Id(Z),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_q),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(Y6h1),Id(l),[MethodDecl(Id(_ym1),Instance,[],Block([]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 105))
#     def test_2179(self):
#         input = '''Class y:a{Var _,$___X__20,$B_9q_U6:_2b;Constructor (_:Int ;f:Int ;oN,_a,P_R3:Array [String ,0b1];q:_Z_;T,_1,t:H;g:Boolean ){Break ;} }'''
#         expect = """Program([ClassDecl(Id(y),Id(a),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_2b)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($___X__20),ClassType(Id(_2b)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($B_9q_U6),ClassType(Id(_2b)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(f),IntType),param(Id(oN),ArrayType(1,StringType)),param(Id(_a),ArrayType(1,StringType)),param(Id(P_R3),ArrayType(1,StringType)),param(Id(q),ClassType(Id(_Z_))),param(Id(T),ClassType(Id(H))),param(Id(_1),ClassType(Id(H))),param(Id(t),ClassType(Id(H))),param(Id(g),BoolType)],Block([Break]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 106))

#     def test_2180(self):
#         input = '''Class _1:_{Val $8F,_,_:_;}Class __0L:_N{$_(){}Constructor (____:Array [Array [Array [Array [Boolean ,0B100],066],04],9];_,h,l:Array [Array [Array [Array [Array [Float ,05],0B10111],066],0B1_0_11],06_443];C:Array [Array [Array [Array [Array [Array [String ,066],0XE6],0b111011],34],0b1],01]){ {} }}Class mO_:H0{}Class __R:Y{}Class _{}'''
#         expect = """Program([ClassDecl(Id(_1),Id(_),[AttributeDecl(Static,ConstDecl(Id($8F),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(__0L),Id(_N),[MethodDecl(Id($_),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(____),ArrayType(9,ArrayType(4,ArrayType(54,ArrayType(4,BoolType))))),param(Id(_),ArrayType(3363,ArrayType(11,ArrayType(54,ArrayType(23,ArrayType(5,FloatType)))))),param(Id(h),ArrayType(3363,ArrayType(11,ArrayType(54,ArrayType(23,ArrayType(5,FloatType)))))),param(Id(l),ArrayType(3363,ArrayType(11,ArrayType(54,ArrayType(23,ArrayType(5,FloatType)))))),param(Id(C),ArrayType(1,ArrayType(1,ArrayType(34,ArrayType(59,ArrayType(230,ArrayType(54,StringType)))))))],Block([Block([])]))]),ClassDecl(Id(mO_),Id(H0),[]),ClassDecl(Id(__R),Id(Y),[]),ClassDecl(Id(_),[])])"""
#         self.assertTrue(TestAST.test(input, expect, 107))

#     def test_2181(self):
#         input = '''Class c:_{_(_,ufG,_,_Wq1:Array [Array [Array [Array [Array [String ,065],0X55],0B1],0B1],0B11100];L:_;c:String ){}Val $Z,_3_C:_;Destructor (){} }'''
#         expect = """Program([ClassDecl(Id(c),Id(_),[MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(28,ArrayType(1,ArrayType(1,ArrayType(85,ArrayType(53,StringType)))))),param(Id(ufG),ArrayType(28,ArrayType(1,ArrayType(1,ArrayType(85,ArrayType(53,StringType)))))),param(Id(_),ArrayType(28,ArrayType(1,ArrayType(1,ArrayType(85,ArrayType(53,StringType)))))),param(Id(_Wq1),ArrayType(28,ArrayType(1,ArrayType(1,ArrayType(85,ArrayType(53,StringType)))))),param(Id(L),ClassType(Id(_))),param(Id(c),StringType)],Block([])),AttributeDecl(Static,ConstDecl(Id($Z),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_3_C),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 108))

#     def test_2182(self):
#         input = '''Class _:_{Var hCy3,O,MM3k,$___1:_h;}Class _:_{ZR(BL_:Array [Int ,04]){}$9(o,C4o_:String ;_n,_:Int ;_,_4K__,E:Array [Array [Array [Array [Float ,0b111100],0b111100],0X42],0X42]){}$_(_,w,_,b_:Boolean ){} }'''
#         expect = """Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(hCy3),ClassType(Id(_h)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(O),ClassType(Id(_h)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(MM3k),ClassType(Id(_h)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($___1),ClassType(Id(_h)),NullLiteral()))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(ZR),Instance,[param(Id(BL_),ArrayType(4,IntType))],Block([])),MethodDecl(Id($9),Static,[param(Id(o),StringType),param(Id(C4o_),StringType),param(Id(_n),IntType),param(Id(_),IntType),param(Id(_),ArrayType(66,ArrayType(66,ArrayType(60,ArrayType(60,FloatType))))),param(Id(_4K__),ArrayType(66,ArrayType(66,ArrayType(60,ArrayType(60,FloatType))))),param(Id(E),ArrayType(66,ArrayType(66,ArrayType(60,ArrayType(60,FloatType)))))],Block([])),MethodDecl(Id($_),Static,[param(Id(_),BoolType),param(Id(w),BoolType),param(Id(_),BoolType),param(Id(b_),BoolType)],Block([]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 109))

#     def test_2183(self):
#         input = '''Class U6:_{$80(){Val Y:Array [Array [String ,02],38];}Constructor (_f:Boolean ;Q_,Y1,B:Array [Boolean ,066];_,R:String ;__:Boolean ;__:Int ){ {{} }}Destructor (){ {}Var gAd,_2:Array [Int ,0b1];}Constructor (){} }'''
#         expect = """Program([ClassDecl(Id(U6),Id(_),[MethodDecl(Id($80),Static,[],Block([ConstDecl(Id(Y),ArrayType(38,ArrayType(2,StringType)),None)])),MethodDecl(Id(Constructor),Instance,[param(Id(_f),BoolType),param(Id(Q_),ArrayType(54,BoolType)),param(Id(Y1),ArrayType(54,BoolType)),param(Id(B),ArrayType(54,BoolType)),param(Id(_),StringType),param(Id(R),StringType),param(Id(__),BoolType),param(Id(__),IntType)],Block([Block([Block([])])])),MethodDecl(Id(Destructor),Instance,[],Block([Block([]),VarDecl(Id(gAd),ArrayType(1,IntType)),VarDecl(Id(_2),ArrayType(1,IntType))])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 110))
#     def test_2297(self):
#         input = '''Class v:V4__{}Class _:_{Constructor (){}_h(I,_:Array [String ,0xFE_7];___:Array [String ,06];A:Array [Float ,0B111]){} }'''
#         expect = """Program([ClassDecl(Id(v),Id(V4__),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(_h),Instance,[param(Id(I),ArrayType(4071,StringType)),param(Id(_),ArrayType(4071,StringType)),param(Id(___),ArrayType(6,StringType)),param(Id(A),ArrayType(7,FloatType))],Block([]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 111))

#     def test_2298(self):
#         input = '''Class _5_2mp55{Val _:b;}Class E_:_{}Class T_2{Destructor (){} }Class M__:h{}Class s:_{Val _C:_;Val _ip,$_,_,$_h,a2_:Float ;}Class O__{}Class _{}'''
#         expect = """Program([ClassDecl(Id(_5_2mp55),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(b)),NullLiteral()))]),ClassDecl(Id(E_),Id(_),[]),ClassDecl(Id(T_2),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(M__),Id(h),[]),ClassDecl(Id(s),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_C),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_ip),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_h),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(a2_),FloatType,None))]),ClassDecl(Id(O__),[]),ClassDecl(Id(_),[])])"""
#         self.assertTrue(TestAST.test(input, expect, 112))

#     def test_2299(self):
#         input = '''Class _{$8(_d,E,_U:Array [Boolean ,0x5];_,_:Array [Array [Array [Array [Int ,0X9],4],0x9E3],057];_:Array [Array [Int ,0B1],057];B_:Array [Float ,04_650];u95,r:_){} }'''
#         expect = """Program([ClassDecl(Id(_),[MethodDecl(Id($8),Static,[param(Id(_d),ArrayType(5,BoolType)),param(Id(E),ArrayType(5,BoolType)),param(Id(_U),ArrayType(5,BoolType)),param(Id(_),ArrayType(47,ArrayType(2531,ArrayType(4,ArrayType(9,IntType))))),param(Id(_),ArrayType(47,ArrayType(2531,ArrayType(4,ArrayType(9,IntType))))),param(Id(_),ArrayType(47,ArrayType(1,IntType))),param(Id(B_),ArrayType(2472,FloatType)),param(Id(u95),ClassType(Id(_))),param(Id(r),ClassType(Id(_)))],Block([]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 113))

#     def test_2300(self):
#         input = '''Class _{$_(){Continue ;YT::$C2D_65();Val sy,yi,_5D3:Array [Array [Array [Array [Boolean ,95],076],66],076];} }Class Y:r{Val B40,__7_K9,v_,_3_u_____,$3_2,$d:Array [Float ,0b1011010];}'''
#         expect = """Program([ClassDecl(Id(_),[MethodDecl(Id($_),Static,[],Block([Continue,Call(Id(YT),Id($C2D_65),[]),ConstDecl(Id(sy),ArrayType(62,ArrayType(66,ArrayType(62,ArrayType(95,BoolType)))),None),ConstDecl(Id(yi),ArrayType(62,ArrayType(66,ArrayType(62,ArrayType(95,BoolType)))),None),ConstDecl(Id(_5D3),ArrayType(62,ArrayType(66,ArrayType(62,ArrayType(95,BoolType)))),None)]))]),ClassDecl(Id(Y),Id(r),[AttributeDecl(Instance,ConstDecl(Id(B40),ArrayType(90,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(__7_K9),ArrayType(90,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(v_),ArrayType(90,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_3_u_____),ArrayType(90,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($3_2),ArrayType(90,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($d),ArrayType(90,FloatType),None))])])"""
#         self.assertTrue(TestAST.test(input, expect, 114))

#     def test_2301(self):
#         input = '''Class _5{}Class h_9346:_{}Class z:W{}Class sh:__n{Var Y_pn54,r:Array [Array [Int ,93],036];Constructor (){ {}Continue ;Val F:W;} }'''
#         expect = """Program([ClassDecl(Id(_5),[]),ClassDecl(Id(h_9346),Id(_),[]),ClassDecl(Id(z),Id(W),[]),ClassDecl(Id(sh),Id(__n),[AttributeDecl(Instance,VarDecl(Id(Y_pn54),ArrayType(30,ArrayType(93,IntType)))),AttributeDecl(Instance,VarDecl(Id(r),ArrayType(30,ArrayType(93,IntType)))),MethodDecl(Id(Constructor),Instance,[],Block([Block([]),Continue,ConstDecl(Id(F),ClassType(Id(W)),NullLiteral())]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 115))

#     def test_2302(self):
#         input = '''Class X3:_Y{Val D:_8V6_;}Class _P:__T9_1{Constructor (){}Var $U:_C;}Class x{Destructor (){}Val _9X,M,$_,$1RZ_,$8xT,J,W,_,_y,_8_,E2:Array [Boolean ,0x8_F];}'''
#         expect = """Program([ClassDecl(Id(X3),Id(_Y),[AttributeDecl(Instance,ConstDecl(Id(D),ClassType(Id(_8V6_)),NullLiteral()))]),ClassDecl(Id(_P),Id(__T9_1),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($U),ClassType(Id(_C)),NullLiteral()))]),ClassDecl(Id(x),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_9X),ArrayType(143,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(M),ArrayType(143,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(143,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($1RZ_),ArrayType(143,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($8xT),ArrayType(143,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(J),ArrayType(143,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(W),ArrayType(143,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(143,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_y),ArrayType(143,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_8_),ArrayType(143,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(E2),ArrayType(143,BoolType),None))])])"""
#         self.assertTrue(TestAST.test(input, expect, 116))

#     def test_2303(self):
#         input = '''Class pe{Val _:Array [Int ,0B1100000];q2W9j(_H_:Array [Array [Float ,07_7],0b1];__,d_EQ:Float ;_:VW){} }Class _:_qV37{}Class _5y_{Var _:Array [Array [Float ,18],0XA];}Class j:__o1{Constructor (__y_,__,_,h,_6:Float ;_Z:Int ;_:Int ;C_PF,_:Array [Boolean ,0x5];PV3_,S,_Uy:Array [Int ,0765];Y:_q00U){}$39(){} }'''
#         expect = """Program([ClassDecl(Id(pe),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(96,IntType),None)),MethodDecl(Id(q2W9j),Instance,[param(Id(_H_),ArrayType(1,ArrayType(63,FloatType))),param(Id(__),FloatType),param(Id(d_EQ),FloatType),param(Id(_),ClassType(Id(VW)))],Block([]))]),ClassDecl(Id(_),Id(_qV37),[]),ClassDecl(Id(_5y_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(10,ArrayType(18,FloatType))))]),ClassDecl(Id(j),Id(__o1),[MethodDecl(Id(Constructor),Instance,[param(Id(__y_),FloatType),param(Id(__),FloatType),param(Id(_),FloatType),param(Id(h),FloatType),param(Id(_6),FloatType),param(Id(_Z),IntType),param(Id(_),IntType),param(Id(C_PF),ArrayType(5,BoolType)),param(Id(_),ArrayType(5,BoolType)),param(Id(PV3_),ArrayType(501,IntType)),param(Id(S),ArrayType(501,IntType)),param(Id(_Uy),ArrayType(501,IntType)),param(Id(Y),ClassType(Id(_q00U)))],Block([])),MethodDecl(Id($39),Static,[],Block([]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 117))

#     def test_2304(self):
#         input = '''Class p:k0E{$2(W_,__,_:X5;_lK,__35,_w,Q_,vs_:Array [Array [Array [Array [Array [Float ,0x2D],0b1000001],0B10101],0b1000001],0b1000001];_6,__K0Q:_S2umq){} }Class v{Destructor (){} }Class _:_{}'''
#         expect = """Program([ClassDecl(Id(p),Id(k0E),[MethodDecl(Id($2),Static,[param(Id(W_),ClassType(Id(X5))),param(Id(__),ClassType(Id(X5))),param(Id(_),ClassType(Id(X5))),param(Id(_lK),ArrayType(65,ArrayType(65,ArrayType(21,ArrayType(65,ArrayType(45,FloatType)))))),param(Id(__35),ArrayType(65,ArrayType(65,ArrayType(21,ArrayType(65,ArrayType(45,FloatType)))))),param(Id(_w),ArrayType(65,ArrayType(65,ArrayType(21,ArrayType(65,ArrayType(45,FloatType)))))),param(Id(Q_),ArrayType(65,ArrayType(65,ArrayType(21,ArrayType(65,ArrayType(45,FloatType)))))),param(Id(vs_),ArrayType(65,ArrayType(65,ArrayType(21,ArrayType(65,ArrayType(45,FloatType)))))),param(Id(_6),ClassType(Id(_S2umq))),param(Id(__K0Q),ClassType(Id(_S2umq)))],Block([]))]),ClassDecl(Id(v),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[])])"""
#         self.assertTrue(TestAST.test(input, expect, 118))

#     def test_2305(self):
#         input = '''Class XE{}Class n_7H{Var $p8:Array [Array [Array [Int ,0136],0B1],0136];Var $C__,$cVc,$1,__,_6:Float ;}Class s4__:f{Var $g:Boolean ;}Class _:z{_8__N(s,d2t_:Boolean ;s,v,_,K:Hz_){} }'''
#         expect = """Program([ClassDecl(Id(XE),[]),ClassDecl(Id(n_7H),[AttributeDecl(Static,VarDecl(Id($p8),ArrayType(94,ArrayType(1,ArrayType(94,IntType))))),AttributeDecl(Static,VarDecl(Id($C__),FloatType)),AttributeDecl(Static,VarDecl(Id($cVc),FloatType)),AttributeDecl(Static,VarDecl(Id($1),FloatType)),AttributeDecl(Instance,VarDecl(Id(__),FloatType)),AttributeDecl(Instance,VarDecl(Id(_6),FloatType))]),ClassDecl(Id(s4__),Id(f),[AttributeDecl(Static,VarDecl(Id($g),BoolType))]),ClassDecl(Id(_),Id(z),[MethodDecl(Id(_8__N),Instance,[param(Id(s),BoolType),param(Id(d2t_),BoolType),param(Id(s),ClassType(Id(Hz_))),param(Id(v),ClassType(Id(Hz_))),param(Id(_),ClassType(Id(Hz_))),param(Id(K),ClassType(Id(Hz_)))],Block([]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 119))

#     def test_2306(self):
#         input = '''Class _{}Class __{Fg(fvQb2W:Float ){ {} }Constructor (__,u:_y;v,MK:Array [Array [String ,012_6_7],83]){Return ;} }'''
#         expect = """Program([ClassDecl(Id(_),[]),ClassDecl(Id(__),[MethodDecl(Id(Fg),Instance,[param(Id(fvQb2W),FloatType)],Block([Block([])])),MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(_y))),param(Id(u),ClassType(Id(_y))),param(Id(v),ArrayType(83,ArrayType(695,StringType))),param(Id(MK),ArrayType(83,ArrayType(695,StringType)))],Block([Return()]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 120))

#     def test_2307(self):
#         input = '''Class Q{bb9(_,_:Array [Int ,0104];k6_r_1:Array [Array [Int ,0X2F],0b1];Nm6:Float ;_,f52,z,f,_,u,_:_){} }Class _j:kc_0{}Class _6{}'''
#         expect = """Program([ClassDecl(Id(Q),[MethodDecl(Id(bb9),Instance,[param(Id(_),ArrayType(68,IntType)),param(Id(_),ArrayType(68,IntType)),param(Id(k6_r_1),ArrayType(1,ArrayType(47,IntType))),param(Id(Nm6),FloatType),param(Id(_),ClassType(Id(_))),param(Id(f52),ClassType(Id(_))),param(Id(z),ClassType(Id(_))),param(Id(f),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(u),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_j),Id(kc_0),[]),ClassDecl(Id(_6),[])])"""
#         self.assertTrue(TestAST.test(input, expect, 121))

#     def test_2308(self):
#         input = '''Class __Gp0{Constructor (){p_::$6._._141();Continue ;}Constructor (_,P:Array [Boolean ,074]){}Val $__,$_Y,_m3d,_,$B4,$__:C__E;}Class __8{}'''
#         expect = """Program([ClassDecl(Id(__Gp0),[MethodDecl(Id(Constructor),Instance,[],Block([Call(FieldAccess(FieldAccess(Id(p_),Id($6)),Id(_)),Id(_141),[]),Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(60,BoolType)),param(Id(P),ArrayType(60,BoolType))],Block([])),AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(C__E)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_Y),ClassType(Id(C__E)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_m3d),ClassType(Id(C__E)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(C__E)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($B4),ClassType(Id(C__E)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(C__E)),NullLiteral()))]),ClassDecl(Id(__8),[])])"""
#         self.assertTrue(TestAST.test(input, expect, 122))

#     def test_2309(self):
#         input = '''Class _:I{}Class S:_{}Class _:i{Val $90:Array [Array [Array [Array [Array [Int ,0X9],5],034],022],7_3_0];}Class _:K{Constructor (){} }'''
#         expect = """Program([ClassDecl(Id(_),Id(I),[]),ClassDecl(Id(S),Id(_),[]),ClassDecl(Id(_),Id(i),[AttributeDecl(Static,ConstDecl(Id($90),ArrayType(730,ArrayType(18,ArrayType(28,ArrayType(5,ArrayType(9,IntType))))),None))]),ClassDecl(Id(_),Id(K),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 123))

#     def test_2310(self):
#         input = '''Class _:_b{Constructor (_:Int ;_:__v;M_29,_,QJ:v){Continue ;Vw2::$_();} }Class r:_V_{Constructor (_:Array [Float ,01];_:b){}Var L:String ;}Class _:H{}Class __J7:K8e{$_(z2j:Array [Array [Int ,0x7],0X39];_98_,_m_,__U_1_:_6){Continue ;}$F(_wDv_:String ){} }'''
#         expect = """Program([ClassDecl(Id(_),Id(_b),[MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(_),ClassType(Id(__v))),param(Id(M_29),ClassType(Id(v))),param(Id(_),ClassType(Id(v))),param(Id(QJ),ClassType(Id(v)))],Block([Continue,Call(Id(Vw2),Id($_),[])]))]),ClassDecl(Id(r),Id(_V_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,FloatType)),param(Id(_),ClassType(Id(b)))],Block([])),AttributeDecl(Instance,VarDecl(Id(L),StringType))]),ClassDecl(Id(_),Id(H),[]),ClassDecl(Id(__J7),Id(K8e),[MethodDecl(Id($_),Static,[param(Id(z2j),ArrayType(57,ArrayType(7,IntType))),param(Id(_98_),ClassType(Id(_6))),param(Id(_m_),ClassType(Id(_6))),param(Id(__U_1_),ClassType(Id(_6)))],Block([Continue])),MethodDecl(Id($F),Static,[param(Id(_wDv_),StringType)],Block([]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 124))

#     def test_2311(self):
#         input = '''Class _{}Class _:bI_{}Class a_c:_{$ns(T_,W,__6:_d;_6q,WuZ91_N:Y){Break ;Continue ;Var m0,La,s,CA_5u:Array [Array [Array [Array [Array [Boolean ,03_4],0XB],0b110001],0XF],0b110001];{Break ;Break ;} }}Class CV:e{}'''
#         expect = """Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(bI_),[]),ClassDecl(Id(a_c),Id(_),[MethodDecl(Id($ns),Static,[param(Id(T_),ClassType(Id(_d))),param(Id(W),ClassType(Id(_d))),param(Id(__6),ClassType(Id(_d))),param(Id(_6q),ClassType(Id(Y))),param(Id(WuZ91_N),ClassType(Id(Y)))],Block([Break,Continue,VarDecl(Id(m0),ArrayType(49,ArrayType(15,ArrayType(49,ArrayType(11,ArrayType(28,BoolType)))))),VarDecl(Id(La),ArrayType(49,ArrayType(15,ArrayType(49,ArrayType(11,ArrayType(28,BoolType)))))),VarDecl(Id(s),ArrayType(49,ArrayType(15,ArrayType(49,ArrayType(11,ArrayType(28,BoolType)))))),VarDecl(Id(CA_5u),ArrayType(49,ArrayType(15,ArrayType(49,ArrayType(11,ArrayType(28,BoolType)))))),Block([Break,Break])]))]),ClassDecl(Id(CV),Id(e),[])])"""
#         self.assertTrue(TestAST.test(input, expect, 125))

#     def test_2312(self):
#         input = '''Class h:_{Constructor (){}_5G0(){} }Class c0:F{}Class i4_HVR0{Val _:Boolean ;Var $_:String ;Val $__:Array [Float ,0117];}'''
#         expect = """Program([ClassDecl(Id(h),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(_5G0),Instance,[],Block([]))]),ClassDecl(Id(c0),Id(F),[]),ClassDecl(Id(i4_HVR0),[AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(79,FloatType),None))])])"""
#         self.assertTrue(TestAST.test(input, expect, 126))

#     def test_2313(self):
#         input = '''Class _m{}Class _7_:d{}Class _{_(_:Array [Float ,07]){}Constructor (_:Int ;jh_,_,f__I:Float ){n_::$0S6().K();}Val $4,_:_2;Val BYt:Int ;$7(){} }'''
#         expect = """Program([ClassDecl(Id(_m),[]),ClassDecl(Id(_7_),Id(d),[]),ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(7,FloatType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(jh_),FloatType),param(Id(_),FloatType),param(Id(f__I),FloatType)],Block([Call(CallExpr(Id(n_),Id($0S6),[]),Id(K),[])])),AttributeDecl(Static,ConstDecl(Id($4),ClassType(Id(_2)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_2)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(BYt),IntType,None)),MethodDecl(Id($7),Static,[],Block([]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 127))

#     def test_2314(self):
#         input = '''Class A:_3{}Class __1{Var $_:Array [Array [Array [Boolean ,0B100010],0115],0X1E];$_(J7,__,_:Array [Boolean ,012];_,_N8190j4_u,d,S__:E;_,S7L1:Array [String ,0xD]){} }'''
#         expect = """Program([ClassDecl(Id(A),Id(_3),[]),ClassDecl(Id(__1),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(30,ArrayType(77,ArrayType(34,BoolType))))),MethodDecl(Id($_),Static,[param(Id(J7),ArrayType(10,BoolType)),param(Id(__),ArrayType(10,BoolType)),param(Id(_),ArrayType(10,BoolType)),param(Id(_),ClassType(Id(E))),param(Id(_N8190j4_u),ClassType(Id(E))),param(Id(d),ClassType(Id(E))),param(Id(S__),ClassType(Id(E))),param(Id(_),ArrayType(13,StringType)),param(Id(S7L1),ArrayType(13,StringType))],Block([]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 128))

#     def test_2315(self):
#         input = '''Class _{_4J(j,__,U7_,e,h,x:_38;X0:String ;_1,__949,_:Array [Array [Array [Boolean ,0x5D],0XA],063_5573];e1_,V:Array [Int ,0b10011];_6:Array [Boolean ,6]){} }'''
#         expect = """Program([ClassDecl(Id(_),[MethodDecl(Id(_4J),Instance,[param(Id(j),ClassType(Id(_38))),param(Id(__),ClassType(Id(_38))),param(Id(U7_),ClassType(Id(_38))),param(Id(e),ClassType(Id(_38))),param(Id(h),ClassType(Id(_38))),param(Id(x),ClassType(Id(_38))),param(Id(X0),StringType),param(Id(_1),ArrayType(211835,ArrayType(10,ArrayType(93,BoolType)))),param(Id(__949),ArrayType(211835,ArrayType(10,ArrayType(93,BoolType)))),param(Id(_),ArrayType(211835,ArrayType(10,ArrayType(93,BoolType)))),param(Id(e1_),ArrayType(19,IntType)),param(Id(V),ArrayType(19,IntType)),param(Id(_6),ArrayType(6,BoolType))],Block([]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 129))

#     def test_2316(self):
#         input = '''Class _6{}Class ___CW_{}Class I:_{Var $d:Array [Array [Array [Int ,05],0x3E],0x3E];}Class _0{Val _,__,$V2___0__,$_5:H;}'''
#         expect = """Program([ClassDecl(Id(_6),[]),ClassDecl(Id(___CW_),[]),ClassDecl(Id(I),Id(_),[AttributeDecl(Static,VarDecl(Id($d),ArrayType(62,ArrayType(62,ArrayType(5,IntType)))))]),ClassDecl(Id(_0),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(H)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(H)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($V2___0__),ClassType(Id(H)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_5),ClassType(Id(H)),NullLiteral()))])])"""
#         self.assertTrue(TestAST.test(input, expect, 130))

#     def test_2317(self):
#         input = '''Class _3{Constructor (__8:Float ;_1,_:_1;r,_:Boolean ;_8_5:Float ;_qz__,_,V:Boolean ;_6,_W,__:_;_:Array [Array [Int ,064],01]){} }Class o:r9b{}Class _{}'''
#         expect = """Program([ClassDecl(Id(_3),[MethodDecl(Id(Constructor),Instance,[param(Id(__8),FloatType),param(Id(_1),ClassType(Id(_1))),param(Id(_),ClassType(Id(_1))),param(Id(r),BoolType),param(Id(_),BoolType),param(Id(_8_5),FloatType),param(Id(_qz__),BoolType),param(Id(_),BoolType),param(Id(V),BoolType),param(Id(_6),ClassType(Id(_))),param(Id(_W),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(_),ArrayType(1,ArrayType(52,IntType)))],Block([]))]),ClassDecl(Id(o),Id(r9b),[]),ClassDecl(Id(_),[])])"""
#         self.assertTrue(TestAST.test(input, expect, 131))

#     def test_2318(self):
#         input = '''Class x_{}Class nx8{Constructor (_,u_9,z:z_){} }Class N:r{Constructor (){Return ;}Destructor (){} }Class j{Destructor (){Return ;} }'''
#         expect = """Program([ClassDecl(Id(x_),[]),ClassDecl(Id(nx8),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(z_))),param(Id(u_9),ClassType(Id(z_))),param(Id(z),ClassType(Id(z_)))],Block([]))]),ClassDecl(Id(N),Id(r),[MethodDecl(Id(Constructor),Instance,[],Block([Return()])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(j),[MethodDecl(Id(Destructor),Instance,[],Block([Return()]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 132))

#     def test_2319(self):
#         input = '''Class j81:__{}Class _:_{}Class _:K{}Class __6:_{}Class D:_{__(){} }Class i{Destructor (){} }Class __e:_{Val $43,$h3,$2__B,G6,_:Array [Int ,0b1];}'''
#         expect = """Program([ClassDecl(Id(j81),Id(__),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),Id(K),[]),ClassDecl(Id(__6),Id(_),[]),ClassDecl(Id(D),Id(_),[MethodDecl(Id(__),Instance,[],Block([]))]),ClassDecl(Id(i),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__e),Id(_),[AttributeDecl(Static,ConstDecl(Id($43),ArrayType(1,IntType),None)),AttributeDecl(Static,ConstDecl(Id($h3),ArrayType(1,IntType),None)),AttributeDecl(Static,ConstDecl(Id($2__B),ArrayType(1,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(G6),ArrayType(1,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,IntType),None))])])"""
#         self.assertTrue(TestAST.test(input, expect, 133))

#     def test_2320(self):
#         input = '''Class _{}Class _T__5{Var g,$_,_k_:Array [Array [Array [Array [Array [Array [Boolean ,0X5F],041],0X8],041],0x3A],2_4];}'''
#         expect = """Program([ClassDecl(Id(_),[]),ClassDecl(Id(_T__5),[AttributeDecl(Instance,VarDecl(Id(g),ArrayType(24,ArrayType(58,ArrayType(33,ArrayType(8,ArrayType(33,ArrayType(95,BoolType)))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(24,ArrayType(58,ArrayType(33,ArrayType(8,ArrayType(33,ArrayType(95,BoolType)))))))),AttributeDecl(Instance,VarDecl(Id(_k_),ArrayType(24,ArrayType(58,ArrayType(33,ArrayType(8,ArrayType(33,ArrayType(95,BoolType))))))))])])"""
#         self.assertTrue(TestAST.test(input, expect, 134))

#     def test_2321(self):
#         input = '''Class I_o_:e{Constructor (k7,w:_;_,_:Array [Float ,033];_j4:KH;__,_is,M,_A33,_:_){Return ;Var y2A:Array [Array [Array [Int ,7],9_4],0b1010110];} }'''
#         expect = """Program([ClassDecl(Id(I_o_),Id(e),[MethodDecl(Id(Constructor),Instance,[param(Id(k7),ClassType(Id(_))),param(Id(w),ClassType(Id(_))),param(Id(_),ArrayType(27,FloatType)),param(Id(_),ArrayType(27,FloatType)),param(Id(_j4),ClassType(Id(KH))),param(Id(__),ClassType(Id(_))),param(Id(_is),ClassType(Id(_))),param(Id(M),ClassType(Id(_))),param(Id(_A33),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([Return(),VarDecl(Id(y2A),ArrayType(86,ArrayType(94,ArrayType(7,IntType))))]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 135))

#     def test_2322(self):
#         input = '''Class _{Var _40x7,$w1a,$x_,G4:String ;$6_(){Continue ;}$_(_:Boolean ;l_:Int ;v7_,_,_:Array [Int ,0X3F]){} }Class _{}'''
#         expect = """Program([ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_40x7),StringType)),AttributeDecl(Static,VarDecl(Id($w1a),StringType)),AttributeDecl(Static,VarDecl(Id($x_),StringType)),AttributeDecl(Instance,VarDecl(Id(G4),StringType)),MethodDecl(Id($6_),Static,[],Block([Continue])),MethodDecl(Id($_),Static,[param(Id(_),BoolType),param(Id(l_),IntType),param(Id(v7_),ArrayType(63,IntType)),param(Id(_),ArrayType(63,IntType)),param(Id(_),ArrayType(63,IntType))],Block([]))]),ClassDecl(Id(_),[])])"""
#         self.assertTrue(TestAST.test(input, expect, 136))

#     def test_2323(self):
#         input = '''Class _v:k{u(f:s;c_8:Boolean ){}Constructor (_:T__41__;K_4,_x,Q88,Q___:Array [Array [Array [Array [String ,0b110101],0b110101],06],0B1001000];__7cP:Array [Float ,0xC_21]){}g(_of,U:Array [Array [Boolean ,0x2_1],0X20]){} }'''
#         expect = """Program([ClassDecl(Id(_v),Id(k),[MethodDecl(Id(u),Instance,[param(Id(f),ClassType(Id(s))),param(Id(c_8),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(T__41__))),param(Id(K_4),ArrayType(72,ArrayType(6,ArrayType(53,ArrayType(53,StringType))))),param(Id(_x),ArrayType(72,ArrayType(6,ArrayType(53,ArrayType(53,StringType))))),param(Id(Q88),ArrayType(72,ArrayType(6,ArrayType(53,ArrayType(53,StringType))))),param(Id(Q___),ArrayType(72,ArrayType(6,ArrayType(53,ArrayType(53,StringType))))),param(Id(__7cP),ArrayType(3105,FloatType))],Block([])),MethodDecl(Id(g),Instance,[param(Id(_of),ArrayType(32,ArrayType(33,BoolType))),param(Id(U),ArrayType(32,ArrayType(33,BoolType)))],Block([]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 137))

#     def test_138(self):
#         # TODO: Test extras:
#         input = """
# 					Class TestExtras {
# 						Test1(x: Number){ x=-1; }
# 						Test2(){
# 							x1::$a = New X(New Y().z);
# 							x2 = Array(123,"abc","def",456) - x3::$2803_01[x.y()];
# 						}
# 						Test3(){ x = "Lorem ipsum dolor sit amet,\\n consectetur adipiscing elit"; }
# 						Test4(){ (19>(_18._28())*Cat::$getObj().name[125])[True] = (23>18&&(15%New X(New ABC(86*!0)))/Dog::$numDogs)[15]; }
# 						Test5(){
# 							legalSmt = (((!123) >= ((234 && (345 > 456)) || 567)) <= (678 != Num::$a));
# 						}
# 					}
# 			"""
#         expect = r"""Program([ClassDecl(Id(TestExtras),[MethodDecl(Id(Test1),Instance,[param(Id(x),ClassType(Id(Number)))],Block([AssignStmt(Id(x),UnaryOp(-,IntLit(1)))])),MethodDecl(Id(Test2),Instance,[],Block([AssignStmt(FieldAccess(Id(x1),Id($a)),NewExpr(Id(X),[FieldAccess(NewExpr(Id(Y),[]),Id(z))])),AssignStmt(Id(x2),BinaryOp(-,[IntLit(123),StringLit(abc),StringLit(def),IntLit(456)],ArrayCell(FieldAccess(Id(x3),Id($2803_01)),[CallExpr(Id(x),Id(y),[])])))])),MethodDecl(Id(Test3),Instance,[],Block([AssignStmt(Id(x),StringLit(Lorem ipsum dolor sit amet,\n consectetur adipiscing elit))])),MethodDecl(Id(Test4),Instance,[],Block([AssignStmt(ArrayCell(BinaryOp(>,IntLit(19),BinaryOp(*,CallExpr(Id(_18),Id(_28),[]),ArrayCell(FieldAccess(CallExpr(Id(Cat),Id($getObj),[]),Id(name)),[IntLit(125)]))),[BooleanLit(True)]),ArrayCell(BinaryOp(>,IntLit(23),BinaryOp(&&,IntLit(18),BinaryOp(/,BinaryOp(%,IntLit(15),NewExpr(Id(X),[NewExpr(Id(ABC),[BinaryOp(*,IntLit(86),UnaryOp(!,IntLit(0)))])])),FieldAccess(Id(Dog),Id($numDogs))))),[IntLit(15)]))])),MethodDecl(Id(Test5),Instance,[],Block([AssignStmt(Id(legalSmt),BinaryOp(<=,BinaryOp(>=,UnaryOp(!,IntLit(123)),BinaryOp(||,BinaryOp(&&,IntLit(234),BinaryOp(>,IntLit(345),IntLit(456))),IntLit(567))),BinaryOp(!=,IntLit(678),FieldAccess(Id(Num),Id($a)))))]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 138))

#     def test_139(self):
#         # TODO: Test extras:
#         input = """
# 					Class TestExtras {
# 						Test1(x: Number){ x=-1; }
# 						Test2(){
# 							x1::$a = New X(New Y().z);
# 							x2 = Array(123,"abc","def",456) - x3::$2803_01[x.y()];
# 						}
# 						Test3(){ x = "Lorem ipsum dolor sit amet,\\n consectetur adipiscing elit"; }
# 						Test4(){ (19>(_18._28())*Cat::$getObj().name[125])[True] = (23>18&&(15%New X(New ABC(86*!0)))/Dog::$numDogs)[15]; }
# 						Test5(){ legalSmt = (((!123) >= ((234 && (345 > 456)) || 567)) <= (678 != Num::$a)); }
# 						Test6(){
# 							arr = Array(x::$listFloat()) >= Array(y.value) % -_nav * -Array();
# 						}
# 					}
# 			"""
#         expect = r"""Program([ClassDecl(Id(TestExtras),[MethodDecl(Id(Test1),Instance,[param(Id(x),ClassType(Id(Number)))],Block([AssignStmt(Id(x),UnaryOp(-,IntLit(1)))])),MethodDecl(Id(Test2),Instance,[],Block([AssignStmt(FieldAccess(Id(x1),Id($a)),NewExpr(Id(X),[FieldAccess(NewExpr(Id(Y),[]),Id(z))])),AssignStmt(Id(x2),BinaryOp(-,[IntLit(123),StringLit(abc),StringLit(def),IntLit(456)],ArrayCell(FieldAccess(Id(x3),Id($2803_01)),[CallExpr(Id(x),Id(y),[])])))])),MethodDecl(Id(Test3),Instance,[],Block([AssignStmt(Id(x),StringLit(Lorem ipsum dolor sit amet,\n consectetur adipiscing elit))])),MethodDecl(Id(Test4),Instance,[],Block([AssignStmt(ArrayCell(BinaryOp(>,IntLit(19),BinaryOp(*,CallExpr(Id(_18),Id(_28),[]),ArrayCell(FieldAccess(CallExpr(Id(Cat),Id($getObj),[]),Id(name)),[IntLit(125)]))),[BooleanLit(True)]),ArrayCell(BinaryOp(>,IntLit(23),BinaryOp(&&,IntLit(18),BinaryOp(/,BinaryOp(%,IntLit(15),NewExpr(Id(X),[NewExpr(Id(ABC),[BinaryOp(*,IntLit(86),UnaryOp(!,IntLit(0)))])])),FieldAccess(Id(Dog),Id($numDogs))))),[IntLit(15)]))])),MethodDecl(Id(Test5),Instance,[],Block([AssignStmt(Id(legalSmt),BinaryOp(<=,BinaryOp(>=,UnaryOp(!,IntLit(123)),BinaryOp(||,BinaryOp(&&,IntLit(234),BinaryOp(>,IntLit(345),IntLit(456))),IntLit(567))),BinaryOp(!=,IntLit(678),FieldAccess(Id(Num),Id($a)))))])),MethodDecl(Id(Test6),Instance,[],Block([AssignStmt(Id(arr),BinaryOp(>=,[CallExpr(Id(x),Id($listFloat),[])],BinaryOp(*,BinaryOp(%,[FieldAccess(Id(y),Id(value))],UnaryOp(-,Id(_nav))),UnaryOp(-,[]))))]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 139))

#     def test_140(self):
#         # TODO: Test extras:
#         input = """
# 					Class TestExtras {
# 						Test1(x: Number){ x=-1; }
# 						Test2(){
# 							x1::$a = New X(New Y().z);
# 							x2 = Array(123,"abc","def",456) - x3::$2803_01[x.y()];
# 						}
# 						Test3(){ x = "Lorem ipsum dolor sit amet,\\n consectetur adipiscing elit"; }
# 						Test4(){ (19>(_18._28())*Cat::$getObj().name[125])[True] = (23>18&&(15%New X(New ABC(86*!0)))/Dog::$numDogs)[15]; }
# 						Test6(){ arr = Array(x::$listFloat()) >= Array(y.value) % -_nav * -Array(); }
# 						Test7(){
# 							self = Self + Self;
# 						}
# 					}
# 			"""
#         expect = r"""Program([ClassDecl(Id(TestExtras),[MethodDecl(Id(Test1),Instance,[param(Id(x),ClassType(Id(Number)))],Block([AssignStmt(Id(x),UnaryOp(-,IntLit(1)))])),MethodDecl(Id(Test2),Instance,[],Block([AssignStmt(FieldAccess(Id(x1),Id($a)),NewExpr(Id(X),[FieldAccess(NewExpr(Id(Y),[]),Id(z))])),AssignStmt(Id(x2),BinaryOp(-,[IntLit(123),StringLit(abc),StringLit(def),IntLit(456)],ArrayCell(FieldAccess(Id(x3),Id($2803_01)),[CallExpr(Id(x),Id(y),[])])))])),MethodDecl(Id(Test3),Instance,[],Block([AssignStmt(Id(x),StringLit(Lorem ipsum dolor sit amet,\n consectetur adipiscing elit))])),MethodDecl(Id(Test4),Instance,[],Block([AssignStmt(ArrayCell(BinaryOp(>,IntLit(19),BinaryOp(*,CallExpr(Id(_18),Id(_28),[]),ArrayCell(FieldAccess(CallExpr(Id(Cat),Id($getObj),[]),Id(name)),[IntLit(125)]))),[BooleanLit(True)]),ArrayCell(BinaryOp(>,IntLit(23),BinaryOp(&&,IntLit(18),BinaryOp(/,BinaryOp(%,IntLit(15),NewExpr(Id(X),[NewExpr(Id(ABC),[BinaryOp(*,IntLit(86),UnaryOp(!,IntLit(0)))])])),FieldAccess(Id(Dog),Id($numDogs))))),[IntLit(15)]))])),MethodDecl(Id(Test6),Instance,[],Block([AssignStmt(Id(arr),BinaryOp(>=,[CallExpr(Id(x),Id($listFloat),[])],BinaryOp(*,BinaryOp(%,[FieldAccess(Id(y),Id(value))],UnaryOp(-,Id(_nav))),UnaryOp(-,[]))))])),MethodDecl(Id(Test7),Instance,[],Block([AssignStmt(Id(self),BinaryOp(+,Self(),Self()))]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 140))

#     def test_141(self):
#         # TODO: Test block inside block
#         input = """
# 					Class TestExtras {
# 						Test1(x: Number){ x=-1; }
# 						Test2(){
# 							x1::$a = New X(New Y().z);
# 							x2 = Array(123,"abc","def",456) - x3::$2803_01[x.y()];
# 						}
# 						Test3(){ x = "Lorem ipsum dolor sit amet,\\n consectetur adipiscing elit"; }
# 						Test4(){ (19>(_18._28())*Cat::$getObj().name[125])[True] = (23>18&&(15%New X(New ABC(86*!0)))/Dog::$numDogs)[15]; }
# 						Test6(){ arr = Array(x::$listFloat()) >= Array(y.value) % -_nav * -Array(); }
# 						Test7(){ self = Self.a + Self.foo().b; }
# 						Test8(){ Window.console_log("Print a test case"); }
# 						Test9(){ Foreach(x In 1 .. 2) { Return x; } }
# 						Test10(){ If(x) { Out.println("##Value of X:\\t $x"); } }
# 						Test11() {
# 							{
# 								Val a: Int = 28.03E+2001;
# 							}
# 						}
# 					}
# 			"""
#         expect = r"""Program([ClassDecl(Id(TestExtras),[MethodDecl(Id(Test1),Instance,[param(Id(x),ClassType(Id(Number)))],Block([AssignStmt(Id(x),UnaryOp(-,IntLit(1)))])),MethodDecl(Id(Test2),Instance,[],Block([AssignStmt(FieldAccess(Id(x1),Id($a)),NewExpr(Id(X),[FieldAccess(NewExpr(Id(Y),[]),Id(z))])),AssignStmt(Id(x2),BinaryOp(-,[IntLit(123),StringLit(abc),StringLit(def),IntLit(456)],ArrayCell(FieldAccess(Id(x3),Id($2803_01)),[CallExpr(Id(x),Id(y),[])])))])),MethodDecl(Id(Test3),Instance,[],Block([AssignStmt(Id(x),StringLit(Lorem ipsum dolor sit amet,\n consectetur adipiscing elit))])),MethodDecl(Id(Test4),Instance,[],Block([AssignStmt(ArrayCell(BinaryOp(>,IntLit(19),BinaryOp(*,CallExpr(Id(_18),Id(_28),[]),ArrayCell(FieldAccess(CallExpr(Id(Cat),Id($getObj),[]),Id(name)),[IntLit(125)]))),[BooleanLit(True)]),ArrayCell(BinaryOp(>,IntLit(23),BinaryOp(&&,IntLit(18),BinaryOp(/,BinaryOp(%,IntLit(15),NewExpr(Id(X),[NewExpr(Id(ABC),[BinaryOp(*,IntLit(86),UnaryOp(!,IntLit(0)))])])),FieldAccess(Id(Dog),Id($numDogs))))),[IntLit(15)]))])),MethodDecl(Id(Test6),Instance,[],Block([AssignStmt(Id(arr),BinaryOp(>=,[CallExpr(Id(x),Id($listFloat),[])],BinaryOp(*,BinaryOp(%,[FieldAccess(Id(y),Id(value))],UnaryOp(-,Id(_nav))),UnaryOp(-,[]))))])),MethodDecl(Id(Test7),Instance,[],Block([AssignStmt(Id(self),BinaryOp(+,FieldAccess(Self(),Id(a)),FieldAccess(CallExpr(Self(),Id(foo),[]),Id(b))))])),MethodDecl(Id(Test8),Instance,[],Block([Call(Id(Window),Id(console_log),[StringLit(Print a test case)])])),MethodDecl(Id(Test9),Instance,[],Block([For(Id(x),IntLit(1),IntLit(2),IntLit(1),Block([Return(Id(x))])])])),MethodDecl(Id(Test10),Instance,[],Block([If(Id(x),Block([Call(Id(Out),Id(println),[StringLit(##Value of X:\t $x)])]))])),MethodDecl(Id(Test11),Instance,[],Block([Block([ConstDecl(Id(a),IntType,FloatLit(inf))])]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 141))

#     def test_142(self):
#         # TODO: Test float expression
#         input = """
# 					Class TestExtras {
# 						Test1(x: Number){ x=-1; }
# 						Test2(){
# 							x1::$a = New X(New Y().z);
# 							x2 = Array(123,"abc","def",456) - x3::$2803_01[x.y()];
# 						}
# 						Test3(){ x = "Lorem ipsum dolor sit amet,\\n consectetur adipiscing elit"; }
# 						Test4(){ (19>(_18._28())*Cat::$getObj().name[125])[True] = (23>18&&(15%New X(New ABC(86*!0)))/Dog::$numDogs)[15]; }
# 						Test6(){ arr = Array(x::$listFloat()) >= Array(y.value) % -_nav * -Array(); }
# 						Test7(){ self = Self.a + Self.foo().b; }
# 						Test8(){ Window.console_log("Print a test case"); }
# 						Test9(){ Foreach(x In 1 .. 2) { Return x; } }
# 						Test10(){ If(x) { Out.println("##Value of X:\\t $x"); } }
# 						Test11() {}
# 						Test12() {
# 							Var a: Float = (0.124e18 * (- 0.e+225) / 15_12E925 && 0.E335)[15.6];
# 						}
# 					}
# 			"""
#         expect = r"""Program([ClassDecl(Id(TestExtras),[MethodDecl(Id(Test1),Instance,[param(Id(x),ClassType(Id(Number)))],Block([AssignStmt(Id(x),UnaryOp(-,IntLit(1)))])),MethodDecl(Id(Test2),Instance,[],Block([AssignStmt(FieldAccess(Id(x1),Id($a)),NewExpr(Id(X),[FieldAccess(NewExpr(Id(Y),[]),Id(z))])),AssignStmt(Id(x2),BinaryOp(-,[IntLit(123),StringLit(abc),StringLit(def),IntLit(456)],ArrayCell(FieldAccess(Id(x3),Id($2803_01)),[CallExpr(Id(x),Id(y),[])])))])),MethodDecl(Id(Test3),Instance,[],Block([AssignStmt(Id(x),StringLit(Lorem ipsum dolor sit amet,\n consectetur adipiscing elit))])),MethodDecl(Id(Test4),Instance,[],Block([AssignStmt(ArrayCell(BinaryOp(>,IntLit(19),BinaryOp(*,CallExpr(Id(_18),Id(_28),[]),ArrayCell(FieldAccess(CallExpr(Id(Cat),Id($getObj),[]),Id(name)),[IntLit(125)]))),[BooleanLit(True)]),ArrayCell(BinaryOp(>,IntLit(23),BinaryOp(&&,IntLit(18),BinaryOp(/,BinaryOp(%,IntLit(15),NewExpr(Id(X),[NewExpr(Id(ABC),[BinaryOp(*,IntLit(86),UnaryOp(!,IntLit(0)))])])),FieldAccess(Id(Dog),Id($numDogs))))),[IntLit(15)]))])),MethodDecl(Id(Test6),Instance,[],Block([AssignStmt(Id(arr),BinaryOp(>=,[CallExpr(Id(x),Id($listFloat),[])],BinaryOp(*,BinaryOp(%,[FieldAccess(Id(y),Id(value))],UnaryOp(-,Id(_nav))),UnaryOp(-,[]))))])),MethodDecl(Id(Test7),Instance,[],Block([AssignStmt(Id(self),BinaryOp(+,FieldAccess(Self(),Id(a)),FieldAccess(CallExpr(Self(),Id(foo),[]),Id(b))))])),MethodDecl(Id(Test8),Instance,[],Block([Call(Id(Window),Id(console_log),[StringLit(Print a test case)])])),MethodDecl(Id(Test9),Instance,[],Block([For(Id(x),IntLit(1),IntLit(2),IntLit(1),Block([Return(Id(x))])])])),MethodDecl(Id(Test10),Instance,[],Block([If(Id(x),Block([Call(Id(Out),Id(println),[StringLit(##Value of X:\t $x)])]))])),MethodDecl(Id(Test11),Instance,[],Block([])),MethodDecl(Id(Test12),Instance,[],Block([VarDecl(Id(a),FloatType,ArrayCell(BinaryOp(&&,BinaryOp(/,BinaryOp(*,FloatLit(1.24e+17),UnaryOp(-,FloatLit(0.0))),FloatLit(inf)),FloatLit(0.0)),[FloatLit(15.6)]))]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 142))

#     def test_143(self):
#         # TODO: Test float expression
#         input = """
# 					Class TestExtras {
# 						Test1(x: Number){ x=-1; }
# 						Test2(){
# 							x1::$a = New X(New Y().z);
# 							x2 = Array(123,"abc","def",456) - x3::$2803_01[x.y()];
# 						}
# 						Test3(){ x = "Lorem ipsum dolor sit amet,\\n consectetur adipiscing elit"; }
# 						Test4(){ (19>(_18._28())*Cat::$getObj().name[125])[True] = (23>18&&(15%New X(New ABC(86*!0)))/Dog::$numDogs)[15]; }
# 						Test6(){ arr = Array(x::$listFloat()) >= Array(y.value) % -_nav * -Array(); }
# 						Test7(){ self = Self.a + Self.foo().b; }
# 						Test8(){ Window.console_log("Print a test case"); }
# 						Test9(){ Foreach(x In 1 .. 2) { Return x; } }
# 						Test10(){ If(x) { Out.println("##Value of X:\\t $x"); } }
# 						Test11() {}
# 						Test12() {
# 							Var a: Float = (0.124e18 * (- 0.e+225) / 15_12E925 && 0.E335)[15.6];
# 							Val b: Array[Float, 012357];
# 						}
# 					}

# 					Class TestUtils : TestExtras {
# 						Val x: Array[Float, 0XA1245];
# 						ErrorParms (a, b: String; d: Number) {}
# 						ErrorScalar () {
# 							If (1/2*3-4) {
# 									Out.prinln("I'm you but private");
# 								} Else {
# 									var[a] = 19/83*New A(bcd)[b];
# 									a = "This is string contain \\t";
# 							}
# 							x::$a = "She said that '"Hello World '"";
# 							Var def: Int = "123456";
# 							Val abc: Array[Array[Boolean, 0b1],0x1] = Array();
# 							If (True) {
# 								Continue;
# 								a = b * c + d.foo().f;
# 							} Elseif (False) {
# 								Var a, b, d: Int = 1,2,3;
# 								Break;
# 								Foreach(Cat In "Black" .. "White") {
# 									Window.console.log("Cat.type");
# 								}
# 							}
# 						}
# 					}
# 			"""
#         expect = r"""Program([ClassDecl(Id(TestExtras),[MethodDecl(Id(Test1),Instance,[param(Id(x),ClassType(Id(Number)))],Block([AssignStmt(Id(x),UnaryOp(-,IntLit(1)))])),MethodDecl(Id(Test2),Instance,[],Block([AssignStmt(FieldAccess(Id(x1),Id($a)),NewExpr(Id(X),[FieldAccess(NewExpr(Id(Y),[]),Id(z))])),AssignStmt(Id(x2),BinaryOp(-,[IntLit(123),StringLit(abc),StringLit(def),IntLit(456)],ArrayCell(FieldAccess(Id(x3),Id($2803_01)),[CallExpr(Id(x),Id(y),[])])))])),MethodDecl(Id(Test3),Instance,[],Block([AssignStmt(Id(x),StringLit(Lorem ipsum dolor sit amet,\n consectetur adipiscing elit))])),MethodDecl(Id(Test4),Instance,[],Block([AssignStmt(ArrayCell(BinaryOp(>,IntLit(19),BinaryOp(*,CallExpr(Id(_18),Id(_28),[]),ArrayCell(FieldAccess(CallExpr(Id(Cat),Id($getObj),[]),Id(name)),[IntLit(125)]))),[BooleanLit(True)]),ArrayCell(BinaryOp(>,IntLit(23),BinaryOp(&&,IntLit(18),BinaryOp(/,BinaryOp(%,IntLit(15),NewExpr(Id(X),[NewExpr(Id(ABC),[BinaryOp(*,IntLit(86),UnaryOp(!,IntLit(0)))])])),FieldAccess(Id(Dog),Id($numDogs))))),[IntLit(15)]))])),MethodDecl(Id(Test6),Instance,[],Block([AssignStmt(Id(arr),BinaryOp(>=,[CallExpr(Id(x),Id($listFloat),[])],BinaryOp(*,BinaryOp(%,[FieldAccess(Id(y),Id(value))],UnaryOp(-,Id(_nav))),UnaryOp(-,[]))))])),MethodDecl(Id(Test7),Instance,[],Block([AssignStmt(Id(self),BinaryOp(+,FieldAccess(Self(),Id(a)),FieldAccess(CallExpr(Self(),Id(foo),[]),Id(b))))])),MethodDecl(Id(Test8),Instance,[],Block([Call(Id(Window),Id(console_log),[StringLit(Print a test case)])])),MethodDecl(Id(Test9),Instance,[],Block([For(Id(x),IntLit(1),IntLit(2),IntLit(1),Block([Return(Id(x))])])])),MethodDecl(Id(Test10),Instance,[],Block([If(Id(x),Block([Call(Id(Out),Id(println),[StringLit(##Value of X:\t $x)])]))])),MethodDecl(Id(Test11),Instance,[],Block([])),MethodDecl(Id(Test12),Instance,[],Block([VarDecl(Id(a),FloatType,ArrayCell(BinaryOp(&&,BinaryOp(/,BinaryOp(*,FloatLit(1.24e+17),UnaryOp(-,FloatLit(0.0))),FloatLit(inf)),FloatLit(0.0)),[FloatLit(15.6)])),ConstDecl(Id(b),ArrayType(5359,FloatType),None)]))]),ClassDecl(Id(TestUtils),Id(TestExtras),[AttributeDecl(Instance,ConstDecl(Id(x),ArrayType(660037,FloatType),None)),MethodDecl(Id(ErrorParms),Instance,[param(Id(a),StringType),param(Id(b),StringType),param(Id(d),ClassType(Id(Number)))],Block([])),MethodDecl(Id(ErrorScalar),Instance,[],Block([If(BinaryOp(-,BinaryOp(*,BinaryOp(/,IntLit(1),IntLit(2)),IntLit(3)),IntLit(4)),Block([Call(Id(Out),Id(prinln),[StringLit(I'm you but private)])]),Block([AssignStmt(ArrayCell(Id(var),[Id(a)]),BinaryOp(*,BinaryOp(/,IntLit(19),IntLit(83)),ArrayCell(NewExpr(Id(A),[Id(bcd)]),[Id(b)]))),AssignStmt(Id(a),StringLit(This is string contain \t))])),AssignStmt(FieldAccess(Id(x),Id($a)),StringLit(She said that '"Hello World '")),VarDecl(Id(def),IntType,StringLit(123456)),ConstDecl(Id(abc),ArrayType(1,ArrayType(1,BoolType)),[]),If(BooleanLit(True),Block([Continue,AssignStmt(Id(a),BinaryOp(+,BinaryOp(*,Id(b),Id(c)),FieldAccess(CallExpr(Id(d),Id(foo),[]),Id(f))))]),If(BooleanLit(False),Block([VarDecl(Id(a),IntType,IntLit(1)),VarDecl(Id(b),IntType,IntLit(2)),VarDecl(Id(d),IntType,IntLit(3)),Break,For(Id(Cat),StringLit(Black),StringLit(White),IntLit(1),Block([Call(FieldAccess(Id(Window),Id(console)),Id(log),[StringLit(Cat.type)])])])])))]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 143))

#     def test_144(self):
#         # TODO: Test float expression
#         input = """
# 					Class TestExtras {
# 						Test1(x: Number){ x=-1; }
# 						Test2(){
# 							x1::$a = New X(New Y().z);
# 							x2 = Array(123,"abc","def",456) - x3::$2803_01[x.y()];
# 						}
# 						Test3(){ x = "Lorem ipsum dolor sit amet,\\n consectetur adipiscing elit"; }
# 						Test4(){ (19>(_18._28())*Cat::$getObj().name[125])[True] = (23>18&&(15%New X(New ABC(86*!0)))/Dog::$numDogs)[15]; }
# 						Test6(){ arr = Array(x::$listFloat()) >= Array(y.value) % -_nav * -Array(); }
# 						Test7(){ self = Self.a + Self.foo().b; }
# 						Test8(){ Window.console_log("Print a test case"); }
# 						Test9(){ Foreach(x In 1 .. 2) { Return x; } }
# 						Test10(){ If(x) { Out.println("##Value of X:\\t $x"); } }
# 						Test11() {}
# 						Test12() {
# 							Var a: Float = (0.124e18 * (- 0.e+225) / 15_12E925 && 0.E335)[15.6];
# 							Val b: Array[Float, 012357];
# 						}
# 					}

# 					Class TestUtils : TestExtras {
# 						Val x: Array[Float, 0XA1245];
# 						ErrorParms (a, b: String; d: Number) {}
# 						ErrorScalar () {
# 							If (1/2*3-4) {
# 									Out.prinln("I'm you but private");
# 								} Else {
# 									var[a] = 19/83*New A(bcd)[b];
# 									a = "This is string contain \\t";
# 							}
# 							x::$a = "She said that '"Hello World '"";
# 							Var def: Int = "123456";
# 							Val abc: Array[Array[Boolean, 0b1],0x1] = Array();
# 							If (True) {
# 								Continue;
# 								a = b * c + d.foo().f;
# 							} Elseif (False) {
# 								Var a, b, d: Int = 1,2,3;
# 								Break;
# 								Foreach(Cat In "Black" .. "White") {
# 									Window.console.log("Cat.type");
# 								}
# 							}
# 						}
# 						ErrorDeclr () {
# 							Var a, _targ_variable_, c: String;
# 							Foreach(a In abc .. def By "This is abc" +. "def"){
# 								If (!True) {
# 									a = (((!123) >= ((234 && (345 + 456)) || 567)) <= (678 != x::$a));
# 								} Else {
# 									x.a().f = abc * def / 010;
# 									a.foo1().foo2().value = b.value.Number() % c.getNum() * "def" +. "ghi";
# 								}
# 							}	
# 						}
# 						ErrorInAccess () {
# 							Val x: Int = abc.getList().findIdx(1).value[123];
# 							Foreach (ele In 1 .. 100) {
# 								If (ele % 2 != 0) {
# 									Foreach(eleIf In 100 .. 200 By 50) {
# 										If (True) {
# 											ele = ele[1245] * 148 % 100 - (1+1).foo();
# 											Break;
# 										} Elseif (False) {
# 											Master::$GenerateRandom(125.E55, "12345", Array("##String def", Array(125, Array(New X(y)))));
# 											Continue;
# 										}
# 									}
# 								} Else {
# 									Foreach(elseIf In 200 .. 300 By 25) {
# 										Self.func().magnitude = !89_125E120+56 + A[0.E-168];
# 										Return abc * def::$_123();
# 									}
# 								}
# 							}
# 						}
# 					}
# 			"""
#         expect = r"""Program([ClassDecl(Id(TestExtras),[MethodDecl(Id(Test1),Instance,[param(Id(x),ClassType(Id(Number)))],Block([AssignStmt(Id(x),UnaryOp(-,IntLit(1)))])),MethodDecl(Id(Test2),Instance,[],Block([AssignStmt(FieldAccess(Id(x1),Id($a)),NewExpr(Id(X),[FieldAccess(NewExpr(Id(Y),[]),Id(z))])),AssignStmt(Id(x2),BinaryOp(-,[IntLit(123),StringLit(abc),StringLit(def),IntLit(456)],ArrayCell(FieldAccess(Id(x3),Id($2803_01)),[CallExpr(Id(x),Id(y),[])])))])),MethodDecl(Id(Test3),Instance,[],Block([AssignStmt(Id(x),StringLit(Lorem ipsum dolor sit amet,\n consectetur adipiscing elit))])),MethodDecl(Id(Test4),Instance,[],Block([AssignStmt(ArrayCell(BinaryOp(>,IntLit(19),BinaryOp(*,CallExpr(Id(_18),Id(_28),[]),ArrayCell(FieldAccess(CallExpr(Id(Cat),Id($getObj),[]),Id(name)),[IntLit(125)]))),[BooleanLit(True)]),ArrayCell(BinaryOp(>,IntLit(23),BinaryOp(&&,IntLit(18),BinaryOp(/,BinaryOp(%,IntLit(15),NewExpr(Id(X),[NewExpr(Id(ABC),[BinaryOp(*,IntLit(86),UnaryOp(!,IntLit(0)))])])),FieldAccess(Id(Dog),Id($numDogs))))),[IntLit(15)]))])),MethodDecl(Id(Test6),Instance,[],Block([AssignStmt(Id(arr),BinaryOp(>=,[CallExpr(Id(x),Id($listFloat),[])],BinaryOp(*,BinaryOp(%,[FieldAccess(Id(y),Id(value))],UnaryOp(-,Id(_nav))),UnaryOp(-,[]))))])),MethodDecl(Id(Test7),Instance,[],Block([AssignStmt(Id(self),BinaryOp(+,FieldAccess(Self(),Id(a)),FieldAccess(CallExpr(Self(),Id(foo),[]),Id(b))))])),MethodDecl(Id(Test8),Instance,[],Block([Call(Id(Window),Id(console_log),[StringLit(Print a test case)])])),MethodDecl(Id(Test9),Instance,[],Block([For(Id(x),IntLit(1),IntLit(2),IntLit(1),Block([Return(Id(x))])])])),MethodDecl(Id(Test10),Instance,[],Block([If(Id(x),Block([Call(Id(Out),Id(println),[StringLit(##Value of X:\t $x)])]))])),MethodDecl(Id(Test11),Instance,[],Block([])),MethodDecl(Id(Test12),Instance,[],Block([VarDecl(Id(a),FloatType,ArrayCell(BinaryOp(&&,BinaryOp(/,BinaryOp(*,FloatLit(1.24e+17),UnaryOp(-,FloatLit(0.0))),FloatLit(inf)),FloatLit(0.0)),[FloatLit(15.6)])),ConstDecl(Id(b),ArrayType(5359,FloatType),None)]))]),ClassDecl(Id(TestUtils),Id(TestExtras),[AttributeDecl(Instance,ConstDecl(Id(x),ArrayType(660037,FloatType),None)),MethodDecl(Id(ErrorParms),Instance,[param(Id(a),StringType),param(Id(b),StringType),param(Id(d),ClassType(Id(Number)))],Block([])),MethodDecl(Id(ErrorScalar),Instance,[],Block([If(BinaryOp(-,BinaryOp(*,BinaryOp(/,IntLit(1),IntLit(2)),IntLit(3)),IntLit(4)),Block([Call(Id(Out),Id(prinln),[StringLit(I'm you but private)])]),Block([AssignStmt(ArrayCell(Id(var),[Id(a)]),BinaryOp(*,BinaryOp(/,IntLit(19),IntLit(83)),ArrayCell(NewExpr(Id(A),[Id(bcd)]),[Id(b)]))),AssignStmt(Id(a),StringLit(This is string contain \t))])),AssignStmt(FieldAccess(Id(x),Id($a)),StringLit(She said that '"Hello World '")),VarDecl(Id(def),IntType,StringLit(123456)),ConstDecl(Id(abc),ArrayType(1,ArrayType(1,BoolType)),[]),If(BooleanLit(True),Block([Continue,AssignStmt(Id(a),BinaryOp(+,BinaryOp(*,Id(b),Id(c)),FieldAccess(CallExpr(Id(d),Id(foo),[]),Id(f))))]),If(BooleanLit(False),Block([VarDecl(Id(a),IntType,IntLit(1)),VarDecl(Id(b),IntType,IntLit(2)),VarDecl(Id(d),IntType,IntLit(3)),Break,For(Id(Cat),StringLit(Black),StringLit(White),IntLit(1),Block([Call(FieldAccess(Id(Window),Id(console)),Id(log),[StringLit(Cat.type)])])])])))])),MethodDecl(Id(ErrorDeclr),Instance,[],Block([VarDecl(Id(a),StringType),VarDecl(Id(_targ_variable_),StringType),VarDecl(Id(c),StringType),For(Id(a),Id(abc),Id(def),BinaryOp(+.,StringLit(This is abc),StringLit(def)),Block([If(UnaryOp(!,BooleanLit(True)),Block([AssignStmt(Id(a),BinaryOp(<=,BinaryOp(>=,UnaryOp(!,IntLit(123)),BinaryOp(||,BinaryOp(&&,IntLit(234),BinaryOp(+,IntLit(345),IntLit(456))),IntLit(567))),BinaryOp(!=,IntLit(678),FieldAccess(Id(x),Id($a)))))]),Block([AssignStmt(FieldAccess(CallExpr(Id(x),Id(a),[]),Id(f)),BinaryOp(/,BinaryOp(*,Id(abc),Id(def)),IntLit(8))),AssignStmt(FieldAccess(CallExpr(CallExpr(Id(a),Id(foo1),[]),Id(foo2),[]),Id(value)),BinaryOp(+.,BinaryOp(*,BinaryOp(%,CallExpr(FieldAccess(Id(b),Id(value)),Id(Number),[]),CallExpr(Id(c),Id(getNum),[])),StringLit(def)),StringLit(ghi)))]))])])])),MethodDecl(Id(ErrorInAccess),Instance,[],Block([ConstDecl(Id(x),IntType,ArrayCell(FieldAccess(CallExpr(CallExpr(Id(abc),Id(getList),[]),Id(findIdx),[IntLit(1)]),Id(value)),[IntLit(123)])),For(Id(ele),IntLit(1),IntLit(100),IntLit(1),Block([If(BinaryOp(!=,BinaryOp(%,Id(ele),IntLit(2)),IntLit(0)),Block([For(Id(eleIf),IntLit(100),IntLit(200),IntLit(50),Block([If(BooleanLit(True),Block([AssignStmt(Id(ele),BinaryOp(-,BinaryOp(%,BinaryOp(*,ArrayCell(Id(ele),[IntLit(1245)]),IntLit(148)),IntLit(100)),CallExpr(BinaryOp(+,IntLit(1),IntLit(1)),Id(foo),[]))),Break]),If(BooleanLit(False),Block([Call(Id(Master),Id($GenerateRandom),[FloatLit(1.25e+57),StringLit(12345),[StringLit(##String def),[IntLit(125),[NewExpr(Id(X),[Id(y)])]]]]),Continue])))])])]),Block([For(Id(elseIf),IntLit(200),IntLit(300),IntLit(25),Block([AssignStmt(FieldAccess(CallExpr(Self(),Id(func),[]),Id(magnitude)),BinaryOp(+,BinaryOp(+,UnaryOp(!,FloatLit(8.9125e+124)),IntLit(56)),ArrayCell(Id(A),[FloatLit(0.0)]))),Return(BinaryOp(*,Id(abc),CallExpr(Id(def),Id($_123),[])))])])]))])])]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 144))

#     def test_145(self):
#         # TODO: Test Null literals:
#         input = """
# 				Class Program {
# 					main() {
# 						x = Null + "abc";
# 					}
# 				}
# 		"""
#         expect = r"""Program([ClassDecl(Id(Program),[MethodDecl(Id(main),Static,[],Block([AssignStmt(Id(x),BinaryOp(+,NullLiteral(),StringLit(abc)))]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 145))

#     def test_146(self):
#         # TODO: Test uninitialized variable of Class Type
#         input = """
# 				Class Program {
# 					Var $y: QWER;
# 					main() {
# 						Val x: WASD;
# 					}
# 				}
# 		"""
#         expect = r"""Program([ClassDecl(Id(Program),[AttributeDecl(Static,VarDecl(Id($y),ClassType(Id(QWER)),NullLiteral())),MethodDecl(Id(main),Static,[],Block([ConstDecl(Id(x),ClassType(Id(WASD)),NullLiteral())]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 146))

#     def test_147(self):
#         # TODO: Test Self literals:
#         input = """
# 				Class Program {
# 					main() {
# 						x = Self + "abc";
# 					}
# 				}
# 		"""
#         expect = r"""Program([ClassDecl(Id(Program),[MethodDecl(Id(main),Static,[],Block([AssignStmt(Id(x),BinaryOp(+,Self(),StringLit(abc)))]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 147))

#     def test_148(self):
#         # TODO: Test main methods:
#         input = """
# 				Class Program {
# 					main() {
# 						x = "abc" + "def";
# 					}
# 					main() {
# 						y = "ghi" + "jkl";
# 					}
# 				}
# 		"""
#         expect = r"""Program([ClassDecl(Id(Program),[MethodDecl(Id(main),Static,[],Block([AssignStmt(Id(x),BinaryOp(+,StringLit(abc),StringLit(def)))])),MethodDecl(Id(main),Static,[],Block([AssignStmt(Id(y),BinaryOp(+,StringLit(ghi),StringLit(jkl)))]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 148))

#     def test_149(self):
#         # TODO: Test array of array:
#         input = """
# 				Class Program {
# 					main () {
# 						a[1][2][3][4][5] = b[6][7][8][9][0];
# 					}
# 				}
# 		"""
#         expect = r"""Program([ClassDecl(Id(Program),[MethodDecl(Id(main),Static,[],Block([AssignStmt(ArrayCell(Id(a),[IntLit(1),IntLit(2),IntLit(3),IntLit(4),IntLit(5)]),ArrayCell(Id(b),[IntLit(6),IntLit(7),IntLit(8),IntLit(9),IntLit(0)]))]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 149))

#     def test_311(self):
#         input = """Class A{
#             Constructor(a, b, c, d, e: String; c, d, e: Int){
#                If(1+2 == 3){
#                 If(!False){}
#                 Elseif(3==7){

#                 }
#                }Else{
#                 a = 12;
#                }
#             }
#             ## This is a comment ##
#             Var array: Array[Float, 10];
#             Var array2: Array[Array[Int, 3], 3];
#             Val _a, b_, d12: Int = expr, expr, expr;
#             Var $abcd: String = expr;
#             Var abcd, abc: Float;

#             a(hi, hello, nikhao: Int){}

#             Destructor(){}
#         }"""
#         expect = "Program([ClassDecl(Id(A),[MethodDecl(Id(Constructor),Instance,[param(Id(a),StringType),param(Id(b),StringType),param(Id(c),StringType),param(Id(d),StringType),param(Id(e),StringType),param(Id(c),IntType),param(Id(d),IntType),param(Id(e),IntType)],Block([If(BinaryOp(==,BinaryOp(+,IntLit(1),IntLit(2)),IntLit(3)),Block([If(UnaryOp(!,BooleanLit(False)),Block([]),If(BinaryOp(==,IntLit(3),IntLit(7)),Block([])))]),Block([AssignStmt(Id(a),IntLit(12))]))])),AttributeDecl(Instance,VarDecl(Id(array),ArrayType(10,FloatType))),AttributeDecl(Instance,VarDecl(Id(array2),ArrayType(3,ArrayType(3,IntType)))),AttributeDecl(Instance,ConstDecl(Id(_a),IntType,Id(expr))),AttributeDecl(Instance,ConstDecl(Id(b_),IntType,Id(expr))),AttributeDecl(Instance,ConstDecl(Id(d12),IntType,Id(expr))),AttributeDecl(Static,VarDecl(Id($abcd),StringType,Id(expr))),AttributeDecl(Instance,VarDecl(Id(abcd),FloatType)),AttributeDecl(Instance,VarDecl(Id(abc),FloatType)),MethodDecl(Id(a),Instance,[param(Id(hi),IntType),param(Id(hello),IntType),param(Id(nikhao),IntType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])"
#         self.assertTrue(TestAST.test(input, expect, 311))
#     def test_312(self):
#         input = """Class Right__ {
#             Var c,d,e:String;
#             Var a: Array[Int, 4] = Array(1, 3, 4, 5);
#         }"""
#         expect = "Program([ClassDecl(Id(Right__),[AttributeDecl(Instance,VarDecl(Id(c),StringType)),AttributeDecl(Instance,VarDecl(Id(d),StringType)),AttributeDecl(Instance,VarDecl(Id(e),StringType)),AttributeDecl(Instance,VarDecl(Id(a),ArrayType(4,IntType),[IntLit(1),IntLit(3),IntLit(4),IntLit(5)]))])])"
#         self.assertTrue(TestAST.test(input, expect, 312))
#     def test_313(self):
#         input = """Class __Right__ {
#             method() {
#                 If (1 == 2) {
#                     Return asd;
#                 }
#                 Elseif (2 == 3) {
#                     Break;
#                     Continue;
#                 }
#                 Else {
#                     Return 233;
#                 }
#             }
#         }
#         """
#         expect = "Program([ClassDecl(Id(__Right__),[MethodDecl(Id(method),Instance,[],Block([If(BinaryOp(==,IntLit(1),IntLit(2)),Block([Return(Id(asd))]),If(BinaryOp(==,IntLit(2),IntLit(3)),Block([Break,Continue]),Block([Return(IntLit(233))])))]))])])"
#         self.assertTrue(TestAST.test(input, expect, 313))
#     def test_314(self):
#         input = """Class __Right__ {
#             method() {
#                 Foreach (asd In RVJjpoz >= IzShZxMbKBioj::$A9npv1lnysU4w0oJ7kbL() .. R6n5wEX6zQurDF * IkIS4E) {
#                     vFL_cXn0mVPGSJPJCy = NZmYmG >= IzShZxMbKBioj::$A9npv1lnysU4w0oJ7kbL();
#                 }
#                 Return Nonsense;
#             }
#         }
#         """
#         expect = "Program([ClassDecl(Id(__Right__),[MethodDecl(Id(method),Instance,[],Block([For(Id(asd),BinaryOp(>=,Id(RVJjpoz),CallExpr(Id(IzShZxMbKBioj),Id($A9npv1lnysU4w0oJ7kbL),[])),BinaryOp(*,Id(R6n5wEX6zQurDF),Id(IkIS4E)),IntLit(1),Block([AssignStmt(Id(vFL_cXn0mVPGSJPJCy),BinaryOp(>=,Id(NZmYmG),CallExpr(Id(IzShZxMbKBioj),Id($A9npv1lnysU4w0oJ7kbL),[])))])]),Return(Id(Nonsense))]))])])"
#         self.assertTrue(TestAST.test(input, expect, 314))
#     def test_315(self):
#         input = """ Class Error {
#             Constructor(param: String) {}
#         }
#         """
#         expect = "Program([ClassDecl(Id(Error),[MethodDecl(Id(Constructor),Instance,[param(Id(param),StringType)],Block([]))])])"
#         self.assertTrue(TestAST.test(input, expect, 315))
#     def test_316(self):
#         input = """ Class __CCDeSua__ {
#             Var a: Int = 12.e23;
#             method_() {
#                 a::$foo();
#             }
#         }
#         """
#         expect = "Program([ClassDecl(Id(__CCDeSua__),[AttributeDecl(Instance,VarDecl(Id(a),IntType,FloatLit(1.2e+24))),MethodDecl(Id(method_),Instance,[],Block([Call(Id(a),Id($foo),[])]))])])"
#         self.assertTrue(TestAST.test(input, expect, 316))
#     def test_317(self):
#         input = """ Class __CCDeSua__ {
#             Var a: Int = 12.e23;
#             method_() {
#                 a[123]["ss"][1 + "233"] = Array("asd", "sss");
#             }
#         }
#         """
#         expect = "Program([ClassDecl(Id(__CCDeSua__),[AttributeDecl(Instance,VarDecl(Id(a),IntType,FloatLit(1.2e+24))),MethodDecl(Id(method_),Instance,[],Block([AssignStmt(ArrayCell(Id(a),[IntLit(123),StringLit(ss),BinaryOp(+,IntLit(1),StringLit(233))]),[StringLit(asd),StringLit(sss)])]))])])"
#         self.assertTrue(TestAST.test(input, expect, 317))
#     def test_318(self):
#         input = """ Class __CCDeSua__ {
#             Var a: Int = 12.e23;
#             method_() {
#                 a[123]["ss" + 3][1 + "233"] = New X().Y();
#             }
#         }
#         """
#         expect = "Program([ClassDecl(Id(__CCDeSua__),[AttributeDecl(Instance,VarDecl(Id(a),IntType,FloatLit(1.2e+24))),MethodDecl(Id(method_),Instance,[],Block([AssignStmt(ArrayCell(Id(a),[IntLit(123),BinaryOp(+,StringLit(ss),IntLit(3)),BinaryOp(+,IntLit(1),StringLit(233))]),CallExpr(NewExpr(Id(X),[]),Id(Y),[]))]))])])"
#         self.assertTrue(TestAST.test(input, expect, 318))
#     def test_319(self):
#         input = """ Class __CCDeSua__ {
#             Var a: Int = 12.e23;
#             method_() {
#                 a[123]["ss"][1 + "233"] = New X(Array(22)).Y(333);
#             }
#         }
#         """
#         expect = "Program([ClassDecl(Id(__CCDeSua__),[AttributeDecl(Instance,VarDecl(Id(a),IntType,FloatLit(1.2e+24))),MethodDecl(Id(method_),Instance,[],Block([AssignStmt(ArrayCell(Id(a),[IntLit(123),StringLit(ss),BinaryOp(+,IntLit(1),StringLit(233))]),CallExpr(NewExpr(Id(X),[[IntLit(22)]]),Id(Y),[IntLit(333)]))]))])])"
#         self.assertTrue(TestAST.test(input, expect, 319))
#     def test_320(self):
#         input = """Class __CCDeSua__ {
#             method() {
#                 If (1 + 1 == 0) {
#                     Out.print(1 + 2);
#                 }
#                 Elseif (1 + 2 == 3) {
#                     System.sus(11 - "3222");
#                 }
#                 Else {
#                     Break;
#                     Return;
#                 }
#             }
#         }
#         """
#         expect = "Program([ClassDecl(Id(__CCDeSua__),[MethodDecl(Id(method),Instance,[],Block([If(BinaryOp(==,BinaryOp(+,IntLit(1),IntLit(1)),IntLit(0)),Block([Call(Id(Out),Id(print),[BinaryOp(+,IntLit(1),IntLit(2))])]),If(BinaryOp(==,BinaryOp(+,IntLit(1),IntLit(2)),IntLit(3)),Block([Call(Id(System),Id(sus),[BinaryOp(-,IntLit(11),StringLit(3222))])]),Block([Break,Return()])))]))])])"
#         self.assertTrue(TestAST.test(input, expect, 320))
#     def test_321(self):
#         input = """Class main{}
#         """
#         expect = "Program([ClassDecl(Id(main),[])])"
#         self.assertTrue(TestAST.test(input, expect, 321))
#     def test_322(self):
#         input = """Class Rectangle: Shape {
#         getArea() {
#         Return self.length * self.width;
#     }
# }
#         """
#         expect = "Program([ClassDecl(Id(Rectangle),Id(Shape),[MethodDecl(Id(getArea),Instance,[],Block([Return(BinaryOp(*,FieldAccess(Id(self),Id(length)),FieldAccess(Id(self),Id(width))))]))])])"
#         self.assertTrue(TestAST.test(input, expect, 322))
#     def test_323(self):
#         input = """Class Shape2 {
#     $getNumOfShape() {
#         If (a == (1+1) ){
#             Var b,c:Boolean = True, False;
#         }
#         Foreach (i In 1 .. 100 By 2) {
#              Var a:Boolean = True;
#         }
#     }
# }
#         """
#         expect = "Program([ClassDecl(Id(Shape2),[MethodDecl(Id($getNumOfShape),Static,[],Block([If(BinaryOp(==,Id(a),BinaryOp(+,IntLit(1),IntLit(1))),Block([VarDecl(Id(b),BoolType,BooleanLit(True)),VarDecl(Id(c),BoolType,BooleanLit(False))])),For(Id(i),IntLit(1),IntLit(100),IntLit(2),Block([VarDecl(Id(a),BoolType,BooleanLit(True))])])]))])])"
#         self.assertTrue(TestAST.test(input, expect, 323))
#     def test_324(self):
#         input = """ Class Shape {
#         sum(a,b:Int; c,d:Float){}
#     }
#         """
#         expect = "Program([ClassDecl(Id(Shape),[MethodDecl(Id(sum),Instance,[param(Id(a),IntType),param(Id(b),IntType),param(Id(c),FloatType),param(Id(d),FloatType)],Block([]))])])"
#         self.assertTrue(TestAST.test(input, expect, 324))
#     def test_325(self):
#         input = """ Class Shape {
#         Var a :Array[Array[Int,2],2] = Array(Array(1,1),Array(1,1));
#     }
#         """
#         expect = "Program([ClassDecl(Id(Shape),[AttributeDecl(Instance,VarDecl(Id(a),ArrayType(2,ArrayType(2,IntType)),[[IntLit(1),IntLit(1)],[IntLit(1),IntLit(1)]]))])])"
#         self.assertTrue(TestAST.test(input, expect, 325))
#     def test_326(self):
#         input = """ Class Shape {
#         foo(){
#             Var a: Boolean = !!True;
#         }
#     }
#         """
#         expect = "Program([ClassDecl(Id(Shape),[MethodDecl(Id(foo),Instance,[],Block([VarDecl(Id(a),BoolType,UnaryOp(!,UnaryOp(!,BooleanLit(True))))]))])])"
#         self.assertTrue(TestAST.test(input, expect, 326))
#     def test_327(self):
#         input = """ Class Shape {
#         foo(){
#             a=New X().Y();
#         } 
#     }
#         """
#         expect = "Program([ClassDecl(Id(Shape),[MethodDecl(Id(foo),Instance,[],Block([AssignStmt(Id(a),CallExpr(NewExpr(Id(X),[]),Id(Y),[]))]))])])"
#         self.assertTrue(TestAST.test(input, expect, 327))
#     def test_328(self):
#         input = """ 
#          Class Shape {
#         foo(){
#             Var r, s: Int;
#             r = 2.0;
#             Var a, b: Array[Int, 5];
#             s = r * r * Self.myPI;
#             a[0] = s;
#         } 
#     }
#         """
#         expect = "Program([ClassDecl(Id(Shape),[MethodDecl(Id(foo),Instance,[],Block([VarDecl(Id(r),IntType),VarDecl(Id(s),IntType),AssignStmt(Id(r),FloatLit(2.0)),VarDecl(Id(a),ArrayType(5,IntType)),VarDecl(Id(b),ArrayType(5,IntType)),AssignStmt(Id(s),BinaryOp(*,BinaryOp(*,Id(r),Id(r)),FieldAccess(Self(),Id(myPI)))),AssignStmt(ArrayCell(Id(a),[IntLit(0)]),Id(s))]))])])"
#         self.assertTrue(TestAST.test(input, expect, 328))
#     def test_329(self):
#         input = """ 
#           Class Shape {
#         foo(){
#             a.b();
#         } 
#     }
#         """
#         expect = "Program([ClassDecl(Id(Shape),[MethodDecl(Id(foo),Instance,[],Block([Call(Id(a),Id(b),[])]))])])"
#         self.assertTrue(TestAST.test(input, expect, 329))
#     def test_330(self):
#         input = """ 
#               Class Shape {
#         foo(){
#             a=b.c.d.e;
#         } 
#     }
#         """
#         expect = "Program([ClassDecl(Id(Shape),[MethodDecl(Id(foo),Instance,[],Block([AssignStmt(Id(a),FieldAccess(FieldAccess(FieldAccess(Id(b),Id(c)),Id(d)),Id(e)))]))])])"
#         self.assertTrue(TestAST.test(input, expect, 330))
#     def test_331(self):
#         input = """ 
#               Class Shape {
#         foo(){
#             Foreach (i In (1+2) .. (100*2-3) By (16-14)) {
#                 Out.printInt(i);
#             }
#         } 
#     }
#         """
#         expect = "Program([ClassDecl(Id(Shape),[MethodDecl(Id(foo),Instance,[],Block([For(Id(i),BinaryOp(+,IntLit(1),IntLit(2)),BinaryOp(-,BinaryOp(*,IntLit(100),IntLit(2)),IntLit(3)),BinaryOp(-,IntLit(16),IntLit(14)),Block([Call(Id(Out),Id(printInt),[Id(i)])])])]))])])"
#         self.assertTrue(TestAST.test(input, expect, 331))
#     def test_332(self):
#         input = """ 
#               Class Shape {
#         foo(){
#             a = !!!!!!!!!!!!True;
#             b = ------------5;
#         } 
#     }
#         """
#         expect = "Program([ClassDecl(Id(Shape),[MethodDecl(Id(foo),Instance,[],Block([AssignStmt(Id(a),UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,BooleanLit(True)))))))))))))),AssignStmt(Id(b),UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,IntLit(5))))))))))))))]))])])"
#         self.assertTrue(TestAST.test(input, expect, 332))
#     def test_333(self):
#         input = """ 
#                Class Shape {
#         foo(){
#             a = !!!!!!!!!!!!True;
#             b = ------------5;
#             c=d.d.d.d.d.d.d.d;
#             e=f[1][1][1][1];
#         } 
#     }
#         """
#         expect = "Program([ClassDecl(Id(Shape),[MethodDecl(Id(foo),Instance,[],Block([AssignStmt(Id(a),UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,BooleanLit(True)))))))))))))),AssignStmt(Id(b),UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,IntLit(5)))))))))))))),AssignStmt(Id(c),FieldAccess(FieldAccess(FieldAccess(FieldAccess(FieldAccess(FieldAccess(FieldAccess(Id(d),Id(d)),Id(d)),Id(d)),Id(d)),Id(d)),Id(d)),Id(d))),AssignStmt(Id(e),ArrayCell(Id(f),[IntLit(1),IntLit(1),IntLit(1),IntLit(1)]))]))])])"
#         self.assertTrue(TestAST.test(input, expect, 333))
#     def test_334(self):
#         input = """ 
#                Class Shape {
#         foo(){
#             a = (b==c) == True;
#         } 
#     }
#         """
#         expect = "Program([ClassDecl(Id(Shape),[MethodDecl(Id(foo),Instance,[],Block([AssignStmt(Id(a),BinaryOp(==,BinaryOp(==,Id(b),Id(c)),BooleanLit(True)))]))])])"
#         self.assertTrue(TestAST.test(input, expect, 334))
#     def test_335(self):
#         input = """ 
#                Class Shape {
#         foo(){
#             a = (b < c)  == True;
#         } 
#     }
#         """
#         expect = "Program([ClassDecl(Id(Shape),[MethodDecl(Id(foo),Instance,[],Block([AssignStmt(Id(a),BinaryOp(==,BinaryOp(<,Id(b),Id(c)),BooleanLit(True)))]))])])"
#         self.assertTrue(TestAST.test(input, expect, 335))
#     def test_336(self):
#         input = """ 
#                Class Shape {
#         foo(){
#             a = (b < c) < True;
#         } 
#     }
#         """
#         expect = "Program([ClassDecl(Id(Shape),[MethodDecl(Id(foo),Instance,[],Block([AssignStmt(Id(a),BinaryOp(<,BinaryOp(<,Id(b),Id(c)),BooleanLit(True)))]))])])"
#         self.assertTrue(TestAST.test(input, expect, 336))
#     def test_337(self):
#         input = """ 
#                Class Shape {
#         foo(){
#             a = ("a"+."b")+."b";
#             c = ("a"==."a")==True;
#         } 
#     }
#         """
#         expect = "Program([ClassDecl(Id(Shape),[MethodDecl(Id(foo),Instance,[],Block([AssignStmt(Id(a),BinaryOp(+.,BinaryOp(+.,StringLit(a),StringLit(b)),StringLit(b))),AssignStmt(Id(c),BinaryOp(==,BinaryOp(==.,StringLit(a),StringLit(a)),BooleanLit(True)))]))])])"
#         self.assertTrue(TestAST.test(input, expect, 337))
#     def test_338(self):
#         input = """ 
#                 Class Shape {
#                 foo(){
#                 a=-1+1;
#                 b=1+-1;
#                 } 
#             }
#         """
#         expect = "Program([ClassDecl(Id(Shape),[MethodDecl(Id(foo),Instance,[],Block([AssignStmt(Id(a),BinaryOp(+,UnaryOp(-,IntLit(1)),IntLit(1))),AssignStmt(Id(b),BinaryOp(+,IntLit(1),UnaryOp(-,IntLit(1))))]))])])"
#         self.assertTrue(TestAST.test(input, expect, 338))
#     def test_339(self):
#         input = """ 
#                    Class Shape {
#         foo(){
#             a=-1+1;
#             b=1+-1--1+-1---1;
#         } 
#     }
#         """
#         expect = "Program([ClassDecl(Id(Shape),[MethodDecl(Id(foo),Instance,[],Block([AssignStmt(Id(a),BinaryOp(+,UnaryOp(-,IntLit(1)),IntLit(1))),AssignStmt(Id(b),BinaryOp(-,BinaryOp(+,BinaryOp(-,BinaryOp(+,IntLit(1),UnaryOp(-,IntLit(1))),UnaryOp(-,IntLit(1))),UnaryOp(-,IntLit(1))),UnaryOp(-,UnaryOp(-,IntLit(1)))))]))])])"
#         self.assertTrue(TestAST.test(input, expect, 339))
#     def test_340(self):
#         input = """ 
#                    Class TestCase : TestAST {
# 					Var x: ClassIT = 123*125/24*0b1%335-aabc;
# 					Test1() {
# 						x::$a = "She said that\'"Hello World\'"";
# 					}
# 				}
#         """
#         expect = """Program([ClassDecl(Id(TestCase),Id(TestAST),[AttributeDecl(Instance,VarDecl(Id(x),ClassType(Id(ClassIT)),BinaryOp(-,BinaryOp(%,BinaryOp(*,BinaryOp(/,BinaryOp(*,IntLit(123),IntLit(125)),IntLit(24)),IntLit(1)),IntLit(335)),Id(aabc)))),MethodDecl(Id(Test1),Instance,[],Block([AssignStmt(FieldAccess(Id(x),Id($a)),StringLit(She said that'"Hello World'"))]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 340))
#     def test_341(self):
#         input = """ 
#                 Class TestUtils : TestCase {
# 					Var x: ClassIT = 123*125/24*0b1%335-aabc;
# 					Test1() {
# 						x::$a = "She said that '"Hello World '"";
# 					}
# 				}
# 				Class Program {}
#         """
#         expect = """Program([ClassDecl(Id(TestUtils),Id(TestCase),[AttributeDecl(Instance,VarDecl(Id(x),ClassType(Id(ClassIT)),BinaryOp(-,BinaryOp(%,BinaryOp(*,BinaryOp(/,BinaryOp(*,IntLit(123),IntLit(125)),IntLit(24)),IntLit(1)),IntLit(335)),Id(aabc)))),MethodDecl(Id(Test1),Instance,[],Block([AssignStmt(FieldAccess(Id(x),Id($a)),StringLit(She said that '"Hello World '"))]))]),ClassDecl(Id(Program),[])])"""
#         self.assertTrue(TestAST.test(input, expect, 341))
#     def test_342(self):
#         input = """ 
#                 Class TestUtils : TestCase {
# 					Var x: ClassIT = 123*125/24*0b1%335-aabc;
# 					Test1() {
# 						x::$a = "She said that '"Hello World '"";
# 						Val def: Int = "123456";
# 						Val c:Array[Array[Int, 0b1],0x1] = Array();
#                         If (True) {
# 							Continue;
# 						}
# 					}
# 				}
# 				Class Program {}
#         """
#         expect = """Program([ClassDecl(Id(TestUtils),Id(TestCase),[AttributeDecl(Instance,VarDecl(Id(x),ClassType(Id(ClassIT)),BinaryOp(-,BinaryOp(%,BinaryOp(*,BinaryOp(/,BinaryOp(*,IntLit(123),IntLit(125)),IntLit(24)),IntLit(1)),IntLit(335)),Id(aabc)))),MethodDecl(Id(Test1),Instance,[],Block([AssignStmt(FieldAccess(Id(x),Id($a)),StringLit(She said that '"Hello World '")),ConstDecl(Id(def),IntType,StringLit(123456)),ConstDecl(Id(c),ArrayType(1,ArrayType(1,IntType)),[]),If(BooleanLit(True),Block([Continue]))]))]),ClassDecl(Id(Program),[])])"""
#         self.assertTrue(TestAST.test(input, expect, 342))
#     def test_343(self):
#         input = """ 
#                 Class TestUtils : TestCase {
# 					Var x: ClassIT = 123*125/24*0b1%335-aabc;
# 					Test1() {
# 						x::$a = "She said that '"Hello World '"";
# 						Var def: Int = "123456";
# 						Val abc: Array[Array[Float, 0b1],0x1] = Array();
#                         If (True) {
# 							Continue;
# 							a = b * c + d.foo().f;
# 						} Elseif (False) {
# 							Var a, b, d: Int = 1,2,3;
# 						}
# 					}
# 				}
# 				Class Program {}
#         """
#         expect = """Program([ClassDecl(Id(TestUtils),Id(TestCase),[AttributeDecl(Instance,VarDecl(Id(x),ClassType(Id(ClassIT)),BinaryOp(-,BinaryOp(%,BinaryOp(*,BinaryOp(/,BinaryOp(*,IntLit(123),IntLit(125)),IntLit(24)),IntLit(1)),IntLit(335)),Id(aabc)))),MethodDecl(Id(Test1),Instance,[],Block([AssignStmt(FieldAccess(Id(x),Id($a)),StringLit(She said that '"Hello World '")),VarDecl(Id(def),IntType,StringLit(123456)),ConstDecl(Id(abc),ArrayType(1,ArrayType(1,FloatType)),[]),If(BooleanLit(True),Block([Continue,AssignStmt(Id(a),BinaryOp(+,BinaryOp(*,Id(b),Id(c)),FieldAccess(CallExpr(Id(d),Id(foo),[]),Id(f))))]),If(BooleanLit(False),Block([VarDecl(Id(a),IntType,IntLit(1)),VarDecl(Id(b),IntType,IntLit(2)),VarDecl(Id(d),IntType,IntLit(3))])))]))]),ClassDecl(Id(Program),[])])"""
#         self.assertTrue(TestAST.test(input, expect, 343))
#     def test_344(self):
#         input = """ 
#                 Class TestUtils : TestCase {
# 					Var x: ClassIT = 123*125/24*0b1%335-aabc;
# 					Test1() {
# 						x::$a = "She said that '"Hello World '"";
# 						Var def: Int = "123456";
# 						Val abc: Array[Array[String, 0b1],0x1] = Array();
# 						If (True) {
# 							Continue;
# 							a = b * c + d.foo().f;
# 						} Elseif (False) {
# 							Var a, b, d: Int = 1,2,3;
# 							Break;
# 							If (1/2*3-4) {
# 								Out.prinln("I'm you but private");
# 							} Else {}
# 						}
# 					}
# 				}
# 				Class Program {}
#         """
#         expect = """Program([ClassDecl(Id(TestUtils),Id(TestCase),[AttributeDecl(Instance,VarDecl(Id(x),ClassType(Id(ClassIT)),BinaryOp(-,BinaryOp(%,BinaryOp(*,BinaryOp(/,BinaryOp(*,IntLit(123),IntLit(125)),IntLit(24)),IntLit(1)),IntLit(335)),Id(aabc)))),MethodDecl(Id(Test1),Instance,[],Block([AssignStmt(FieldAccess(Id(x),Id($a)),StringLit(She said that '"Hello World '")),VarDecl(Id(def),IntType,StringLit(123456)),ConstDecl(Id(abc),ArrayType(1,ArrayType(1,StringType)),[]),If(BooleanLit(True),Block([Continue,AssignStmt(Id(a),BinaryOp(+,BinaryOp(*,Id(b),Id(c)),FieldAccess(CallExpr(Id(d),Id(foo),[]),Id(f))))]),If(BooleanLit(False),Block([VarDecl(Id(a),IntType,IntLit(1)),VarDecl(Id(b),IntType,IntLit(2)),VarDecl(Id(d),IntType,IntLit(3)),Break,If(BinaryOp(-,BinaryOp(*,BinaryOp(/,IntLit(1),IntLit(2)),IntLit(3)),IntLit(4)),Block([Call(Id(Out),Id(prinln),[StringLit(I'm you but private)])]),Block([]))])))]))]),ClassDecl(Id(Program),[])])"""
#         self.assertTrue(TestAST.test(input, expect, 344))
#     def test_345(self):
#         input = """ 
#                 Class TestUtils : TestCase {
# 					Var x: ClassIT = 123*125/24*0b1%335-aabc;
# 					Test1() {
# 						x::$a = "She said that '"Hello World '"";
# 						Var def: Int = "123456";
# 						Val abc: Array[Array[Boolean, 0b1],0x1] = Array();
# 						If (True) {
# 							Continue;
# 							a = b * c + d.foo().f;
# 						} Elseif (False) {
# 							Var a, b, d: Int = 1,2,3;
# 							Break;
# 							If (1/2*3-4) {
# 								Out.prinln("I'm you but private");
# 							} Else {
# 								(vari*3/4*5)[a] = 19/83*New A(bcd)[b];
# 							}
# 						}
# 					}
# 				}
# 				Class Program {}
#         """
#         expect = """Program([ClassDecl(Id(TestUtils),Id(TestCase),[AttributeDecl(Instance,VarDecl(Id(x),ClassType(Id(ClassIT)),BinaryOp(-,BinaryOp(%,BinaryOp(*,BinaryOp(/,BinaryOp(*,IntLit(123),IntLit(125)),IntLit(24)),IntLit(1)),IntLit(335)),Id(aabc)))),MethodDecl(Id(Test1),Instance,[],Block([AssignStmt(FieldAccess(Id(x),Id($a)),StringLit(She said that '"Hello World '")),VarDecl(Id(def),IntType,StringLit(123456)),ConstDecl(Id(abc),ArrayType(1,ArrayType(1,BoolType)),[]),If(BooleanLit(True),Block([Continue,AssignStmt(Id(a),BinaryOp(+,BinaryOp(*,Id(b),Id(c)),FieldAccess(CallExpr(Id(d),Id(foo),[]),Id(f))))]),If(BooleanLit(False),Block([VarDecl(Id(a),IntType,IntLit(1)),VarDecl(Id(b),IntType,IntLit(2)),VarDecl(Id(d),IntType,IntLit(3)),Break,If(BinaryOp(-,BinaryOp(*,BinaryOp(/,IntLit(1),IntLit(2)),IntLit(3)),IntLit(4)),Block([Call(Id(Out),Id(prinln),[StringLit(I'm you but private)])]),Block([AssignStmt(ArrayCell(BinaryOp(*,BinaryOp(/,BinaryOp(*,Id(vari),IntLit(3)),IntLit(4)),IntLit(5)),[Id(a)]),BinaryOp(*,BinaryOp(/,IntLit(19),IntLit(83)),ArrayCell(NewExpr(Id(A),[Id(bcd)]),[Id(b)])))]))])))]))]),ClassDecl(Id(Program),[])])"""
#         self.assertTrue(TestAST.test(input, expect, 345))
#     def test_346(self):
#         input = """ 
#                 Class TestUtils : TestCase {
# 					Test2() {
# 						Foreach(a In abc .. def By "This is abc" +. "def"){}
# 					}
# 				}
# 				Class Program {}
#         """
#         expect = """Program([ClassDecl(Id(TestUtils),Id(TestCase),[MethodDecl(Id(Test2),Instance,[],Block([For(Id(a),Id(abc),Id(def),BinaryOp(+.,StringLit(This is abc),StringLit(def)),Block([])])]))]),ClassDecl(Id(Program),[])])"""
#         self.assertTrue(TestAST.test(input, expect, 346))
#     def test_347(self):
#         input = """ 
#                 Class TestUtils : TestCase {
# 					Test2() {
# 						Foreach(a In abc .. def By "This is abc" +. "def"){
# 							If (!True) {
# 								a = (((!123) >= ((234 && (345 + 456)) || 567)) <= (678 != x::$a));
# 							}
# 						}
# 					}
# 				}
# 				Class Program {}
#         """
#         expect = """Program([ClassDecl(Id(TestUtils),Id(TestCase),[MethodDecl(Id(Test2),Instance,[],Block([For(Id(a),Id(abc),Id(def),BinaryOp(+.,StringLit(This is abc),StringLit(def)),Block([If(UnaryOp(!,BooleanLit(True)),Block([AssignStmt(Id(a),BinaryOp(<=,BinaryOp(>=,UnaryOp(!,IntLit(123)),BinaryOp(||,BinaryOp(&&,IntLit(234),BinaryOp(+,IntLit(345),IntLit(456))),IntLit(567))),BinaryOp(!=,IntLit(678),FieldAccess(Id(x),Id($a)))))]))])])]))]),ClassDecl(Id(Program),[])])"""
#         self.assertTrue(TestAST.test(input, expect, 347))
#     def test_348(self):
#         input = """ 
#                 Class TestUtils : TestCase {
# 					Test2() {
# 						Foreach(a In abc .. def By "This is abc" +. "def"){
# 							If (!True) {
# 								a = (((!123) >= ((234 && (345 + 456)) || 567)) <= (678 != x::$a));
# 							} Else {
# 								x.a().f = abc * def / 010;
# 								a = b % c * "Hello def";
# 							}
# 						}
# 					}
# 				}
# 				Class Program {}
#         """
#         expect = """Program([ClassDecl(Id(TestUtils),Id(TestCase),[MethodDecl(Id(Test2),Instance,[],Block([For(Id(a),Id(abc),Id(def),BinaryOp(+.,StringLit(This is abc),StringLit(def)),Block([If(UnaryOp(!,BooleanLit(True)),Block([AssignStmt(Id(a),BinaryOp(<=,BinaryOp(>=,UnaryOp(!,IntLit(123)),BinaryOp(||,BinaryOp(&&,IntLit(234),BinaryOp(+,IntLit(345),IntLit(456))),IntLit(567))),BinaryOp(!=,IntLit(678),FieldAccess(Id(x),Id($a)))))]),Block([AssignStmt(FieldAccess(CallExpr(Id(x),Id(a),[]),Id(f)),BinaryOp(/,BinaryOp(*,Id(abc),Id(def)),IntLit(8))),AssignStmt(Id(a),BinaryOp(*,BinaryOp(%,Id(b),Id(c)),StringLit(Hello def)))]))])])]))]),ClassDecl(Id(Program),[])])"""
#         self.assertTrue(TestAST.test(input, expect, 348))
#     def test_349(self):
#         input = """ 
#                 Class Car : Vehicle{
#                         Val speed: Float = 0;
#                         Val $model, tireNum: Int = 1 * 3 + 4 - 4 / 100_000, "nam";
#                     }

#         """
#         expect = """Program([ClassDecl(Id(Car),Id(Vehicle),[AttributeDecl(Instance,ConstDecl(Id(speed),FloatType,IntLit(0))),AttributeDecl(Static,ConstDecl(Id($model),IntType,BinaryOp(-,BinaryOp(+,BinaryOp(*,IntLit(1),IntLit(3)),IntLit(4)),BinaryOp(/,IntLit(4),IntLit(100000))))),AttributeDecl(Instance,ConstDecl(Id(tireNum),IntType,StringLit(nam)))])])"""
#         self.assertTrue(TestAST.test(input, expect, 349))
#     def test_350(self):
#         input = """ 
# Class Eva{
#                     Val a, b, __b: Boolean = True, False, !True;
#                     Var aa, be, $ce, de: Float = 978.063e129, 8_7_6_2.029e99, 98_1.23e-10, .012E-1;
#                 }

#         """
#         expect = """Program([ClassDecl(Id(Eva),[AttributeDecl(Instance,ConstDecl(Id(a),BoolType,BooleanLit(True))),AttributeDecl(Instance,ConstDecl(Id(b),BoolType,BooleanLit(False))),AttributeDecl(Instance,ConstDecl(Id(__b),BoolType,UnaryOp(!,BooleanLit(True)))),AttributeDecl(Instance,VarDecl(Id(aa),FloatType,FloatLit(9.78063e+131))),AttributeDecl(Instance,VarDecl(Id(be),FloatType,FloatLit(8.762029e+102))),AttributeDecl(Static,VarDecl(Id($ce),FloatType,FloatLit(9.8123e-08))),AttributeDecl(Instance,VarDecl(Id(de),FloatType,FloatLit(0.0012)))])])"""
#         self.assertTrue(TestAST.test(input, expect, 350))
#     def test_351(self):
#         input = """ 
#             Class King{
#                 Var FirstK, SecondK :Int = "FNam", "SNam";
#                 $KingWife(ladies:Array[String, 5]){
#                     Foreach(lady In adies[0]..ladies[4] By 1){
#                         If(King.accept(lady)){
#                             King.ABCXYZ(lady);
#                         }
#                         Else{
#                             If(Lady.Beauty() > 70){
#                                 Backup.add(lady);
#                             }
#                             Else{
#                                 KingDom.getOut(lady);
#                             }
#                         }
#                     }

#                 }
#             }

#         """
#         expect = """Program([ClassDecl(Id(King),[AttributeDecl(Instance,VarDecl(Id(FirstK),IntType,StringLit(FNam))),AttributeDecl(Instance,VarDecl(Id(SecondK),IntType,StringLit(SNam))),MethodDecl(Id($KingWife),Static,[param(Id(ladies),ArrayType(5,StringType))],Block([For(Id(lady),ArrayCell(Id(adies),[IntLit(0)]),ArrayCell(Id(ladies),[IntLit(4)]),IntLit(1),Block([If(CallExpr(Id(King),Id(accept),[Id(lady)]),Block([Call(Id(King),Id(ABCXYZ),[Id(lady)])]),Block([If(BinaryOp(>,CallExpr(Id(Lady),Id(Beauty),[]),IntLit(70)),Block([Call(Id(Backup),Id(add),[Id(lady)])]),Block([Call(Id(KingDom),Id(getOut),[Id(lady)])]))]))])])]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 351))
#     def test_352(self):
#         input = """ 
#         Class OnePiece:Anime{
#             Val Luffy, Zoro, Sanji :Main;
#             Check(Charater_name: Main){
#                 If(Charater_name.HP < 10){
#                 Charater_name.PastRemember();
#                 Charater_name.HP = Charater_name.HP + Charater_name.maxHP*20/100;
#                 }
#                 Else{
#                     Charater_name.HP = Charater_name.HP  - 10;
#                 }
#             }

     
#         }

#         """
#         expect = """Program([ClassDecl(Id(OnePiece),Id(Anime),[AttributeDecl(Instance,ConstDecl(Id(Luffy),ClassType(Id(Main)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(Zoro),ClassType(Id(Main)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(Sanji),ClassType(Id(Main)),NullLiteral())),MethodDecl(Id(Check),Instance,[param(Id(Charater_name),ClassType(Id(Main)))],Block([If(BinaryOp(<,FieldAccess(Id(Charater_name),Id(HP)),IntLit(10)),Block([Call(Id(Charater_name),Id(PastRemember),[]),AssignStmt(FieldAccess(Id(Charater_name),Id(HP)),BinaryOp(+,FieldAccess(Id(Charater_name),Id(HP)),BinaryOp(/,BinaryOp(*,FieldAccess(Id(Charater_name),Id(maxHP)),IntLit(20)),IntLit(100))))]),Block([AssignStmt(FieldAccess(Id(Charater_name),Id(HP)),BinaryOp(-,FieldAccess(Id(Charater_name),Id(HP)),IntLit(10)))]))]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 352))
#     def test_25(self):
#         input = """
#                 Class Main {
#                     Var ab: Array[String, 2] = Array("a", "b");
#                 }
#                 """
#         expect = str(
#             Program(
#                 [
#                     ClassDecl(
#                         Id("Main"),
#                         [
#                             AttributeDecl(
#                                 Instance(),
#                                 VarDecl(
#                                     Id("ab"),
#                                     ArrayType(
#                                         2,
#                                         StringType()
#                                     ),
#                                     ArrayLiteral(
#                                         [
#                                             StringLiteral("a"),
#                                             StringLiteral("b")
#                                         ]
#                                     )
#                                 )
#                             )
#                         ]
#                     )
#                 ]
#             )
#         )
#         self.assertTrue(TestAST.test(input,expect,25))

#     def test_353(self):
#         input = """ 
#             Class Anime{
# 				Val Anime_name:String;
# 				Var Charac_list :Array[String, 100];
# 				Var $Anime_list:Array[String, 100];
# 				Constructor(Anime_name:String){
# 					Anime::$Anime_list.append(Anime_name);
# 				}
# 				Add_character(list: Array[String, 10]){
# 					Foreach(i In 0 .. 9){
# 						Charac_list[i] = list[i];
# 					}
# 				}
# 			}
# 			Class Program{
# 				main(){
# 					Naruto = New Anime("Naruto");
# 					Var char_lst:Array[String, 3] = Array("Sasuke", "Sakura", "Naruto");
# 					Naruto.Add_character(char_list);
# 				}
# 			}

#         """
#         expect = """Program([ClassDecl(Id(Anime),[AttributeDecl(Instance,ConstDecl(Id(Anime_name),StringType,None)),AttributeDecl(Instance,VarDecl(Id(Charac_list),ArrayType(100,StringType))),AttributeDecl(Static,VarDecl(Id($Anime_list),ArrayType(100,StringType))),MethodDecl(Id(Constructor),Instance,[param(Id(Anime_name),StringType)],Block([Call(FieldAccess(Id(Anime),Id($Anime_list)),Id(append),[Id(Anime_name)])])),MethodDecl(Id(Add_character),Instance,[param(Id(list),ArrayType(10,StringType))],Block([For(Id(i),IntLit(0),IntLit(9),IntLit(1),Block([AssignStmt(ArrayCell(Id(Charac_list),[Id(i)]),ArrayCell(Id(list),[Id(i)]))])])]))]),ClassDecl(Id(Program),[MethodDecl(Id(main),Static,[],Block([AssignStmt(Id(Naruto),NewExpr(Id(Anime),[StringLit(Naruto)])),VarDecl(Id(char_lst),ArrayType(3,StringType),[StringLit(Sasuke),StringLit(Sakura),StringLit(Naruto)]),Call(Id(Naruto),Id(Add_character),[Id(char_list)])]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 353))

#     def test_354(self):
#         input = """ 
# 		Class Animal{
# 			Var $Animal_list:Array[Array[String, 2], 3];
# 			Val animal_type:Int;
# 			Val animal_name:String;
# 			Run(){
# 				system.print("animal is running");
# 			}
# 			Constructor(Atype:Int; animal_name:String){
# 				animal_type = Atype;
# 				Animal::$Animal_list.append(Array(animal_name, Atype));
# 			}
# 			Destructor(){
# 				Animal_type = -1;
# 			}
# 		}
# 		Class Program{
# 			Var Dog, Bird:Animal = New Animal(123, "Dog"), Null;
# 			Var Cat:Animal;
# 		}

#         """
#         expect = """Program([ClassDecl(Id(Animal),[AttributeDecl(Static,VarDecl(Id($Animal_list),ArrayType(3,ArrayType(2,StringType)))),AttributeDecl(Instance,ConstDecl(Id(animal_type),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(animal_name),StringType,None)),MethodDecl(Id(Run),Instance,[],Block([Call(Id(system),Id(print),[StringLit(animal is running)])])),MethodDecl(Id(Constructor),Instance,[param(Id(Atype),IntType),param(Id(animal_name),StringType)],Block([AssignStmt(Id(animal_type),Id(Atype)),Call(FieldAccess(Id(Animal),Id($Animal_list)),Id(append),[[Id(animal_name),Id(Atype)]])])),MethodDecl(Id(Destructor),Instance,[],Block([AssignStmt(Id(Animal_type),UnaryOp(-,IntLit(1)))]))]),ClassDecl(Id(Program),[AttributeDecl(Instance,VarDecl(Id(Dog),ClassType(Id(Animal)),NewExpr(Id(Animal),[IntLit(123),StringLit(Dog)]))),AttributeDecl(Instance,VarDecl(Id(Bird),ClassType(Id(Animal)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Cat),ClassType(Id(Animal)),NullLiteral()))])])"""
#         self.assertTrue(TestAST.test(input, expect, 354))
#     def test_355(self):
#         input = """ 
# 		Class Node{
# 			Var value:Int;
# 			Var PNext:Node;
# 			Constructor(v:Int){
# 				Self.value = v;
# 				Self.PNext = Null;
# 			}

# 		}
# 		Class LL{
# 			Var PHead:Node;
# 			Var Leng :Int =0;
# 			Add(newNode:Node){
# 				If(Phead == Null){
# 					Phead = newNode;
# 					Leng  = Leng + 1;
# 				}
#     			Else{
# 					Var PCurrent:Node = PHead;
# 					Foreach(i In 0 .. Self.Leng){
# 						PCurrent = PCurrent.Next;
# 					}
# 					PCurrent.Next = newNode;
# 				}
# 			}	
# 		}
# 		Class Program{
# 			main(){
# 				Var L1:LL = New LL();
# 				Node1 = New Node(V1);
# 				L1.Add(Node1);
# 			}
# 		}
#         """
#         expect = """Program([ClassDecl(Id(Node),[AttributeDecl(Instance,VarDecl(Id(value),IntType)),AttributeDecl(Instance,VarDecl(Id(PNext),ClassType(Id(Node)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(v),IntType)],Block([AssignStmt(FieldAccess(Self(),Id(value)),Id(v)),AssignStmt(FieldAccess(Self(),Id(PNext)),NullLiteral())]))]),ClassDecl(Id(LL),[AttributeDecl(Instance,VarDecl(Id(PHead),ClassType(Id(Node)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Leng),IntType,IntLit(0))),MethodDecl(Id(Add),Instance,[param(Id(newNode),ClassType(Id(Node)))],Block([If(BinaryOp(==,Id(Phead),NullLiteral()),Block([AssignStmt(Id(Phead),Id(newNode)),AssignStmt(Id(Leng),BinaryOp(+,Id(Leng),IntLit(1)))]),Block([VarDecl(Id(PCurrent),ClassType(Id(Node)),Id(PHead)),For(Id(i),IntLit(0),FieldAccess(Self(),Id(Leng)),IntLit(1),Block([AssignStmt(Id(PCurrent),FieldAccess(Id(PCurrent),Id(Next)))])]),AssignStmt(FieldAccess(Id(PCurrent),Id(Next)),Id(newNode))]))]))]),ClassDecl(Id(Program),[MethodDecl(Id(main),Static,[],Block([VarDecl(Id(L1),ClassType(Id(LL)),NewExpr(Id(LL),[])),AssignStmt(Id(Node1),NewExpr(Id(Node),[Id(V1)])),Call(Id(L1),Id(Add),[Id(Node1)])]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 355))


#     def test_356(self):
#         input = """ 
# 		Class Node{
# 			Var value:Int;
# 			Var PNext:Node;
# 			Constructor(v:Int){
# 				Self.value = v;
# 				Self.PNext = Null;
# 			}

# 		}
# 		Class LL{
# 			Var PHead:Node;
# 			Var Leng :Int =0;
# 			Add(newNode:Node){
# 				If(Phead == Null){
# 					Phead = newNode;
# 					Leng  = Leng + 1;
# 				}
#     			Else{
# 					Var PCurrent:Node = PHead;
# 					Foreach(i In 0 .. Self.Leng){
# 						PCurrent = PCurrent.Next;
# 					}
# 					PCurrent.Next = newNode;
# 				}
# 			}
# 			Delete(DNode:Node){
# 				If(PHead == Null){
# 					Return Null;
# 				}
# 				Else{
# 					Var PCurrent:Node = PHead;
# 					Var flag:Bolean = False;
# 					Var Result:Node;
# 					Foreach(i In 0 .. Self.Leng){
# 						If(PCurrent.PNext == DNode){
# 							flag = True;
# 							Break;
# 						}
# 						PCurrent = PCurrent.Next;
# 					}
# 					If(PCurrent.PNext != Null){
# 						Result = PCurrent.PNext;
# 						PCurrent.PNext = PCurrent.PNext.PNext;
# 						Return Result;
# 					}
# 					Else{
# 						If(flag == True){
# 							Var PCurrent2:Node = Phead;
# 							Foreach(i In 0 .. Self.Leng){
# 								If(PCurrent2.PNext == PCurrent){
# 									Break;
# 								}
# 								PCurrent2 = PCurrent2.Next;
# 							}
# 							Result = PCurrent2.PNext;
# 							PCurrent2.PNext = PCurrent2.PNext.PNext ;
# 							Return Result;
# 						}
# 						Else{
# 							Return Null;
# 						}
# 					}
# 				}
# 			}
# 		}
# 		Class Program{
# 			main(){
# 				Var L1:LL = New LL();
# 				Node1 = New Node(V1);
# 				L1.Add(Node1);
# 			}
# 		}
#         """
#         expect = """Program([ClassDecl(Id(Node),[AttributeDecl(Instance,VarDecl(Id(value),IntType)),AttributeDecl(Instance,VarDecl(Id(PNext),ClassType(Id(Node)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(v),IntType)],Block([AssignStmt(FieldAccess(Self(),Id(value)),Id(v)),AssignStmt(FieldAccess(Self(),Id(PNext)),NullLiteral())]))]),ClassDecl(Id(LL),[AttributeDecl(Instance,VarDecl(Id(PHead),ClassType(Id(Node)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Leng),IntType,IntLit(0))),MethodDecl(Id(Add),Instance,[param(Id(newNode),ClassType(Id(Node)))],Block([If(BinaryOp(==,Id(Phead),NullLiteral()),Block([AssignStmt(Id(Phead),Id(newNode)),AssignStmt(Id(Leng),BinaryOp(+,Id(Leng),IntLit(1)))]),Block([VarDecl(Id(PCurrent),ClassType(Id(Node)),Id(PHead)),For(Id(i),IntLit(0),FieldAccess(Self(),Id(Leng)),IntLit(1),Block([AssignStmt(Id(PCurrent),FieldAccess(Id(PCurrent),Id(Next)))])]),AssignStmt(FieldAccess(Id(PCurrent),Id(Next)),Id(newNode))]))])),MethodDecl(Id(Delete),Instance,[param(Id(DNode),ClassType(Id(Node)))],Block([If(BinaryOp(==,Id(PHead),NullLiteral()),Block([Return(NullLiteral())]),Block([VarDecl(Id(PCurrent),ClassType(Id(Node)),Id(PHead)),VarDecl(Id(flag),ClassType(Id(Bolean)),BooleanLit(False)),VarDecl(Id(Result),ClassType(Id(Node)),NullLiteral()),For(Id(i),IntLit(0),FieldAccess(Self(),Id(Leng)),IntLit(1),Block([If(BinaryOp(==,FieldAccess(Id(PCurrent),Id(PNext)),Id(DNode)),Block([AssignStmt(Id(flag),BooleanLit(True)),Break])),AssignStmt(Id(PCurrent),FieldAccess(Id(PCurrent),Id(Next)))])]),If(BinaryOp(!=,FieldAccess(Id(PCurrent),Id(PNext)),NullLiteral()),Block([AssignStmt(Id(Result),FieldAccess(Id(PCurrent),Id(PNext))),AssignStmt(FieldAccess(Id(PCurrent),Id(PNext)),FieldAccess(FieldAccess(Id(PCurrent),Id(PNext)),Id(PNext))),Return(Id(Result))]),Block([If(BinaryOp(==,Id(flag),BooleanLit(True)),Block([VarDecl(Id(PCurrent2),ClassType(Id(Node)),Id(Phead)),For(Id(i),IntLit(0),FieldAccess(Self(),Id(Leng)),IntLit(1),Block([If(BinaryOp(==,FieldAccess(Id(PCurrent2),Id(PNext)),Id(PCurrent)),Block([Break])),AssignStmt(Id(PCurrent2),FieldAccess(Id(PCurrent2),Id(Next)))])]),AssignStmt(Id(Result),FieldAccess(Id(PCurrent2),Id(PNext))),AssignStmt(FieldAccess(Id(PCurrent2),Id(PNext)),FieldAccess(FieldAccess(Id(PCurrent2),Id(PNext)),Id(PNext))),Return(Id(Result))]),Block([Return(NullLiteral())]))]))]))]))]),ClassDecl(Id(Program),[MethodDecl(Id(main),Static,[],Block([VarDecl(Id(L1),ClassType(Id(LL)),NewExpr(Id(LL),[])),AssignStmt(Id(Node1),NewExpr(Id(Node),[Id(V1)])),Call(Id(L1),Id(Add),[Id(Node1)])]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 356))
#     def test_357(self):
#         input = """ 
# 		Class Node{
# 			Var value:Int;
# 			Var PNext:Node;
# 			Constructor(v:Int){
# 				Self.value = v;
# 				Self.PNext = Null;
# 			}

# 		}
# 		Class LL{
# 			Var PHead:Node;
# 			Var Leng :Int =0;
# 			Add(newNode:Node){
# 				If(Phead == Null){
# 					Phead = newNode;
# 					Leng  = Leng + 1;
# 				}
#     			Else{
# 					Var PCurrent:Node = PHead;
# 					Foreach(i In 0 .. Self.Leng){
# 						PCurrent = PCurrent.Next;
# 					}
# 					PCurrent.Next = newNode;
# 				}
# 			}
# 			Delete(DNode:Node){
# 				If(PHead == Null){
# 					Return Null;
# 				}
# 				Else{
# 					Var PCurrent:Node = PHead;
# 					Var flag:Bolean = False;
# 					Var Result:Node;
# 					Foreach(i In 0 .. Self.Leng){
# 						If(PCurrent.PNext == DNode){
# 							flag = True;
# 							Break;
# 						}
# 						PCurrent = PCurrent.Next;
# 						Continue;
# 					}
# 					If(PCurrent.PNext != Null){
# 						Result = PCurrent.PNext;
# 						PCurrent.PNext = PCurrent.PNext.PNext;
# 						Return Result;
# 					}
# 					Else{
# 						If(flag == True){
# 							Var PCurrent2:Node = Phead;
# 							Foreach(i In 0 .. Self.Leng){
# 								If(PCurrent2.PNext == PCurrent){
# 									Break;
# 								}
# 								PCurrent2 = PCurrent2.Next;
# 							}
# 							Result = PCurrent2.PNext;
# 							PCurrent2.PNext = PCurrent2.PNext.PNext ;
# 							Return Result;
# 						}
# 						Else{
# 							Return Null;
# 						}
# 					}
# 				}
# 			}
# 		}
# 		Class Program{
# 			main(){
# 				Var L1:LL = New LL();
# 				Node1 = New Node(V1);
# 				L1.Add(Node1);
# 			}
# 		}
#         """
#         expect = """Program([ClassDecl(Id(Node),[AttributeDecl(Instance,VarDecl(Id(value),IntType)),AttributeDecl(Instance,VarDecl(Id(PNext),ClassType(Id(Node)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(v),IntType)],Block([AssignStmt(FieldAccess(Self(),Id(value)),Id(v)),AssignStmt(FieldAccess(Self(),Id(PNext)),NullLiteral())]))]),ClassDecl(Id(LL),[AttributeDecl(Instance,VarDecl(Id(PHead),ClassType(Id(Node)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Leng),IntType,IntLit(0))),MethodDecl(Id(Add),Instance,[param(Id(newNode),ClassType(Id(Node)))],Block([If(BinaryOp(==,Id(Phead),NullLiteral()),Block([AssignStmt(Id(Phead),Id(newNode)),AssignStmt(Id(Leng),BinaryOp(+,Id(Leng),IntLit(1)))]),Block([VarDecl(Id(PCurrent),ClassType(Id(Node)),Id(PHead)),For(Id(i),IntLit(0),FieldAccess(Self(),Id(Leng)),IntLit(1),Block([AssignStmt(Id(PCurrent),FieldAccess(Id(PCurrent),Id(Next)))])]),AssignStmt(FieldAccess(Id(PCurrent),Id(Next)),Id(newNode))]))])),MethodDecl(Id(Delete),Instance,[param(Id(DNode),ClassType(Id(Node)))],Block([If(BinaryOp(==,Id(PHead),NullLiteral()),Block([Return(NullLiteral())]),Block([VarDecl(Id(PCurrent),ClassType(Id(Node)),Id(PHead)),VarDecl(Id(flag),ClassType(Id(Bolean)),BooleanLit(False)),VarDecl(Id(Result),ClassType(Id(Node)),NullLiteral()),For(Id(i),IntLit(0),FieldAccess(Self(),Id(Leng)),IntLit(1),Block([If(BinaryOp(==,FieldAccess(Id(PCurrent),Id(PNext)),Id(DNode)),Block([AssignStmt(Id(flag),BooleanLit(True)),Break])),AssignStmt(Id(PCurrent),FieldAccess(Id(PCurrent),Id(Next))),Continue])]),If(BinaryOp(!=,FieldAccess(Id(PCurrent),Id(PNext)),NullLiteral()),Block([AssignStmt(Id(Result),FieldAccess(Id(PCurrent),Id(PNext))),AssignStmt(FieldAccess(Id(PCurrent),Id(PNext)),FieldAccess(FieldAccess(Id(PCurrent),Id(PNext)),Id(PNext))),Return(Id(Result))]),Block([If(BinaryOp(==,Id(flag),BooleanLit(True)),Block([VarDecl(Id(PCurrent2),ClassType(Id(Node)),Id(Phead)),For(Id(i),IntLit(0),FieldAccess(Self(),Id(Leng)),IntLit(1),Block([If(BinaryOp(==,FieldAccess(Id(PCurrent2),Id(PNext)),Id(PCurrent)),Block([Break])),AssignStmt(Id(PCurrent2),FieldAccess(Id(PCurrent2),Id(Next)))])]),AssignStmt(Id(Result),FieldAccess(Id(PCurrent2),Id(PNext))),AssignStmt(FieldAccess(Id(PCurrent2),Id(PNext)),FieldAccess(FieldAccess(Id(PCurrent2),Id(PNext)),Id(PNext))),Return(Id(Result))]),Block([Return(NullLiteral())]))]))]))]))]),ClassDecl(Id(Program),[MethodDecl(Id(main),Static,[],Block([VarDecl(Id(L1),ClassType(Id(LL)),NewExpr(Id(LL),[])),AssignStmt(Id(Node1),NewExpr(Id(Node),[Id(V1)])),Call(Id(L1),Id(Add),[Id(Node1)])]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 357))
#     def test_358(self):
#         input = """ 
# 		Class Program{
# 			main(){
# 				Nam = a::$xyz().b;
# 				a::$xyz();
# 			}
# 		}
#         """
#         expect = """Program([ClassDecl(Id(Program),[MethodDecl(Id(main),Static,[],Block([AssignStmt(Id(Nam),FieldAccess(CallExpr(Id(a),Id($xyz),[]),Id(b))),Call(Id(a),Id($xyz),[])]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 358))
#     def test_359(self):
#         input = """ 
# 		Class Program{
# 			main(){
# 				Nam = a::$xyz().b;
# 				a::$xyz();
# 			}
#             main(a:Int){}
# 		}
#         """
#         expect = """Program([ClassDecl(Id(Program),[MethodDecl(Id(main),Static,[],Block([AssignStmt(Id(Nam),FieldAccess(CallExpr(Id(a),Id($xyz),[]),Id(b))),Call(Id(a),Id($xyz),[])])),MethodDecl(Id(main),Instance,[param(Id(a),IntType)],Block([]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 359))
#     def test_360(self):
#         input = """ 
# 		Class Program{
# 			main(){
# 				Nam = a::$xyz().b;
# 				a::$xyz();
# 			}
#             main(a:Int){
#                 Return a + 1;
#             }
# 		}
#         """
#         expect = """Program([ClassDecl(Id(Program),[MethodDecl(Id(main),Static,[],Block([AssignStmt(Id(Nam),FieldAccess(CallExpr(Id(a),Id($xyz),[]),Id(b))),Call(Id(a),Id($xyz),[])])),MethodDecl(Id(main),Instance,[param(Id(a),IntType)],Block([Return(BinaryOp(+,Id(a),IntLit(1)))]))])])"""
#         self.assertTrue(TestAST.test(input, expect, 360))

    


# ###---------------------------- NOTE: expected errors = 44 ----------------------------###




#     # def test_312(self):
#     #     input = """Class Program { main() {Val a,b:Int = 2,3;}}"""
#     #     expect = str(Program([ClassDecl(Id("Program"),[MethodDecl(Static(),Id("main"),[],Block([ConstDecl(Id('a'), IntType(), IntLiteral(2)),ConstDecl(Id('b'), IntType(), IntLiteral(3))]))])]))
#     #     self.assertTrue(TestAST.test(input, expect, 312))

#     # def test_313(self):
#     #     input = """Class Rectangle {Var length: Int;}"""
#     #     expect = str(Program([ClassDecl(Id("Rectangle"),[AttributeDecl(Instance(),VarDecl(Id("length"),IntType()))])]))
#     #     self.assertTrue(TestAST.test(input, expect, 313))

#     # def test_314(self):
#     #     input = """Class Rectangle {Val length: Int;}"""
#     #     expect = str(Program([ClassDecl(Id("Rectangle"),[AttributeDecl(Instance(),ConstDecl(Id("length"),IntType()))])]))
#     #     self.assertTrue(TestAST.test(input, expect, 314))

import unittest
from TestUtils import TestAST
from AST import *

class ASTGenSuite(unittest.TestCase):
    def test_0(self):
        line = '''Class _j{Val u_,$6:_N;Constructor (O:m;I:String ;__aR72S,__:Int ;_r__P:Array [Array [Array [Int ,0x8],0b1001110],0x47]){Break ;}Constructor (){} }Class _{Val $n0,___0_:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_j),[AttributeDecl(Instance,ConstDecl(Id(u_),ClassType(Id(_N)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($6),ClassType(Id(_N)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(O),ClassType(Id(m))),param(Id(I),StringType),param(Id(__aR72S),IntType),param(Id(__),IntType),param(Id(_r__P),ArrayType(71,ArrayType(78,ArrayType(8,IntType))))],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($n0),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(___0_),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 0))

    def test_1(self):
        line = '''Class _{}Class _:b{}Class tyu:s{_(_:Array [Array [Float ,72],0X4E];_,X:_){}$H(JL6:Float ;_5,b:Array [Float ,0B1_1]){Continue ;}Constructor (K:Array [Array [Float ,0b11],0B1_1_0_0]){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(b),[]),ClassDecl(Id(tyu),Id(s),[MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(78,ArrayType(72,FloatType))),param(Id(_),ClassType(Id(_))),param(Id(X),ClassType(Id(_)))],Block([])),MethodDecl(Id($H),Static,[param(Id(JL6),FloatType),param(Id(_5),ArrayType(3,FloatType)),param(Id(b),ArrayType(3,FloatType))],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(K),ArrayType(12,ArrayType(3,FloatType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 1))

    def test_2(self):
        line = '''Class _W{$b(__,N5,_7,i,x,_J,qb:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0117],05_3],0B1],0x5],5],0X4],0b111011],01_34],0b10],0117],0x1_6_7]){}Val _5:String ;}'''
        expect = '''Program([ClassDecl(Id(_W),[MethodDecl(Id($b),Static,[param(Id(__),ArrayType(359,ArrayType(79,ArrayType(2,ArrayType(92,ArrayType(59,ArrayType(4,ArrayType(5,ArrayType(5,ArrayType(1,ArrayType(43,ArrayType(79,StringType)))))))))))),param(Id(N5),ArrayType(359,ArrayType(79,ArrayType(2,ArrayType(92,ArrayType(59,ArrayType(4,ArrayType(5,ArrayType(5,ArrayType(1,ArrayType(43,ArrayType(79,StringType)))))))))))),param(Id(_7),ArrayType(359,ArrayType(79,ArrayType(2,ArrayType(92,ArrayType(59,ArrayType(4,ArrayType(5,ArrayType(5,ArrayType(1,ArrayType(43,ArrayType(79,StringType)))))))))))),param(Id(i),ArrayType(359,ArrayType(79,ArrayType(2,ArrayType(92,ArrayType(59,ArrayType(4,ArrayType(5,ArrayType(5,ArrayType(1,ArrayType(43,ArrayType(79,StringType)))))))))))),param(Id(x),ArrayType(359,ArrayType(79,ArrayType(2,ArrayType(92,ArrayType(59,ArrayType(4,ArrayType(5,ArrayType(5,ArrayType(1,ArrayType(43,ArrayType(79,StringType)))))))))))),param(Id(_J),ArrayType(359,ArrayType(79,ArrayType(2,ArrayType(92,ArrayType(59,ArrayType(4,ArrayType(5,ArrayType(5,ArrayType(1,ArrayType(43,ArrayType(79,StringType)))))))))))),param(Id(qb),ArrayType(359,ArrayType(79,ArrayType(2,ArrayType(92,ArrayType(59,ArrayType(4,ArrayType(5,ArrayType(5,ArrayType(1,ArrayType(43,ArrayType(79,StringType))))))))))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_5),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 2))

    def test_3(self):
        line = '''Class v6:v{Val _:Array [Array [Array [Array [Array [Int ,0XF_89A],0B101110],02],0x54],9];}Class _:G_3{Var h:__;Constructor (_:Array [Float ,0b1];CT_98:Array [Boolean ,9]){} }Class d9:_{}'''
        expect = '''Program([ClassDecl(Id(v6),Id(v),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(9,ArrayType(84,ArrayType(2,ArrayType(46,ArrayType(63642,IntType))))),None))]),ClassDecl(Id(_),Id(G_3),[AttributeDecl(Instance,VarDecl(Id(h),ClassType(Id(__)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,FloatType)),param(Id(CT_98),ArrayType(9,BoolType))],Block([]))]),ClassDecl(Id(d9),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 3))

    def test_4(self):
        line = '''Class R{Var b,n669ZO,_3_s:Array [Boolean ,053_3];}Class _3X:_{}Class _{Destructor (){Continue ;Continue ;} }Class z{}Class _:V{}Class _:_S{Destructor (){}Var $t9:g_;}Class G:Nj{}'''
        expect = '''Program([ClassDecl(Id(R),[AttributeDecl(Instance,VarDecl(Id(b),ArrayType(347,BoolType))),AttributeDecl(Instance,VarDecl(Id(n669ZO),ArrayType(347,BoolType))),AttributeDecl(Instance,VarDecl(Id(_3_s),ArrayType(347,BoolType)))]),ClassDecl(Id(_3X),Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Continue,Continue]))]),ClassDecl(Id(z),[]),ClassDecl(Id(_),Id(V),[]),ClassDecl(Id(_),Id(_S),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($t9),ClassType(Id(g_)),NullLiteral()))]),ClassDecl(Id(G),Id(Nj),[])])'''
        self.assertTrue(TestAST.test(line, expect, 4))

    def test_5(self):
        line = '''Class Hmx:KY{Val _:g0;Constructor (Y2,_,_6j_:_B8F8B6;o,T_1,m,Ol:Array [Float ,5_1]){} }Class R:FH___{Destructor (){} }Class _{}Class A__7{$E(v_,Q,_,vX,ul,m_,_:a;_,s7,_3__,R26_:_){} }'''
        expect = '''Program([ClassDecl(Id(Hmx),Id(KY),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(g0)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(Y2),ClassType(Id(_B8F8B6))),param(Id(_),ClassType(Id(_B8F8B6))),param(Id(_6j_),ClassType(Id(_B8F8B6))),param(Id(o),ArrayType(51,FloatType)),param(Id(T_1),ArrayType(51,FloatType)),param(Id(m),ArrayType(51,FloatType)),param(Id(Ol),ArrayType(51,FloatType))],Block([]))]),ClassDecl(Id(R),Id(FH___),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(A__7),[MethodDecl(Id($E),Static,[param(Id(v_),ClassType(Id(a))),param(Id(Q),ClassType(Id(a))),param(Id(_),ClassType(Id(a))),param(Id(vX),ClassType(Id(a))),param(Id(ul),ClassType(Id(a))),param(Id(m_),ClassType(Id(a))),param(Id(_),ClassType(Id(a))),param(Id(_),ClassType(Id(_))),param(Id(s7),ClassType(Id(_))),param(Id(_3__),ClassType(Id(_))),param(Id(R26_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 5))

    def test_6(self):
        line = '''Class T:_{}Class cR:_{}Class _{$0(J:Array [Float ,0b1100001];L9k0,_,A:Array [Array [Array [Int ,0xB1],03_4_7435_2],0B1]){Continue ;} }Class jH_:B_l_{Val w_U:y;}Class r1_tT:_61_{}'''
        expect = '''Program([ClassDecl(Id(T),Id(_),[]),ClassDecl(Id(cR),Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id($0),Static,[param(Id(J),ArrayType(97,FloatType)),param(Id(L9k0),ArrayType(1,ArrayType(948458,ArrayType(177,IntType)))),param(Id(_),ArrayType(1,ArrayType(948458,ArrayType(177,IntType)))),param(Id(A),ArrayType(1,ArrayType(948458,ArrayType(177,IntType))))],Block([Continue]))]),ClassDecl(Id(jH_),Id(B_l_),[AttributeDecl(Instance,ConstDecl(Id(w_U),ClassType(Id(y)),NullLiteral()))]),ClassDecl(Id(r1_tT),Id(_61_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 6))

    def test_7(self):
        line = '''Class A561q_:_{}Class _et__9{$_E__v(){ {}{}Continue ;}$5r(BNqQ:Boolean ;D_1:_;fI,BV,G:Int ){Break ;}Val $X:Array [Array [Array [Array [Boolean ,02_5],06],0X48],93];Constructor (_5,M_7_,VY:String ){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(A561q_),Id(_),[]),ClassDecl(Id(_et__9),[MethodDecl(Id($_E__v),Static,[],Block([Block([]),Block([]),Continue])),MethodDecl(Id($5r),Static,[param(Id(BNqQ),BoolType),param(Id(D_1),ClassType(Id(_))),param(Id(fI),IntType),param(Id(BV),IntType),param(Id(G),IntType)],Block([Break])),AttributeDecl(Static,ConstDecl(Id($X),ArrayType(93,ArrayType(72,ArrayType(6,ArrayType(21,BoolType)))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_5),StringType),param(Id(M_7_),StringType),param(Id(VY),StringType)],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 7))

    def test_8(self):
        line = '''Class _{Constructor (){}Var $_,$f_3,_:Array [String ,8_8];$0(_:_;w,AdE,Z5K__:Boolean ;Q0KE89v,A_:Float ;F,m_w_69_N,R0C,x,m:_;B_,z2_,A_:String ){}$_(u_:Array [String ,0B1]){} }Class _:Q80{}Class _J:____{$_(){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(88,StringType))),AttributeDecl(Static,VarDecl(Id($f_3),ArrayType(88,StringType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(88,StringType))),MethodDecl(Id($0),Static,[param(Id(_),ClassType(Id(_))),param(Id(w),BoolType),param(Id(AdE),BoolType),param(Id(Z5K__),BoolType),param(Id(Q0KE89v),FloatType),param(Id(A_),FloatType),param(Id(F),ClassType(Id(_))),param(Id(m_w_69_N),ClassType(Id(_))),param(Id(R0C),ClassType(Id(_))),param(Id(x),ClassType(Id(_))),param(Id(m),ClassType(Id(_))),param(Id(B_),StringType),param(Id(z2_),StringType),param(Id(A_),StringType)],Block([])),MethodDecl(Id($_),Static,[param(Id(u_),ArrayType(1,StringType))],Block([]))]),ClassDecl(Id(_),Id(Q80),[]),ClassDecl(Id(_J),Id(____),[MethodDecl(Id($_),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 8))

    def test_9(self):
        line = '''Class __18:_{Constructor (){} }Class _3:G{}Class _2:_{$i(bf:g;A:Int ;a,a_0:Boolean ;_,N0_:Array [Array [Array [Float ,050],050],0b1]){ {} }_i(____:Int ;_:_;I_,_k9,_,TK,_:Array [Array [Array [Int ,1],0X9_2_8],0b111010]){} }Class _{Val $P,Y,w,$5,_,E,w:Array [Array [Array [Boolean ,0x9],0324],050];}'''
        expect = '''Program([ClassDecl(Id(__18),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_3),Id(G),[]),ClassDecl(Id(_2),Id(_),[MethodDecl(Id($i),Static,[param(Id(bf),ClassType(Id(g))),param(Id(A),IntType),param(Id(a),BoolType),param(Id(a_0),BoolType),param(Id(_),ArrayType(1,ArrayType(40,ArrayType(40,FloatType)))),param(Id(N0_),ArrayType(1,ArrayType(40,ArrayType(40,FloatType))))],Block([Block([])])),MethodDecl(Id(_i),Instance,[param(Id(____),IntType),param(Id(_),ClassType(Id(_))),param(Id(I_),ArrayType(58,ArrayType(2344,ArrayType(1,IntType)))),param(Id(_k9),ArrayType(58,ArrayType(2344,ArrayType(1,IntType)))),param(Id(_),ArrayType(58,ArrayType(2344,ArrayType(1,IntType)))),param(Id(TK),ArrayType(58,ArrayType(2344,ArrayType(1,IntType)))),param(Id(_),ArrayType(58,ArrayType(2344,ArrayType(1,IntType))))],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($P),ArrayType(40,ArrayType(212,ArrayType(9,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(Y),ArrayType(40,ArrayType(212,ArrayType(9,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(w),ArrayType(40,ArrayType(212,ArrayType(9,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($5),ArrayType(40,ArrayType(212,ArrayType(9,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(40,ArrayType(212,ArrayType(9,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(E),ArrayType(40,ArrayType(212,ArrayType(9,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(w),ArrayType(40,ArrayType(212,ArrayType(9,BoolType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 9))

    def test_10(self):
        line = '''Class _:_{Constructor (){}Destructor (){Continue ;} }Class w:j2{}Class _p{K(__Yj_xt:Boolean ;N7:Array [Array [String ,69],0B110010]){} }Class __4:K{}Class DQ:j{Constructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))]),ClassDecl(Id(w),Id(j2),[]),ClassDecl(Id(_p),[MethodDecl(Id(K),Instance,[param(Id(__Yj_xt),BoolType),param(Id(N7),ArrayType(50,ArrayType(69,StringType)))],Block([]))]),ClassDecl(Id(__4),Id(K),[]),ClassDecl(Id(DQ),Id(j),[MethodDecl(Id(Constructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 10))

    def test_11(self):
        line = '''Class R:Ic{Destructor (){} }Class i0_:E_{Constructor (H52:_){Break ;}Constructor (rL,K_,_,_954,Q:Boolean ;_:Array [Array [Float ,0X2C],0B111101];V,_5p,A:Zy1R){}$Ae(){}Constructor (g,_87:Boolean ;A,G,O:Array [Array [Float ,0B1],036];I:Array [String ,0X7]){Break ;{} }$Rm0_(){}$Q(){Break ;} }'''
        expect = '''Program([ClassDecl(Id(R),Id(Ic),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(i0_),Id(E_),[MethodDecl(Id(Constructor),Instance,[param(Id(H52),ClassType(Id(_)))],Block([Break])),MethodDecl(Id(Constructor),Instance,[param(Id(rL),BoolType),param(Id(K_),BoolType),param(Id(_),BoolType),param(Id(_954),BoolType),param(Id(Q),BoolType),param(Id(_),ArrayType(61,ArrayType(44,FloatType))),param(Id(V),ClassType(Id(Zy1R))),param(Id(_5p),ClassType(Id(Zy1R))),param(Id(A),ClassType(Id(Zy1R)))],Block([])),MethodDecl(Id($Ae),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(g),BoolType),param(Id(_87),BoolType),param(Id(A),ArrayType(30,ArrayType(1,FloatType))),param(Id(G),ArrayType(30,ArrayType(1,FloatType))),param(Id(O),ArrayType(30,ArrayType(1,FloatType))),param(Id(I),ArrayType(7,StringType))],Block([Break,Block([])])),MethodDecl(Id($Rm0_),Static,[],Block([])),MethodDecl(Id($Q),Static,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 11))

    def test_12(self):
        line = '''Class _{}Class _1_6H{}Class yD4m:_{Constructor (Q,_5_:Array [Array [Int ,04],8];__,_,G3,_:Array [Array [Array [Array [Float ,0100],0X24],0b1],0b1110];_,a2f_:Float ;__:Int ;K,_:_jr_X){}Constructor (){}Val _,t4:Float ;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_1_6H),[]),ClassDecl(Id(yD4m),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(Q),ArrayType(8,ArrayType(4,IntType))),param(Id(_5_),ArrayType(8,ArrayType(4,IntType))),param(Id(__),ArrayType(14,ArrayType(1,ArrayType(36,ArrayType(64,FloatType))))),param(Id(_),ArrayType(14,ArrayType(1,ArrayType(36,ArrayType(64,FloatType))))),param(Id(G3),ArrayType(14,ArrayType(1,ArrayType(36,ArrayType(64,FloatType))))),param(Id(_),ArrayType(14,ArrayType(1,ArrayType(36,ArrayType(64,FloatType))))),param(Id(_),FloatType),param(Id(a2f_),FloatType),param(Id(__),IntType),param(Id(K),ClassType(Id(_jr_X))),param(Id(_),ClassType(Id(_jr_X)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(t4),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 12))

    def test_13(self):
        line = '''Class _33:__{Var $21,$4_8:Array [Array [Array [Boolean ,0141],0141],0B1];}Class _{$3(){}Val $_,Y,O,$A:Array [Array [String ,0141],4_8_5];}Class _{Val q,$_Z,$_6K,$_q,W_,$_:Int ;}Class _G9{}'''
        expect = '''Program([ClassDecl(Id(_33),Id(__),[AttributeDecl(Static,VarDecl(Id($21),ArrayType(1,ArrayType(97,ArrayType(97,BoolType))))),AttributeDecl(Static,VarDecl(Id($4_8),ArrayType(1,ArrayType(97,ArrayType(97,BoolType)))))]),ClassDecl(Id(_),[MethodDecl(Id($3),Static,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(485,ArrayType(97,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(Y),ArrayType(485,ArrayType(97,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(O),ArrayType(485,ArrayType(97,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($A),ArrayType(485,ArrayType(97,StringType)),None))]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(q),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_Z),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_6K),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_q),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(W_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_),IntType,None))]),ClassDecl(Id(_G9),[])])'''
        self.assertTrue(TestAST.test(line, expect, 13))

    def test_14(self):
        line = '''Class _{Var $0:h;Var M:Array [Int ,0x22];}Class kU6O___{Var Y_,$_:Int ;Val $I:_;}Class G:r{}Class U92:e{}Class _ko4{$I9(a,__10:Boolean ;q2_:k_;PU6,_IC,_G_:y0;_,b:Array [Boolean ,7_4_6]){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($0),ClassType(Id(h)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(M),ArrayType(34,IntType)))]),ClassDecl(Id(kU6O___),[AttributeDecl(Instance,VarDecl(Id(Y_),IntType)),AttributeDecl(Static,VarDecl(Id($_),IntType)),AttributeDecl(Static,ConstDecl(Id($I),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(G),Id(r),[]),ClassDecl(Id(U92),Id(e),[]),ClassDecl(Id(_ko4),[MethodDecl(Id($I9),Static,[param(Id(a),BoolType),param(Id(__10),BoolType),param(Id(q2_),ClassType(Id(k_))),param(Id(PU6),ClassType(Id(y0))),param(Id(_IC),ClassType(Id(y0))),param(Id(_G_),ClassType(Id(y0))),param(Id(_),ArrayType(746,BoolType)),param(Id(b),ArrayType(746,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 14))

    def test_15(self):
        line = '''Class q{Destructor (){Continue ;}Constructor (_,z,_:i){} }Class W_c21n8521I{}Class _:z_h{}Class _{Constructor (R7M,B,_B:Array [Int ,0b1]){} }Class I7:_{Val __,$3:Array [String ,0b111100];}Class r_{Var $J,$__:String ;Constructor (){}$2_6(_,Pkm_tgbX,_6,D7__8:y){} }Class g{}'''
        expect = '''Program([ClassDecl(Id(q),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(i))),param(Id(z),ClassType(Id(i))),param(Id(_),ClassType(Id(i)))],Block([]))]),ClassDecl(Id(W_c21n8521I),[]),ClassDecl(Id(_),Id(z_h),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(R7M),ArrayType(1,IntType)),param(Id(B),ArrayType(1,IntType)),param(Id(_B),ArrayType(1,IntType))],Block([]))]),ClassDecl(Id(I7),Id(_),[AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(60,StringType),None)),AttributeDecl(Static,ConstDecl(Id($3),ArrayType(60,StringType),None))]),ClassDecl(Id(r_),[AttributeDecl(Static,VarDecl(Id($J),StringType)),AttributeDecl(Static,VarDecl(Id($__),StringType)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($2_6),Static,[param(Id(_),ClassType(Id(y))),param(Id(Pkm_tgbX),ClassType(Id(y))),param(Id(_6),ClassType(Id(y))),param(Id(D7__8),ClassType(Id(y)))],Block([]))]),ClassDecl(Id(g),[])])'''
        self.assertTrue(TestAST.test(line, expect, 15))

    def test_16(self):
        line = '''Class o{Constructor (M0:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0b1001110],06],0X47],0x1F],0B101],067_0_5],04],0b1001110],0b1001110],0125]){}Destructor (){} }Class z84r{}Class G:_7{}Class Dz:_U{}Class H_{$u(_:G;N:String ;X_x,__:_;XF_,x,u,_U:_D;_s_,RK,O,J_,_5,ui:Array [Array [Int ,0x1F],0X47]){} }Class _W:__8_y{Var $_,$0_,Z_,_:Float ;}'''
        expect = '''Program([ClassDecl(Id(o),[MethodDecl(Id(Constructor),Instance,[param(Id(M0),ArrayType(85,ArrayType(78,ArrayType(78,ArrayType(4,ArrayType(3525,ArrayType(5,ArrayType(31,ArrayType(71,ArrayType(6,ArrayType(78,FloatType)))))))))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(z84r),[]),ClassDecl(Id(G),Id(_7),[]),ClassDecl(Id(Dz),Id(_U),[]),ClassDecl(Id(H_),[MethodDecl(Id($u),Static,[param(Id(_),ClassType(Id(G))),param(Id(N),StringType),param(Id(X_x),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(XF_),ClassType(Id(_D))),param(Id(x),ClassType(Id(_D))),param(Id(u),ClassType(Id(_D))),param(Id(_U),ClassType(Id(_D))),param(Id(_s_),ArrayType(71,ArrayType(31,IntType))),param(Id(RK),ArrayType(71,ArrayType(31,IntType))),param(Id(O),ArrayType(71,ArrayType(31,IntType))),param(Id(J_),ArrayType(71,ArrayType(31,IntType))),param(Id(_5),ArrayType(71,ArrayType(31,IntType))),param(Id(ui),ArrayType(71,ArrayType(31,IntType)))],Block([]))]),ClassDecl(Id(_W),Id(__8_y),[AttributeDecl(Static,VarDecl(Id($_),FloatType)),AttributeDecl(Static,VarDecl(Id($0_),FloatType)),AttributeDecl(Instance,VarDecl(Id(Z_),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 16))

    def test_17(self):
        line = '''Class _0L_{Constructor (_J:Boolean ;n3_7,_,t4,_2d,_,_2:_){}Destructor (){} }Class N{Var U:_J5N;}Class dL5:_oP_{k(Mn,z,V_9_l,__4:l1;T_,GSiZ,w2,R_6:Boolean ){} }Class Ta{$_U3(__4_,xO__v684h_P,m,_,_,n_,uN_4MS,_,m:Array [Array [Array [Array [String ,01],0xD],60],0X2_7_9];jq:Array [Boolean ,0B1];_:n;zk:Int ;_,_:_){} }Class F:k_{Val $F:Boolean ;Var h0,$Y:String ;}'''
        expect = '''Program([ClassDecl(Id(_0L_),[MethodDecl(Id(Constructor),Instance,[param(Id(_J),BoolType),param(Id(n3_7),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(t4),ClassType(Id(_))),param(Id(_2d),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_2),ClassType(Id(_)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(N),[AttributeDecl(Instance,VarDecl(Id(U),ClassType(Id(_J5N)),NullLiteral()))]),ClassDecl(Id(dL5),Id(_oP_),[MethodDecl(Id(k),Instance,[param(Id(Mn),ClassType(Id(l1))),param(Id(z),ClassType(Id(l1))),param(Id(V_9_l),ClassType(Id(l1))),param(Id(__4),ClassType(Id(l1))),param(Id(T_),BoolType),param(Id(GSiZ),BoolType),param(Id(w2),BoolType),param(Id(R_6),BoolType)],Block([]))]),ClassDecl(Id(Ta),[MethodDecl(Id($_U3),Static,[param(Id(__4_),ArrayType(633,ArrayType(60,ArrayType(13,ArrayType(1,StringType))))),param(Id(xO__v684h_P),ArrayType(633,ArrayType(60,ArrayType(13,ArrayType(1,StringType))))),param(Id(m),ArrayType(633,ArrayType(60,ArrayType(13,ArrayType(1,StringType))))),param(Id(_),ArrayType(633,ArrayType(60,ArrayType(13,ArrayType(1,StringType))))),param(Id(_),ArrayType(633,ArrayType(60,ArrayType(13,ArrayType(1,StringType))))),param(Id(n_),ArrayType(633,ArrayType(60,ArrayType(13,ArrayType(1,StringType))))),param(Id(uN_4MS),ArrayType(633,ArrayType(60,ArrayType(13,ArrayType(1,StringType))))),param(Id(_),ArrayType(633,ArrayType(60,ArrayType(13,ArrayType(1,StringType))))),param(Id(m),ArrayType(633,ArrayType(60,ArrayType(13,ArrayType(1,StringType))))),param(Id(jq),ArrayType(1,BoolType)),param(Id(_),ClassType(Id(n))),param(Id(zk),IntType),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(F),Id(k_),[AttributeDecl(Static,ConstDecl(Id($F),BoolType,None)),AttributeDecl(Instance,VarDecl(Id(h0),StringType)),AttributeDecl(Static,VarDecl(Id($Y),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 17))

    def test_18(self):
        line = '''Class _j{Var _:V;Var $Z,_,_H:_;K(Wm80,K_7:String ;_,Z_N5:Array [Array [Array [Array [Int ,036],72],02],0X42];_,EE0:Array [Int ,0x5_6];m:Boolean ;_U:q;_8:Boolean ){} }Class _f_r2:____K{Destructor (){} }Class O:_77yC_{}Class _{}Class __:M_{Val HP__:Float ;}Class _{}'''
        expect = '''Program([ClassDecl(Id(_j),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(V)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($Z),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_H),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(K),Instance,[param(Id(Wm80),StringType),param(Id(K_7),StringType),param(Id(_),ArrayType(66,ArrayType(2,ArrayType(72,ArrayType(30,IntType))))),param(Id(Z_N5),ArrayType(66,ArrayType(2,ArrayType(72,ArrayType(30,IntType))))),param(Id(_),ArrayType(86,IntType)),param(Id(EE0),ArrayType(86,IntType)),param(Id(m),BoolType),param(Id(_U),ClassType(Id(q))),param(Id(_8),BoolType)],Block([]))]),ClassDecl(Id(_f_r2),Id(____K),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(O),Id(_77yC_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(__),Id(M_),[AttributeDecl(Instance,ConstDecl(Id(HP__),FloatType,None))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 18))

    def test_19(self):
        line = '''Class _{X_0_(_:Array [String ,0XA_14];_,n_,_M:_6mD_;e:Array [String ,0X1_6];ZIm,_6_x,_:Array [Array [Array [Boolean ,0X1E],0X8],0b1011];_8a,w,x:Boolean ;__,_n5C:Int ;__M27:Boolean ;_,_:_){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(X_0_),Instance,[param(Id(_),ArrayType(2580,StringType)),param(Id(_),ClassType(Id(_6mD_))),param(Id(n_),ClassType(Id(_6mD_))),param(Id(_M),ClassType(Id(_6mD_))),param(Id(e),ArrayType(22,StringType)),param(Id(ZIm),ArrayType(11,ArrayType(8,ArrayType(30,BoolType)))),param(Id(_6_x),ArrayType(11,ArrayType(8,ArrayType(30,BoolType)))),param(Id(_),ArrayType(11,ArrayType(8,ArrayType(30,BoolType)))),param(Id(_8a),BoolType),param(Id(w),BoolType),param(Id(x),BoolType),param(Id(__),IntType),param(Id(_n5C),IntType),param(Id(__M27),BoolType),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 19))

    def test_20(self):
        line = '''Class _:__o{Destructor (){} }Class P122W:qm8{_(F:String ;_6:r2_5h__D__;_0,V:Array [Array [Array [Array [String ,0B1010111],0B1],0b1001010],47];__,_:Array [Array [Boolean ,0b1],0B1];Cu:Int ;__v:Int ;_1,_,C_:A__;_I,_1o7:Array [Int ,3];O,_:Array [Array [String ,0B1010111],077];_,_:Array [String ,05]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(__o),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(P122W),Id(qm8),[MethodDecl(Id(_),Instance,[param(Id(F),StringType),param(Id(_6),ClassType(Id(r2_5h__D__))),param(Id(_0),ArrayType(47,ArrayType(74,ArrayType(1,ArrayType(87,StringType))))),param(Id(V),ArrayType(47,ArrayType(74,ArrayType(1,ArrayType(87,StringType))))),param(Id(__),ArrayType(1,ArrayType(1,BoolType))),param(Id(_),ArrayType(1,ArrayType(1,BoolType))),param(Id(Cu),IntType),param(Id(__v),IntType),param(Id(_1),ClassType(Id(A__))),param(Id(_),ClassType(Id(A__))),param(Id(C_),ClassType(Id(A__))),param(Id(_I),ArrayType(3,IntType)),param(Id(_1o7),ArrayType(3,IntType)),param(Id(O),ArrayType(63,ArrayType(87,StringType))),param(Id(_),ArrayType(63,ArrayType(87,StringType))),param(Id(_),ArrayType(5,StringType)),param(Id(_),ArrayType(5,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 20))

    def test_21(self):
        line = '''Class NZ_:L_66{}Class _U9_H_:_17{}Class _{Constructor (__:Array [Boolean ,3];m,v:__6;_371,_,I,_,___:Array [Array [Float ,2],0b1_01]){} }Class G:m_L_{Val b:Array [Float ,3];}'''
        expect = '''Program([ClassDecl(Id(NZ_),Id(L_66),[]),ClassDecl(Id(_U9_H_),Id(_17),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(3,BoolType)),param(Id(m),ClassType(Id(__6))),param(Id(v),ClassType(Id(__6))),param(Id(_371),ArrayType(5,ArrayType(2,FloatType))),param(Id(_),ArrayType(5,ArrayType(2,FloatType))),param(Id(I),ArrayType(5,ArrayType(2,FloatType))),param(Id(_),ArrayType(5,ArrayType(2,FloatType))),param(Id(___),ArrayType(5,ArrayType(2,FloatType)))],Block([]))]),ClassDecl(Id(G),Id(m_L_),[AttributeDecl(Instance,ConstDecl(Id(b),ArrayType(3,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 21))

    def test_22(self):
        line = '''Class _{}Class D{Val $6,$3u,$_:Array [Array [Array [Boolean ,07],05_6],3];}Class Z:J{Constructor (){} }Class _:_{Constructor (R:Array [Array [Array [String ,0B1_0],0xF_C],0b1_0];_,_6_t,B,_8vp:Int ;P,lB4,k,_N__,xw:o__){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(D),[AttributeDecl(Static,ConstDecl(Id($6),ArrayType(3,ArrayType(46,ArrayType(7,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($3u),ArrayType(3,ArrayType(46,ArrayType(7,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(3,ArrayType(46,ArrayType(7,BoolType))),None))]),ClassDecl(Id(Z),Id(J),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(R),ArrayType(2,ArrayType(252,ArrayType(2,StringType)))),param(Id(_),IntType),param(Id(_6_t),IntType),param(Id(B),IntType),param(Id(_8vp),IntType),param(Id(P),ClassType(Id(o__))),param(Id(lB4),ClassType(Id(o__))),param(Id(k),ClassType(Id(o__))),param(Id(_N__),ClassType(Id(o__))),param(Id(xw),ClassType(Id(o__)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 22))

    def test_23(self):
        line = '''Class J{Constructor (){}Constructor (z:Int ;j,c4,K__8:String ;k_,a_5R,N,DT,__,_:N;_:String ;_g,_A:Boolean ;p1:String ;y,_:i1;U650,e,C__:_8){} }Class N_:__u_v{$O__i_(__9,y2:String ;g2O:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(J),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(z),IntType),param(Id(j),StringType),param(Id(c4),StringType),param(Id(K__8),StringType),param(Id(k_),ClassType(Id(N))),param(Id(a_5R),ClassType(Id(N))),param(Id(N),ClassType(Id(N))),param(Id(DT),ClassType(Id(N))),param(Id(__),ClassType(Id(N))),param(Id(_),ClassType(Id(N))),param(Id(_),StringType),param(Id(_g),BoolType),param(Id(_A),BoolType),param(Id(p1),StringType),param(Id(y),ClassType(Id(i1))),param(Id(_),ClassType(Id(i1))),param(Id(U650),ClassType(Id(_8))),param(Id(e),ClassType(Id(_8))),param(Id(C__),ClassType(Id(_8)))],Block([]))]),ClassDecl(Id(N_),Id(__u_v),[MethodDecl(Id($O__i_),Static,[param(Id(__9),StringType),param(Id(y2),StringType),param(Id(g2O),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 23))

    def test_24(self):
        line = '''Class H_:__{Destructor (){Continue ;}Constructor (z:Int ;___:Array [Float ,06];oy80:String ;_,n,__J50:F;rI_4:__;w,_:x){}_(_:H__){} }Class _F{Val $46,$_,$H8,$__97,B:Array [Array [Array [Int ,0xC],02_4],0x57];}Class ovS{}'''
        expect = '''Program([ClassDecl(Id(H_),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(z),IntType),param(Id(___),ArrayType(6,FloatType)),param(Id(oy80),StringType),param(Id(_),ClassType(Id(F))),param(Id(n),ClassType(Id(F))),param(Id(__J50),ClassType(Id(F))),param(Id(rI_4),ClassType(Id(__))),param(Id(w),ClassType(Id(x))),param(Id(_),ClassType(Id(x)))],Block([])),MethodDecl(Id(_),Instance,[param(Id(_),ClassType(Id(H__)))],Block([]))]),ClassDecl(Id(_F),[AttributeDecl(Static,ConstDecl(Id($46),ArrayType(87,ArrayType(20,ArrayType(12,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(87,ArrayType(20,ArrayType(12,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($H8),ArrayType(87,ArrayType(20,ArrayType(12,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($__97),ArrayType(87,ArrayType(20,ArrayType(12,IntType))),None)),AttributeDecl(Instance,ConstDecl(Id(B),ArrayType(87,ArrayType(20,ArrayType(12,IntType))),None))]),ClassDecl(Id(ovS),[])])'''
        self.assertTrue(TestAST.test(line, expect, 24))

    def test_25(self):
        line = '''Class y6j_SU:l118vi{}Class Oj:p{}Class J{Var $9T,hR_:___5;Constructor (Z,D,t:Float ;o,_,_hZ_,_u,e8:_4;t,b_:Float ;_,_q_8:L_o85;O:Boolean ;_3,_7_14G9,_:Array [Array [Array [String ,100],0x7],100]){Break ;} }'''
        expect = '''Program([ClassDecl(Id(y6j_SU),Id(l118vi),[]),ClassDecl(Id(Oj),Id(p),[]),ClassDecl(Id(J),[AttributeDecl(Static,VarDecl(Id($9T),ClassType(Id(___5)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(hR_),ClassType(Id(___5)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(Z),FloatType),param(Id(D),FloatType),param(Id(t),FloatType),param(Id(o),ClassType(Id(_4))),param(Id(_),ClassType(Id(_4))),param(Id(_hZ_),ClassType(Id(_4))),param(Id(_u),ClassType(Id(_4))),param(Id(e8),ClassType(Id(_4))),param(Id(t),FloatType),param(Id(b_),FloatType),param(Id(_),ClassType(Id(L_o85))),param(Id(_q_8),ClassType(Id(L_o85))),param(Id(O),BoolType),param(Id(_3),ArrayType(100,ArrayType(7,ArrayType(100,StringType)))),param(Id(_7_14G9),ArrayType(100,ArrayType(7,ArrayType(100,StringType)))),param(Id(_),ArrayType(100,ArrayType(7,ArrayType(100,StringType))))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 25))

    def test_26(self):
        line = '''Class x{Constructor (z,_:Array [Array [Array [Array [Array [Float ,0b101001],0x4E],5],0b101001],0b1_00000];Y,_2Z,n_:String ;_4,s:String ;B:___;_V2k,j:_;T8U,W8,i2,O,_,i:Array [String ,0122]){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(x),[MethodDecl(Id(Constructor),Instance,[param(Id(z),ArrayType(32,ArrayType(41,ArrayType(5,ArrayType(78,ArrayType(41,FloatType)))))),param(Id(_),ArrayType(32,ArrayType(41,ArrayType(5,ArrayType(78,ArrayType(41,FloatType)))))),param(Id(Y),StringType),param(Id(_2Z),StringType),param(Id(n_),StringType),param(Id(_4),StringType),param(Id(s),StringType),param(Id(B),ClassType(Id(___))),param(Id(_V2k),ClassType(Id(_))),param(Id(j),ClassType(Id(_))),param(Id(T8U),ArrayType(82,StringType)),param(Id(W8),ArrayType(82,StringType)),param(Id(i2),ArrayType(82,StringType)),param(Id(O),ArrayType(82,StringType)),param(Id(_),ArrayType(82,StringType)),param(Id(i),ArrayType(82,StringType))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 26))

    def test_27(self):
        line = '''Class _6JRv:qk{Destructor (){}Val _:Array [Array [Array [Array [Array [Float ,40],0X3_2],0B1],0B101101],0b1];$K(){} }Class Q1_:z59O{}Class j:_{Var P:Int ;}Class g94hU_k:M__DD{Var __:_L;}'''
        expect = '''Program([ClassDecl(Id(_6JRv),Id(qk),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(45,ArrayType(1,ArrayType(50,ArrayType(40,FloatType))))),None)),MethodDecl(Id($K),Static,[],Block([]))]),ClassDecl(Id(Q1_),Id(z59O),[]),ClassDecl(Id(j),Id(_),[AttributeDecl(Instance,VarDecl(Id(P),IntType))]),ClassDecl(Id(g94hU_k),Id(M__DD),[AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(_L)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 27))

    def test_28(self):
        line = '''Class Iw:__t10{Val $6:Boolean ;}Class Y:U_{Destructor (){}Constructor (_:Array [Array [Array [Float ,60],0b100101],0x1_8];_:_;_,bS:Array [Boolean ,0B1100001];_9,_,___,n,_q,_:Array [Array [Array [Int ,05],03],0B1100001]){} }'''
        expect = '''Program([ClassDecl(Id(Iw),Id(__t10),[AttributeDecl(Static,ConstDecl(Id($6),BoolType,None))]),ClassDecl(Id(Y),Id(U_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(24,ArrayType(37,ArrayType(60,FloatType)))),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(97,BoolType)),param(Id(bS),ArrayType(97,BoolType)),param(Id(_9),ArrayType(97,ArrayType(3,ArrayType(5,IntType)))),param(Id(_),ArrayType(97,ArrayType(3,ArrayType(5,IntType)))),param(Id(___),ArrayType(97,ArrayType(3,ArrayType(5,IntType)))),param(Id(n),ArrayType(97,ArrayType(3,ArrayType(5,IntType)))),param(Id(_q),ArrayType(97,ArrayType(3,ArrayType(5,IntType)))),param(Id(_),ArrayType(97,ArrayType(3,ArrayType(5,IntType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 28))

    def test_29(self):
        line = '''Class j{}Class I{Constructor (___:Array [Array [Array [Float ,6],0b10],48];_:Array [Array [Array [Boolean ,04],022],0XF_9]){}Constructor (Gs,N__8Jx,k1,_,_,_:Boolean ;_,o,x_,J__:Array [Int ,0X53]){}Var _:String ;Destructor (){}Var $1,Tw,b0,$9__,$4H,v:_;Var $6,wI2:Float ;Destructor (){} }Class v:_{Destructor (){} }Class W{}Class iM_:_{O(){}Var $_bd_2_6:_;Var $mQ:Array [Array [Array [Boolean ,0306],48],0x1C];}'''
        expect = '''Program([ClassDecl(Id(j),[]),ClassDecl(Id(I),[MethodDecl(Id(Constructor),Instance,[param(Id(___),ArrayType(48,ArrayType(2,ArrayType(6,FloatType)))),param(Id(_),ArrayType(249,ArrayType(18,ArrayType(4,BoolType))))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(Gs),BoolType),param(Id(N__8Jx),BoolType),param(Id(k1),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(_),ArrayType(83,IntType)),param(Id(o),ArrayType(83,IntType)),param(Id(x_),ArrayType(83,IntType)),param(Id(J__),ArrayType(83,IntType))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),StringType)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($1),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Tw),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(b0),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($9__),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($4H),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(v),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($6),FloatType)),AttributeDecl(Instance,VarDecl(Id(wI2),FloatType)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(v),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(W),[]),ClassDecl(Id(iM_),Id(_),[MethodDecl(Id(O),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_bd_2_6),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($mQ),ArrayType(28,ArrayType(48,ArrayType(198,BoolType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 29))

    def test_30(self):
        line = '''Class t{}Class _:__{Constructor (_:_;p_47,Z_:_;_:Array [Array [String ,0B11],73];gg,e:Array [Array [Int ,0b1_0],73];_:Array [String ,0b10];_G,_:Array [Array [Array [Float ,2],03],0x1D]){} }Class w4{_(){} }'''
        expect = '''Program([ClassDecl(Id(t),[]),ClassDecl(Id(_),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(p_47),ClassType(Id(_))),param(Id(Z_),ClassType(Id(_))),param(Id(_),ArrayType(73,ArrayType(3,StringType))),param(Id(gg),ArrayType(73,ArrayType(2,IntType))),param(Id(e),ArrayType(73,ArrayType(2,IntType))),param(Id(_),ArrayType(2,StringType)),param(Id(_G),ArrayType(29,ArrayType(3,ArrayType(2,FloatType)))),param(Id(_),ArrayType(29,ArrayType(3,ArrayType(2,FloatType))))],Block([]))]),ClassDecl(Id(w4),[MethodDecl(Id(_),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 30))

    def test_31(self):
        line = '''Class v{Constructor (C,y,_9:Array [Float ,04];P,_,eYe:Array [Float ,32];_:Int ){Return ;} }Class __E__td:a{Val __m,t_:Array [Array [Array [Array [Array [Array [Array [Float ,32],0x2_D],0b1],0X434],013],07],32];}'''
        expect = '''Program([ClassDecl(Id(v),[MethodDecl(Id(Constructor),Instance,[param(Id(C),ArrayType(4,FloatType)),param(Id(y),ArrayType(4,FloatType)),param(Id(_9),ArrayType(4,FloatType)),param(Id(P),ArrayType(32,FloatType)),param(Id(_),ArrayType(32,FloatType)),param(Id(eYe),ArrayType(32,FloatType)),param(Id(_),IntType)],Block([Return()]))]),ClassDecl(Id(__E__td),Id(a),[AttributeDecl(Instance,ConstDecl(Id(__m),ArrayType(32,ArrayType(7,ArrayType(11,ArrayType(1076,ArrayType(1,ArrayType(45,ArrayType(32,FloatType))))))),None)),AttributeDecl(Instance,ConstDecl(Id(t_),ArrayType(32,ArrayType(7,ArrayType(11,ArrayType(1076,ArrayType(1,ArrayType(45,ArrayType(32,FloatType))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 31))

    def test_32(self):
        line = '''Class Z:t{$5s5(V,_:Int ;_6:Int ;ZQ:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0X7_5_38],0x2],71],0x5A],0x5A],0x39],052],0B11];Y,k4bi19m:Float ;m:__;_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(Z),Id(t),[MethodDecl(Id($5s5),Static,[param(Id(V),IntType),param(Id(_),IntType),param(Id(_6),IntType),param(Id(ZQ),ArrayType(3,ArrayType(42,ArrayType(57,ArrayType(90,ArrayType(90,ArrayType(71,ArrayType(2,ArrayType(30008,IntType))))))))),param(Id(Y),FloatType),param(Id(k4bi19m),FloatType),param(Id(m),ClassType(Id(__))),param(Id(_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 32))

    def test_33(self):
        line = '''Class _u2_1:t{}Class _:S{Destructor (){} }Class _{Val $2M,V,f:Array [Array [Array [Boolean ,0X2F],04],061];}Class W{Constructor (_b6:Array [Boolean ,0124];_,_v_R:Ug;_:_){} }'''
        expect = '''Program([ClassDecl(Id(_u2_1),Id(t),[]),ClassDecl(Id(_),Id(S),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($2M),ArrayType(49,ArrayType(4,ArrayType(47,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(V),ArrayType(49,ArrayType(4,ArrayType(47,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(f),ArrayType(49,ArrayType(4,ArrayType(47,BoolType))),None))]),ClassDecl(Id(W),[MethodDecl(Id(Constructor),Instance,[param(Id(_b6),ArrayType(84,BoolType)),param(Id(_),ClassType(Id(Ug))),param(Id(_v_R),ClassType(Id(Ug))),param(Id(_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 33))

    def test_34(self):
        line = '''Class P:X_e_I6{}Class C:L{}Class ___:U{$N_d(H:Array [Array [Array [Array [Float ,0x6_59],0X15],0x2],010]){}Constructor (){}Var Qv,$_,_,$___:Boolean ;Val $ys:_;Destructor (){}Constructor (){Continue ;Val L,P:String ;} }'''
        expect = '''Program([ClassDecl(Id(P),Id(X_e_I6),[]),ClassDecl(Id(C),Id(L),[]),ClassDecl(Id(___),Id(U),[MethodDecl(Id($N_d),Static,[param(Id(H),ArrayType(8,ArrayType(2,ArrayType(21,ArrayType(1625,FloatType)))))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(Qv),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Static,VarDecl(Id($___),BoolType)),AttributeDecl(Static,ConstDecl(Id($ys),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue,ConstDecl(Id(L),StringType,None),ConstDecl(Id(P),StringType,None)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 34))

    def test_35(self):
        line = '''Class __1q:D{Constructor (e,M8,_:i6;h,_,_:Boolean ;_61,_6127_y,_:String ;__:Array [Array [Array [Array [Array [Array [String ,03_1],0XA],8_8],055],055],3]){Break ;{Continue ;Val Q2b:Int ;} }}'''
        expect = '''Program([ClassDecl(Id(__1q),Id(D),[MethodDecl(Id(Constructor),Instance,[param(Id(e),ClassType(Id(i6))),param(Id(M8),ClassType(Id(i6))),param(Id(_),ClassType(Id(i6))),param(Id(h),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(_61),StringType),param(Id(_6127_y),StringType),param(Id(_),StringType),param(Id(__),ArrayType(3,ArrayType(45,ArrayType(45,ArrayType(88,ArrayType(10,ArrayType(25,StringType)))))))],Block([Break,Block([Continue,ConstDecl(Id(Q2b),IntType,None)])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 35))

    def test_36(self):
        line = '''Class _h_k{}Class n01Z{}Class R:_{Constructor (__,_,M1:_6;_:wV;t,___:Float ;_,U0:Array [Array [Boolean ,0B100],015];e8,YQ8:_U1__S;Y2E:Boolean ;t9:Array [Int ,3]){} }'''
        expect = '''Program([ClassDecl(Id(_h_k),[]),ClassDecl(Id(n01Z),[]),ClassDecl(Id(R),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(_6))),param(Id(_),ClassType(Id(_6))),param(Id(M1),ClassType(Id(_6))),param(Id(_),ClassType(Id(wV))),param(Id(t),FloatType),param(Id(___),FloatType),param(Id(_),ArrayType(13,ArrayType(4,BoolType))),param(Id(U0),ArrayType(13,ArrayType(4,BoolType))),param(Id(e8),ClassType(Id(_U1__S))),param(Id(YQ8),ClassType(Id(_U1__S))),param(Id(Y2E),BoolType),param(Id(t9),ArrayType(3,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 36))

    def test_37(self):
        line = '''Class B_:__{Constructor (__n8,__x,_,__,__7Qt:Array [String ,0X37];_:Float ;J_g9_59__:Int ;iE0a:_;_,f,_:Array [Array [Array [Array [Boolean ,0x4],8],025],042_40]){} }Class _{}Class _W:_4BJ{}'''
        expect = '''Program([ClassDecl(Id(B_),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(__n8),ArrayType(55,StringType)),param(Id(__x),ArrayType(55,StringType)),param(Id(_),ArrayType(55,StringType)),param(Id(__),ArrayType(55,StringType)),param(Id(__7Qt),ArrayType(55,StringType)),param(Id(_),FloatType),param(Id(J_g9_59__),IntType),param(Id(iE0a),ClassType(Id(_))),param(Id(_),ArrayType(2208,ArrayType(21,ArrayType(8,ArrayType(4,BoolType))))),param(Id(f),ArrayType(2208,ArrayType(21,ArrayType(8,ArrayType(4,BoolType))))),param(Id(_),ArrayType(2208,ArrayType(21,ArrayType(8,ArrayType(4,BoolType)))))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_W),Id(_4BJ),[])])'''
        self.assertTrue(TestAST.test(line, expect, 37))

    def test_38(self):
        line = '''Class _{}Class _{Destructor (){Return ;}Destructor (){Continue ;}Val $J:Array [Boolean ,0131_66_5];}Class __:_A{Destructor (){}Var $_:Float ;Constructor (_:Int ){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Return()])),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($J),ArrayType(46005,BoolType),None))]),ClassDecl(Id(__),Id(_A),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_),FloatType)),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType)],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 38))

    def test_39(self):
        line = '''Class Z:i{}Class _:K_{Val $E,$6:Array [Array [Array [Array [Array [Boolean ,0x6A_3],0b1],0X63],33],0376];$M3(){}Val $N:Array [Array [Array [Array [Int ,0x1],33],0X63],2];}'''
        expect = '''Program([ClassDecl(Id(Z),Id(i),[]),ClassDecl(Id(_),Id(K_),[AttributeDecl(Static,ConstDecl(Id($E),ArrayType(254,ArrayType(33,ArrayType(99,ArrayType(1,ArrayType(1699,BoolType))))),None)),AttributeDecl(Static,ConstDecl(Id($6),ArrayType(254,ArrayType(33,ArrayType(99,ArrayType(1,ArrayType(1699,BoolType))))),None)),MethodDecl(Id($M3),Static,[],Block([])),AttributeDecl(Static,ConstDecl(Id($N),ArrayType(2,ArrayType(99,ArrayType(33,ArrayType(1,IntType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 39))

    def test_40(self):
        line = '''Class a4d1:_{Destructor (){Continue ;}Constructor (){}Var $_F:_9;Constructor (){Var _:Float ;}Constructor (_,__,_,_0,yw:Array [Float ,1];u,a__:Array [Int ,39];B_,A:Float ;w__,__:String ;_:Int ;q:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(a4d1),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_F),ClassType(Id(_9)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([VarDecl(Id(_),FloatType)])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,FloatType)),param(Id(__),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType)),param(Id(_0),ArrayType(1,FloatType)),param(Id(yw),ArrayType(1,FloatType)),param(Id(u),ArrayType(39,IntType)),param(Id(a__),ArrayType(39,IntType)),param(Id(B_),FloatType),param(Id(A),FloatType),param(Id(w__),StringType),param(Id(__),StringType),param(Id(_),IntType),param(Id(q),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 40))

    def test_41(self):
        line = '''Class ___8z:_{Destructor (){}_(V:Array [Array [Array [Array [Int ,066],0b1011011],066],22]){}$94(I_,e2__:String ;k_,x2h9:_;Fq6:czm;_I_:_){ {}Val I9_8,G_,_:Int ;} }Class xi{Var $1,_,d,$5:__F;Val $TK5a:Array [Float ,0b1011011];}'''
        expect = '''Program([ClassDecl(Id(___8z),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(V),ArrayType(22,ArrayType(54,ArrayType(91,ArrayType(54,IntType)))))],Block([])),MethodDecl(Id($94),Static,[param(Id(I_),StringType),param(Id(e2__),StringType),param(Id(k_),ClassType(Id(_))),param(Id(x2h9),ClassType(Id(_))),param(Id(Fq6),ClassType(Id(czm))),param(Id(_I_),ClassType(Id(_)))],Block([Block([]),ConstDecl(Id(I9_8),IntType,None),ConstDecl(Id(G_),IntType,None),ConstDecl(Id(_),IntType,None)]))]),ClassDecl(Id(xi),[AttributeDecl(Static,VarDecl(Id($1),ClassType(Id(__F)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(__F)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(d),ClassType(Id(__F)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($5),ClassType(Id(__F)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($TK5a),ArrayType(91,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 41))

    def test_42(self):
        line = '''Class j:_{}Class __:v__20{Val _:B_c;Constructor (_F,D:Array [Array [String ,075],0B1];_G_:l;w,_,b_:Boolean ){}Val __8N,$34I_,_:v;}Class W_{N(ZZZk9,___:Array [Float ,04]){} }'''
        expect = '''Program([ClassDecl(Id(j),Id(_),[]),ClassDecl(Id(__),Id(v__20),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(B_c)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_F),ArrayType(1,ArrayType(61,StringType))),param(Id(D),ArrayType(1,ArrayType(61,StringType))),param(Id(_G_),ClassType(Id(l))),param(Id(w),BoolType),param(Id(_),BoolType),param(Id(b_),BoolType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(__8N),ClassType(Id(v)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($34I_),ClassType(Id(v)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(v)),NullLiteral()))]),ClassDecl(Id(W_),[MethodDecl(Id(N),Instance,[param(Id(ZZZk9),ArrayType(4,FloatType)),param(Id(___),ArrayType(4,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 42))

    def test_43(self):
        line = '''Class _:_vEO{Var _:Array [Array [Array [Int ,0B1],0X47],0107];}Class _2:q_{_(_,_3,V:Array [Array [Array [Array [Array [Array [String ,0X8],0B10],0b100101],0B11000],0x83],03]){} }Class _:__{Destructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_vEO),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(71,ArrayType(71,ArrayType(1,IntType)))))]),ClassDecl(Id(_2),Id(q_),[MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(3,ArrayType(131,ArrayType(24,ArrayType(37,ArrayType(2,ArrayType(8,StringType))))))),param(Id(_3),ArrayType(3,ArrayType(131,ArrayType(24,ArrayType(37,ArrayType(2,ArrayType(8,StringType))))))),param(Id(V),ArrayType(3,ArrayType(131,ArrayType(24,ArrayType(37,ArrayType(2,ArrayType(8,StringType)))))))],Block([]))]),ClassDecl(Id(_),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 43))

    def test_44(self):
        line = '''Class V:p{$_lw(_:Int ;_,k,_:Boolean ){} }Class __I:Q{Constructor (a,__:String ;m5,Z3:T;n:Array [Array [Float ,7_3],062];__R__,d,Y,t:_;_0:Array [Array [Int ,0XA6],074]){}Var $c:h_;}'''
        expect = '''Program([ClassDecl(Id(V),Id(p),[MethodDecl(Id($_lw),Static,[param(Id(_),IntType),param(Id(_),BoolType),param(Id(k),BoolType),param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(__I),Id(Q),[MethodDecl(Id(Constructor),Instance,[param(Id(a),StringType),param(Id(__),StringType),param(Id(m5),ClassType(Id(T))),param(Id(Z3),ClassType(Id(T))),param(Id(n),ArrayType(50,ArrayType(73,FloatType))),param(Id(__R__),ClassType(Id(_))),param(Id(d),ClassType(Id(_))),param(Id(Y),ClassType(Id(_))),param(Id(t),ClassType(Id(_))),param(Id(_0),ArrayType(60,ArrayType(166,IntType)))],Block([])),AttributeDecl(Static,VarDecl(Id($c),ClassType(Id(h_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 44))

    def test_45(self):
        line = '''Class _07:O{}Class _{Var Di5_84mb,_V_8:Float ;Destructor (){ {}Val _:Array [Int ,0b1011];}$_H(s:Array [Int ,0B1];X:Array [Array [Array [String ,0b1011],032],0xC];_,__:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_07),Id(O),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(Di5_84mb),FloatType)),AttributeDecl(Instance,VarDecl(Id(_V_8),FloatType)),MethodDecl(Id(Destructor),Instance,[],Block([Block([]),ConstDecl(Id(_),ArrayType(11,IntType),None)])),MethodDecl(Id($_H),Static,[param(Id(s),ArrayType(1,IntType)),param(Id(X),ArrayType(12,ArrayType(26,ArrayType(11,StringType)))),param(Id(_),IntType),param(Id(__),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 45))

    def test_46(self):
        line = '''Class _:B_{$056_(a7,___D_,r5:Array [Array [Array [Array [String ,7],0XEF],0b100001],0X7];_6,t:Array [Array [Array [Int ,0b100001],81],5361]){} }Class i{Var $X,$_5t_mq:Array [String ,7];i(){} }Class n4:t{}Class _:T{}'''
        expect = '''Program([ClassDecl(Id(_),Id(B_),[MethodDecl(Id($056_),Static,[param(Id(a7),ArrayType(7,ArrayType(33,ArrayType(239,ArrayType(7,StringType))))),param(Id(___D_),ArrayType(7,ArrayType(33,ArrayType(239,ArrayType(7,StringType))))),param(Id(r5),ArrayType(7,ArrayType(33,ArrayType(239,ArrayType(7,StringType))))),param(Id(_6),ArrayType(5361,ArrayType(81,ArrayType(33,IntType)))),param(Id(t),ArrayType(5361,ArrayType(81,ArrayType(33,IntType))))],Block([]))]),ClassDecl(Id(i),[AttributeDecl(Static,VarDecl(Id($X),ArrayType(7,StringType))),AttributeDecl(Static,VarDecl(Id($_5t_mq),ArrayType(7,StringType))),MethodDecl(Id(i),Instance,[],Block([]))]),ClassDecl(Id(n4),Id(t),[]),ClassDecl(Id(_),Id(T),[])])'''
        self.assertTrue(TestAST.test(line, expect, 46))

    def test_47(self):
        line = '''Class h_:_{Constructor (T3:Boolean ;cD_1:Array [Array [Array [Boolean ,65],65],0xDE];p_,_,_:Array [Boolean ,0b100101]){} }Class L___E{}Class _{Destructor (){}Val $_,$__9:Array [Array [Array [Array [Array [Array [Array [Float ,0b1_0_0],025],0B100011],8],035_1],65],046_4_1];}'''
        expect = '''Program([ClassDecl(Id(h_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(T3),BoolType),param(Id(cD_1),ArrayType(222,ArrayType(65,ArrayType(65,BoolType)))),param(Id(p_),ArrayType(37,BoolType)),param(Id(_),ArrayType(37,BoolType)),param(Id(_),ArrayType(37,BoolType))],Block([]))]),ClassDecl(Id(L___E),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(2465,ArrayType(65,ArrayType(233,ArrayType(8,ArrayType(35,ArrayType(21,ArrayType(4,FloatType))))))),None)),AttributeDecl(Static,ConstDecl(Id($__9),ArrayType(2465,ArrayType(65,ArrayType(233,ArrayType(8,ArrayType(35,ArrayType(21,ArrayType(4,FloatType))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 47))

    def test_48(self):
        line = '''Class g_:M1B1_k1_8k6{$2w(GR,E9V:Array [String ,0x35];R,__8,_:Array [Int ,2_33];_,BZ,_1_qRK,V3:Array [Array [Array [Array [String ,025],0xF],5],01];n:Ibl_;y,B7,_,_:xd;_:String ;J:String ;_9,w4,O,_:_84_1w_){Return ;}Val _,$_,h1,_:m;$7(){} }'''
        expect = '''Program([ClassDecl(Id(g_),Id(M1B1_k1_8k6),[MethodDecl(Id($2w),Static,[param(Id(GR),ArrayType(53,StringType)),param(Id(E9V),ArrayType(53,StringType)),param(Id(R),ArrayType(233,IntType)),param(Id(__8),ArrayType(233,IntType)),param(Id(_),ArrayType(233,IntType)),param(Id(_),ArrayType(1,ArrayType(5,ArrayType(15,ArrayType(21,StringType))))),param(Id(BZ),ArrayType(1,ArrayType(5,ArrayType(15,ArrayType(21,StringType))))),param(Id(_1_qRK),ArrayType(1,ArrayType(5,ArrayType(15,ArrayType(21,StringType))))),param(Id(V3),ArrayType(1,ArrayType(5,ArrayType(15,ArrayType(21,StringType))))),param(Id(n),ClassType(Id(Ibl_))),param(Id(y),ClassType(Id(xd))),param(Id(B7),ClassType(Id(xd))),param(Id(_),ClassType(Id(xd))),param(Id(_),ClassType(Id(xd))),param(Id(_),StringType),param(Id(J),StringType),param(Id(_9),ClassType(Id(_84_1w_))),param(Id(w4),ClassType(Id(_84_1w_))),param(Id(O),ClassType(Id(_84_1w_))),param(Id(_),ClassType(Id(_84_1w_)))],Block([Return()])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(m)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(m)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(h1),ClassType(Id(m)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(m)),NullLiteral())),MethodDecl(Id($7),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 48))

    def test_49(self):
        line = '''Class _V:_Azzv{}Class _{}Class _:_{Var Y:Array [Boolean ,052];W(_7,M,_,rr:Array [Float ,0x1_EA_6];G:c_;U2_25,e:Array [String ,55];_,_,B,_,_,s,d,F_,_:Array [String ,0X3_DD]){} }'''
        expect = '''Program([ClassDecl(Id(_V),Id(_Azzv),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(Y),ArrayType(42,BoolType))),MethodDecl(Id(W),Instance,[param(Id(_7),ArrayType(7846,FloatType)),param(Id(M),ArrayType(7846,FloatType)),param(Id(_),ArrayType(7846,FloatType)),param(Id(rr),ArrayType(7846,FloatType)),param(Id(G),ClassType(Id(c_))),param(Id(U2_25),ArrayType(55,StringType)),param(Id(e),ArrayType(55,StringType)),param(Id(_),ArrayType(989,StringType)),param(Id(_),ArrayType(989,StringType)),param(Id(B),ArrayType(989,StringType)),param(Id(_),ArrayType(989,StringType)),param(Id(_),ArrayType(989,StringType)),param(Id(s),ArrayType(989,StringType)),param(Id(d),ArrayType(989,StringType)),param(Id(F_),ArrayType(989,StringType)),param(Id(_),ArrayType(989,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 49))

    def test_50(self):
        line = '''Class __j_6{}Class _{Destructor (){}Constructor (b_:K_;_,_:String ){ {} }Val __:Array [Array [Float ,04],0X52];}Class d8_{$_Cv(I:Int ;xc_,_,_8:Int ;_4130,_:String ){} }Class C:_{Destructor (){} }Class _H_1U{}Class _C_:_{}'''
        expect = '''Program([ClassDecl(Id(__j_6),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(b_),ClassType(Id(K_))),param(Id(_),StringType),param(Id(_),StringType)],Block([Block([])])),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(82,ArrayType(4,FloatType)),None))]),ClassDecl(Id(d8_),[MethodDecl(Id($_Cv),Static,[param(Id(I),IntType),param(Id(xc_),IntType),param(Id(_),IntType),param(Id(_8),IntType),param(Id(_4130),StringType),param(Id(_),StringType)],Block([]))]),ClassDecl(Id(C),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_H_1U),[]),ClassDecl(Id(_C_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 50))

    def test_51(self):
        line = '''Class C:_{Var $j3,h,$L_o,$_p:Array [Array [Int ,07],0b10_1];}Class E{$088(_:Array [Array [Array [Float ,0xA],05],0B1];_Y9F:Array [Array [String ,0x7],07];_0D6_:Array [String ,07]){}_(){} }Class _{}Class _7:P{Val $8,_:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(C),Id(_),[AttributeDecl(Static,VarDecl(Id($j3),ArrayType(5,ArrayType(7,IntType)))),AttributeDecl(Instance,VarDecl(Id(h),ArrayType(5,ArrayType(7,IntType)))),AttributeDecl(Static,VarDecl(Id($L_o),ArrayType(5,ArrayType(7,IntType)))),AttributeDecl(Static,VarDecl(Id($_p),ArrayType(5,ArrayType(7,IntType))))]),ClassDecl(Id(E),[MethodDecl(Id($088),Static,[param(Id(_),ArrayType(1,ArrayType(5,ArrayType(10,FloatType)))),param(Id(_Y9F),ArrayType(7,ArrayType(7,StringType))),param(Id(_0D6_),ArrayType(7,StringType))],Block([])),MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_7),Id(P),[AttributeDecl(Static,ConstDecl(Id($8),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 51))

    def test_52(self):
        line = '''Class v:_{}Class K90{Constructor (X:P_;k_5_,f7:String ;U2_0,_,a,h_,_,_K_,j:Array [Boolean ,0x4_A];_:j86;s,X_:Float ){}Var $_,g,_2n_6_,$41u:Array [String ,8_49_4_1];}Class __:w{}'''
        expect = '''Program([ClassDecl(Id(v),Id(_),[]),ClassDecl(Id(K90),[MethodDecl(Id(Constructor),Instance,[param(Id(X),ClassType(Id(P_))),param(Id(k_5_),StringType),param(Id(f7),StringType),param(Id(U2_0),ArrayType(74,BoolType)),param(Id(_),ArrayType(74,BoolType)),param(Id(a),ArrayType(74,BoolType)),param(Id(h_),ArrayType(74,BoolType)),param(Id(_),ArrayType(74,BoolType)),param(Id(_K_),ArrayType(74,BoolType)),param(Id(j),ArrayType(74,BoolType)),param(Id(_),ClassType(Id(j86))),param(Id(s),FloatType),param(Id(X_),FloatType)],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(84941,StringType))),AttributeDecl(Instance,VarDecl(Id(g),ArrayType(84941,StringType))),AttributeDecl(Instance,VarDecl(Id(_2n_6_),ArrayType(84941,StringType))),AttributeDecl(Static,VarDecl(Id($41u),ArrayType(84941,StringType)))]),ClassDecl(Id(__),Id(w),[])])'''
        self.assertTrue(TestAST.test(line, expect, 52))

    def test_53(self):
        line = '''Class W{Destructor (){}Constructor (_,H:Array [Boolean ,0b1000];n:Float ;_g____:F;N:U7;_:Array [Float ,6_1]){}$8(_:Array [Array [Boolean ,1_5_7_0],0x12];_,_:Array [Float ,06];_:String ){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(W),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(8,BoolType)),param(Id(H),ArrayType(8,BoolType)),param(Id(n),FloatType),param(Id(_g____),ClassType(Id(F))),param(Id(N),ClassType(Id(U7))),param(Id(_),ArrayType(61,FloatType))],Block([])),MethodDecl(Id($8),Static,[param(Id(_),ArrayType(18,ArrayType(1570,BoolType))),param(Id(_),ArrayType(6,FloatType)),param(Id(_),ArrayType(6,FloatType)),param(Id(_),StringType)],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 53))

    def test_54(self):
        line = '''Class Y{Destructor (){}S(_:Array [Float ,30]){Continue ;} }Class V_:J_TG_6{$76(I,W_:Array [Array [Array [Array [Array [String ,30],0b1000],30],0X50],0xC3];B:_;_4_:b){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(Y),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(S),Instance,[param(Id(_),ArrayType(30,FloatType))],Block([Continue]))]),ClassDecl(Id(V_),Id(J_TG_6),[MethodDecl(Id($76),Static,[param(Id(I),ArrayType(195,ArrayType(80,ArrayType(30,ArrayType(8,ArrayType(30,StringType)))))),param(Id(W_),ArrayType(195,ArrayType(80,ArrayType(30,ArrayType(8,ArrayType(30,StringType)))))),param(Id(B),ClassType(Id(_))),param(Id(_4_),ClassType(Id(b)))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 54))

    def test_55(self):
        line = '''Class _:C{}Class _3:_{}Class hmVq__{Var Y__:Int ;}Class _{Constructor (_,T_s,_:M4v;__:Float ;J:e;__7_Sg:Array [String ,32]){} }Class _:LF574L{$Z_(_y9,_,_:Array [String ,0X52]){}Constructor (k,_c,_,_0____J64,z:z){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(C),[]),ClassDecl(Id(_3),Id(_),[]),ClassDecl(Id(hmVq__),[AttributeDecl(Instance,VarDecl(Id(Y__),IntType))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(M4v))),param(Id(T_s),ClassType(Id(M4v))),param(Id(_),ClassType(Id(M4v))),param(Id(__),FloatType),param(Id(J),ClassType(Id(e))),param(Id(__7_Sg),ArrayType(32,StringType))],Block([]))]),ClassDecl(Id(_),Id(LF574L),[MethodDecl(Id($Z_),Static,[param(Id(_y9),ArrayType(82,StringType)),param(Id(_),ArrayType(82,StringType)),param(Id(_),ArrayType(82,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(k),ClassType(Id(z))),param(Id(_c),ClassType(Id(z))),param(Id(_),ClassType(Id(z))),param(Id(_0____J64),ClassType(Id(z))),param(Id(z),ClassType(Id(z)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 55))

    def test_56(self):
        line = '''Class _t{Constructor (p,n_:Int ;_1:Array [Int ,8];h9,N:_9_3;_4W_k,_e:Array [Array [Float ,0x3],0XB];__,Q_:Array [Array [Array [Array [Array [String ,67],070],0X17],0B101010],0X9]){}Var e,$0,$5__:u;}'''
        expect = '''Program([ClassDecl(Id(_t),[MethodDecl(Id(Constructor),Instance,[param(Id(p),IntType),param(Id(n_),IntType),param(Id(_1),ArrayType(8,IntType)),param(Id(h9),ClassType(Id(_9_3))),param(Id(N),ClassType(Id(_9_3))),param(Id(_4W_k),ArrayType(11,ArrayType(3,FloatType))),param(Id(_e),ArrayType(11,ArrayType(3,FloatType))),param(Id(__),ArrayType(9,ArrayType(42,ArrayType(23,ArrayType(56,ArrayType(67,StringType)))))),param(Id(Q_),ArrayType(9,ArrayType(42,ArrayType(23,ArrayType(56,ArrayType(67,StringType))))))],Block([])),AttributeDecl(Instance,VarDecl(Id(e),ClassType(Id(u)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($0),ClassType(Id(u)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($5__),ClassType(Id(u)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 56))

    def test_57(self):
        line = '''Class _:_{Constructor (o:Array [Array [Array [Array [Array [Int ,0b11],0137],0XFD6B],0137],0137];q27,_:g;_03:Int ;OJ9u5:Array [Array [String ,0673_34],0XFD];__:Array [Int ,0B1_1]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(o),ArrayType(95,ArrayType(95,ArrayType(64875,ArrayType(95,ArrayType(3,IntType)))))),param(Id(q27),ClassType(Id(g))),param(Id(_),ClassType(Id(g))),param(Id(_03),IntType),param(Id(OJ9u5),ArrayType(253,ArrayType(28380,StringType))),param(Id(__),ArrayType(3,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 57))

    def test_58(self):
        line = '''Class f:___X_{}Class _0:h95{}Class _:l{Constructor (__4_,e_l1:Array [Array [String ,0xC],5];____,_8_DT_:Array [Boolean ,49];Hz:Array [String ,0134]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(f),Id(___X_),[]),ClassDecl(Id(_0),Id(h95),[]),ClassDecl(Id(_),Id(l),[MethodDecl(Id(Constructor),Instance,[param(Id(__4_),ArrayType(5,ArrayType(12,StringType))),param(Id(e_l1),ArrayType(5,ArrayType(12,StringType))),param(Id(____),ArrayType(49,BoolType)),param(Id(_8_DT_),ArrayType(49,BoolType)),param(Id(Hz),ArrayType(92,StringType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 58))

    def test_59(self):
        line = '''Class _:_0_{Var t,fO_,$0_:_6;Var _:Boolean ;}Class _{$Om(NMz5:Float ;y_Y:Int ;_:Float ){} }Class _{Constructor (){}U(_,V:Array [Array [Array [String ,0X3B],0b11_1_0],0B111110];_6__:String ;M,U,P:Float ;AO:BL0){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_0_),[AttributeDecl(Instance,VarDecl(Id(t),ClassType(Id(_6)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(fO_),ClassType(Id(_6)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($0_),ClassType(Id(_6)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),BoolType))]),ClassDecl(Id(_),[MethodDecl(Id($Om),Static,[param(Id(NMz5),FloatType),param(Id(y_Y),IntType),param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(U),Instance,[param(Id(_),ArrayType(62,ArrayType(14,ArrayType(59,StringType)))),param(Id(V),ArrayType(62,ArrayType(14,ArrayType(59,StringType)))),param(Id(_6__),StringType),param(Id(M),FloatType),param(Id(U),FloatType),param(Id(P),FloatType),param(Id(AO),ClassType(Id(BL0)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 59))

    def test_60(self):
        line = '''Class _{}Class V:x_{Var _783_5b_:G;Var _4__,J_JDJ,$4:Vt9b;Var $_8_,$2,u9,rz__:Array [Array [Boolean ,0xE_E],27];}Class _{Var $__78,RObv3:I4_;}Class k6_:_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(V),Id(x_),[AttributeDecl(Instance,VarDecl(Id(_783_5b_),ClassType(Id(G)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_4__),ClassType(Id(Vt9b)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(J_JDJ),ClassType(Id(Vt9b)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($4),ClassType(Id(Vt9b)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_8_),ArrayType(27,ArrayType(238,BoolType)))),AttributeDecl(Static,VarDecl(Id($2),ArrayType(27,ArrayType(238,BoolType)))),AttributeDecl(Instance,VarDecl(Id(u9),ArrayType(27,ArrayType(238,BoolType)))),AttributeDecl(Instance,VarDecl(Id(rz__),ArrayType(27,ArrayType(238,BoolType))))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($__78),ClassType(Id(I4_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(RObv3),ClassType(Id(I4_)),NullLiteral()))]),ClassDecl(Id(k6_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 60))

    def test_61(self):
        line = '''Class ___y:d{Val $9:Array [Array [Float ,0xB],0b111111];}Class i_{}Class s{Constructor (V:Array [Array [String ,0115],0115];f,C,_:q;_,_:Float ;v:Array [Array [Float ,0xE],0x5E];L0:Int ){} }Class __{Val _4:Array [Array [Array [Float ,0x5E],78],0X9];Constructor (k,e,a:Array [Array [Float ,78],9_541]){}Val _,$8,$Y,$_9:Int ;Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(___y),Id(d),[AttributeDecl(Static,ConstDecl(Id($9),ArrayType(63,ArrayType(11,FloatType)),None))]),ClassDecl(Id(i_),[]),ClassDecl(Id(s),[MethodDecl(Id(Constructor),Instance,[param(Id(V),ArrayType(77,ArrayType(77,StringType))),param(Id(f),ClassType(Id(q))),param(Id(C),ClassType(Id(q))),param(Id(_),ClassType(Id(q))),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(v),ArrayType(94,ArrayType(14,FloatType))),param(Id(L0),IntType)],Block([]))]),ClassDecl(Id(__),[AttributeDecl(Instance,ConstDecl(Id(_4),ArrayType(9,ArrayType(78,ArrayType(94,FloatType))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(k),ArrayType(9541,ArrayType(78,FloatType))),param(Id(e),ArrayType(9541,ArrayType(78,FloatType))),param(Id(a),ArrayType(9541,ArrayType(78,FloatType)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($8),IntType,None)),AttributeDecl(Static,ConstDecl(Id($Y),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_9),IntType,None)),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 61))

    def test_62(self):
        line = '''Class _{}Class _Jw{Var $__,$_06,$_:Array [Array [String ,0B1],0412];Destructor (){} }Class _{}Class w{}Class S{Constructor (_b61Z:Array [Array [Int ,05],68_88_8]){}Var L_63,$I,_4:_;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_Jw),[AttributeDecl(Static,VarDecl(Id($__),ArrayType(266,ArrayType(1,StringType)))),AttributeDecl(Static,VarDecl(Id($_06),ArrayType(266,ArrayType(1,StringType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(266,ArrayType(1,StringType)))),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(w),[]),ClassDecl(Id(S),[MethodDecl(Id(Constructor),Instance,[param(Id(_b61Z),ArrayType(68888,ArrayType(5,IntType)))],Block([])),AttributeDecl(Instance,VarDecl(Id(L_63),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($I),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_4),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 62))

    def test_63(self):
        line = '''Class _:_{Constructor (){} }Class __6{Destructor (){}Constructor (l2,J2:Array [Array [Float ,0XE],0B111100]){} }Class s{$0HM1(_:Boolean ;x:_;ZI_o,SAi,s_,__:__d_){}Constructor (){}Destructor (){Break ;{} }$2(C:Array [Array [Int ,0x5_9_8],0B1];h,_,_,_75:String ;_,X,__:Array [Int ,0B111100]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(__6),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(l2),ArrayType(60,ArrayType(14,FloatType))),param(Id(J2),ArrayType(60,ArrayType(14,FloatType)))],Block([]))]),ClassDecl(Id(s),[MethodDecl(Id($0HM1),Static,[param(Id(_),BoolType),param(Id(x),ClassType(Id(_))),param(Id(ZI_o),ClassType(Id(__d_))),param(Id(SAi),ClassType(Id(__d_))),param(Id(s_),ClassType(Id(__d_))),param(Id(__),ClassType(Id(__d_)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Break,Block([])])),MethodDecl(Id($2),Static,[param(Id(C),ArrayType(1,ArrayType(1432,IntType))),param(Id(h),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(_75),StringType),param(Id(_),ArrayType(60,IntType)),param(Id(X),ArrayType(60,IntType)),param(Id(__),ArrayType(60,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 63))

    def test_64(self):
        line = '''Class _{Constructor (){}Constructor (_90:Array [Array [Array [Boolean ,05_11],060],0B111100];S,_,_K:Array [Array [Array [Array [Array [Int ,0XB],0XB],0X3E],0X3E],0b111];_:_9;_:String ;_:Float ;_:_5;i__60b:Boolean ;___9,_2_5,G,u,t3,l_:Int ;_:_){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_90),ArrayType(60,ArrayType(48,ArrayType(329,BoolType)))),param(Id(S),ArrayType(7,ArrayType(62,ArrayType(62,ArrayType(11,ArrayType(11,IntType)))))),param(Id(_),ArrayType(7,ArrayType(62,ArrayType(62,ArrayType(11,ArrayType(11,IntType)))))),param(Id(_K),ArrayType(7,ArrayType(62,ArrayType(62,ArrayType(11,ArrayType(11,IntType)))))),param(Id(_),ClassType(Id(_9))),param(Id(_),StringType),param(Id(_),FloatType),param(Id(_),ClassType(Id(_5))),param(Id(i__60b),BoolType),param(Id(___9),IntType),param(Id(_2_5),IntType),param(Id(G),IntType),param(Id(u),IntType),param(Id(t3),IntType),param(Id(l_),IntType),param(Id(_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 64))

    def test_65(self):
        line = '''Class _l{Constructor (_FWTJ8,_z,__70,_,_,_,__,N,f1,_,Z:String ;V:_;A:Array [Array [Array [Array [Float ,9],0b1],0x47],0b1_1]){} }Class _:g{Constructor (){} }Class ___:___5{}Class Zs:_{}'''
        expect = '''Program([ClassDecl(Id(_l),[MethodDecl(Id(Constructor),Instance,[param(Id(_FWTJ8),StringType),param(Id(_z),StringType),param(Id(__70),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(__),StringType),param(Id(N),StringType),param(Id(f1),StringType),param(Id(_),StringType),param(Id(Z),StringType),param(Id(V),ClassType(Id(_))),param(Id(A),ArrayType(3,ArrayType(71,ArrayType(1,ArrayType(9,FloatType)))))],Block([]))]),ClassDecl(Id(_),Id(g),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(___),Id(___5),[]),ClassDecl(Id(Zs),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 65))

    def test_66(self):
        line = '''Class M{Constructor (N2:Array [String ,015]){Break ;} }Class j_{}Class _0_2_f_:_P{Val f,B:String ;Constructor (){} }Class o:q{Constructor (y,_,E_,G_1U,g,_:_7;NE:Array [Int ,07];_,Y_:Int ){} }Class _:_{}'''
        expect = '''Program([ClassDecl(Id(M),[MethodDecl(Id(Constructor),Instance,[param(Id(N2),ArrayType(13,StringType))],Block([Break]))]),ClassDecl(Id(j_),[]),ClassDecl(Id(_0_2_f_),Id(_P),[AttributeDecl(Instance,ConstDecl(Id(f),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(B),StringType,None)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(o),Id(q),[MethodDecl(Id(Constructor),Instance,[param(Id(y),ClassType(Id(_7))),param(Id(_),ClassType(Id(_7))),param(Id(E_),ClassType(Id(_7))),param(Id(G_1U),ClassType(Id(_7))),param(Id(g),ClassType(Id(_7))),param(Id(_),ClassType(Id(_7))),param(Id(NE),ArrayType(7,IntType)),param(Id(_),IntType),param(Id(Y_),IntType)],Block([]))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 66))

    def test_67(self):
        line = '''Class _{J(_5:Boolean ){}Constructor (R2_:q9Eti){} }Class _{Val S87pQ,I_:_;Var $8:Array [Array [String ,4],0106];}Class _6:z{m(){}Val $7:Array [Boolean ,7_4_4];Var r:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(J),Instance,[param(Id(_5),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(R2_),ClassType(Id(q9Eti)))],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(S87pQ),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(I_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($8),ArrayType(70,ArrayType(4,StringType))))]),ClassDecl(Id(_6),Id(z),[MethodDecl(Id(m),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($7),ArrayType(744,BoolType),None)),AttributeDecl(Instance,VarDecl(Id(r),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 67))

    def test_68(self):
        line = '''Class L57:_{}Class _:_8{Destructor (){}_(C:Array [Array [Array [Array [Boolean ,0b1_1_1_1_0111],036],0X34],0X3];_,Q,O:Array [Array [Boolean ,0b1],0B1];_4b,Q__6:Boolean ;_O,T_:Float ;__:U;mL,G,__9z,_:Float ;pjW:Int ;p:_){} }'''
        expect = '''Program([ClassDecl(Id(L57),Id(_),[]),ClassDecl(Id(_),Id(_8),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(C),ArrayType(3,ArrayType(52,ArrayType(30,ArrayType(247,BoolType))))),param(Id(_),ArrayType(1,ArrayType(1,BoolType))),param(Id(Q),ArrayType(1,ArrayType(1,BoolType))),param(Id(O),ArrayType(1,ArrayType(1,BoolType))),param(Id(_4b),BoolType),param(Id(Q__6),BoolType),param(Id(_O),FloatType),param(Id(T_),FloatType),param(Id(__),ClassType(Id(U))),param(Id(mL),FloatType),param(Id(G),FloatType),param(Id(__9z),FloatType),param(Id(_),FloatType),param(Id(pjW),IntType),param(Id(p),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 68))

    def test_69(self):
        line = '''Class K:U5_{$_(d,_,X___am_J,P__,_:__;l_Yy,_4,_,___1:Array [Array [Int ,027],0x5];l0:Array [Boolean ,39];____9N:Int ;T:Array [Array [Boolean ,0B100000],6_5_995];X:Float ;_:Array [Array [Float ,39],05];b:E5_){}Var _1:__49_;Constructor (){Break ;}Destructor (){Return ;{}n::$_2._._7h_()._._9.M();} }'''
        expect = '''Program([ClassDecl(Id(K),Id(U5_),[MethodDecl(Id($_),Static,[param(Id(d),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(X___am_J),ClassType(Id(__))),param(Id(P__),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(l_Yy),ArrayType(5,ArrayType(23,IntType))),param(Id(_4),ArrayType(5,ArrayType(23,IntType))),param(Id(_),ArrayType(5,ArrayType(23,IntType))),param(Id(___1),ArrayType(5,ArrayType(23,IntType))),param(Id(l0),ArrayType(39,BoolType)),param(Id(____9N),IntType),param(Id(T),ArrayType(65995,ArrayType(32,BoolType))),param(Id(X),FloatType),param(Id(_),ArrayType(5,ArrayType(39,FloatType))),param(Id(b),ClassType(Id(E5_)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_1),ClassType(Id(__49_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([Break])),MethodDecl(Id(Destructor),Instance,[],Block([Return(),Block([]),Call(FieldAccess(FieldAccess(CallExpr(FieldAccess(FieldAccess(Id(n),Id($_2)),Id(_)),Id(_7h_),[]),Id(_)),Id(_9)),Id(M),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 69))

    def test_70(self):
        line = '''Class JCd_{Destructor (){}Constructor (C,e_n2,_:_4;c,_:_u;_,_:__Z1_6;P6_:Array [Array [Array [Int ,0X1],0B1],04]){}Constructor (p626_:_){Return ;} }Class QR{}Class _C_82:_{}'''
        expect = '''Program([ClassDecl(Id(JCd_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(C),ClassType(Id(_4))),param(Id(e_n2),ClassType(Id(_4))),param(Id(_),ClassType(Id(_4))),param(Id(c),ClassType(Id(_u))),param(Id(_),ClassType(Id(_u))),param(Id(_),ClassType(Id(__Z1_6))),param(Id(_),ClassType(Id(__Z1_6))),param(Id(P6_),ArrayType(4,ArrayType(1,ArrayType(1,IntType))))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(p626_),ClassType(Id(_)))],Block([Return()]))]),ClassDecl(Id(QR),[]),ClassDecl(Id(_C_82),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 70))

    def test_71(self):
        line = '''Class F:ZY{}Class _:__0_4B{Constructor (_:Int ;_dz_:Boolean ;rs,N,_:String ){} }Class O_pS9c6_X_{}Class u{Constructor (){} }Class _{}Class _:__{Val _,_q,$31,KY,_,Y_:Array [Boolean ,0X4_2];}'''
        expect = '''Program([ClassDecl(Id(F),Id(ZY),[]),ClassDecl(Id(_),Id(__0_4B),[MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(_dz_),BoolType),param(Id(rs),StringType),param(Id(N),StringType),param(Id(_),StringType)],Block([]))]),ClassDecl(Id(O_pS9c6_X_),[]),ClassDecl(Id(u),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(__),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(66,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_q),ArrayType(66,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($31),ArrayType(66,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(KY),ArrayType(66,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(66,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(Y_),ArrayType(66,BoolType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 71))

    def test_72(self):
        line = '''Class Z:v4{}Class _k_{Val $d7:Int ;}Class o:Q{Constructor (_,X,_m__3676b,g_n,Q,w:Float ){}Var _a76_:Array [Array [Float ,89],0x3A];}Class __9c:_{Constructor (_2:Array [Array [Int ,0X1],0B1000110]){ {}_c::$_Ka.m.Cl._A0_();} }Class t{}'''
        expect = '''Program([ClassDecl(Id(Z),Id(v4),[]),ClassDecl(Id(_k_),[AttributeDecl(Static,ConstDecl(Id($d7),IntType,None))]),ClassDecl(Id(o),Id(Q),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(X),FloatType),param(Id(_m__3676b),FloatType),param(Id(g_n),FloatType),param(Id(Q),FloatType),param(Id(w),FloatType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_a76_),ArrayType(58,ArrayType(89,FloatType))))]),ClassDecl(Id(__9c),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_2),ArrayType(70,ArrayType(1,IntType)))],Block([Block([]),Call(FieldAccess(FieldAccess(FieldAccess(Id(_c),Id($_Ka)),Id(m)),Id(Cl)),Id(_A0_),[])]))]),ClassDecl(Id(t),[])])'''
        self.assertTrue(TestAST.test(line, expect, 72))

    def test_73(self):
        line = '''Class _:__{Val $_1E_:Boolean ;Val $_,_5,$7:Float ;Constructor (__,_,_K_f:Boolean ;l_h,_90,__l:Array [Array [Array [Array [Array [Int ,99],062],02],0X8],062]){}_(_P:Array [Int ,2];_D,_:QX){} }Class k_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(__),[AttributeDecl(Static,ConstDecl(Id($_1E_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_5),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($7),FloatType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(__),BoolType),param(Id(_),BoolType),param(Id(_K_f),BoolType),param(Id(l_h),ArrayType(50,ArrayType(8,ArrayType(2,ArrayType(50,ArrayType(99,IntType)))))),param(Id(_90),ArrayType(50,ArrayType(8,ArrayType(2,ArrayType(50,ArrayType(99,IntType)))))),param(Id(__l),ArrayType(50,ArrayType(8,ArrayType(2,ArrayType(50,ArrayType(99,IntType))))))],Block([])),MethodDecl(Id(_),Instance,[param(Id(_P),ArrayType(2,IntType)),param(Id(_D),ClassType(Id(QX))),param(Id(_),ClassType(Id(QX)))],Block([]))]),ClassDecl(Id(k_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 73))

    def test_74(self):
        line = '''Class U4:A{}Class _:X_7p_____85{Constructor (){} }Class _{}Class d{Destructor (){} }Class n{}Class c21{}Class h{_(u,_9:Array [Array [Int ,32],03_2];r,_2p_E:_){} }Class _{}Class C{}Class i:___{}'''
        expect = '''Program([ClassDecl(Id(U4),Id(A),[]),ClassDecl(Id(_),Id(X_7p_____85),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(d),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(n),[]),ClassDecl(Id(c21),[]),ClassDecl(Id(h),[MethodDecl(Id(_),Instance,[param(Id(u),ArrayType(26,ArrayType(32,IntType))),param(Id(_9),ArrayType(26,ArrayType(32,IntType))),param(Id(r),ClassType(Id(_))),param(Id(_2p_E),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(C),[]),ClassDecl(Id(i),Id(___),[])])'''
        self.assertTrue(TestAST.test(line, expect, 74))

    def test_75(self):
        line = '''Class _{Var $9:o;Val $__0,$9_,$_,Y:HP6_;Constructor (){Continue ;}Destructor (){Var _,R,_:Array [Array [Array [Array [Array [Boolean ,0x9_9_6],03],3],0xE],0b1110];Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($9),ClassType(Id(o)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($__0),ClassType(Id(HP6_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($9_),ClassType(Id(HP6_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(HP6_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(Y),ClassType(Id(HP6_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(_),ArrayType(14,ArrayType(14,ArrayType(3,ArrayType(3,ArrayType(2454,BoolType)))))),VarDecl(Id(R),ArrayType(14,ArrayType(14,ArrayType(3,ArrayType(3,ArrayType(2454,BoolType)))))),VarDecl(Id(_),ArrayType(14,ArrayType(14,ArrayType(3,ArrayType(3,ArrayType(2454,BoolType)))))),Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 75))

    def test_76(self):
        line = '''Class _PQ{_8c_(){}Val ____z0e,w_:Float ;Val _,$0_,_:Array [Array [Array [Array [Int ,0B101010],0b1],6],0b1];$Wz(N,J:Array [Array [Int ,86],0X5];v:Array [Boolean ,0xF5_C_3];_V,__3,_m:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_PQ),[MethodDecl(Id(_8c_),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(____z0e),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(w_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(6,ArrayType(1,ArrayType(42,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($0_),ArrayType(1,ArrayType(6,ArrayType(1,ArrayType(42,IntType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(6,ArrayType(1,ArrayType(42,IntType)))),None)),MethodDecl(Id($Wz),Static,[param(Id(N),ArrayType(5,ArrayType(86,IntType))),param(Id(J),ArrayType(5,ArrayType(86,IntType))),param(Id(v),ArrayType(62915,BoolType)),param(Id(_V),IntType),param(Id(__3),IntType),param(Id(_m),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 76))

    def test_77(self):
        line = '''Class _{Constructor (){}$_6_(p8_7,p,_,F,o,__b,x:Float ;_:q;_,H_:Float ;_:String ;k,p:Array [String ,0xF];A:np){}Var p_,_:Boolean ;vI_124(_6,_,__:_;bR,h,_,e_:_){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($_6_),Static,[param(Id(p8_7),FloatType),param(Id(p),FloatType),param(Id(_),FloatType),param(Id(F),FloatType),param(Id(o),FloatType),param(Id(__b),FloatType),param(Id(x),FloatType),param(Id(_),ClassType(Id(q))),param(Id(_),FloatType),param(Id(H_),FloatType),param(Id(_),StringType),param(Id(k),ArrayType(15,StringType)),param(Id(p),ArrayType(15,StringType)),param(Id(A),ClassType(Id(np)))],Block([])),AttributeDecl(Instance,VarDecl(Id(p_),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),MethodDecl(Id(vI_124),Instance,[param(Id(_6),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(bR),ClassType(Id(_))),param(Id(h),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(e_),ClassType(Id(_)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 77))

    def test_78(self):
        line = '''Class q:_0I4__2{Var a:Int ;}Class T5_:AR_2___{}Class _:_2{Var $w6____,$cg,$_,$_,k____:String ;}Class _4c_:_Q47O{Val X,_:Array [Int ,0B1011110];Val q3:Array [Array [Array [Float ,90],6],0B1_1];Var $_9p09d:WQ;Val $3_:String ;}Class y:r{}'''
        expect = '''Program([ClassDecl(Id(q),Id(_0I4__2),[AttributeDecl(Instance,VarDecl(Id(a),IntType))]),ClassDecl(Id(T5_),Id(AR_2___),[]),ClassDecl(Id(_),Id(_2),[AttributeDecl(Static,VarDecl(Id($w6____),StringType)),AttributeDecl(Static,VarDecl(Id($cg),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Instance,VarDecl(Id(k____),StringType))]),ClassDecl(Id(_4c_),Id(_Q47O),[AttributeDecl(Instance,ConstDecl(Id(X),ArrayType(94,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(94,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(q3),ArrayType(3,ArrayType(6,ArrayType(90,FloatType))),None)),AttributeDecl(Static,VarDecl(Id($_9p09d),ClassType(Id(WQ)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($3_),StringType,None))]),ClassDecl(Id(y),Id(r),[])])'''
        self.assertTrue(TestAST.test(line, expect, 78))

    def test_79(self):
        line = '''Class _q5D{$2_(__4_:Array [Array [String ,0b1_0],0XE41];_:_3k;_L,j:Float ;_:Int ){}$_(_69:Array [Array [Boolean ,0b1],0123]){}Constructor (_:Q;_:String ;gq_:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_q5D),[MethodDecl(Id($2_),Static,[param(Id(__4_),ArrayType(3649,ArrayType(2,StringType))),param(Id(_),ClassType(Id(_3k))),param(Id(_L),FloatType),param(Id(j),FloatType),param(Id(_),IntType)],Block([])),MethodDecl(Id($_),Static,[param(Id(_69),ArrayType(83,ArrayType(1,BoolType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(Q))),param(Id(_),StringType),param(Id(gq_),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 79))

    def test_80(self):
        line = '''Class r:__{}Class m:_{}Class s{Var $48ED__C:mp55;Val _,$_D,$_7N,$o0,F6_:_;}Class R:__{Constructor (v,S,__:Array [Array [Boolean ,05],0B10_0_01_1101];_6,_7_K2e,_D_9,x:_68;J,_:W;Aw:y){} }Class v:_{}'''
        expect = '''Program([ClassDecl(Id(r),Id(__),[]),ClassDecl(Id(m),Id(_),[]),ClassDecl(Id(s),[AttributeDecl(Static,VarDecl(Id($48ED__C),ClassType(Id(mp55)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_D),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_7N),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($o0),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(F6_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(R),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(v),ArrayType(285,ArrayType(5,BoolType))),param(Id(S),ArrayType(285,ArrayType(5,BoolType))),param(Id(__),ArrayType(285,ArrayType(5,BoolType))),param(Id(_6),ClassType(Id(_68))),param(Id(_7_K2e),ClassType(Id(_68))),param(Id(_D_9),ClassType(Id(_68))),param(Id(x),ClassType(Id(_68))),param(Id(J),ClassType(Id(W))),param(Id(_),ClassType(Id(W))),param(Id(Aw),ClassType(Id(y)))],Block([]))]),ClassDecl(Id(v),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 80))

    def test_81(self):
        line = '''Class _{Destructor (){}Val _,_:Array [Array [Array [Array [Array [String ,1_74_5_20],0B111110],076],1],0x21];}Class _{$9_(_,F_3_,_:Boolean ;Z:_hq_){}Val b,_,$6:Int ;}Class _{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(33,ArrayType(1,ArrayType(62,ArrayType(62,ArrayType(174520,StringType))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(33,ArrayType(1,ArrayType(62,ArrayType(62,ArrayType(174520,StringType))))),None))]),ClassDecl(Id(_),[MethodDecl(Id($9_),Static,[param(Id(_),BoolType),param(Id(F_3_),BoolType),param(Id(_),BoolType),param(Id(Z),ClassType(Id(_hq_)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(b),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($6),IntType,None))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 81))

    def test_82(self):
        line = '''Class _:_5_{}Class Jdz_:gH{Val $_:_4;}Class H_:U{}Class t__{}Class _87O{Val I,$_9:Array [Float ,6_09_7];}Class e{$__(){} }Class _:__{_(E,fB47,G,J_A:Array [Boolean ,0x41]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_5_),[]),ClassDecl(Id(Jdz_),Id(gH),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_4)),NullLiteral()))]),ClassDecl(Id(H_),Id(U),[]),ClassDecl(Id(t__),[]),ClassDecl(Id(_87O),[AttributeDecl(Instance,ConstDecl(Id(I),ArrayType(6097,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($_9),ArrayType(6097,FloatType),None))]),ClassDecl(Id(e),[MethodDecl(Id($__),Static,[],Block([]))]),ClassDecl(Id(_),Id(__),[MethodDecl(Id(_),Instance,[param(Id(E),ArrayType(65,BoolType)),param(Id(fB47),ArrayType(65,BoolType)),param(Id(G),ArrayType(65,BoolType)),param(Id(J_A),ArrayType(65,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 82))

    def test_83(self):
        line = '''Class X:i_V{$tNZ4(B7,_:Array [Float ,4];B,_:Boolean ;_,_F:_){} }Class _:_9{Constructor (zf_,_:Array [Array [Array [String ,3],0b1],0X2B];A:Array [Array [Boolean ,0B100],0B1];i_:Float ;_Y,__1,r,IH,C,d__:Boolean ;_54a:Array [String ,0B1010001];_:u7_){}Val $3:Array [Int ,0X2B];}'''
        expect = '''Program([ClassDecl(Id(X),Id(i_V),[MethodDecl(Id($tNZ4),Static,[param(Id(B7),ArrayType(4,FloatType)),param(Id(_),ArrayType(4,FloatType)),param(Id(B),BoolType),param(Id(_),BoolType),param(Id(_),ClassType(Id(_))),param(Id(_F),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),Id(_9),[MethodDecl(Id(Constructor),Instance,[param(Id(zf_),ArrayType(43,ArrayType(1,ArrayType(3,StringType)))),param(Id(_),ArrayType(43,ArrayType(1,ArrayType(3,StringType)))),param(Id(A),ArrayType(1,ArrayType(4,BoolType))),param(Id(i_),FloatType),param(Id(_Y),BoolType),param(Id(__1),BoolType),param(Id(r),BoolType),param(Id(IH),BoolType),param(Id(C),BoolType),param(Id(d__),BoolType),param(Id(_54a),ArrayType(81,StringType)),param(Id(_),ClassType(Id(u7_)))],Block([])),AttributeDecl(Static,ConstDecl(Id($3),ArrayType(43,IntType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 83))

    def test_84(self):
        line = '''Class _{Var $40_7,$06,g,$gJZ_:Array [Array [Array [Array [Array [Array [Array [String ,7],057],07],07],1_5],0b100001],0B10];Constructor (h9:Boolean ){Continue ;}Val a_X:_9_;}Class _:_{Val __,$8:Array [Array [Float ,3],0b100001];}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($40_7),ArrayType(2,ArrayType(33,ArrayType(15,ArrayType(7,ArrayType(7,ArrayType(47,ArrayType(7,StringType))))))))),AttributeDecl(Static,VarDecl(Id($06),ArrayType(2,ArrayType(33,ArrayType(15,ArrayType(7,ArrayType(7,ArrayType(47,ArrayType(7,StringType))))))))),AttributeDecl(Instance,VarDecl(Id(g),ArrayType(2,ArrayType(33,ArrayType(15,ArrayType(7,ArrayType(7,ArrayType(47,ArrayType(7,StringType))))))))),AttributeDecl(Static,VarDecl(Id($gJZ_),ArrayType(2,ArrayType(33,ArrayType(15,ArrayType(7,ArrayType(7,ArrayType(47,ArrayType(7,StringType))))))))),MethodDecl(Id(Constructor),Instance,[param(Id(h9),BoolType)],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(a_X),ClassType(Id(_9_)),NullLiteral()))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(33,ArrayType(3,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($8),ArrayType(33,ArrayType(3,FloatType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 84))

    def test_85(self):
        line = '''Class Q:Bpc___{}Class _1W{}Class _:__5{Constructor (__L___,_:Array [Array [Array [String ,2],051],0x36]){} }Class _{Constructor (A,__,Y__59:String ;y_62:Int ;__q:Array [Float ,0B101010];h:Array [Array [Boolean ,0x36],0XD_4];_29:Array [Array [Array [Array [Float ,0x2],06],2],0b11_0]){} }'''
        expect = '''Program([ClassDecl(Id(Q),Id(Bpc___),[]),ClassDecl(Id(_1W),[]),ClassDecl(Id(_),Id(__5),[MethodDecl(Id(Constructor),Instance,[param(Id(__L___),ArrayType(54,ArrayType(41,ArrayType(2,StringType)))),param(Id(_),ArrayType(54,ArrayType(41,ArrayType(2,StringType))))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(A),StringType),param(Id(__),StringType),param(Id(Y__59),StringType),param(Id(y_62),IntType),param(Id(__q),ArrayType(42,FloatType)),param(Id(h),ArrayType(212,ArrayType(54,BoolType))),param(Id(_29),ArrayType(6,ArrayType(2,ArrayType(6,ArrayType(2,FloatType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 85))

    def test_86(self):
        line = '''Class _:_{}Class __H{Constructor (mZ,_,_,_P:Array [Array [Array [Int ,7],0X17],0b11];__,_:Array [String ,91_0_2]){Val _:Array [Array [Int ,070],0XEB];}Val $RL,$81_:Array [Array [Boolean ,0B1],0X17];}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(__H),[MethodDecl(Id(Constructor),Instance,[param(Id(mZ),ArrayType(3,ArrayType(23,ArrayType(7,IntType)))),param(Id(_),ArrayType(3,ArrayType(23,ArrayType(7,IntType)))),param(Id(_),ArrayType(3,ArrayType(23,ArrayType(7,IntType)))),param(Id(_P),ArrayType(3,ArrayType(23,ArrayType(7,IntType)))),param(Id(__),ArrayType(9102,StringType)),param(Id(_),ArrayType(9102,StringType))],Block([ConstDecl(Id(_),ArrayType(235,ArrayType(56,IntType)),None)])),AttributeDecl(Static,ConstDecl(Id($RL),ArrayType(23,ArrayType(1,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($81_),ArrayType(23,ArrayType(1,BoolType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 86))

    def test_87(self):
        line = '''Class _{Var $2:Float ;$q(l:S;w5,__,_r:Array [Array [Array [String ,9],6],0X5E];_:t_O_;v,_,_:Int ;___,_:Float ;ZjZ,q,h50_,_:Array [Array [Boolean ,9],4]){Continue ;}Constructor (){}u(_k:od){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($2),FloatType)),MethodDecl(Id($q),Static,[param(Id(l),ClassType(Id(S))),param(Id(w5),ArrayType(94,ArrayType(6,ArrayType(9,StringType)))),param(Id(__),ArrayType(94,ArrayType(6,ArrayType(9,StringType)))),param(Id(_r),ArrayType(94,ArrayType(6,ArrayType(9,StringType)))),param(Id(_),ClassType(Id(t_O_))),param(Id(v),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(___),FloatType),param(Id(_),FloatType),param(Id(ZjZ),ArrayType(4,ArrayType(9,BoolType))),param(Id(q),ArrayType(4,ArrayType(9,BoolType))),param(Id(h50_),ArrayType(4,ArrayType(9,BoolType))),param(Id(_),ArrayType(4,ArrayType(9,BoolType)))],Block([Continue])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(u),Instance,[param(Id(_k),ClassType(Id(od)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 87))

    def test_88(self):
        line = '''Class _T3_{_37_(_X_,NOr_7,_4z:Array [Array [Array [Array [Array [Boolean ,33],33],0X23_3E_E_D5EB],0x4_B91_D],0x19]){} }Class z{Destructor (){}Destructor (){} }Class t:_6{Val H,_,___,$___,b:_9;}Class _:u_{Val E:Array [String ,0B100101];}'''
        expect = '''Program([ClassDecl(Id(_T3_),[MethodDecl(Id(_37_),Instance,[param(Id(_X_),ArrayType(25,ArrayType(309533,ArrayType(9461224939,ArrayType(33,ArrayType(33,BoolType)))))),param(Id(NOr_7),ArrayType(25,ArrayType(309533,ArrayType(9461224939,ArrayType(33,ArrayType(33,BoolType)))))),param(Id(_4z),ArrayType(25,ArrayType(309533,ArrayType(9461224939,ArrayType(33,ArrayType(33,BoolType))))))],Block([]))]),ClassDecl(Id(z),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(t),Id(_6),[AttributeDecl(Instance,ConstDecl(Id(H),ClassType(Id(_9)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_9)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(___),ClassType(Id(_9)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($___),ClassType(Id(_9)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(b),ClassType(Id(_9)),NullLiteral()))]),ClassDecl(Id(_),Id(u_),[AttributeDecl(Instance,ConstDecl(Id(E),ArrayType(37,StringType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 88))

    def test_89(self):
        line = '''Class _9:L7{Val QGq,$_1,$V,$_,$i,$7:Array [Array [Boolean ,8_9_0_0_7_0_1],0B1];Val _:_;}Class j70:c_F{Var z:Array [Array [Array [Array [Boolean ,0124],0124],0B11100],0X2_C_1];O_4I(_:String ){} }'''
        expect = '''Program([ClassDecl(Id(_9),Id(L7),[AttributeDecl(Instance,ConstDecl(Id(QGq),ArrayType(1,ArrayType(8900701,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($_1),ArrayType(1,ArrayType(8900701,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($V),ArrayType(1,ArrayType(8900701,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(1,ArrayType(8900701,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($i),ArrayType(1,ArrayType(8900701,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($7),ArrayType(1,ArrayType(8900701,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(j70),Id(c_F),[AttributeDecl(Instance,VarDecl(Id(z),ArrayType(705,ArrayType(28,ArrayType(84,ArrayType(84,BoolType)))))),MethodDecl(Id(O_4I),Instance,[param(Id(_),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 89))

    def test_90(self):
        line = '''Class _:_47A2Y0{}Class _{}Class ___{Var $03_,$2,$G,$8__,_:_;Val $t,_3:Array [Int ,0xE_3];P(_,_,__,E:String ;x4:Float ;_uo,f:Float ){}Destructor (){}Constructor (e:String ;__:O1i;i,_:String ){}Constructor (){}Destructor (){} }Class IeN:J7__tB0ZIU1{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_47A2Y0),[]),ClassDecl(Id(_),[]),ClassDecl(Id(___),[AttributeDecl(Static,VarDecl(Id($03_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($2),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($G),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($8__),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($t),ArrayType(227,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_3),ArrayType(227,IntType),None)),MethodDecl(Id(P),Instance,[param(Id(_),StringType),param(Id(_),StringType),param(Id(__),StringType),param(Id(E),StringType),param(Id(x4),FloatType),param(Id(_uo),FloatType),param(Id(f),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(e),StringType),param(Id(__),ClassType(Id(O1i))),param(Id(i),StringType),param(Id(_),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(IeN),Id(J7__tB0ZIU1),[])])'''
        self.assertTrue(TestAST.test(line, expect, 90))

    def test_91(self):
        line = '''Class _{}Class B:__8_{$1(N:Array [Array [Array [Array [Array [Float ,0X35],0x5B],037_3_3],0126],0x5B]){}Destructor (){} }Class B:__{}Class __:R{Constructor (B7:String ){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(B),Id(__8_),[MethodDecl(Id($1),Static,[param(Id(N),ArrayType(91,ArrayType(86,ArrayType(2011,ArrayType(91,ArrayType(53,FloatType))))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(B),Id(__),[]),ClassDecl(Id(__),Id(R),[MethodDecl(Id(Constructor),Instance,[param(Id(B7),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 91))

    def test_92(self):
        line = '''Class __{oNHE(cc:_;D,i1_c_:Array [Array [Array [Array [Array [Float ,0b1],7],1],27],0xE_C8F];_,__:_r;_,D1__,_:_3;_8:__i;z:Boolean ;v,I:Array [Array [Int ,0b1],0X8];_:Float ){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(oNHE),Instance,[param(Id(cc),ClassType(Id(_))),param(Id(D),ArrayType(60559,ArrayType(27,ArrayType(1,ArrayType(7,ArrayType(1,FloatType)))))),param(Id(i1_c_),ArrayType(60559,ArrayType(27,ArrayType(1,ArrayType(7,ArrayType(1,FloatType)))))),param(Id(_),ClassType(Id(_r))),param(Id(__),ClassType(Id(_r))),param(Id(_),ClassType(Id(_3))),param(Id(D1__),ClassType(Id(_3))),param(Id(_),ClassType(Id(_3))),param(Id(_8),ClassType(Id(__i))),param(Id(z),BoolType),param(Id(v),ArrayType(8,ArrayType(1,IntType))),param(Id(I),ArrayType(8,ArrayType(1,IntType))),param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 92))

    def test_93(self):
        line = '''Class k__6{}Class e6s_:_{}Class _{}Class __{Constructor (){}Constructor (S,h__:Array [String ,0B110101];_,h_,E4:G_2_e;__,M:Array [Float ,0X12];_4:_){Continue ;}Var $F1d7s9g,$79:_;Var $y_:Array [Array [String ,0B110101],21];}'''
        expect = '''Program([ClassDecl(Id(k__6),[]),ClassDecl(Id(e6s_),Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(S),ArrayType(53,StringType)),param(Id(h__),ArrayType(53,StringType)),param(Id(_),ClassType(Id(G_2_e))),param(Id(h_),ClassType(Id(G_2_e))),param(Id(E4),ClassType(Id(G_2_e))),param(Id(__),ArrayType(18,FloatType)),param(Id(M),ArrayType(18,FloatType)),param(Id(_4),ClassType(Id(_)))],Block([Continue])),AttributeDecl(Static,VarDecl(Id($F1d7s9g),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($79),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($y_),ArrayType(21,ArrayType(53,StringType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 93))

    def test_94(self):
        line = '''Class _v2C_{v(){}Constructor (_7,_0,_0:Int ){}Destructor (){Break ;}Val K__:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0b101001],0b1],0B1],0XD4],0X44],0X1_2_D],0B1_1],26];Destructor (){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_v2C_),[MethodDecl(Id(v),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_7),IntType),param(Id(_0),IntType),param(Id(_0),IntType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Break])),AttributeDecl(Instance,ConstDecl(Id(K__),ArrayType(26,ArrayType(3,ArrayType(301,ArrayType(68,ArrayType(212,ArrayType(1,ArrayType(1,ArrayType(41,FloatType)))))))),None)),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 94))

    def test_95(self):
        line = '''Class _07:__D_{Var $7,yG_2,$K:Int ;Var z:Float ;}Class _34{Var __:Array [Float ,0b111100];Var $___:Boolean ;Var $q4,_d,o8,_:Array [Array [Array [String ,15],02],0B1100100];w_(_,S:String ){} }Class _:Ee{$_34(L_:_){} }Class _:y{}'''
        expect = '''Program([ClassDecl(Id(_07),Id(__D_),[AttributeDecl(Static,VarDecl(Id($7),IntType)),AttributeDecl(Instance,VarDecl(Id(yG_2),IntType)),AttributeDecl(Static,VarDecl(Id($K),IntType)),AttributeDecl(Instance,VarDecl(Id(z),FloatType))]),ClassDecl(Id(_34),[AttributeDecl(Instance,VarDecl(Id(__),ArrayType(60,FloatType))),AttributeDecl(Static,VarDecl(Id($___),BoolType)),AttributeDecl(Static,VarDecl(Id($q4),ArrayType(100,ArrayType(2,ArrayType(15,StringType))))),AttributeDecl(Instance,VarDecl(Id(_d),ArrayType(100,ArrayType(2,ArrayType(15,StringType))))),AttributeDecl(Instance,VarDecl(Id(o8),ArrayType(100,ArrayType(2,ArrayType(15,StringType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(100,ArrayType(2,ArrayType(15,StringType))))),MethodDecl(Id(w_),Instance,[param(Id(_),StringType),param(Id(S),StringType)],Block([]))]),ClassDecl(Id(_),Id(Ee),[MethodDecl(Id($_34),Static,[param(Id(L_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),Id(y),[])])'''
        self.assertTrue(TestAST.test(line, expect, 95))

    def test_96(self):
        line = '''Class _{_5(_:Array [String ,3];fJy:_;_j,f,Q:Array [Array [Array [Array [Array [Int ,0X3_8_D],47],1],0x4_D],05_2_4_0]){}_31(a_,_,b:r4){} }Class g:vUm9N{sI(){}Var $7:Array [Boolean ,2];$m(_,k53_l:Array [Int ,0b101011]){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(_5),Instance,[param(Id(_),ArrayType(3,StringType)),param(Id(fJy),ClassType(Id(_))),param(Id(_j),ArrayType(2720,ArrayType(77,ArrayType(1,ArrayType(47,ArrayType(909,IntType)))))),param(Id(f),ArrayType(2720,ArrayType(77,ArrayType(1,ArrayType(47,ArrayType(909,IntType)))))),param(Id(Q),ArrayType(2720,ArrayType(77,ArrayType(1,ArrayType(47,ArrayType(909,IntType))))))],Block([])),MethodDecl(Id(_31),Instance,[param(Id(a_),ClassType(Id(r4))),param(Id(_),ClassType(Id(r4))),param(Id(b),ClassType(Id(r4)))],Block([]))]),ClassDecl(Id(g),Id(vUm9N),[MethodDecl(Id(sI),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($7),ArrayType(2,BoolType))),MethodDecl(Id($m),Static,[param(Id(_),ArrayType(43,IntType)),param(Id(k53_l),ArrayType(43,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 96))

    def test_97(self):
        line = '''Class Ra:_{}Class G_e___:p3_0{Var $8,$38,$_,Hj:uH_0;Val $m3k,$3_:Array [Array [Array [Array [Array [Float ,0xB5],0127],0X8_6_F],0b1001110],8];$_(){} }Class __:__z{}Class _{}'''
        expect = '''Program([ClassDecl(Id(Ra),Id(_),[]),ClassDecl(Id(G_e___),Id(p3_0),[AttributeDecl(Static,VarDecl(Id($8),ClassType(Id(uH_0)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($38),ClassType(Id(uH_0)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(uH_0)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Hj),ClassType(Id(uH_0)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($m3k),ArrayType(8,ArrayType(78,ArrayType(2159,ArrayType(87,ArrayType(181,FloatType))))),None)),AttributeDecl(Static,ConstDecl(Id($3_),ArrayType(8,ArrayType(78,ArrayType(2159,ArrayType(87,ArrayType(181,FloatType))))),None)),MethodDecl(Id($_),Static,[],Block([]))]),ClassDecl(Id(__),Id(__z),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 97))

    def test_98(self):
        line = '''Class _{$2(){} }Class _:_{}Class gT{}Class L_:u4{Destructor (){} }Class _0{Destructor (){}$964(_,U3_:String ;RC:Array [Array [Float ,100],03];n,_A_:Boolean ;p:Boolean ;_w:Array [Array [Int ,030],0B110111]){} }Class J{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($2),Static,[],Block([]))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(gT),[]),ClassDecl(Id(L_),Id(u4),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_0),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($964),Static,[param(Id(_),StringType),param(Id(U3_),StringType),param(Id(RC),ArrayType(3,ArrayType(100,FloatType))),param(Id(n),BoolType),param(Id(_A_),BoolType),param(Id(p),BoolType),param(Id(_w),ArrayType(55,ArrayType(24,IntType)))],Block([]))]),ClassDecl(Id(J),[])])'''
        self.assertTrue(TestAST.test(line, expect, 98))

    def test_99(self):
        line = '''Class S{}Class _{Var $5_S_7:_;Var O:Float ;Var _O1,$ZQ:_;Var $1_:Array [String ,05];}Class __9{Val dDO:_;Var __:Array [String ,074];}Class _:Nr{Var _:Array [Float ,3_40];}'''
        expect = '''Program([ClassDecl(Id(S),[]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($5_S_7),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(O),FloatType)),AttributeDecl(Instance,VarDecl(Id(_O1),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($ZQ),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($1_),ArrayType(5,StringType)))]),ClassDecl(Id(__9),[AttributeDecl(Instance,ConstDecl(Id(dDO),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(60,StringType)))]),ClassDecl(Id(_),Id(Nr),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(340,FloatType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 99))

    def test_100(self):
        line = '''Class _{}Class Q3:_{Var $K0b__W,_j:Float ;Var iNG8D:n_;Var $s5d_:Array [Array [Array [Array [Float ,0XCC_857_52],055],0B1000010],0b10111];Var _1U07H_:Array [Boolean ,0B1000010];Var $_0R4:String ;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(Q3),Id(_),[AttributeDecl(Static,VarDecl(Id($K0b__W),FloatType)),AttributeDecl(Instance,VarDecl(Id(_j),FloatType)),AttributeDecl(Instance,VarDecl(Id(iNG8D),ClassType(Id(n_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($s5d_),ArrayType(23,ArrayType(66,ArrayType(45,ArrayType(214456146,FloatType)))))),AttributeDecl(Instance,VarDecl(Id(_1U07H_),ArrayType(66,BoolType))),AttributeDecl(Static,VarDecl(Id($_0R4),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 100))

    def test_101(self):
        line = '''Class _:_{_(g_,_,_,y,_,_,_O,W_55:h;_,_X5_,Q,U:Array [Float ,033];S,_,_:Array [Array [String ,0x3E],0b101111];RWY,_n,_3,Z5,_,L:Array [Array [Array [Float ,16],0x3E],16]){}$_Y(D0_7:Uew_){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(_),Instance,[param(Id(g_),ClassType(Id(h))),param(Id(_),ClassType(Id(h))),param(Id(_),ClassType(Id(h))),param(Id(y),ClassType(Id(h))),param(Id(_),ClassType(Id(h))),param(Id(_),ClassType(Id(h))),param(Id(_O),ClassType(Id(h))),param(Id(W_55),ClassType(Id(h))),param(Id(_),ArrayType(27,FloatType)),param(Id(_X5_),ArrayType(27,FloatType)),param(Id(Q),ArrayType(27,FloatType)),param(Id(U),ArrayType(27,FloatType)),param(Id(S),ArrayType(47,ArrayType(62,StringType))),param(Id(_),ArrayType(47,ArrayType(62,StringType))),param(Id(_),ArrayType(47,ArrayType(62,StringType))),param(Id(RWY),ArrayType(16,ArrayType(62,ArrayType(16,FloatType)))),param(Id(_n),ArrayType(16,ArrayType(62,ArrayType(16,FloatType)))),param(Id(_3),ArrayType(16,ArrayType(62,ArrayType(16,FloatType)))),param(Id(Z5),ArrayType(16,ArrayType(62,ArrayType(16,FloatType)))),param(Id(_),ArrayType(16,ArrayType(62,ArrayType(16,FloatType)))),param(Id(L),ArrayType(16,ArrayType(62,ArrayType(16,FloatType))))],Block([])),MethodDecl(Id($_Y),Static,[param(Id(D0_7),ClassType(Id(Uew_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 101))

    def test_102(self):
        line = '''Class Z{Var _:Float ;}Class _s{}Class _{}Class b_:E{Val $0,$8:Boolean ;Var $692,$_99_:z;Val $Q,P:Array [Array [Array [Array [Boolean ,0X71DF],0b1010111],48],0x6_7];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(Z),[AttributeDecl(Instance,VarDecl(Id(_),FloatType))]),ClassDecl(Id(_s),[]),ClassDecl(Id(_),[]),ClassDecl(Id(b_),Id(E),[AttributeDecl(Static,ConstDecl(Id($0),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($8),BoolType,None)),AttributeDecl(Static,VarDecl(Id($692),ClassType(Id(z)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_99_),ClassType(Id(z)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($Q),ArrayType(103,ArrayType(48,ArrayType(87,ArrayType(29151,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(P),ArrayType(103,ArrayType(48,ArrayType(87,ArrayType(29151,BoolType)))),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 102))

    def test_103(self):
        line = '''Class T{}Class _:_{Constructor (Q3_4:Array [Array [Float ,0b1111],0x6];dxL_,I4:Array [Array [String ,32],07];K,_,_r7_2_,_:Float ;_,p:O41_3_;_2:J){} }Class __{}Class Z{}'''
        expect = '''Program([ClassDecl(Id(T),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(Q3_4),ArrayType(6,ArrayType(15,FloatType))),param(Id(dxL_),ArrayType(7,ArrayType(32,StringType))),param(Id(I4),ArrayType(7,ArrayType(32,StringType))),param(Id(K),FloatType),param(Id(_),FloatType),param(Id(_r7_2_),FloatType),param(Id(_),FloatType),param(Id(_),ClassType(Id(O41_3_))),param(Id(p),ClassType(Id(O41_3_))),param(Id(_2),ClassType(Id(J)))],Block([]))]),ClassDecl(Id(__),[]),ClassDecl(Id(Z),[])])'''
        self.assertTrue(TestAST.test(line, expect, 103))

    def test_104(self):
        line = '''Class _:_{Var $__U:Array [Array [Array [Array [Float ,0B100000],0XA],0124],0XE_F_0_0F];Val $Lg:Array [Array [Array [Array [Boolean ,0X6],70],70],0b1];}Class _c:_{Var _,__M_,m0:String ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($__U),ArrayType(978959,ArrayType(84,ArrayType(10,ArrayType(32,FloatType)))))),AttributeDecl(Static,ConstDecl(Id($Lg),ArrayType(1,ArrayType(70,ArrayType(70,ArrayType(6,BoolType)))),None))]),ClassDecl(Id(_c),Id(_),[AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Instance,VarDecl(Id(__M_),StringType)),AttributeDecl(Instance,VarDecl(Id(m0),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 104))

    def test_105(self):
        line = '''Class _:LT2{Val $1:Array [Array [Array [String ,7],0B101100],03_3_65_4_2_4_0_0];}Class M_:_h8{Var nf,_:Array [Array [Int ,0X1F],0B1_1_1];}Class _1:_0Lh_{Var $_,$5_0_t_:Array [Array [Array [Array [String ,0b1],5],0X1F],37];}'''
        expect = '''Program([ClassDecl(Id(_),Id(LT2),[AttributeDecl(Static,ConstDecl(Id($1),ArrayType(58377472,ArrayType(44,ArrayType(7,StringType))),None))]),ClassDecl(Id(M_),Id(_h8),[AttributeDecl(Instance,VarDecl(Id(nf),ArrayType(7,ArrayType(31,IntType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(7,ArrayType(31,IntType))))]),ClassDecl(Id(_1),Id(_0Lh_),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(37,ArrayType(31,ArrayType(5,ArrayType(1,StringType)))))),AttributeDecl(Static,VarDecl(Id($5_0_t_),ArrayType(37,ArrayType(31,ArrayType(5,ArrayType(1,StringType))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 105))

    def test_106(self):
        line = '''Class R{$2_(_:__;cx,_:c){}Constructor (){New __().D_();Break ;{Var Q,p:Float ;{}_::$4_I7();} }Val _,$9,$_1:Array [Array [Array [Array [String ,0B110010],044],5],83];Var $8:Int ;o(){}Var aD_,_4J,$8:Array [Boolean ,044];}'''
        expect = '''Program([ClassDecl(Id(R),[MethodDecl(Id($2_),Static,[param(Id(_),ClassType(Id(__))),param(Id(cx),ClassType(Id(c))),param(Id(_),ClassType(Id(c)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Call(NewExpr(Id(__),[]),Id(D_),[]),Break,Block([VarDecl(Id(Q),FloatType),VarDecl(Id(p),FloatType),Block([]),Call(Id(_),Id($4_I7),[])])])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(83,ArrayType(5,ArrayType(36,ArrayType(50,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(83,ArrayType(5,ArrayType(36,ArrayType(50,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($_1),ArrayType(83,ArrayType(5,ArrayType(36,ArrayType(50,StringType)))),None)),AttributeDecl(Static,VarDecl(Id($8),IntType)),MethodDecl(Id(o),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(aD_),ArrayType(36,BoolType))),AttributeDecl(Instance,VarDecl(Id(_4J),ArrayType(36,BoolType))),AttributeDecl(Static,VarDecl(Id($8),ArrayType(36,BoolType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 106))

    def test_107(self):
        line = '''Class __:_{$_M_3(_:Array [Boolean ,0XE];rl,_im:Boolean ;W:_;_Pt_,_N4B:_E){} }Class _:p__{Var $_,$Jz:Array [Int ,0x48];Constructor (){} }Class _{Destructor (){Return ;} }'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[MethodDecl(Id($_M_3),Static,[param(Id(_),ArrayType(14,BoolType)),param(Id(rl),BoolType),param(Id(_im),BoolType),param(Id(W),ClassType(Id(_))),param(Id(_Pt_),ClassType(Id(_E))),param(Id(_N4B),ClassType(Id(_E)))],Block([]))]),ClassDecl(Id(_),Id(p__),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(72,IntType))),AttributeDecl(Static,VarDecl(Id($Jz),ArrayType(72,IntType))),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 107))

    def test_108(self):
        line = '''Class _{Var $__K__m_,HiP:Float ;}Class b{Var $K,$__,$bz,_644_5:Array [Array [Array [Array [String ,0b1_1_1_0_1],02_05],0134],03];Var $__9T,_,_,$5,$_,_,$_o4:b;}Class A:_{v(G_,CF_2,P,z,z:Float ;p:_0){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($__K__m_),FloatType)),AttributeDecl(Instance,VarDecl(Id(HiP),FloatType))]),ClassDecl(Id(b),[AttributeDecl(Static,VarDecl(Id($K),ArrayType(3,ArrayType(92,ArrayType(133,ArrayType(29,StringType)))))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(3,ArrayType(92,ArrayType(133,ArrayType(29,StringType)))))),AttributeDecl(Static,VarDecl(Id($bz),ArrayType(3,ArrayType(92,ArrayType(133,ArrayType(29,StringType)))))),AttributeDecl(Instance,VarDecl(Id(_644_5),ArrayType(3,ArrayType(92,ArrayType(133,ArrayType(29,StringType)))))),AttributeDecl(Static,VarDecl(Id($__9T),ClassType(Id(b)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(b)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(b)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($5),ClassType(Id(b)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(b)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(b)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_o4),ClassType(Id(b)),NullLiteral()))]),ClassDecl(Id(A),Id(_),[MethodDecl(Id(v),Instance,[param(Id(G_),FloatType),param(Id(CF_2),FloatType),param(Id(P),FloatType),param(Id(z),FloatType),param(Id(z),FloatType),param(Id(p),ClassType(Id(_0)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 108))

    def test_109(self):
        line = '''Class Q5_:_{}Class _8{Val $67,$3_7,L_8:Array [Array [Int ,0X5E],2];}Class _Q{Constructor (_,S_,u,____,__:Array [Array [Float ,0341_0],0b1_01];eVH4_Q_,_:Float ;_:_;B,_P_,_,_,_O:Int ;__:Boolean ;_:Boolean ;___:Array [Array [Float ,0X48],0B1]){} }'''
        expect = '''Program([ClassDecl(Id(Q5_),Id(_),[]),ClassDecl(Id(_8),[AttributeDecl(Static,ConstDecl(Id($67),ArrayType(2,ArrayType(94,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($3_7),ArrayType(2,ArrayType(94,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(L_8),ArrayType(2,ArrayType(94,IntType)),None))]),ClassDecl(Id(_Q),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(5,ArrayType(1800,FloatType))),param(Id(S_),ArrayType(5,ArrayType(1800,FloatType))),param(Id(u),ArrayType(5,ArrayType(1800,FloatType))),param(Id(____),ArrayType(5,ArrayType(1800,FloatType))),param(Id(__),ArrayType(5,ArrayType(1800,FloatType))),param(Id(eVH4_Q_),FloatType),param(Id(_),FloatType),param(Id(_),ClassType(Id(_))),param(Id(B),IntType),param(Id(_P_),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(_O),IntType),param(Id(__),BoolType),param(Id(_),BoolType),param(Id(___),ArrayType(1,ArrayType(72,FloatType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 109))

    def test_110(self):
        line = '''Class x{$__(X_,o:Array [Int ,0B100000];E,_:Float ;_sX_2,_9425_,VT_0_i:_5D;t_:Array [Array [Boolean ,04],0x2E];_X_:Int ;J_,g7:Array [Array [Boolean ,02],84];_p,_oj_U,_:K2){}Destructor (){Break ;Continue ;} }Class _{}Class D{}Class _:__8{}Class g:_{}Class ___:_{}Class _5:_{}Class _49{}'''
        expect = '''Program([ClassDecl(Id(x),[MethodDecl(Id($__),Static,[param(Id(X_),ArrayType(32,IntType)),param(Id(o),ArrayType(32,IntType)),param(Id(E),FloatType),param(Id(_),FloatType),param(Id(_sX_2),ClassType(Id(_5D))),param(Id(_9425_),ClassType(Id(_5D))),param(Id(VT_0_i),ClassType(Id(_5D))),param(Id(t_),ArrayType(46,ArrayType(4,BoolType))),param(Id(_X_),IntType),param(Id(J_),ArrayType(84,ArrayType(2,BoolType))),param(Id(g7),ArrayType(84,ArrayType(2,BoolType))),param(Id(_p),ClassType(Id(K2))),param(Id(_oj_U),ClassType(Id(K2))),param(Id(_),ClassType(Id(K2)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Break,Continue]))]),ClassDecl(Id(_),[]),ClassDecl(Id(D),[]),ClassDecl(Id(_),Id(__8),[]),ClassDecl(Id(g),Id(_),[]),ClassDecl(Id(___),Id(_),[]),ClassDecl(Id(_5),Id(_),[]),ClassDecl(Id(_49),[])])'''
        self.assertTrue(TestAST.test(line, expect, 110))

    def test_111(self):
        line = '''Class mR{Destructor (){}Var $_I,$t,q,$6Q,_y15Z,$8_,$_,$170,$_,$9:Array [Array [Array [Array [Array [Array [Float ,76],0b1000010],07],03],0X64],9];Var _,$8Z,d_:Array [Int ,06_0_3_44_1];}'''
        expect = '''Program([ClassDecl(Id(mR),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_I),ArrayType(9,ArrayType(100,ArrayType(3,ArrayType(7,ArrayType(66,ArrayType(76,FloatType)))))))),AttributeDecl(Static,VarDecl(Id($t),ArrayType(9,ArrayType(100,ArrayType(3,ArrayType(7,ArrayType(66,ArrayType(76,FloatType)))))))),AttributeDecl(Instance,VarDecl(Id(q),ArrayType(9,ArrayType(100,ArrayType(3,ArrayType(7,ArrayType(66,ArrayType(76,FloatType)))))))),AttributeDecl(Static,VarDecl(Id($6Q),ArrayType(9,ArrayType(100,ArrayType(3,ArrayType(7,ArrayType(66,ArrayType(76,FloatType)))))))),AttributeDecl(Instance,VarDecl(Id(_y15Z),ArrayType(9,ArrayType(100,ArrayType(3,ArrayType(7,ArrayType(66,ArrayType(76,FloatType)))))))),AttributeDecl(Static,VarDecl(Id($8_),ArrayType(9,ArrayType(100,ArrayType(3,ArrayType(7,ArrayType(66,ArrayType(76,FloatType)))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(9,ArrayType(100,ArrayType(3,ArrayType(7,ArrayType(66,ArrayType(76,FloatType)))))))),AttributeDecl(Static,VarDecl(Id($170),ArrayType(9,ArrayType(100,ArrayType(3,ArrayType(7,ArrayType(66,ArrayType(76,FloatType)))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(9,ArrayType(100,ArrayType(3,ArrayType(7,ArrayType(66,ArrayType(76,FloatType)))))))),AttributeDecl(Static,VarDecl(Id($9),ArrayType(9,ArrayType(100,ArrayType(3,ArrayType(7,ArrayType(66,ArrayType(76,FloatType)))))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(198433,IntType))),AttributeDecl(Static,VarDecl(Id($8Z),ArrayType(198433,IntType))),AttributeDecl(Instance,VarDecl(Id(d_),ArrayType(198433,IntType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 111))

    def test_112(self):
        line = '''Class _1{}Class k_{Destructor (){}Constructor (G,j_7:Array [Array [Array [String ,0b1_0_1],02],88];__,x,U95,q:Array [Boolean ,0b1];s_,Q,b_:Array [String ,833]){}Val _:s;$d(io:Array [Float ,89];g:Array [Float ,0b111010]){}JD(tu:Array [Array [Array [Boolean ,0x8],0b111010],0b1]){} }Class w{}'''
        expect = '''Program([ClassDecl(Id(_1),[]),ClassDecl(Id(k_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(G),ArrayType(88,ArrayType(2,ArrayType(5,StringType)))),param(Id(j_7),ArrayType(88,ArrayType(2,ArrayType(5,StringType)))),param(Id(__),ArrayType(1,BoolType)),param(Id(x),ArrayType(1,BoolType)),param(Id(U95),ArrayType(1,BoolType)),param(Id(q),ArrayType(1,BoolType)),param(Id(s_),ArrayType(833,StringType)),param(Id(Q),ArrayType(833,StringType)),param(Id(b_),ArrayType(833,StringType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(s)),NullLiteral())),MethodDecl(Id($d),Static,[param(Id(io),ArrayType(89,FloatType)),param(Id(g),ArrayType(58,FloatType))],Block([])),MethodDecl(Id(JD),Instance,[param(Id(tu),ArrayType(1,ArrayType(58,ArrayType(8,BoolType))))],Block([]))]),ClassDecl(Id(w),[])])'''
        self.assertTrue(TestAST.test(line, expect, 112))

    def test_113(self):
        line = '''Class r:a0_{}Class x__:_{Var $j0,q:Array [Boolean ,0x1];}Class _{}Class U9__:_2{Val $_J,$F,h:Boolean ;_(_a:Int ){ {Return ;Return ;} }$f(){} }Class _g_:m788{Val $e:Int ;Destructor (){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(r),Id(a0_),[]),ClassDecl(Id(x__),Id(_),[AttributeDecl(Static,VarDecl(Id($j0),ArrayType(1,BoolType))),AttributeDecl(Instance,VarDecl(Id(q),ArrayType(1,BoolType)))]),ClassDecl(Id(_),[]),ClassDecl(Id(U9__),Id(_2),[AttributeDecl(Static,ConstDecl(Id($_J),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($F),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(h),BoolType,None)),MethodDecl(Id(_),Instance,[param(Id(_a),IntType)],Block([Block([Return(),Return()])])),MethodDecl(Id($f),Static,[],Block([]))]),ClassDecl(Id(_g_),Id(m788),[AttributeDecl(Static,ConstDecl(Id($e),IntType,None)),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 113))

    def test_114(self):
        line = '''Class _:__{Val g4:Array [Array [String ,75],0b11];Var J_8,$_8__0,$qm:_3_J_or;Destructor (){} }Class _:_{}Class __:W{$4(q:d7__;n:Q8;S,F:un){} }Class _{$_(NaV_R0:Array [String ,0110]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(__),[AttributeDecl(Instance,ConstDecl(Id(g4),ArrayType(3,ArrayType(75,StringType)),None)),AttributeDecl(Instance,VarDecl(Id(J_8),ClassType(Id(_3_J_or)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_8__0),ClassType(Id(_3_J_or)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($qm),ClassType(Id(_3_J_or)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(__),Id(W),[MethodDecl(Id($4),Static,[param(Id(q),ClassType(Id(d7__))),param(Id(n),ClassType(Id(Q8))),param(Id(S),ClassType(Id(un))),param(Id(F),ClassType(Id(un)))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id($_),Static,[param(Id(NaV_R0),ArrayType(72,StringType))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 114))

    def test_115(self):
        line = '''Class O_{_J(__Id_:Boolean ){}Var _:v_8;}Class ___1{}Class I4{$2(_5L8,_,B___:Array [Array [Int ,0127],06]){}m(){}Val _W_4,n3wd,$ch,l:Array [Array [Array [Int ,0127],61],0B1001011];}'''
        expect = '''Program([ClassDecl(Id(O_),[MethodDecl(Id(_J),Instance,[param(Id(__Id_),BoolType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(v_8)),NullLiteral()))]),ClassDecl(Id(___1),[]),ClassDecl(Id(I4),[MethodDecl(Id($2),Static,[param(Id(_5L8),ArrayType(6,ArrayType(87,IntType))),param(Id(_),ArrayType(6,ArrayType(87,IntType))),param(Id(B___),ArrayType(6,ArrayType(87,IntType)))],Block([])),MethodDecl(Id(m),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_W_4),ArrayType(75,ArrayType(61,ArrayType(87,IntType))),None)),AttributeDecl(Instance,ConstDecl(Id(n3wd),ArrayType(75,ArrayType(61,ArrayType(87,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($ch),ArrayType(75,ArrayType(61,ArrayType(87,IntType))),None)),AttributeDecl(Instance,ConstDecl(Id(l),ArrayType(75,ArrayType(61,ArrayType(87,IntType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 115))

    def test_116(self):
        line = '''Class __Y{}Class _:y7{Destructor (){}Constructor (){}$6(t_:Array [Float ,06]){Var g,_4W,_I:String ;Break ;}Var $j:Array [Int ,0125];_(_1Cm_,__,L_P2,q,B:_;o_:Boolean ;_:Float ){}Destructor (){Break ;}Constructor (_4_,_,_0__,Hx,_,___:_N___;_,J7_:_){} }'''
        expect = '''Program([ClassDecl(Id(__Y),[]),ClassDecl(Id(_),Id(y7),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($6),Static,[param(Id(t_),ArrayType(6,FloatType))],Block([VarDecl(Id(g),StringType),VarDecl(Id(_4W),StringType),VarDecl(Id(_I),StringType),Break])),AttributeDecl(Static,VarDecl(Id($j),ArrayType(85,IntType))),MethodDecl(Id(_),Instance,[param(Id(_1Cm_),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(L_P2),ClassType(Id(_))),param(Id(q),ClassType(Id(_))),param(Id(B),ClassType(Id(_))),param(Id(o_),BoolType),param(Id(_),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Break])),MethodDecl(Id(Constructor),Instance,[param(Id(_4_),ClassType(Id(_N___))),param(Id(_),ClassType(Id(_N___))),param(Id(_0__),ClassType(Id(_N___))),param(Id(Hx),ClassType(Id(_N___))),param(Id(_),ClassType(Id(_N___))),param(Id(___),ClassType(Id(_N___))),param(Id(_),ClassType(Id(_))),param(Id(J7_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 116))

    def test_117(self):
        line = '''Class w{$89_(E,J9k,r:__){}Constructor (_0:__D3_;_:Array [Array [Float ,0x1A],0b1];_,_:_;R:Array [Array [Array [Array [Array [String ,0B1],0x1A],0B1000000],0B1_0],0xFA9]){Var J_,d,B_:_;} }'''
        expect = '''Program([ClassDecl(Id(w),[MethodDecl(Id($89_),Static,[param(Id(E),ClassType(Id(__))),param(Id(J9k),ClassType(Id(__))),param(Id(r),ClassType(Id(__)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_0),ClassType(Id(__D3_))),param(Id(_),ArrayType(1,ArrayType(26,FloatType))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(R),ArrayType(4009,ArrayType(2,ArrayType(64,ArrayType(26,ArrayType(1,StringType))))))],Block([VarDecl(Id(J_),ClassType(Id(_)),NullLiteral()),VarDecl(Id(d),ClassType(Id(_)),NullLiteral()),VarDecl(Id(B_),ClassType(Id(_)),NullLiteral())]))])])'''
        self.assertTrue(TestAST.test(line, expect, 117))

    def test_118(self):
        line = '''Class _:N{}Class S:J4_E{Val $p:Float ;v_(G:Float ;_,_,_HI,_90f,_P8H,G:Array [Array [Int ,045],7];_,_Y,___d_,_7_:Array [Array [Array [Boolean ,01_140],0B100000],016];O:x_){Continue ;}Var $1:L9;}'''
        expect = '''Program([ClassDecl(Id(_),Id(N),[]),ClassDecl(Id(S),Id(J4_E),[AttributeDecl(Static,ConstDecl(Id($p),FloatType,None)),MethodDecl(Id(v_),Instance,[param(Id(G),FloatType),param(Id(_),ArrayType(7,ArrayType(37,IntType))),param(Id(_),ArrayType(7,ArrayType(37,IntType))),param(Id(_HI),ArrayType(7,ArrayType(37,IntType))),param(Id(_90f),ArrayType(7,ArrayType(37,IntType))),param(Id(_P8H),ArrayType(7,ArrayType(37,IntType))),param(Id(G),ArrayType(7,ArrayType(37,IntType))),param(Id(_),ArrayType(14,ArrayType(32,ArrayType(608,BoolType)))),param(Id(_Y),ArrayType(14,ArrayType(32,ArrayType(608,BoolType)))),param(Id(___d_),ArrayType(14,ArrayType(32,ArrayType(608,BoolType)))),param(Id(_7_),ArrayType(14,ArrayType(32,ArrayType(608,BoolType)))),param(Id(O),ClassType(Id(x_)))],Block([Continue])),AttributeDecl(Static,VarDecl(Id($1),ClassType(Id(L9)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 118))

    def test_119(self):
        line = '''Class __{}Class f:w{}Class Q:__{Val $e,vm__ft_7,j:Array [String ,05];Val ut:Boolean ;Val $_:String ;Var $_N_2__9:__;y__L_4A(_6,z,PP:_;_:Array [String ,05];_,f:Float ;_4E_D,Y4:q;sSK8Z:String ){} }'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(f),Id(w),[]),ClassDecl(Id(Q),Id(__),[AttributeDecl(Static,ConstDecl(Id($e),ArrayType(5,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(vm__ft_7),ArrayType(5,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(j),ArrayType(5,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(ut),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Static,VarDecl(Id($_N_2__9),ClassType(Id(__)),NullLiteral())),MethodDecl(Id(y__L_4A),Instance,[param(Id(_6),ClassType(Id(_))),param(Id(z),ClassType(Id(_))),param(Id(PP),ClassType(Id(_))),param(Id(_),ArrayType(5,StringType)),param(Id(_),FloatType),param(Id(f),FloatType),param(Id(_4E_D),ClassType(Id(q))),param(Id(Y4),ClassType(Id(q))),param(Id(sSK8Z),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 119))

    def test_120(self):
        line = '''Class _{Val $F,t_J4_,$9,$8,z:Array [Array [Boolean ,0b1100000],0b1100000];}Class x1{Constructor (_S,_:Array [Array [Array [Float ,04],4_0_6_2_7_2],55]){}$J_(){Var n9:Array [Float ,0X4D];} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($F),ArrayType(96,ArrayType(96,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(t_J4_),ArrayType(96,ArrayType(96,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(96,ArrayType(96,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($8),ArrayType(96,ArrayType(96,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(z),ArrayType(96,ArrayType(96,BoolType)),None))]),ClassDecl(Id(x1),[MethodDecl(Id(Constructor),Instance,[param(Id(_S),ArrayType(55,ArrayType(406272,ArrayType(4,FloatType)))),param(Id(_),ArrayType(55,ArrayType(406272,ArrayType(4,FloatType))))],Block([])),MethodDecl(Id($J_),Static,[],Block([VarDecl(Id(n9),ArrayType(77,FloatType))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 120))

    def test_121(self):
        line = '''Class _:j{Destructor (){}Constructor (_:Array [Boolean ,0X47];_19:Int ;YN,K:_N){}Destructor (){}$_(_N:Array [Boolean ,48];e_b9m:Float ){} }Class P_4j0{}Class Jx9a___{}'''
        expect = '''Program([ClassDecl(Id(_),Id(j),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(71,BoolType)),param(Id(_19),IntType),param(Id(YN),ClassType(Id(_N))),param(Id(K),ClassType(Id(_N)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_),Static,[param(Id(_N),ArrayType(48,BoolType)),param(Id(e_b9m),FloatType)],Block([]))]),ClassDecl(Id(P_4j0),[]),ClassDecl(Id(Jx9a___),[])])'''
        self.assertTrue(TestAST.test(line, expect, 121))

    def test_122(self):
        line = '''Class Zj:BgF3{Val $GQ:Array [Int ,47];Var $_,$xi:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,47],02],8_6],0X1C_3],0b1],0XE],050],7],02];Constructor (_,d,Rp__f7H,_b:Array [Array [Array [Array [Boolean ,0b1],0x1],0b1_101],0x45]){} }Class _:_{}'''
        expect = '''Program([ClassDecl(Id(Zj),Id(BgF3),[AttributeDecl(Static,ConstDecl(Id($GQ),ArrayType(47,IntType),None)),AttributeDecl(Static,VarDecl(Id($_),ArrayType(2,ArrayType(7,ArrayType(40,ArrayType(14,ArrayType(1,ArrayType(451,ArrayType(86,ArrayType(2,ArrayType(47,StringType))))))))))),AttributeDecl(Static,VarDecl(Id($xi),ArrayType(2,ArrayType(7,ArrayType(40,ArrayType(14,ArrayType(1,ArrayType(451,ArrayType(86,ArrayType(2,ArrayType(47,StringType))))))))))),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(69,ArrayType(13,ArrayType(1,ArrayType(1,BoolType))))),param(Id(d),ArrayType(69,ArrayType(13,ArrayType(1,ArrayType(1,BoolType))))),param(Id(Rp__f7H),ArrayType(69,ArrayType(13,ArrayType(1,ArrayType(1,BoolType))))),param(Id(_b),ArrayType(69,ArrayType(13,ArrayType(1,ArrayType(1,BoolType)))))],Block([]))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 122))

    def test_123(self):
        line = '''Class _{Constructor (K3_,B__,_:Array [Array [Array [Array [Array [Boolean ,0b1001011],9],0531_5],010],077]){}Destructor (){}$B(){}Destructor (){}Var $__l,b:Array [Array [Array [Array [Boolean ,0X57],0b1],0X57],56];}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(K3_),ArrayType(63,ArrayType(8,ArrayType(2765,ArrayType(9,ArrayType(75,BoolType)))))),param(Id(B__),ArrayType(63,ArrayType(8,ArrayType(2765,ArrayType(9,ArrayType(75,BoolType)))))),param(Id(_),ArrayType(63,ArrayType(8,ArrayType(2765,ArrayType(9,ArrayType(75,BoolType))))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($B),Static,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($__l),ArrayType(56,ArrayType(87,ArrayType(1,ArrayType(87,BoolType)))))),AttributeDecl(Instance,VarDecl(Id(b),ArrayType(56,ArrayType(87,ArrayType(1,ArrayType(87,BoolType))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 123))

    def test_124(self):
        line = '''Class _7:_{}Class b159_H__{$9(){Break ;}Constructor (z:Array [Boolean ,36];_qh9,_v:Array [Boolean ,0x2_F];___:Array [String ,36];e,_:Float ;_,D:Array [Array [String ,0x3],0X5D];_:String ;t_O_:_;_:_){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_7),Id(_),[]),ClassDecl(Id(b159_H__),[MethodDecl(Id($9),Static,[],Block([Break])),MethodDecl(Id(Constructor),Instance,[param(Id(z),ArrayType(36,BoolType)),param(Id(_qh9),ArrayType(47,BoolType)),param(Id(_v),ArrayType(47,BoolType)),param(Id(___),ArrayType(36,StringType)),param(Id(e),FloatType),param(Id(_),FloatType),param(Id(_),ArrayType(93,ArrayType(3,StringType))),param(Id(D),ArrayType(93,ArrayType(3,StringType))),param(Id(_),StringType),param(Id(t_O_),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 124))

    def test_125(self):
        line = '''Class _{$Q_4(rA,z,__3k:Array [Int ,48];___64:Array [Array [Float ,48],01];__,_,_T_,_5:Array [Array [Float ,0B11_1],01];_:_;Y6,_4,_:___6){} }Class _U{Destructor (){_::$8();}Val $_:o9H2;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($Q_4),Static,[param(Id(rA),ArrayType(48,IntType)),param(Id(z),ArrayType(48,IntType)),param(Id(__3k),ArrayType(48,IntType)),param(Id(___64),ArrayType(1,ArrayType(48,FloatType))),param(Id(__),ArrayType(1,ArrayType(7,FloatType))),param(Id(_),ArrayType(1,ArrayType(7,FloatType))),param(Id(_T_),ArrayType(1,ArrayType(7,FloatType))),param(Id(_5),ArrayType(1,ArrayType(7,FloatType))),param(Id(_),ClassType(Id(_))),param(Id(Y6),ClassType(Id(___6))),param(Id(_4),ClassType(Id(___6))),param(Id(_),ClassType(Id(___6)))],Block([]))]),ClassDecl(Id(_U),[MethodDecl(Id(Destructor),Instance,[],Block([Call(Id(_),Id($8),[])])),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(o9H2)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 125))

    def test_126(self):
        line = '''Class G{}Class _Y{Var $M:String ;}Class _Lmw:P{Var $_:Array [Array [Float ,60],0X5E];}Class q{Constructor (bp3:_;V1,V_h,TCJ:Array [Array [Array [Boolean ,0xE_3],0b1011100],0x5];_:Boolean ;UT:Boolean ){}Var q1l_:Array [Array [Int ,036],0B1];}Class _2_r{}Class _cp{}'''
        expect = '''Program([ClassDecl(Id(G),[]),ClassDecl(Id(_Y),[AttributeDecl(Static,VarDecl(Id($M),StringType))]),ClassDecl(Id(_Lmw),Id(P),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(94,ArrayType(60,FloatType))))]),ClassDecl(Id(q),[MethodDecl(Id(Constructor),Instance,[param(Id(bp3),ClassType(Id(_))),param(Id(V1),ArrayType(5,ArrayType(92,ArrayType(227,BoolType)))),param(Id(V_h),ArrayType(5,ArrayType(92,ArrayType(227,BoolType)))),param(Id(TCJ),ArrayType(5,ArrayType(92,ArrayType(227,BoolType)))),param(Id(_),BoolType),param(Id(UT),BoolType)],Block([])),AttributeDecl(Instance,VarDecl(Id(q1l_),ArrayType(1,ArrayType(30,IntType))))]),ClassDecl(Id(_2_r),[]),ClassDecl(Id(_cp),[])])'''
        self.assertTrue(TestAST.test(line, expect, 126))

    def test_127(self):
        line = '''Class f7:V{}Class q{Destructor (){Break ;}Var _,$__:Int ;Destructor (){ {}Val h8:_;}Val _,VU9,$6TuA,_:Array [String ,0b111];Var $Z,__KS:Array [Array [Array [Array [Boolean ,041],0B110001],041],8];}'''
        expect = '''Program([ClassDecl(Id(f7),Id(V),[]),ClassDecl(Id(q),[MethodDecl(Id(Destructor),Instance,[],Block([Break])),AttributeDecl(Instance,VarDecl(Id(_),IntType)),AttributeDecl(Static,VarDecl(Id($__),IntType)),MethodDecl(Id(Destructor),Instance,[],Block([Block([]),ConstDecl(Id(h8),ClassType(Id(_)),NullLiteral())])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(7,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(VU9),ArrayType(7,StringType),None)),AttributeDecl(Static,ConstDecl(Id($6TuA),ArrayType(7,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(7,StringType),None)),AttributeDecl(Static,VarDecl(Id($Z),ArrayType(8,ArrayType(33,ArrayType(49,ArrayType(33,BoolType)))))),AttributeDecl(Instance,VarDecl(Id(__KS),ArrayType(8,ArrayType(33,ArrayType(49,ArrayType(33,BoolType))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 127))

    def test_128(self):
        line = '''Class V6{}Class _:d{nh46M7V(_0,u60,th_R_,_5:Array [Boolean ,56];_5j7,_z,_8sq,_:String ;_c1__:Array [String ,0b1_1]){} }Class _{}Class O{Var eU,Chn:Int ;Var e59:String ;}Class _Lt:_72{}'''
        expect = '''Program([ClassDecl(Id(V6),[]),ClassDecl(Id(_),Id(d),[MethodDecl(Id(nh46M7V),Instance,[param(Id(_0),ArrayType(56,BoolType)),param(Id(u60),ArrayType(56,BoolType)),param(Id(th_R_),ArrayType(56,BoolType)),param(Id(_5),ArrayType(56,BoolType)),param(Id(_5j7),StringType),param(Id(_z),StringType),param(Id(_8sq),StringType),param(Id(_),StringType),param(Id(_c1__),ArrayType(3,StringType))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(O),[AttributeDecl(Instance,VarDecl(Id(eU),IntType)),AttributeDecl(Instance,VarDecl(Id(Chn),IntType)),AttributeDecl(Instance,VarDecl(Id(e59),StringType))]),ClassDecl(Id(_Lt),Id(_72),[])])'''
        self.assertTrue(TestAST.test(line, expect, 128))

    def test_129(self):
        line = '''Class _:__{Val $_9:_0;}Class _D_4738:Q_M3{Constructor (){}Var _u:Array [Array [Array [Array [Array [Array [Array [String ,8],0121],0B1],0B1],012_6_7],01],0412];Var $_,$T,$_:Array [Array [Array [Float ,0570],0X24],052];}'''
        expect = '''Program([ClassDecl(Id(_),Id(__),[AttributeDecl(Static,ConstDecl(Id($_9),ClassType(Id(_0)),NullLiteral()))]),ClassDecl(Id(_D_4738),Id(Q_M3),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_u),ArrayType(266,ArrayType(1,ArrayType(695,ArrayType(1,ArrayType(1,ArrayType(81,ArrayType(8,StringType))))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(42,ArrayType(36,ArrayType(376,FloatType))))),AttributeDecl(Static,VarDecl(Id($T),ArrayType(42,ArrayType(36,ArrayType(376,FloatType))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(42,ArrayType(36,ArrayType(376,FloatType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 129))

    def test_130(self):
        line = '''Class i_9_315:L_F__{Var nm4_:Float ;Constructor (){Break ;}Constructor (){}Destructor (){Return ;} }Class R:_rX{}Class CX{Constructor (_:Array [Boolean ,060]){}Destructor (){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(i_9_315),Id(L_F__),[AttributeDecl(Instance,VarDecl(Id(nm4_),FloatType)),MethodDecl(Id(Constructor),Instance,[],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Return()]))]),ClassDecl(Id(R),Id(_rX),[]),ClassDecl(Id(CX),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(48,BoolType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 130))

    def test_131(self):
        line = '''Class _H7_35{}Class A_:_a8{Val $G1__,$g,$F3,$n,Pc5xw2P____,$k:Boolean ;Destructor (){}Constructor (_,J_A6t:Array [Array [Array [Array [Float ,075],01],93],0b1]){} }Class KD:__9{}'''
        expect = '''Program([ClassDecl(Id(_H7_35),[]),ClassDecl(Id(A_),Id(_a8),[AttributeDecl(Static,ConstDecl(Id($G1__),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($g),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($F3),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($n),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(Pc5xw2P____),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($k),BoolType,None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,ArrayType(93,ArrayType(1,ArrayType(61,FloatType))))),param(Id(J_A6t),ArrayType(1,ArrayType(93,ArrayType(1,ArrayType(61,FloatType)))))],Block([]))]),ClassDecl(Id(KD),Id(__9),[])])'''
        self.assertTrue(TestAST.test(line, expect, 131))

    def test_132(self):
        line = '''Class g{Var M:Array [Array [Array [Array [Array [Int ,025],0x18],0X50],42],0B1];Var Cr2e_dK,$_,_4SK:Array [Array [Array [Boolean ,0X4E],0b1_01],0b1011111];$I(){} }Class __{Destructor (){}_(T,_:Float ){} }'''
        expect = '''Program([ClassDecl(Id(g),[AttributeDecl(Instance,VarDecl(Id(M),ArrayType(1,ArrayType(42,ArrayType(80,ArrayType(24,ArrayType(21,IntType))))))),AttributeDecl(Instance,VarDecl(Id(Cr2e_dK),ArrayType(95,ArrayType(5,ArrayType(78,BoolType))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(95,ArrayType(5,ArrayType(78,BoolType))))),AttributeDecl(Instance,VarDecl(Id(_4SK),ArrayType(95,ArrayType(5,ArrayType(78,BoolType))))),MethodDecl(Id($I),Static,[],Block([]))]),ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(T),FloatType),param(Id(_),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 132))

    def test_133(self):
        line = '''Class u{Val E,$LJM,$_5:Boolean ;}Class MS_{Destructor (){} }Class _:w{Var $46:Float ;Var _ss90_Y_,__:Array [Array [Array [Array [Array [Float ,07_16],24_3],2],13_45_1],060];}Class r5_{}'''
        expect = '''Program([ClassDecl(Id(u),[AttributeDecl(Instance,ConstDecl(Id(E),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($LJM),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_5),BoolType,None))]),ClassDecl(Id(MS_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(w),[AttributeDecl(Static,VarDecl(Id($46),FloatType)),AttributeDecl(Instance,VarDecl(Id(_ss90_Y_),ArrayType(48,ArrayType(13451,ArrayType(2,ArrayType(243,ArrayType(462,FloatType))))))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(48,ArrayType(13451,ArrayType(2,ArrayType(243,ArrayType(462,FloatType)))))))]),ClassDecl(Id(r5_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 133))

    def test_134(self):
        line = '''Class _{Val z,__d,U4_,_,n:Tc;K9(){} }Class _:xQ49_{_(V:Array [Boolean ,0B1000100];Ij,__:Array [Array [Array [Array [Float ,0xB],0B1000100],0B1000100],0x3];D5,Y:Array [Array [Array [Array [Array [Array [Array [String ,0135],0B1000100],3],0135],0X1C],0x7_A_6],51_5]){} }Class ax2{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(z),ClassType(Id(Tc)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__d),ClassType(Id(Tc)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(U4_),ClassType(Id(Tc)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(Tc)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(n),ClassType(Id(Tc)),NullLiteral())),MethodDecl(Id(K9),Instance,[],Block([]))]),ClassDecl(Id(_),Id(xQ49_),[MethodDecl(Id(_),Instance,[param(Id(V),ArrayType(68,BoolType)),param(Id(Ij),ArrayType(3,ArrayType(68,ArrayType(68,ArrayType(11,FloatType))))),param(Id(__),ArrayType(3,ArrayType(68,ArrayType(68,ArrayType(11,FloatType))))),param(Id(D5),ArrayType(515,ArrayType(1958,ArrayType(28,ArrayType(93,ArrayType(3,ArrayType(68,ArrayType(93,StringType)))))))),param(Id(Y),ArrayType(515,ArrayType(1958,ArrayType(28,ArrayType(93,ArrayType(3,ArrayType(68,ArrayType(93,StringType))))))))],Block([]))]),ClassDecl(Id(ax2),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 134))

    def test_135(self):
        line = '''Class _:h{}Class _{$1(_:Float ){}Val z4:Int ;Var A:Int ;Var l:Array [String ,65];Destructor (){}Constructor (_:_to7){Break ;Return ;}Var _E_:Array [Array [Float ,65],0xF];}'''
        expect = '''Program([ClassDecl(Id(_),Id(h),[]),ClassDecl(Id(_),[MethodDecl(Id($1),Static,[param(Id(_),FloatType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(z4),IntType,None)),AttributeDecl(Instance,VarDecl(Id(A),IntType)),AttributeDecl(Instance,VarDecl(Id(l),ArrayType(65,StringType))),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_to7)))],Block([Break,Return()])),AttributeDecl(Instance,VarDecl(Id(_E_),ArrayType(15,ArrayType(65,FloatType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 135))

    def test_136(self):
        line = '''Class N{}Class _{Val w_:Array [Array [Boolean ,0b1],07];}Class b47{B_(_,p_2:Array [String ,0b111100];d3:Boolean ;_:Array [Array [Array [Int ,0b1],600],4];a_:Array [String ,0XF]){} }Class v_{}'''
        expect = '''Program([ClassDecl(Id(N),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(w_),ArrayType(7,ArrayType(1,BoolType)),None))]),ClassDecl(Id(b47),[MethodDecl(Id(B_),Instance,[param(Id(_),ArrayType(60,StringType)),param(Id(p_2),ArrayType(60,StringType)),param(Id(d3),BoolType),param(Id(_),ArrayType(4,ArrayType(600,ArrayType(1,IntType)))),param(Id(a_),ArrayType(15,StringType))],Block([]))]),ClassDecl(Id(v_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 136))

    def test_137(self):
        line = '''Class _Q7:_{Var F:Boolean ;Constructor (_gBdR,_:H;_:Array [Array [Array [Array [Int ,13],0x9_B_2],0B1],13];_,_,DG:Boolean ;Q:Array [Array [Float ,0101],0xB]){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_Q7),Id(_),[AttributeDecl(Instance,VarDecl(Id(F),BoolType)),MethodDecl(Id(Constructor),Instance,[param(Id(_gBdR),ClassType(Id(H))),param(Id(_),ClassType(Id(H))),param(Id(_),ArrayType(13,ArrayType(1,ArrayType(2482,ArrayType(13,IntType))))),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(DG),BoolType),param(Id(Q),ArrayType(11,ArrayType(65,FloatType)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 137))

    def test_138(self):
        line = '''Class k3_K6G__KMgU{Destructor (){} }Class __6_:S0X2{}Class t:A{}Class h:Z_{Destructor (){}Var p:Array [Array [Int ,0XB0],0b1];}Class _g:t_{_(){}Val $fL,S,_:_x;}Class _{}'''
        expect = '''Program([ClassDecl(Id(k3_K6G__KMgU),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__6_),Id(S0X2),[]),ClassDecl(Id(t),Id(A),[]),ClassDecl(Id(h),Id(Z_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(p),ArrayType(1,ArrayType(176,IntType))))]),ClassDecl(Id(_g),Id(t_),[MethodDecl(Id(_),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($fL),ClassType(Id(_x)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(S),ClassType(Id(_x)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_x)),NullLiteral()))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 138))

    def test_139(self):
        line = '''Class B{$j(){}$k(w,__,_:Array [Array [Float ,010_74],6];e,_q,x:String ;d_,R:Array [Array [Float ,0B110001],06_1];_,_9Wpn,s3,_8:Array [Array [Array [Array [Float ,0X1C_3],0B110001],0X1F],0136]){} }'''
        expect = '''Program([ClassDecl(Id(B),[MethodDecl(Id($j),Static,[],Block([])),MethodDecl(Id($k),Static,[param(Id(w),ArrayType(6,ArrayType(572,FloatType))),param(Id(__),ArrayType(6,ArrayType(572,FloatType))),param(Id(_),ArrayType(6,ArrayType(572,FloatType))),param(Id(e),StringType),param(Id(_q),StringType),param(Id(x),StringType),param(Id(d_),ArrayType(49,ArrayType(49,FloatType))),param(Id(R),ArrayType(49,ArrayType(49,FloatType))),param(Id(_),ArrayType(94,ArrayType(31,ArrayType(49,ArrayType(451,FloatType))))),param(Id(_9Wpn),ArrayType(94,ArrayType(31,ArrayType(49,ArrayType(451,FloatType))))),param(Id(s3),ArrayType(94,ArrayType(31,ArrayType(49,ArrayType(451,FloatType))))),param(Id(_8),ArrayType(94,ArrayType(31,ArrayType(49,ArrayType(451,FloatType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 139))

    def test_140(self):
        line = '''Class e{}Class __:_V_{}Class __{Val $no:Array [Array [Array [Array [Array [Array [Array [Float ,0B11],0137],0X4C],0b111001],0x7],0X4C],0XB];Val _u_:Array [Array [String ,0137],3_4];}'''
        expect = '''Program([ClassDecl(Id(e),[]),ClassDecl(Id(__),Id(_V_),[]),ClassDecl(Id(__),[AttributeDecl(Static,ConstDecl(Id($no),ArrayType(11,ArrayType(76,ArrayType(7,ArrayType(57,ArrayType(76,ArrayType(95,ArrayType(3,FloatType))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_u_),ArrayType(34,ArrayType(95,StringType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 140))

    def test_141(self):
        line = '''Class e:h74__5{Destructor (){}Var $D__,$m:Int ;Val $o,$j1_,S:_D20A_;Val $t7__6_1_,_,__,$E,$JW2l:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0b110],0X33],1_1],9],28],16_1],0B1],0B1111],0XE_F],02_6257_4];}Class wb{}'''
        expect = '''Program([ClassDecl(Id(e),Id(h74__5),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($D__),IntType)),AttributeDecl(Static,VarDecl(Id($m),IntType)),AttributeDecl(Static,ConstDecl(Id($o),ClassType(Id(_D20A_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($j1_),ClassType(Id(_D20A_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(S),ClassType(Id(_D20A_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($t7__6_1_),ArrayType(91516,ArrayType(239,ArrayType(15,ArrayType(1,ArrayType(161,ArrayType(28,ArrayType(9,ArrayType(11,ArrayType(51,ArrayType(6,StringType)))))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(91516,ArrayType(239,ArrayType(15,ArrayType(1,ArrayType(161,ArrayType(28,ArrayType(9,ArrayType(11,ArrayType(51,ArrayType(6,StringType)))))))))),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(91516,ArrayType(239,ArrayType(15,ArrayType(1,ArrayType(161,ArrayType(28,ArrayType(9,ArrayType(11,ArrayType(51,ArrayType(6,StringType)))))))))),None)),AttributeDecl(Static,ConstDecl(Id($E),ArrayType(91516,ArrayType(239,ArrayType(15,ArrayType(1,ArrayType(161,ArrayType(28,ArrayType(9,ArrayType(11,ArrayType(51,ArrayType(6,StringType)))))))))),None)),AttributeDecl(Static,ConstDecl(Id($JW2l),ArrayType(91516,ArrayType(239,ArrayType(15,ArrayType(1,ArrayType(161,ArrayType(28,ArrayType(9,ArrayType(11,ArrayType(51,ArrayType(6,StringType)))))))))),None))]),ClassDecl(Id(wb),[])])'''
        self.assertTrue(TestAST.test(line, expect, 141))

    def test_142(self):
        line = '''Class d:k{Val $K,$R,C3,_,m0,$Chf:Int ;Var Rz,z:Y_;}Class E:_HB_{Constructor (v8_6,__2OhS,a:String ){}Val ___:atE;}Class _{Var $b8Q:Array [String ,12];Var $t,Pt2,y78:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(d),Id(k),[AttributeDecl(Static,ConstDecl(Id($K),IntType,None)),AttributeDecl(Static,ConstDecl(Id($R),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(C3),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(m0),IntType,None)),AttributeDecl(Static,ConstDecl(Id($Chf),IntType,None)),AttributeDecl(Instance,VarDecl(Id(Rz),ClassType(Id(Y_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(z),ClassType(Id(Y_)),NullLiteral()))]),ClassDecl(Id(E),Id(_HB_),[MethodDecl(Id(Constructor),Instance,[param(Id(v8_6),StringType),param(Id(__2OhS),StringType),param(Id(a),StringType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(___),ClassType(Id(atE)),NullLiteral()))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($b8Q),ArrayType(12,StringType))),AttributeDecl(Static,VarDecl(Id($t),BoolType)),AttributeDecl(Instance,VarDecl(Id(Pt2),BoolType)),AttributeDecl(Instance,VarDecl(Id(y78),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 142))

    def test_143(self):
        line = '''Class _o{$0(_:Array [Boolean ,060_2];d,i:Float ;f8,X6:String ;_1_1,_,h_:String ;L:String ){Var _,l:Array [Array [Boolean ,0x1],0x1B];}Constructor (___c,__:q_r){}$5___(__,p:_){} }'''
        expect = '''Program([ClassDecl(Id(_o),[MethodDecl(Id($0),Static,[param(Id(_),ArrayType(386,BoolType)),param(Id(d),FloatType),param(Id(i),FloatType),param(Id(f8),StringType),param(Id(X6),StringType),param(Id(_1_1),StringType),param(Id(_),StringType),param(Id(h_),StringType),param(Id(L),StringType)],Block([VarDecl(Id(_),ArrayType(27,ArrayType(1,BoolType))),VarDecl(Id(l),ArrayType(27,ArrayType(1,BoolType)))])),MethodDecl(Id(Constructor),Instance,[param(Id(___c),ClassType(Id(q_r))),param(Id(__),ClassType(Id(q_r)))],Block([])),MethodDecl(Id($5___),Static,[param(Id(__),ClassType(Id(_))),param(Id(p),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 143))

    def test_144(self):
        line = '''Class A{Destructor (){}Destructor (){}Val $1:S;$51(h:Array [Array [Int ,023],0X13]){Break ;Val t,_:Array [Array [Boolean ,0xE_6],06];}Val $__a6:Array [Array [Int ,6],0x8];Constructor (_:Mmq){} }Class _q{}'''
        expect = '''Program([ClassDecl(Id(A),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($1),ClassType(Id(S)),NullLiteral())),MethodDecl(Id($51),Static,[param(Id(h),ArrayType(19,ArrayType(19,IntType)))],Block([Break,ConstDecl(Id(t),ArrayType(6,ArrayType(230,BoolType)),None),ConstDecl(Id(_),ArrayType(6,ArrayType(230,BoolType)),None)])),AttributeDecl(Static,ConstDecl(Id($__a6),ArrayType(8,ArrayType(6,IntType)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(Mmq)))],Block([]))]),ClassDecl(Id(_q),[])])'''
        self.assertTrue(TestAST.test(line, expect, 144))

    def test_145(self):
        line = '''Class R5:m3{Destructor (){}Constructor (_:Float ){}Var $_I:Int ;Destructor (){}Var $51_77y__0c,m_4_:Float ;}Class l:p0{}Class _{Var Ux:Array [Array [Array [Int ,5],44],0B100100];}'''
        expect = '''Program([ClassDecl(Id(R5),Id(m3),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType)],Block([])),AttributeDecl(Static,VarDecl(Id($_I),IntType)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($51_77y__0c),FloatType)),AttributeDecl(Instance,VarDecl(Id(m_4_),FloatType))]),ClassDecl(Id(l),Id(p0),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(Ux),ArrayType(36,ArrayType(44,ArrayType(5,IntType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 145))

    def test_146(self):
        line = '''Class _3_5uH{_(_p802d,iX:Array [Array [Int ,0X3_9],0b110010];QY,w_:Float ;b3:Array [Float ,83];TjEv_z_:Array [Array [Boolean ,0b110010],03_4_7_2];h:Array [String ,83];r0:w){} }Class __u_{}'''
        expect = '''Program([ClassDecl(Id(_3_5uH),[MethodDecl(Id(_),Instance,[param(Id(_p802d),ArrayType(50,ArrayType(57,IntType))),param(Id(iX),ArrayType(50,ArrayType(57,IntType))),param(Id(QY),FloatType),param(Id(w_),FloatType),param(Id(b3),ArrayType(83,FloatType)),param(Id(TjEv_z_),ArrayType(1850,ArrayType(50,BoolType))),param(Id(h),ArrayType(83,StringType)),param(Id(r0),ClassType(Id(w)))],Block([]))]),ClassDecl(Id(__u_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 146))

    def test_147(self):
        line = '''Class z_{Val _3,h_:Array [Int ,0XA];N(__,c9,_N___:Array [Array [Boolean ,025],0x37];_J,x,I,l_:Float ;_,j,e,_6:U6;C1,vB:tG){ {}Break ;Return ;}Var Q:Array [Array [Array [Float ,0b1_0],3],0B1];}Class f_{}'''
        expect = '''Program([ClassDecl(Id(z_),[AttributeDecl(Instance,ConstDecl(Id(_3),ArrayType(10,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(h_),ArrayType(10,IntType),None)),MethodDecl(Id(N),Instance,[param(Id(__),ArrayType(55,ArrayType(21,BoolType))),param(Id(c9),ArrayType(55,ArrayType(21,BoolType))),param(Id(_N___),ArrayType(55,ArrayType(21,BoolType))),param(Id(_J),FloatType),param(Id(x),FloatType),param(Id(I),FloatType),param(Id(l_),FloatType),param(Id(_),ClassType(Id(U6))),param(Id(j),ClassType(Id(U6))),param(Id(e),ClassType(Id(U6))),param(Id(_6),ClassType(Id(U6))),param(Id(C1),ClassType(Id(tG))),param(Id(vB),ClassType(Id(tG)))],Block([Block([]),Break,Return()])),AttributeDecl(Instance,VarDecl(Id(Q),ArrayType(1,ArrayType(3,ArrayType(2,FloatType)))))]),ClassDecl(Id(f_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 147))

    def test_148(self):
        line = '''Class S{Var _:Array [Array [Array [Array [Array [String ,0B1_1],0b1_00_1],0x46],0B110111],0B1];}Class __{Var $_i:Array [Boolean ,0XA_E];}Class _{Var Nx:Array [Array [Float ,0b111100],0x46];}'''
        expect = '''Program([ClassDecl(Id(S),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,ArrayType(55,ArrayType(70,ArrayType(9,ArrayType(3,StringType)))))))]),ClassDecl(Id(__),[AttributeDecl(Static,VarDecl(Id($_i),ArrayType(174,BoolType)))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(Nx),ArrayType(70,ArrayType(60,FloatType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 148))

    def test_149(self):
        line = '''Class H{k(){Val _,J_,m1:Array [Array [Boolean ,5],98];Continue ;}Val n4,$2:Array [Array [Array [Float ,98],0b1111],5];Constructor (J4k:Array [Boolean ,0105];x59_T:a7a1___2L;G,__7f_4,n:Array [Array [Array [Array [Float ,98],0B1011000],0B1],0x41];_,a_n3:Int ){Var y:Array [Array [Float ,0x41],0b1111];} }'''
        expect = '''Program([ClassDecl(Id(H),[MethodDecl(Id(k),Instance,[],Block([ConstDecl(Id(_),ArrayType(98,ArrayType(5,BoolType)),None),ConstDecl(Id(J_),ArrayType(98,ArrayType(5,BoolType)),None),ConstDecl(Id(m1),ArrayType(98,ArrayType(5,BoolType)),None),Continue])),AttributeDecl(Instance,ConstDecl(Id(n4),ArrayType(5,ArrayType(15,ArrayType(98,FloatType))),None)),AttributeDecl(Static,ConstDecl(Id($2),ArrayType(5,ArrayType(15,ArrayType(98,FloatType))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(J4k),ArrayType(69,BoolType)),param(Id(x59_T),ClassType(Id(a7a1___2L))),param(Id(G),ArrayType(65,ArrayType(1,ArrayType(88,ArrayType(98,FloatType))))),param(Id(__7f_4),ArrayType(65,ArrayType(1,ArrayType(88,ArrayType(98,FloatType))))),param(Id(n),ArrayType(65,ArrayType(1,ArrayType(88,ArrayType(98,FloatType))))),param(Id(_),IntType),param(Id(a_n3),IntType)],Block([VarDecl(Id(y),ArrayType(15,ArrayType(65,FloatType)))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 149))

    def test_150(self):
        line = '''Class _001:L{Destructor (){}Constructor (__MI,Y,e:Int ;A,___8:Array [Array [Array [Float ,5],0112],07103];g,fF:W;_:e;__,__:Array [Array [Array [Array [Array [Array [Array [Boolean ,0B11],05],0b1001],0112],05],0X55],0xF];_7_3,_,_:Array [Array [Float ,0XE],71];_:String ){}_(){Var H:G2S;} }'''
        expect = '''Program([ClassDecl(Id(_001),Id(L),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__MI),IntType),param(Id(Y),IntType),param(Id(e),IntType),param(Id(A),ArrayType(3651,ArrayType(74,ArrayType(5,FloatType)))),param(Id(___8),ArrayType(3651,ArrayType(74,ArrayType(5,FloatType)))),param(Id(g),ClassType(Id(W))),param(Id(fF),ClassType(Id(W))),param(Id(_),ClassType(Id(e))),param(Id(__),ArrayType(15,ArrayType(85,ArrayType(5,ArrayType(74,ArrayType(9,ArrayType(5,ArrayType(3,BoolType)))))))),param(Id(__),ArrayType(15,ArrayType(85,ArrayType(5,ArrayType(74,ArrayType(9,ArrayType(5,ArrayType(3,BoolType)))))))),param(Id(_7_3),ArrayType(71,ArrayType(14,FloatType))),param(Id(_),ArrayType(71,ArrayType(14,FloatType))),param(Id(_),ArrayType(71,ArrayType(14,FloatType))),param(Id(_),StringType)],Block([])),MethodDecl(Id(_),Instance,[],Block([VarDecl(Id(H),ClassType(Id(G2S)),NullLiteral())]))])])'''
        self.assertTrue(TestAST.test(line, expect, 150))

    def test_151(self):
        line = '''Class _:_{Var $6,_:_;}Class _2:s9{Val _q:String ;Destructor (){Break ;}Destructor (){}_c(_,MD_,_:Array [String ,0x4F];g:Float ){}Destructor (){}Val _,_:Boolean ;Var $__2,$02__t,e,$36,Y:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($6),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_2),Id(s9),[AttributeDecl(Instance,ConstDecl(Id(_q),StringType,None)),MethodDecl(Id(Destructor),Instance,[],Block([Break])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_c),Instance,[param(Id(_),ArrayType(79,StringType)),param(Id(MD_),ArrayType(79,StringType)),param(Id(_),ArrayType(79,StringType)),param(Id(g),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Static,VarDecl(Id($__2),BoolType)),AttributeDecl(Static,VarDecl(Id($02__t),BoolType)),AttributeDecl(Instance,VarDecl(Id(e),BoolType)),AttributeDecl(Static,VarDecl(Id($36),BoolType)),AttributeDecl(Instance,VarDecl(Id(Y),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 151))

    def test_152(self):
        line = '''Class _7k:kA{}Class v:_{}Class V{$___(a:Array [Boolean ,0X16];C,R0,y_7,_f:Float ;_,_,n8:Array [Float ,8]){}Destructor (){} }Class n:_P{Constructor (){Return ;}Constructor (){} }Class _:_8_{}'''
        expect = '''Program([ClassDecl(Id(_7k),Id(kA),[]),ClassDecl(Id(v),Id(_),[]),ClassDecl(Id(V),[MethodDecl(Id($___),Static,[param(Id(a),ArrayType(22,BoolType)),param(Id(C),FloatType),param(Id(R0),FloatType),param(Id(y_7),FloatType),param(Id(_f),FloatType),param(Id(_),ArrayType(8,FloatType)),param(Id(_),ArrayType(8,FloatType)),param(Id(n8),ArrayType(8,FloatType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(n),Id(_P),[MethodDecl(Id(Constructor),Instance,[],Block([Return()])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_8_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 152))

    def test_153(self):
        line = '''Class Hx_0__:_H_1K{Val $_,$I_,_Pn:Int ;Constructor (){ {}{} }$n(Z,P30:Int ;Lq:Int ){Var _,T_:Array [Array [String ,01],0b1];}Constructor (){}Var $_6o__:Array [Float ,1_7_1];Var _,$4_m_:_;}'''
        expect = '''Program([ClassDecl(Id(Hx_0__),Id(_H_1K),[AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($I_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_Pn),IntType,None)),MethodDecl(Id(Constructor),Instance,[],Block([Block([]),Block([])])),MethodDecl(Id($n),Static,[param(Id(Z),IntType),param(Id(P30),IntType),param(Id(Lq),IntType)],Block([VarDecl(Id(_),ArrayType(1,ArrayType(1,StringType))),VarDecl(Id(T_),ArrayType(1,ArrayType(1,StringType)))])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_6o__),ArrayType(171,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($4_m_),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 153))

    def test_154(self):
        line = '''Class _U:A{Constructor (_3__R,E:Array [Array [Float ,60],0X62];_4,O4_,B,_,_8a3:Array [Int ,0777];R:String ;b,_L,_:Boolean ;n_,_,_:A;o_:S_;_,p20:Array [Boolean ,0x5_3_4_E]){} }Class O:QI4{}'''
        expect = '''Program([ClassDecl(Id(_U),Id(A),[MethodDecl(Id(Constructor),Instance,[param(Id(_3__R),ArrayType(98,ArrayType(60,FloatType))),param(Id(E),ArrayType(98,ArrayType(60,FloatType))),param(Id(_4),ArrayType(511,IntType)),param(Id(O4_),ArrayType(511,IntType)),param(Id(B),ArrayType(511,IntType)),param(Id(_),ArrayType(511,IntType)),param(Id(_8a3),ArrayType(511,IntType)),param(Id(R),StringType),param(Id(b),BoolType),param(Id(_L),BoolType),param(Id(_),BoolType),param(Id(n_),ClassType(Id(A))),param(Id(_),ClassType(Id(A))),param(Id(_),ClassType(Id(A))),param(Id(o_),ClassType(Id(S_))),param(Id(_),ArrayType(21326,BoolType)),param(Id(p20),ArrayType(21326,BoolType))],Block([]))]),ClassDecl(Id(O),Id(QI4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 154))

    def test_155(self):
        line = '''Class _:g{Var _,H_2:Array [Array [Float ,0B1],0b11];}Class U:E1{Constructor (_:Int ;_:X5_87_;W:String ;_,W_7:String ){} }Class r7{$_(l,V_,P_lm:Float ;S_,_V,bl_:Array [Array [Boolean ,0B10],0B1];_:Boolean ;hl:Array [String ,0B10];A,VH,A,_:n__){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(g),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,ArrayType(1,FloatType)))),AttributeDecl(Instance,VarDecl(Id(H_2),ArrayType(3,ArrayType(1,FloatType))))]),ClassDecl(Id(U),Id(E1),[MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(_),ClassType(Id(X5_87_))),param(Id(W),StringType),param(Id(_),StringType),param(Id(W_7),StringType)],Block([]))]),ClassDecl(Id(r7),[MethodDecl(Id($_),Static,[param(Id(l),FloatType),param(Id(V_),FloatType),param(Id(P_lm),FloatType),param(Id(S_),ArrayType(1,ArrayType(2,BoolType))),param(Id(_V),ArrayType(1,ArrayType(2,BoolType))),param(Id(bl_),ArrayType(1,ArrayType(2,BoolType))),param(Id(_),BoolType),param(Id(hl),ArrayType(2,StringType)),param(Id(A),ClassType(Id(n__))),param(Id(VH),ClassType(Id(n__))),param(Id(A),ClassType(Id(n__))),param(Id(_),ClassType(Id(n__)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 155))

    def test_156(self):
        line = '''Class v:_{}Class JV_{Constructor (_7:Array [Array [Array [Array [String ,64],3_0],04_76_530],64];A,_,Yk,_,_,_,e,Q,s_,J_,__w_,_:AG;_:UI_;__:Boolean ;_047:A){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(v),Id(_),[]),ClassDecl(Id(JV_),[MethodDecl(Id(Constructor),Instance,[param(Id(_7),ArrayType(64,ArrayType(163160,ArrayType(30,ArrayType(64,StringType))))),param(Id(A),ClassType(Id(AG))),param(Id(_),ClassType(Id(AG))),param(Id(Yk),ClassType(Id(AG))),param(Id(_),ClassType(Id(AG))),param(Id(_),ClassType(Id(AG))),param(Id(_),ClassType(Id(AG))),param(Id(e),ClassType(Id(AG))),param(Id(Q),ClassType(Id(AG))),param(Id(s_),ClassType(Id(AG))),param(Id(J_),ClassType(Id(AG))),param(Id(__w_),ClassType(Id(AG))),param(Id(_),ClassType(Id(AG))),param(Id(_),ClassType(Id(UI_))),param(Id(__),BoolType),param(Id(_047),ClassType(Id(A)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 156))

    def test_157(self):
        line = '''Class _:_8{}Class Z4{Constructor (zPp_,Cwt,wt9:Array [Int ,35];__2pU__:Array [Int ,32];_,b:Boolean ;w_,jZ,e7n,_,_:_;_WM,R_,V1,a_:_;X_,_,_:Array [String ,0B1];J_:Array [Array [Array [Array [Float ,04_011],051],32],0b1_00]){} }Class _:c{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_8),[]),ClassDecl(Id(Z4),[MethodDecl(Id(Constructor),Instance,[param(Id(zPp_),ArrayType(35,IntType)),param(Id(Cwt),ArrayType(35,IntType)),param(Id(wt9),ArrayType(35,IntType)),param(Id(__2pU__),ArrayType(32,IntType)),param(Id(_),BoolType),param(Id(b),BoolType),param(Id(w_),ClassType(Id(_))),param(Id(jZ),ClassType(Id(_))),param(Id(e7n),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_WM),ClassType(Id(_))),param(Id(R_),ClassType(Id(_))),param(Id(V1),ClassType(Id(_))),param(Id(a_),ClassType(Id(_))),param(Id(X_),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(J_),ArrayType(4,ArrayType(32,ArrayType(41,ArrayType(2057,FloatType)))))],Block([]))]),ClassDecl(Id(_),Id(c),[])])'''
        self.assertTrue(TestAST.test(line, expect, 157))

    def test_158(self):
        line = '''Class cZ{}Class _n{Val tM3_P2,V:Boolean ;Val $o:oYK_;}Class _{}Class e{Val $9V,$__5:Boolean ;$_D(){Continue ;Continue ;} }Class O{}Class C:y{}Class A{}Class s_{}Class _1:xN{}'''
        expect = '''Program([ClassDecl(Id(cZ),[]),ClassDecl(Id(_n),[AttributeDecl(Instance,ConstDecl(Id(tM3_P2),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(V),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($o),ClassType(Id(oYK_)),NullLiteral()))]),ClassDecl(Id(_),[]),ClassDecl(Id(e),[AttributeDecl(Static,ConstDecl(Id($9V),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($__5),BoolType,None)),MethodDecl(Id($_D),Static,[],Block([Continue,Continue]))]),ClassDecl(Id(O),[]),ClassDecl(Id(C),Id(y),[]),ClassDecl(Id(A),[]),ClassDecl(Id(s_),[]),ClassDecl(Id(_1),Id(xN),[])])'''
        self.assertTrue(TestAST.test(line, expect, 158))

    def test_159(self):
        line = '''Class _:h{$m7_(_q_:Array [Int ,0b101];___:Float ;_:WKxR__;S__a:Array [Array [Array [Array [Boolean ,0X4B],0B11111],0X42],86];LD5,_7:Boolean ;_,wh,s,_o:Int ;_8:Float ){} }Class _:G{}Class _pa8:I6{Var $_:Boolean ;}Class RH{}'''
        expect = '''Program([ClassDecl(Id(_),Id(h),[MethodDecl(Id($m7_),Static,[param(Id(_q_),ArrayType(5,IntType)),param(Id(___),FloatType),param(Id(_),ClassType(Id(WKxR__))),param(Id(S__a),ArrayType(86,ArrayType(66,ArrayType(31,ArrayType(75,BoolType))))),param(Id(LD5),BoolType),param(Id(_7),BoolType),param(Id(_),IntType),param(Id(wh),IntType),param(Id(s),IntType),param(Id(_o),IntType),param(Id(_8),FloatType)],Block([]))]),ClassDecl(Id(_),Id(G),[]),ClassDecl(Id(_pa8),Id(I6),[AttributeDecl(Static,VarDecl(Id($_),BoolType))]),ClassDecl(Id(RH),[])])'''
        self.assertTrue(TestAST.test(line, expect, 159))

    def test_160(self):
        line = '''Class M:w{Constructor (_6R_E,_:W_9;Qg:Float ;___,_Y_l,_M1i,f_0,i,__:String ;_,_7:Array [Float ,493];C,_34_,y:Array [Int ,040];__:_39;_,_:Boolean ;_E8__:String ){}O(x,f:_){} }Class _{}Class _T:M{Var r,$v9_,l,$_,$__,$8:Int ;}'''
        expect = '''Program([ClassDecl(Id(M),Id(w),[MethodDecl(Id(Constructor),Instance,[param(Id(_6R_E),ClassType(Id(W_9))),param(Id(_),ClassType(Id(W_9))),param(Id(Qg),FloatType),param(Id(___),StringType),param(Id(_Y_l),StringType),param(Id(_M1i),StringType),param(Id(f_0),StringType),param(Id(i),StringType),param(Id(__),StringType),param(Id(_),ArrayType(493,FloatType)),param(Id(_7),ArrayType(493,FloatType)),param(Id(C),ArrayType(32,IntType)),param(Id(_34_),ArrayType(32,IntType)),param(Id(y),ArrayType(32,IntType)),param(Id(__),ClassType(Id(_39))),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(_E8__),StringType)],Block([])),MethodDecl(Id(O),Instance,[param(Id(x),ClassType(Id(_))),param(Id(f),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_T),Id(M),[AttributeDecl(Instance,VarDecl(Id(r),IntType)),AttributeDecl(Static,VarDecl(Id($v9_),IntType)),AttributeDecl(Instance,VarDecl(Id(l),IntType)),AttributeDecl(Static,VarDecl(Id($_),IntType)),AttributeDecl(Static,VarDecl(Id($__),IntType)),AttributeDecl(Static,VarDecl(Id($8),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 160))

    def test_161(self):
        line = '''Class __dI{}Class V:P{Destructor (){} }Class m1_{}Class Z:X{Constructor (){}Val $_R:od9K;$23(){}Var $8:Int ;}Class _{}Class _o9:i{$2yi(){}Constructor (__,_:k_X){}Val _:Boolean ;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(__dI),[]),ClassDecl(Id(V),Id(P),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(m1_),[]),ClassDecl(Id(Z),Id(X),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_R),ClassType(Id(od9K)),NullLiteral())),MethodDecl(Id($23),Static,[],Block([])),AttributeDecl(Static,VarDecl(Id($8),IntType))]),ClassDecl(Id(_),[]),ClassDecl(Id(_o9),Id(i),[MethodDecl(Id($2yi),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(k_X))),param(Id(_),ClassType(Id(k_X)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 161))

    def test_162(self):
        line = '''Class _{$_21(__:String ;m_5_,_8:Array [Array [String ,3_29],9_262_1_6_0_0];I_:x6_;i,__3:Array [String ,0136];_N:Array [String ,0b1];GN:Array [Float ,056];Z8_wI1_8Sm,_,_,FF7x3_P,_:p;r6,__a:String ){}Destructor (){Continue ;}Constructor (_j__,K:V){ {} }Constructor (v8:Float ;_:Int ;X:Array [String ,0136];__,a,LO:Boolean ){}Val $K,$i53,X_,__,$z:_;}Class p:r{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($_21),Static,[param(Id(__),StringType),param(Id(m_5_),ArrayType(92621600,ArrayType(329,StringType))),param(Id(_8),ArrayType(92621600,ArrayType(329,StringType))),param(Id(I_),ClassType(Id(x6_))),param(Id(i),ArrayType(94,StringType)),param(Id(__3),ArrayType(94,StringType)),param(Id(_N),ArrayType(1,StringType)),param(Id(GN),ArrayType(46,FloatType)),param(Id(Z8_wI1_8Sm),ClassType(Id(p))),param(Id(_),ClassType(Id(p))),param(Id(_),ClassType(Id(p))),param(Id(FF7x3_P),ClassType(Id(p))),param(Id(_),ClassType(Id(p))),param(Id(r6),StringType),param(Id(__a),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_j__),ClassType(Id(V))),param(Id(K),ClassType(Id(V)))],Block([Block([])])),MethodDecl(Id(Constructor),Instance,[param(Id(v8),FloatType),param(Id(_),IntType),param(Id(X),ArrayType(94,StringType)),param(Id(__),BoolType),param(Id(a),BoolType),param(Id(LO),BoolType)],Block([])),AttributeDecl(Static,ConstDecl(Id($K),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($i53),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(X_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($z),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(p),Id(r),[])])'''
        self.assertTrue(TestAST.test(line, expect, 162))

    def test_163(self):
        line = '''Class _0QR_:U{}Class Z{Constructor (_,c52,B_,K_,B,_V_A:Array [String ,0B10110]){Continue ;{} }}Class __s_:E8{}Class _{_(_:Int ;_aW:Float ;__,aM3A:___;s:Int ){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_0QR_),Id(U),[]),ClassDecl(Id(Z),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(22,StringType)),param(Id(c52),ArrayType(22,StringType)),param(Id(B_),ArrayType(22,StringType)),param(Id(K_),ArrayType(22,StringType)),param(Id(B),ArrayType(22,StringType)),param(Id(_V_A),ArrayType(22,StringType))],Block([Continue,Block([])]))]),ClassDecl(Id(__s_),Id(E8),[]),ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[param(Id(_),IntType),param(Id(_aW),FloatType),param(Id(__),ClassType(Id(___))),param(Id(aM3A),ClassType(Id(___))),param(Id(s),IntType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 163))

    def test_164(self):
        line = '''Class z_h1:R{}Class _8{Constructor (){Continue ;}Var _F:Array [Array [String ,0X7],0B1];Destructor (){}Val E:Boolean ;}Class Rb_0_B_O2{Val $00,_,$_,K,_2_,LK:Array [Array [Int ,13],0x4A];Val $o:_;}'''
        expect = '''Program([ClassDecl(Id(z_h1),Id(R),[]),ClassDecl(Id(_8),[MethodDecl(Id(Constructor),Instance,[],Block([Continue])),AttributeDecl(Instance,VarDecl(Id(_F),ArrayType(1,ArrayType(7,StringType)))),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(E),BoolType,None))]),ClassDecl(Id(Rb_0_B_O2),[AttributeDecl(Static,ConstDecl(Id($00),ArrayType(74,ArrayType(13,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(74,ArrayType(13,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(74,ArrayType(13,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(K),ArrayType(74,ArrayType(13,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(_2_),ArrayType(74,ArrayType(13,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(LK),ArrayType(74,ArrayType(13,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($o),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 164))

    def test_165(self):
        line = '''Class _:a{Destructor (){}$_o_(J8,_:Array [Array [Float ,05],0B1100000]){} }Class Z{}Class p{Constructor (){}Constructor (o,_,S,t3lH,X__:Array [Boolean ,23_9]){}Var L,g:p5;Constructor (){ {} }}Class _{}Class _15{}'''
        expect = '''Program([ClassDecl(Id(_),Id(a),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_o_),Static,[param(Id(J8),ArrayType(96,ArrayType(5,FloatType))),param(Id(_),ArrayType(96,ArrayType(5,FloatType)))],Block([]))]),ClassDecl(Id(Z),[]),ClassDecl(Id(p),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(o),ArrayType(239,BoolType)),param(Id(_),ArrayType(239,BoolType)),param(Id(S),ArrayType(239,BoolType)),param(Id(t3lH),ArrayType(239,BoolType)),param(Id(X__),ArrayType(239,BoolType))],Block([])),AttributeDecl(Instance,VarDecl(Id(L),ClassType(Id(p5)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(g),ClassType(Id(p5)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_15),[])])'''
        self.assertTrue(TestAST.test(line, expect, 165))

    def test_166(self):
        line = '''Class B{Val _,U,$_,$5,$_P_sU4:_;_(pfR8:Int ;i,K,w1,_:Boolean ;_LTs_,_:Array [Boolean ,57];_,X,g___y,_h_7,_:Array [Array [Array [Int ,0b1011011],0b1],0b1_1];_,g:String ){Continue ;}Val $S,$_6_:Int ;}'''
        expect = '''Program([ClassDecl(Id(B),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(U),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($5),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_P_sU4),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(_),Instance,[param(Id(pfR8),IntType),param(Id(i),BoolType),param(Id(K),BoolType),param(Id(w1),BoolType),param(Id(_),BoolType),param(Id(_LTs_),ArrayType(57,BoolType)),param(Id(_),ArrayType(57,BoolType)),param(Id(_),ArrayType(3,ArrayType(1,ArrayType(91,IntType)))),param(Id(X),ArrayType(3,ArrayType(1,ArrayType(91,IntType)))),param(Id(g___y),ArrayType(3,ArrayType(1,ArrayType(91,IntType)))),param(Id(_h_7),ArrayType(3,ArrayType(1,ArrayType(91,IntType)))),param(Id(_),ArrayType(3,ArrayType(1,ArrayType(91,IntType)))),param(Id(_),StringType),param(Id(g),StringType)],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($S),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_6_),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 166))

    def test_167(self):
        line = '''Class lj:J4{}Class _3:l28{$H(O,p,_53b__892,_l,v:Float ;P:Int ;_,___:Array [Array [Float ,0XF_1_EB],0x6]){Val _,_,_,_:Array [Array [Array [Boolean ,0B1010000],0B1010000],0X11];} }Class _3:_59{}'''
        expect = '''Program([ClassDecl(Id(lj),Id(J4),[]),ClassDecl(Id(_3),Id(l28),[MethodDecl(Id($H),Static,[param(Id(O),FloatType),param(Id(p),FloatType),param(Id(_53b__892),FloatType),param(Id(_l),FloatType),param(Id(v),FloatType),param(Id(P),IntType),param(Id(_),ArrayType(6,ArrayType(61931,FloatType))),param(Id(___),ArrayType(6,ArrayType(61931,FloatType)))],Block([ConstDecl(Id(_),ArrayType(17,ArrayType(80,ArrayType(80,BoolType))),None),ConstDecl(Id(_),ArrayType(17,ArrayType(80,ArrayType(80,BoolType))),None),ConstDecl(Id(_),ArrayType(17,ArrayType(80,ArrayType(80,BoolType))),None),ConstDecl(Id(_),ArrayType(17,ArrayType(80,ArrayType(80,BoolType))),None)]))]),ClassDecl(Id(_3),Id(_59),[])])'''
        self.assertTrue(TestAST.test(line, expect, 167))

    def test_168(self):
        line = '''Class _:p{}Class A{Destructor (){} }Class K{}Class L:_A{}Class _:_{q(__J2____:r;c_,L2_9:rM){}Var _,$_,u:Array [Array [Array [Float ,0B1001010],8],02];Constructor (t,_,_:Boolean ;h1_,_8_:String ;_,__:Array [Array [Array [Boolean ,0b1],8],5]){}Destructor (){}$k(){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(p),[]),ClassDecl(Id(A),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(K),[]),ClassDecl(Id(L),Id(_A),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(q),Instance,[param(Id(__J2____),ClassType(Id(r))),param(Id(c_),ClassType(Id(rM))),param(Id(L2_9),ClassType(Id(rM)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(2,ArrayType(8,ArrayType(74,FloatType))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(2,ArrayType(8,ArrayType(74,FloatType))))),AttributeDecl(Instance,VarDecl(Id(u),ArrayType(2,ArrayType(8,ArrayType(74,FloatType))))),MethodDecl(Id(Constructor),Instance,[param(Id(t),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(h1_),StringType),param(Id(_8_),StringType),param(Id(_),ArrayType(5,ArrayType(8,ArrayType(1,BoolType)))),param(Id(__),ArrayType(5,ArrayType(8,ArrayType(1,BoolType))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($k),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 168))

    def test_169(self):
        line = '''Class e22:P{}Class _j_4:__E{Destructor (){} }Class s_{Constructor (uUF0,S_,_,_Fw:Array [Int ,0xA7];_x,_R:Array [String ,0xE_7E_9]){} }Class _:t{Destructor (){} }Class J{}Class p5:_{$9(f22__l:tY){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(e22),Id(P),[]),ClassDecl(Id(_j_4),Id(__E),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(s_),[MethodDecl(Id(Constructor),Instance,[param(Id(uUF0),ArrayType(167,IntType)),param(Id(S_),ArrayType(167,IntType)),param(Id(_),ArrayType(167,IntType)),param(Id(_Fw),ArrayType(167,IntType)),param(Id(_x),ArrayType(59369,StringType)),param(Id(_R),ArrayType(59369,StringType))],Block([]))]),ClassDecl(Id(_),Id(t),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(J),[]),ClassDecl(Id(p5),Id(_),[MethodDecl(Id($9),Static,[param(Id(f22__l),ClassType(Id(tY)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 169))

    def test_170(self):
        line = '''Class Lc{Val _,$_Y_:Int ;}Class O:___{Var $__,J3:Array [Array [String ,0X6],0132];Var $_,$_,$_,h:Array [Array [Array [Array [Array [String ,54],0X2],016],0132],0X5A];$_EZ(){Break ;} }Class _:K{}'''
        expect = '''Program([ClassDecl(Id(Lc),[AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_Y_),IntType,None))]),ClassDecl(Id(O),Id(___),[AttributeDecl(Static,VarDecl(Id($__),ArrayType(90,ArrayType(6,StringType)))),AttributeDecl(Instance,VarDecl(Id(J3),ArrayType(90,ArrayType(6,StringType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(90,ArrayType(90,ArrayType(14,ArrayType(2,ArrayType(54,StringType))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(90,ArrayType(90,ArrayType(14,ArrayType(2,ArrayType(54,StringType))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(90,ArrayType(90,ArrayType(14,ArrayType(2,ArrayType(54,StringType))))))),AttributeDecl(Instance,VarDecl(Id(h),ArrayType(90,ArrayType(90,ArrayType(14,ArrayType(2,ArrayType(54,StringType))))))),MethodDecl(Id($_EZ),Static,[],Block([Break]))]),ClassDecl(Id(_),Id(K),[])])'''
        self.assertTrue(TestAST.test(line, expect, 170))

    def test_171(self):
        line = '''Class _:_k{Constructor (k,g,_Z4,y_Z_:Boolean ;_8:Float ;_,_,_0E_:Array [Array [Array [Boolean ,64],0x47],0xE1E];_:Float ;_,z:Array [Array [Boolean ,64],85_22];_:Array [Int ,0X45];__,MP:Array [Array [String ,07],0B110_01_0];P_9_,_:String ;_:String ;__T:Float ;_:Int ){} }Class R:_A51Gi_{Var $3,$M,$_j7__,N:String ;iP(){} }Class _:_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_k),[MethodDecl(Id(Constructor),Instance,[param(Id(k),BoolType),param(Id(g),BoolType),param(Id(_Z4),BoolType),param(Id(y_Z_),BoolType),param(Id(_8),FloatType),param(Id(_),ArrayType(3614,ArrayType(71,ArrayType(64,BoolType)))),param(Id(_),ArrayType(3614,ArrayType(71,ArrayType(64,BoolType)))),param(Id(_0E_),ArrayType(3614,ArrayType(71,ArrayType(64,BoolType)))),param(Id(_),FloatType),param(Id(_),ArrayType(8522,ArrayType(64,BoolType))),param(Id(z),ArrayType(8522,ArrayType(64,BoolType))),param(Id(_),ArrayType(69,IntType)),param(Id(__),ArrayType(50,ArrayType(7,StringType))),param(Id(MP),ArrayType(50,ArrayType(7,StringType))),param(Id(P_9_),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(__T),FloatType),param(Id(_),IntType)],Block([]))]),ClassDecl(Id(R),Id(_A51Gi_),[AttributeDecl(Static,VarDecl(Id($3),StringType)),AttributeDecl(Static,VarDecl(Id($M),StringType)),AttributeDecl(Static,VarDecl(Id($_j7__),StringType)),AttributeDecl(Instance,VarDecl(Id(N),StringType)),MethodDecl(Id(iP),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 171))

    def test_172(self):
        line = '''Class __:v4{Val $B_,$3,_,$_,$S,A:Array [Array [Float ,047_2_46],0B101110];$1_(v0:String ){}Var $j,Z,y:_96;}Class l:_{Constructor (c4I_aK7,_,c,__Wk1Z0,P:Array [Int ,0b1]){} }Class f{}'''
        expect = '''Program([ClassDecl(Id(__),Id(v4),[AttributeDecl(Static,ConstDecl(Id($B_),ArrayType(46,ArrayType(20134,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($3),ArrayType(46,ArrayType(20134,FloatType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(46,ArrayType(20134,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(46,ArrayType(20134,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($S),ArrayType(46,ArrayType(20134,FloatType)),None)),AttributeDecl(Instance,ConstDecl(Id(A),ArrayType(46,ArrayType(20134,FloatType)),None)),MethodDecl(Id($1_),Static,[param(Id(v0),StringType)],Block([])),AttributeDecl(Static,VarDecl(Id($j),ClassType(Id(_96)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Z),ClassType(Id(_96)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(y),ClassType(Id(_96)),NullLiteral()))]),ClassDecl(Id(l),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(c4I_aK7),ArrayType(1,IntType)),param(Id(_),ArrayType(1,IntType)),param(Id(c),ArrayType(1,IntType)),param(Id(__Wk1Z0),ArrayType(1,IntType)),param(Id(P),ArrayType(1,IntType))],Block([]))]),ClassDecl(Id(f),[])])'''
        self.assertTrue(TestAST.test(line, expect, 172))

    def test_173(self):
        line = '''Class i:o3{_(_Z,_:Int ;_T,_,k7,q:k;_0,__V9a:Array [Boolean ,0123];e1,S6:Boolean ){ {} }}Class _:R269{Constructor (__K:String ){ho::$__();}Val __:_72;Destructor (){ {} }}Class _B6h:F{Val $_:Array [Int ,0b1_0_11_0];}'''
        expect = '''Program([ClassDecl(Id(i),Id(o3),[MethodDecl(Id(_),Instance,[param(Id(_Z),IntType),param(Id(_),IntType),param(Id(_T),ClassType(Id(k))),param(Id(_),ClassType(Id(k))),param(Id(k7),ClassType(Id(k))),param(Id(q),ClassType(Id(k))),param(Id(_0),ArrayType(83,BoolType)),param(Id(__V9a),ArrayType(83,BoolType)),param(Id(e1),BoolType),param(Id(S6),BoolType)],Block([Block([])]))]),ClassDecl(Id(_),Id(R269),[MethodDecl(Id(Constructor),Instance,[param(Id(__K),StringType)],Block([Call(Id(ho),Id($__),[])])),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(_72)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(_B6h),Id(F),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(22,IntType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 173))

    def test_174(self):
        line = '''Class O4o_:O__1_{Constructor (PO_7,z,_A,_w,P,__,_c_:q3;___:Array [Float ,0123];__:Array [String ,0123];_,__,_:R){}Constructor (_,_,_:qF_;I_X_6_5:Array [Array [Int ,0123],0X58];R1,_:_){}Var $_:Array [Int ,0x31_D5_2_5];}'''
        expect = '''Program([ClassDecl(Id(O4o_),Id(O__1_),[MethodDecl(Id(Constructor),Instance,[param(Id(PO_7),ClassType(Id(q3))),param(Id(z),ClassType(Id(q3))),param(Id(_A),ClassType(Id(q3))),param(Id(_w),ClassType(Id(q3))),param(Id(P),ClassType(Id(q3))),param(Id(__),ClassType(Id(q3))),param(Id(_c_),ClassType(Id(q3))),param(Id(___),ArrayType(83,FloatType)),param(Id(__),ArrayType(83,StringType)),param(Id(_),ClassType(Id(R))),param(Id(__),ClassType(Id(R))),param(Id(_),ClassType(Id(R)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(qF_))),param(Id(_),ClassType(Id(qF_))),param(Id(_),ClassType(Id(qF_))),param(Id(I_X_6_5),ArrayType(88,ArrayType(83,IntType))),param(Id(R1),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(3265829,IntType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 174))

    def test_175(self):
        line = '''Class _:__{Val $4O7:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,051],90],9],0B110101],0b100],0b1],0X25],2],52];}Class F_N7{}Class Ht_:s8{}Class _8{}'''
        expect = '''Program([ClassDecl(Id(_),Id(__),[AttributeDecl(Static,ConstDecl(Id($4O7),ArrayType(52,ArrayType(2,ArrayType(37,ArrayType(1,ArrayType(4,ArrayType(53,ArrayType(9,ArrayType(90,ArrayType(41,StringType))))))))),None))]),ClassDecl(Id(F_N7),[]),ClassDecl(Id(Ht_),Id(s8),[]),ClassDecl(Id(_8),[])])'''
        self.assertTrue(TestAST.test(line, expect, 175))

    def test_176(self):
        line = '''Class j8{Constructor (q_8E8k8:Array [Array [Array [Array [Array [Array [Int ,9_9],71],2_6_147],0b1],9],0x6];P:U2__9;E__,LC:Int ;m:__;_1j7:Array [Array [Array [Boolean ,4],8_5],03_7];LAbf:Array [Array [Float ,0b100000],0B1]){} }'''
        expect = '''Program([ClassDecl(Id(j8),[MethodDecl(Id(Constructor),Instance,[param(Id(q_8E8k8),ArrayType(6,ArrayType(9,ArrayType(1,ArrayType(26147,ArrayType(71,ArrayType(99,IntType))))))),param(Id(P),ClassType(Id(U2__9))),param(Id(E__),IntType),param(Id(LC),IntType),param(Id(m),ClassType(Id(__))),param(Id(_1j7),ArrayType(31,ArrayType(85,ArrayType(4,BoolType)))),param(Id(LAbf),ArrayType(1,ArrayType(32,FloatType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 176))

    def test_177(self):
        line = '''Class _:j{}Class _xv:k{}Class _{}Class n_:m{$_(G,n2Tl___1:o;rv7_,h:Float ){}Constructor (){}Destructor (){New _7_z().b()._._.Z._6();{} }}Class M{}Class u0__:_{}Class Pe{}Class y026d4:_{Destructor (){} }Class S{}'''
        expect = '''Program([ClassDecl(Id(_),Id(j),[]),ClassDecl(Id(_xv),Id(k),[]),ClassDecl(Id(_),[]),ClassDecl(Id(n_),Id(m),[MethodDecl(Id($_),Static,[param(Id(G),ClassType(Id(o))),param(Id(n2Tl___1),ClassType(Id(o))),param(Id(rv7_),FloatType),param(Id(h),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Call(FieldAccess(FieldAccess(FieldAccess(CallExpr(NewExpr(Id(_7_z),[]),Id(b),[]),Id(_)),Id(_)),Id(Z)),Id(_6),[]),Block([])]))]),ClassDecl(Id(M),[]),ClassDecl(Id(u0__),Id(_),[]),ClassDecl(Id(Pe),[]),ClassDecl(Id(y026d4),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(S),[])])'''
        self.assertTrue(TestAST.test(line, expect, 177))

    def test_178(self):
        line = '''Class _dG:_{Val $NI,$_q__:Array [Array [String ,29],0x3];Constructor (M:String ;F5:Array [Float ,0b11];j,w:String ){}Constructor (){Return ;Continue ;}Val _V:Q;Val _:Float ;}'''
        expect = '''Program([ClassDecl(Id(_dG),Id(_),[AttributeDecl(Static,ConstDecl(Id($NI),ArrayType(3,ArrayType(29,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($_q__),ArrayType(3,ArrayType(29,StringType)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(M),StringType),param(Id(F5),ArrayType(3,FloatType)),param(Id(j),StringType),param(Id(w),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Return(),Continue])),AttributeDecl(Instance,ConstDecl(Id(_V),ClassType(Id(Q)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 178))

    def test_179(self):
        line = '''Class _{}Class __F_{Constructor (_oykt:_){}Val $d6,$_,n24,$_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0B1],0141],0b11_1_10],0141],52],063],0141],0b11000],0b1_1_0];}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(__F_),[MethodDecl(Id(Constructor),Instance,[param(Id(_oykt),ClassType(Id(_)))],Block([])),AttributeDecl(Static,ConstDecl(Id($d6),ArrayType(6,ArrayType(24,ArrayType(97,ArrayType(51,ArrayType(52,ArrayType(97,ArrayType(30,ArrayType(97,ArrayType(1,FloatType))))))))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(6,ArrayType(24,ArrayType(97,ArrayType(51,ArrayType(52,ArrayType(97,ArrayType(30,ArrayType(97,ArrayType(1,FloatType))))))))),None)),AttributeDecl(Instance,ConstDecl(Id(n24),ArrayType(6,ArrayType(24,ArrayType(97,ArrayType(51,ArrayType(52,ArrayType(97,ArrayType(30,ArrayType(97,ArrayType(1,FloatType))))))))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(6,ArrayType(24,ArrayType(97,ArrayType(51,ArrayType(52,ArrayType(97,ArrayType(30,ArrayType(97,ArrayType(1,FloatType))))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 179))

    def test_180(self):
        line = '''Class Q:_{}Class _D_{Destructor (){}Constructor (IS2939:Boolean ;rT1:Array [Array [Float ,031],0B101011];u,o_,X:Array [Array [Array [Array [Int ,031],55],72],031];_:_A){Break ;} }Class _{}Class _:P__W{}Class _7{Destructor (){} }Class r{}Class qw:___2o0{}Class _:S{}Class _{}'''
        expect = '''Program([ClassDecl(Id(Q),Id(_),[]),ClassDecl(Id(_D_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(IS2939),BoolType),param(Id(rT1),ArrayType(43,ArrayType(25,FloatType))),param(Id(u),ArrayType(25,ArrayType(72,ArrayType(55,ArrayType(25,IntType))))),param(Id(o_),ArrayType(25,ArrayType(72,ArrayType(55,ArrayType(25,IntType))))),param(Id(X),ArrayType(25,ArrayType(72,ArrayType(55,ArrayType(25,IntType))))),param(Id(_),ClassType(Id(_A)))],Block([Break]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(P__W),[]),ClassDecl(Id(_7),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(r),[]),ClassDecl(Id(qw),Id(___2o0),[]),ClassDecl(Id(_),Id(S),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 180))

    def test_181(self):
        line = '''Class _{}Class _:G{Var __MH,$2,$_,$p6,$_bl,$1H__:Array [Int ,3];Val _C:Array [Float ,0X22];}Class u{}Class _{$_(__7,_,_3:Array [String ,055];B,_i,__,_m7,_,e7:Tj3;_:String ;eE,_:Int ){} }Class _3:u3{Var LDV,_1:Float ;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(G),[AttributeDecl(Instance,VarDecl(Id(__MH),ArrayType(3,IntType))),AttributeDecl(Static,VarDecl(Id($2),ArrayType(3,IntType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(3,IntType))),AttributeDecl(Static,VarDecl(Id($p6),ArrayType(3,IntType))),AttributeDecl(Static,VarDecl(Id($_bl),ArrayType(3,IntType))),AttributeDecl(Static,VarDecl(Id($1H__),ArrayType(3,IntType))),AttributeDecl(Instance,ConstDecl(Id(_C),ArrayType(34,FloatType),None))]),ClassDecl(Id(u),[]),ClassDecl(Id(_),[MethodDecl(Id($_),Static,[param(Id(__7),ArrayType(45,StringType)),param(Id(_),ArrayType(45,StringType)),param(Id(_3),ArrayType(45,StringType)),param(Id(B),ClassType(Id(Tj3))),param(Id(_i),ClassType(Id(Tj3))),param(Id(__),ClassType(Id(Tj3))),param(Id(_m7),ClassType(Id(Tj3))),param(Id(_),ClassType(Id(Tj3))),param(Id(e7),ClassType(Id(Tj3))),param(Id(_),StringType),param(Id(eE),IntType),param(Id(_),IntType)],Block([]))]),ClassDecl(Id(_3),Id(u3),[AttributeDecl(Instance,VarDecl(Id(LDV),FloatType)),AttributeDecl(Instance,VarDecl(Id(_1),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 181))

    def test_182(self):
        line = '''Class _0:__{}Class P{}Class c{$K__(_,_,_,Yr:Float ){} }Class oP_:_E__{}Class _Z6:_{$q521(){} }Class _E:__{Constructor (Uc,_,Z,_5f,__:a;_:String ){}Val u5__,_:Float ;}'''
        expect = '''Program([ClassDecl(Id(_0),Id(__),[]),ClassDecl(Id(P),[]),ClassDecl(Id(c),[MethodDecl(Id($K__),Static,[param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(Yr),FloatType)],Block([]))]),ClassDecl(Id(oP_),Id(_E__),[]),ClassDecl(Id(_Z6),Id(_),[MethodDecl(Id($q521),Static,[],Block([]))]),ClassDecl(Id(_E),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(Uc),ClassType(Id(a))),param(Id(_),ClassType(Id(a))),param(Id(Z),ClassType(Id(a))),param(Id(_5f),ClassType(Id(a))),param(Id(__),ClassType(Id(a))),param(Id(_),StringType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(u5__),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 182))

    def test_183(self):
        line = '''Class F1{Val _j0:Array [Array [Array [Int ,0b10],0x9C],0x2];Val rz,__8_:Array [Array [Array [Array [Array [Array [Array [Float ,0B1],3_822295],0xC23_21_136],047],70_4],0X50],0B100000];}'''
        expect = '''Program([ClassDecl(Id(F1),[AttributeDecl(Instance,ConstDecl(Id(_j0),ArrayType(2,ArrayType(156,ArrayType(2,IntType))),None)),AttributeDecl(Instance,ConstDecl(Id(rz),ArrayType(32,ArrayType(80,ArrayType(704,ArrayType(39,ArrayType(3258061110,ArrayType(3822295,ArrayType(1,FloatType))))))),None)),AttributeDecl(Instance,ConstDecl(Id(__8_),ArrayType(32,ArrayType(80,ArrayType(704,ArrayType(39,ArrayType(3258061110,ArrayType(3822295,ArrayType(1,FloatType))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 183))

    def test_184(self):
        line = '''Class Y0:___{Destructor (){} }Class X7:bY{Constructor (yp_a,Hr9,_:String ;R7,F:Array [Boolean ,0b1001011];aa,z___:_;I:Array [Array [String ,05_576_0],7_331];_,Xx,_,_3C,__2,_0i:Int ){} }'''
        expect = '''Program([ClassDecl(Id(Y0),Id(___),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(X7),Id(bY),[MethodDecl(Id(Constructor),Instance,[param(Id(yp_a),StringType),param(Id(Hr9),StringType),param(Id(_),StringType),param(Id(R7),ArrayType(75,BoolType)),param(Id(F),ArrayType(75,BoolType)),param(Id(aa),ClassType(Id(_))),param(Id(z___),ClassType(Id(_))),param(Id(I),ArrayType(7331,ArrayType(23536,StringType))),param(Id(_),IntType),param(Id(Xx),IntType),param(Id(_),IntType),param(Id(_3C),IntType),param(Id(__2),IntType),param(Id(_0i),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 184))

    def test_185(self):
        line = '''Class N:Dm{Destructor (){}$_(dll6P,F_a6y,_,T,____,_6,SEZ1K5:Float ;_V,T,w,_,d_,A,mc,_4:m;q_:_){}Val __7_,$_:Array [Int ,0b1001100];}Class _8:B{Val $2,$3,$Y:Array [String ,0b1001100];Val eP,$____:Int ;}'''
        expect = '''Program([ClassDecl(Id(N),Id(Dm),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_),Static,[param(Id(dll6P),FloatType),param(Id(F_a6y),FloatType),param(Id(_),FloatType),param(Id(T),FloatType),param(Id(____),FloatType),param(Id(_6),FloatType),param(Id(SEZ1K5),FloatType),param(Id(_V),ClassType(Id(m))),param(Id(T),ClassType(Id(m))),param(Id(w),ClassType(Id(m))),param(Id(_),ClassType(Id(m))),param(Id(d_),ClassType(Id(m))),param(Id(A),ClassType(Id(m))),param(Id(mc),ClassType(Id(m))),param(Id(_4),ClassType(Id(m))),param(Id(q_),ClassType(Id(_)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(__7_),ArrayType(76,IntType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(76,IntType),None))]),ClassDecl(Id(_8),Id(B),[AttributeDecl(Static,ConstDecl(Id($2),ArrayType(76,StringType),None)),AttributeDecl(Static,ConstDecl(Id($3),ArrayType(76,StringType),None)),AttributeDecl(Static,ConstDecl(Id($Y),ArrayType(76,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(eP),IntType,None)),AttributeDecl(Static,ConstDecl(Id($____),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 185))

    def test_186(self):
        line = '''Class e:_{}Class Z2{Val $S8r,_,$___h:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0xAE],0x3_3_5],9_5],0b11010],0b11010],0b11010],7],0b11010];Z(W3,W,M_e_3:e){} }Class j_F_:_4{}'''
        expect = '''Program([ClassDecl(Id(e),Id(_),[]),ClassDecl(Id(Z2),[AttributeDecl(Static,ConstDecl(Id($S8r),ArrayType(26,ArrayType(7,ArrayType(26,ArrayType(26,ArrayType(26,ArrayType(95,ArrayType(821,ArrayType(174,IntType)))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(26,ArrayType(7,ArrayType(26,ArrayType(26,ArrayType(26,ArrayType(95,ArrayType(821,ArrayType(174,IntType)))))))),None)),AttributeDecl(Static,ConstDecl(Id($___h),ArrayType(26,ArrayType(7,ArrayType(26,ArrayType(26,ArrayType(26,ArrayType(95,ArrayType(821,ArrayType(174,IntType)))))))),None)),MethodDecl(Id(Z),Instance,[param(Id(W3),ClassType(Id(e))),param(Id(W),ClassType(Id(e))),param(Id(M_e_3),ClassType(Id(e)))],Block([]))]),ClassDecl(Id(j_F_),Id(_4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 186))

    def test_187(self):
        line = '''Class O{Val $_:__;Val $_,_E2Z:String ;Constructor (_:Array [Array [Array [Array [String ,2],85],0XE],0xBFBE_8_F_1]){} }Class g0{}Class c{}Class __h{Val __:Array [Int ,0XB];}'''
        expect = '''Program([ClassDecl(Id(O),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_E2Z),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(201058545,ArrayType(14,ArrayType(85,ArrayType(2,StringType)))))],Block([]))]),ClassDecl(Id(g0),[]),ClassDecl(Id(c),[]),ClassDecl(Id(__h),[AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(11,IntType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 187))

    def test_188(self):
        line = '''Class _:A_9{$_MS(C:Boolean ){}Constructor (y,_:Array [Array [Array [Int ,0X59],0x28],0xB];_,_b_qt_,_:b;W_,_:Array [Float ,026]){}Constructor (z,_,_:Array [Boolean ,026];___:lU460){}Destructor (){Continue ;Var o:_;}Var rT:Array [Array [Array [Boolean ,0B100111],0B1],91];}'''
        expect = '''Program([ClassDecl(Id(_),Id(A_9),[MethodDecl(Id($_MS),Static,[param(Id(C),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(y),ArrayType(11,ArrayType(40,ArrayType(89,IntType)))),param(Id(_),ArrayType(11,ArrayType(40,ArrayType(89,IntType)))),param(Id(_),ClassType(Id(b))),param(Id(_b_qt_),ClassType(Id(b))),param(Id(_),ClassType(Id(b))),param(Id(W_),ArrayType(22,FloatType)),param(Id(_),ArrayType(22,FloatType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(z),ArrayType(22,BoolType)),param(Id(_),ArrayType(22,BoolType)),param(Id(_),ArrayType(22,BoolType)),param(Id(___),ClassType(Id(lU460)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue,VarDecl(Id(o),ClassType(Id(_)),NullLiteral())])),AttributeDecl(Instance,VarDecl(Id(rT),ArrayType(91,ArrayType(1,ArrayType(39,BoolType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 188))

    def test_189(self):
        line = '''Class ___0G:U{Destructor (){}Constructor (L:_;_,_0_W,i,_,i_,h,R__9C:Array [Array [Array [Array [String ,013],0X21],2],7]){}Destructor (){} }Class _3_86:Rt_{}Class __c:k{}'''
        expect = '''Program([ClassDecl(Id(___0G),Id(U),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(L),ClassType(Id(_))),param(Id(_),ArrayType(7,ArrayType(2,ArrayType(33,ArrayType(11,StringType))))),param(Id(_0_W),ArrayType(7,ArrayType(2,ArrayType(33,ArrayType(11,StringType))))),param(Id(i),ArrayType(7,ArrayType(2,ArrayType(33,ArrayType(11,StringType))))),param(Id(_),ArrayType(7,ArrayType(2,ArrayType(33,ArrayType(11,StringType))))),param(Id(i_),ArrayType(7,ArrayType(2,ArrayType(33,ArrayType(11,StringType))))),param(Id(h),ArrayType(7,ArrayType(2,ArrayType(33,ArrayType(11,StringType))))),param(Id(R__9C),ArrayType(7,ArrayType(2,ArrayType(33,ArrayType(11,StringType)))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_3_86),Id(Rt_),[]),ClassDecl(Id(__c),Id(k),[])])'''
        self.assertTrue(TestAST.test(line, expect, 189))

    def test_190(self):
        line = '''Class L{Destructor (){}Constructor (){Break ;Break ;}$52H(_v,_:String ;_:Array [String ,1_9]){} }Class pD10{}Class E8:w0{Val $X_,T,$56_:Array [Boolean ,043];Var _:Array [Array [Boolean ,51],0b1001];}'''
        expect = '''Program([ClassDecl(Id(L),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Break,Break])),MethodDecl(Id($52H),Static,[param(Id(_v),StringType),param(Id(_),StringType),param(Id(_),ArrayType(19,StringType))],Block([]))]),ClassDecl(Id(pD10),[]),ClassDecl(Id(E8),Id(w0),[AttributeDecl(Static,ConstDecl(Id($X_),ArrayType(35,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(T),ArrayType(35,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($56_),ArrayType(35,BoolType),None)),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(9,ArrayType(51,BoolType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 190))

    def test_191(self):
        line = '''Class _5{Val _:Array [Array [Array [Int ,91],0b1100001],11];$b(){}$f6(F4_032:x;_:Float ;_:_){}$_(_,j,q,H_,_,k:__;_,F:_;Z4_,c_:String ;__:Array [Array [String ,6],0b1_0]){} }'''
        expect = '''Program([ClassDecl(Id(_5),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(11,ArrayType(97,ArrayType(91,IntType))),None)),MethodDecl(Id($b),Static,[],Block([])),MethodDecl(Id($f6),Static,[param(Id(F4_032),ClassType(Id(x))),param(Id(_),FloatType),param(Id(_),ClassType(Id(_)))],Block([])),MethodDecl(Id($_),Static,[param(Id(_),ClassType(Id(__))),param(Id(j),ClassType(Id(__))),param(Id(q),ClassType(Id(__))),param(Id(H_),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(k),ClassType(Id(__))),param(Id(_),ClassType(Id(_))),param(Id(F),ClassType(Id(_))),param(Id(Z4_),StringType),param(Id(c_),StringType),param(Id(__),ArrayType(2,ArrayType(6,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 191))

    def test_192(self):
        line = '''Class P3__0_{Constructor (_07M,W,_A,u:Array [Int ,0xE];_:Sgpy;f_,_:_;Qo,y,f,_,H_,W_9,_:Array [Array [String ,0103],0103];_,c:CV){Continue ;}Val _:p_98;Destructor (){Break ;Val Y:Float ;}Val $o8,$2_,$2:_;Destructor (){ {} }}'''
        expect = '''Program([ClassDecl(Id(P3__0_),[MethodDecl(Id(Constructor),Instance,[param(Id(_07M),ArrayType(14,IntType)),param(Id(W),ArrayType(14,IntType)),param(Id(_A),ArrayType(14,IntType)),param(Id(u),ArrayType(14,IntType)),param(Id(_),ClassType(Id(Sgpy))),param(Id(f_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(Qo),ArrayType(67,ArrayType(67,StringType))),param(Id(y),ArrayType(67,ArrayType(67,StringType))),param(Id(f),ArrayType(67,ArrayType(67,StringType))),param(Id(_),ArrayType(67,ArrayType(67,StringType))),param(Id(H_),ArrayType(67,ArrayType(67,StringType))),param(Id(W_9),ArrayType(67,ArrayType(67,StringType))),param(Id(_),ArrayType(67,ArrayType(67,StringType))),param(Id(_),ClassType(Id(CV))),param(Id(c),ClassType(Id(CV)))],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(p_98)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([Break,ConstDecl(Id(Y),FloatType,None)])),AttributeDecl(Static,ConstDecl(Id($o8),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($2_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($2),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 192))

    def test_193(self):
        line = '''Class _:_J59__{Val $2A,$2,$v,$FHv_3,f:String ;$_U(f6YVuM,g:__9;P_5_:Array [Array [Array [Array [Array [Array [Array [Boolean ,17],056],0xE],0B1_01_1],02],0x9],0b100110]){} }Class _{$2(Y:z9){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_J59__),[AttributeDecl(Static,ConstDecl(Id($2A),StringType,None)),AttributeDecl(Static,ConstDecl(Id($2),StringType,None)),AttributeDecl(Static,ConstDecl(Id($v),StringType,None)),AttributeDecl(Static,ConstDecl(Id($FHv_3),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(f),StringType,None)),MethodDecl(Id($_U),Static,[param(Id(f6YVuM),ClassType(Id(__9))),param(Id(g),ClassType(Id(__9))),param(Id(P_5_),ArrayType(38,ArrayType(9,ArrayType(2,ArrayType(11,ArrayType(14,ArrayType(46,ArrayType(17,BoolType))))))))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id($2),Static,[param(Id(Y),ClassType(Id(z9)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 193))

    def test_194(self):
        line = '''Class j{Var $0:Float ;Var $_3i8,$x,Y:gk;Val t09:Array [Array [Array [Array [String ,0X1],0B10110],75],483];}Class _:G_{Destructor (){}$p(y_o,B4,_,_,_R_a,s:aG;UK8:Boolean ;_t,_:_J;j,w:Array [Array [Array [Array [Boolean ,0X1],75],063],0X5];Z:Array [Array [Boolean ,0B10110],0x11]){} }'''
        expect = '''Program([ClassDecl(Id(j),[AttributeDecl(Static,VarDecl(Id($0),FloatType)),AttributeDecl(Static,VarDecl(Id($_3i8),ClassType(Id(gk)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($x),ClassType(Id(gk)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Y),ClassType(Id(gk)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(t09),ArrayType(483,ArrayType(75,ArrayType(22,ArrayType(1,StringType)))),None))]),ClassDecl(Id(_),Id(G_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($p),Static,[param(Id(y_o),ClassType(Id(aG))),param(Id(B4),ClassType(Id(aG))),param(Id(_),ClassType(Id(aG))),param(Id(_),ClassType(Id(aG))),param(Id(_R_a),ClassType(Id(aG))),param(Id(s),ClassType(Id(aG))),param(Id(UK8),BoolType),param(Id(_t),ClassType(Id(_J))),param(Id(_),ClassType(Id(_J))),param(Id(j),ArrayType(5,ArrayType(51,ArrayType(75,ArrayType(1,BoolType))))),param(Id(w),ArrayType(5,ArrayType(51,ArrayType(75,ArrayType(1,BoolType))))),param(Id(Z),ArrayType(17,ArrayType(22,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 194))

    def test_195(self):
        line = '''Class P:_K{_(O,m__,h:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,062],053],5_1_0],053],07],0xB_9_0],9],8_2],053],02_2],6];I_,m,_:Array [String ,0xD_23A]){Break ;} }Class D:g_7c{}'''
        expect = '''Program([ClassDecl(Id(P),Id(_K),[MethodDecl(Id(_),Instance,[param(Id(O),ArrayType(6,ArrayType(18,ArrayType(43,ArrayType(82,ArrayType(9,ArrayType(2960,ArrayType(7,ArrayType(43,ArrayType(510,ArrayType(43,ArrayType(50,FloatType)))))))))))),param(Id(m__),ArrayType(6,ArrayType(18,ArrayType(43,ArrayType(82,ArrayType(9,ArrayType(2960,ArrayType(7,ArrayType(43,ArrayType(510,ArrayType(43,ArrayType(50,FloatType)))))))))))),param(Id(h),ArrayType(6,ArrayType(18,ArrayType(43,ArrayType(82,ArrayType(9,ArrayType(2960,ArrayType(7,ArrayType(43,ArrayType(510,ArrayType(43,ArrayType(50,FloatType)))))))))))),param(Id(I_),ArrayType(53818,StringType)),param(Id(m),ArrayType(53818,StringType)),param(Id(_),ArrayType(53818,StringType))],Block([Break]))]),ClassDecl(Id(D),Id(g_7c),[])])'''
        self.assertTrue(TestAST.test(line, expect, 195))

    def test_196(self):
        line = '''Class z:NS1{Var _,i_W,$M,$4V,U:y;Destructor (){}$T(K:Array [Array [Int ,0x5_F4],28];g,_:Boolean ;__fI,_9:__6;_:String ;Z:Array [Array [Array [String ,0XEB_8_C],0b1],0XB]){} }Class __{}'''
        expect = '''Program([ClassDecl(Id(z),Id(NS1),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(y)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(i_W),ClassType(Id(y)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($M),ClassType(Id(y)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($4V),ClassType(Id(y)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(U),ClassType(Id(y)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($T),Static,[param(Id(K),ArrayType(28,ArrayType(1524,IntType))),param(Id(g),BoolType),param(Id(_),BoolType),param(Id(__fI),ClassType(Id(__6))),param(Id(_9),ClassType(Id(__6))),param(Id(_),StringType),param(Id(Z),ArrayType(11,ArrayType(1,ArrayType(60300,StringType))))],Block([]))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 196))

    def test_197(self):
        line = '''Class _4{Val $O:Array [Array [Float ,817_3],03_06];}Class E{Var $_p_25__38,d:Array [Array [Array [String ,0114],0B1011110],0b1001011];Var _g20,T:du_;}Class t{}Class _{Constructor (){}_(_6:Array [Array [Boolean ,5],44]){}Constructor (_:y;_9_C:String ){}$pv9(){} }'''
        expect = '''Program([ClassDecl(Id(_4),[AttributeDecl(Static,ConstDecl(Id($O),ArrayType(198,ArrayType(8173,FloatType)),None))]),ClassDecl(Id(E),[AttributeDecl(Static,VarDecl(Id($_p_25__38),ArrayType(75,ArrayType(94,ArrayType(76,StringType))))),AttributeDecl(Instance,VarDecl(Id(d),ArrayType(75,ArrayType(94,ArrayType(76,StringType))))),AttributeDecl(Instance,VarDecl(Id(_g20),ClassType(Id(du_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(T),ClassType(Id(du_)),NullLiteral()))]),ClassDecl(Id(t),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(_6),ArrayType(44,ArrayType(5,BoolType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(y))),param(Id(_9_C),StringType)],Block([])),MethodDecl(Id($pv9),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 197))

    def test_198(self):
        line = '''Class p:P6_{C(_O,_,m,O2:Array [Array [Array [Boolean ,073],0x15],38399];t__1,K__:Array [Float ,0b1];Z,VP:Float ;__Z,__,O,_:_D;n,_,gx_P:Array [Float ,0X4E_D47_6]){} }Class _:_{}Class _{Destructor (){} }Class sA:I{Var _:Boolean ;Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(p),Id(P6_),[MethodDecl(Id(C),Instance,[param(Id(_O),ArrayType(38399,ArrayType(21,ArrayType(59,BoolType)))),param(Id(_),ArrayType(38399,ArrayType(21,ArrayType(59,BoolType)))),param(Id(m),ArrayType(38399,ArrayType(21,ArrayType(59,BoolType)))),param(Id(O2),ArrayType(38399,ArrayType(21,ArrayType(59,BoolType)))),param(Id(t__1),ArrayType(1,FloatType)),param(Id(K__),ArrayType(1,FloatType)),param(Id(Z),FloatType),param(Id(VP),FloatType),param(Id(__Z),ClassType(Id(_D))),param(Id(__),ClassType(Id(_D))),param(Id(O),ClassType(Id(_D))),param(Id(_),ClassType(Id(_D))),param(Id(n),ArrayType(5166198,FloatType)),param(Id(_),ArrayType(5166198,FloatType)),param(Id(gx_P),ArrayType(5166198,FloatType))],Block([]))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(sA),Id(I),[AttributeDecl(Instance,VarDecl(Id(_),BoolType)),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 198))

    def test_199(self):
        line = '''Class jE__:_1W_8_{Var $_6,$_:Int ;Constructor (){}Destructor (){ {} }}Class o{}Class x{Y(){}$Z(_,n_G,oP_:Array [Array [Array [Array [Float ,07_4_56_2_6],5],0b11_1_11],074]){Break ;} }Class f:_95{}Class sa{}'''
        expect = '''Program([ClassDecl(Id(jE__),Id(_1W_8_),[AttributeDecl(Static,VarDecl(Id($_6),IntType)),AttributeDecl(Static,VarDecl(Id($_),IntType)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(o),[]),ClassDecl(Id(x),[MethodDecl(Id(Y),Instance,[],Block([])),MethodDecl(Id($Z),Static,[param(Id(_),ArrayType(60,ArrayType(31,ArrayType(5,ArrayType(248726,FloatType))))),param(Id(n_G),ArrayType(60,ArrayType(31,ArrayType(5,ArrayType(248726,FloatType))))),param(Id(oP_),ArrayType(60,ArrayType(31,ArrayType(5,ArrayType(248726,FloatType)))))],Block([Break]))]),ClassDecl(Id(f),Id(_95),[]),ClassDecl(Id(sa),[])])'''
        self.assertTrue(TestAST.test(line, expect, 199))

    def test_200(self):
        line = '''Class _:M{Val $G:Array [Array [Array [Array [Array [Array [Boolean ,06],8],0x5C],0B1100100],6],39];}Class o:__{Destructor (){Continue ;}Var $lR__G:__;_P_(){} }Class m_:w_{Constructor (v,_q:_){}Constructor (){Return ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(M),[AttributeDecl(Static,ConstDecl(Id($G),ArrayType(39,ArrayType(6,ArrayType(100,ArrayType(92,ArrayType(8,ArrayType(6,BoolType)))))),None))]),ClassDecl(Id(o),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Static,VarDecl(Id($lR__G),ClassType(Id(__)),NullLiteral())),MethodDecl(Id(_P_),Instance,[],Block([]))]),ClassDecl(Id(m_),Id(w_),[MethodDecl(Id(Constructor),Instance,[param(Id(v),ClassType(Id(_))),param(Id(_q),ClassType(Id(_)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 200))

    def test_201(self):
        line = '''Class __{$3(H_:Array [String ,76];__,_d__7K,__:Array [Array [Int ,0X3],0b1];e__8l:Array [Array [Array [Array [Array [Array [Array [Array [String ,9],76],054],0X1],76],07_47],76],43]){}_(){}Constructor (d:I;_:S995a8;_,_:Array [Float ,0X2]){} }'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id($3),Static,[param(Id(H_),ArrayType(76,StringType)),param(Id(__),ArrayType(1,ArrayType(3,IntType))),param(Id(_d__7K),ArrayType(1,ArrayType(3,IntType))),param(Id(__),ArrayType(1,ArrayType(3,IntType))),param(Id(e__8l),ArrayType(43,ArrayType(76,ArrayType(487,ArrayType(76,ArrayType(1,ArrayType(44,ArrayType(76,ArrayType(9,StringType)))))))))],Block([])),MethodDecl(Id(_),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(d),ClassType(Id(I))),param(Id(_),ClassType(Id(S995a8))),param(Id(_),ArrayType(2,FloatType)),param(Id(_),ArrayType(2,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 201))

    def test_202(self):
        line = '''Class _{}Class __6{}Class l9B_{}Class y:K{Constructor (d,I2,ukP:X;_:_;_:Array [Array [Boolean ,015],0711]){} }Class _v:_Y{Destructor (){} }Class P{}Class Sw{}Class _0_{Var $_:V9;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(__6),[]),ClassDecl(Id(l9B_),[]),ClassDecl(Id(y),Id(K),[MethodDecl(Id(Constructor),Instance,[param(Id(d),ClassType(Id(X))),param(Id(I2),ClassType(Id(X))),param(Id(ukP),ClassType(Id(X))),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(457,ArrayType(13,BoolType)))],Block([]))]),ClassDecl(Id(_v),Id(_Y),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(P),[]),ClassDecl(Id(Sw),[]),ClassDecl(Id(_0_),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(V9)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 202))

    def test_203(self):
        line = '''Class IT{Constructor (_:String ;_:Array [Array [Array [Array [Boolean ,047],0xE],79],05_5_5];_,_Mk,W,_4:Int ){}Var UH,_H,$4:String ;Var _l,_,_9,y:M9;Var $qC_,$_Fw,$c,Q,$4,$5,_0,$1_u24o:Array [Boolean ,0X61];}Class _:S{Destructor (){}Val h76I:Float ;Destructor (){} }Class __6{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(IT),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(_),ArrayType(365,ArrayType(79,ArrayType(14,ArrayType(39,BoolType))))),param(Id(_),IntType),param(Id(_Mk),IntType),param(Id(W),IntType),param(Id(_4),IntType)],Block([])),AttributeDecl(Instance,VarDecl(Id(UH),StringType)),AttributeDecl(Instance,VarDecl(Id(_H),StringType)),AttributeDecl(Static,VarDecl(Id($4),StringType)),AttributeDecl(Instance,VarDecl(Id(_l),ClassType(Id(M9)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(M9)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_9),ClassType(Id(M9)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(y),ClassType(Id(M9)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($qC_),ArrayType(97,BoolType))),AttributeDecl(Static,VarDecl(Id($_Fw),ArrayType(97,BoolType))),AttributeDecl(Static,VarDecl(Id($c),ArrayType(97,BoolType))),AttributeDecl(Instance,VarDecl(Id(Q),ArrayType(97,BoolType))),AttributeDecl(Static,VarDecl(Id($4),ArrayType(97,BoolType))),AttributeDecl(Static,VarDecl(Id($5),ArrayType(97,BoolType))),AttributeDecl(Instance,VarDecl(Id(_0),ArrayType(97,BoolType))),AttributeDecl(Static,VarDecl(Id($1_u24o),ArrayType(97,BoolType)))]),ClassDecl(Id(_),Id(S),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(h76I),FloatType,None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__6),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 203))

    def test_204(self):
        line = '''Class d__Fu:__31{_(_,iA:Float ;___3_,d_4:Array [Array [Array [Array [Array [Boolean ,0B1000001],0x2B],0b10],0B1000001],4];Y:Float ;_j30,_,iw,n,s_E88p:Array [String ,0B1000001];__,E,_,_4521:Array [String ,1_1]){} }'''
        expect = '''Program([ClassDecl(Id(d__Fu),Id(__31),[MethodDecl(Id(_),Instance,[param(Id(_),FloatType),param(Id(iA),FloatType),param(Id(___3_),ArrayType(4,ArrayType(65,ArrayType(2,ArrayType(43,ArrayType(65,BoolType)))))),param(Id(d_4),ArrayType(4,ArrayType(65,ArrayType(2,ArrayType(43,ArrayType(65,BoolType)))))),param(Id(Y),FloatType),param(Id(_j30),ArrayType(65,StringType)),param(Id(_),ArrayType(65,StringType)),param(Id(iw),ArrayType(65,StringType)),param(Id(n),ArrayType(65,StringType)),param(Id(s_E88p),ArrayType(65,StringType)),param(Id(__),ArrayType(11,StringType)),param(Id(E),ArrayType(11,StringType)),param(Id(_),ArrayType(11,StringType)),param(Id(_4521),ArrayType(11,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 204))

    def test_205(self):
        line = '''Class _{}Class __f:P{}Class j:__85U_F4{Var $4,$hf__A,m_,$__:Boolean ;x6w(f_,_:Array [Array [Array [Array [Array [Array [Array [String ,69],0x44],0b1_1],3_8],03],0b11011],55]){}Var $__:Array [Float ,0x4];}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(__f),Id(P),[]),ClassDecl(Id(j),Id(__85U_F4),[AttributeDecl(Static,VarDecl(Id($4),BoolType)),AttributeDecl(Static,VarDecl(Id($hf__A),BoolType)),AttributeDecl(Instance,VarDecl(Id(m_),BoolType)),AttributeDecl(Static,VarDecl(Id($__),BoolType)),MethodDecl(Id(x6w),Instance,[param(Id(f_),ArrayType(55,ArrayType(27,ArrayType(3,ArrayType(38,ArrayType(3,ArrayType(68,ArrayType(69,StringType)))))))),param(Id(_),ArrayType(55,ArrayType(27,ArrayType(3,ArrayType(38,ArrayType(3,ArrayType(68,ArrayType(69,StringType))))))))],Block([])),AttributeDecl(Static,VarDecl(Id($__),ArrayType(4,FloatType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 205))

    def test_206(self):
        line = '''Class _{}Class _:_2p{}Class X_:_{Var $1:Boolean ;}Class k:_{Destructor (){}Constructor (B,J92ca:i___r;k:String ){}Constructor (_,___:Array [Array [Boolean ,0B1100000],073];_L_HQ:Boolean ;_,__:M;_,K,xK,e,EC__1,_:__){Return ;} }Class _:c{}Class Mj:e{}Class As{$Y_(){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(_2p),[]),ClassDecl(Id(X_),Id(_),[AttributeDecl(Static,VarDecl(Id($1),BoolType))]),ClassDecl(Id(k),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(B),ClassType(Id(i___r))),param(Id(J92ca),ClassType(Id(i___r))),param(Id(k),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(59,ArrayType(96,BoolType))),param(Id(___),ArrayType(59,ArrayType(96,BoolType))),param(Id(_L_HQ),BoolType),param(Id(_),ClassType(Id(M))),param(Id(__),ClassType(Id(M))),param(Id(_),ClassType(Id(__))),param(Id(K),ClassType(Id(__))),param(Id(xK),ClassType(Id(__))),param(Id(e),ClassType(Id(__))),param(Id(EC__1),ClassType(Id(__))),param(Id(_),ClassType(Id(__)))],Block([Return()]))]),ClassDecl(Id(_),Id(c),[]),ClassDecl(Id(Mj),Id(e),[]),ClassDecl(Id(As),[MethodDecl(Id($Y_),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 206))

    def test_207(self):
        line = '''Class _:_IS{}Class _Fw{Val _6,$I,$xdN:Float ;}Class bMW:_{Constructor (){}$_(){__22::$1_17_s__().Ut.x3.Ik_87();} }Class _{}Class S{Var $_9,_l,Fa:Int ;Var $e:D6_;}Class __:_{Var $vM5X5,d:Int ;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_IS),[]),ClassDecl(Id(_Fw),[AttributeDecl(Instance,ConstDecl(Id(_6),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($I),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($xdN),FloatType,None))]),ClassDecl(Id(bMW),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($_),Static,[],Block([Call(FieldAccess(FieldAccess(CallExpr(Id(__22),Id($1_17_s__),[]),Id(Ut)),Id(x3)),Id(Ik_87),[])]))]),ClassDecl(Id(_),[]),ClassDecl(Id(S),[AttributeDecl(Static,VarDecl(Id($_9),IntType)),AttributeDecl(Instance,VarDecl(Id(_l),IntType)),AttributeDecl(Instance,VarDecl(Id(Fa),IntType)),AttributeDecl(Static,VarDecl(Id($e),ClassType(Id(D6_)),NullLiteral()))]),ClassDecl(Id(__),Id(_),[AttributeDecl(Static,VarDecl(Id($vM5X5),IntType)),AttributeDecl(Instance,VarDecl(Id(d),IntType)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 207))

    def test_208(self):
        line = '''Class ZU_P8{Destructor (){Break ;Break ;}$9_(_5,_:Boolean ;b8,_:e;__97ok:Array [Array [Array [Array [Array [Array [Array [Float ,07_12],0X9],0xB_7],65],0X5F],0b111],0x1B];n,u:___){} }'''
        expect = '''Program([ClassDecl(Id(ZU_P8),[MethodDecl(Id(Destructor),Instance,[],Block([Break,Break])),MethodDecl(Id($9_),Static,[param(Id(_5),BoolType),param(Id(_),BoolType),param(Id(b8),ClassType(Id(e))),param(Id(_),ClassType(Id(e))),param(Id(__97ok),ArrayType(27,ArrayType(7,ArrayType(95,ArrayType(65,ArrayType(183,ArrayType(9,ArrayType(458,FloatType)))))))),param(Id(n),ClassType(Id(___))),param(Id(u),ClassType(Id(___)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 208))

    def test_209(self):
        line = '''Class _9{}Class y4_9x:_k{Val $I,_,$_:_;}Class _0{Var _m,$dr,$Hz:Boolean ;}Class _u{Val _H,_:Boolean ;}Class K{Constructor (_Y,U8_1:O;R65,p:Array [Array [Array [String ,0X53],014],0b10];J:M5Q){} }'''
        expect = '''Program([ClassDecl(Id(_9),[]),ClassDecl(Id(y4_9x),Id(_k),[AttributeDecl(Static,ConstDecl(Id($I),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_0),[AttributeDecl(Instance,VarDecl(Id(_m),BoolType)),AttributeDecl(Static,VarDecl(Id($dr),BoolType)),AttributeDecl(Static,VarDecl(Id($Hz),BoolType))]),ClassDecl(Id(_u),[AttributeDecl(Instance,ConstDecl(Id(_H),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None))]),ClassDecl(Id(K),[MethodDecl(Id(Constructor),Instance,[param(Id(_Y),ClassType(Id(O))),param(Id(U8_1),ClassType(Id(O))),param(Id(R65),ArrayType(2,ArrayType(12,ArrayType(83,StringType)))),param(Id(p),ArrayType(2,ArrayType(12,ArrayType(83,StringType)))),param(Id(J),ClassType(Id(M5Q)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 209))

    def test_210(self):
        line = '''Class C94{_5(_4:Array [Array [Int ,0b1100],6]){} }Class O{}Class e0:i{$18z(v_:Array [String ,0b10];i3_:Yqs_2Mo;J,_,_1,_28:k24;_:Array [Array [String ,0x8_3_1_1_A],0B1100000]){} }Class __{}Class G{}'''
        expect = '''Program([ClassDecl(Id(C94),[MethodDecl(Id(_5),Instance,[param(Id(_4),ArrayType(6,ArrayType(12,IntType)))],Block([]))]),ClassDecl(Id(O),[]),ClassDecl(Id(e0),Id(i),[MethodDecl(Id($18z),Static,[param(Id(v_),ArrayType(2,StringType)),param(Id(i3_),ClassType(Id(Yqs_2Mo))),param(Id(J),ClassType(Id(k24))),param(Id(_),ClassType(Id(k24))),param(Id(_1),ClassType(Id(k24))),param(Id(_28),ClassType(Id(k24))),param(Id(_),ArrayType(96,ArrayType(536858,StringType)))],Block([]))]),ClassDecl(Id(__),[]),ClassDecl(Id(G),[])])'''
        self.assertTrue(TestAST.test(line, expect, 210))

    def test_211(self):
        line = '''Class n{}Class _V_{Val $4:Wt0;Z_3q3(){}Constructor (_,_7:Array [Array [Array [Array [Array [Array [Array [Boolean ,0x22],0B1_0],48],4],0b1011011],05_0_5],2_85];_,_,Z_T:Array [Array [Array [Array [Array [Array [Array [Int ,0b1011011],0X9],0X94_82_6_3],8],48],0b1011011],0b1];_,__:Int ;_:Int ;B_:__){}Destructor (){}Var d,$_,$2Q:_;}'''
        expect = '''Program([ClassDecl(Id(n),[]),ClassDecl(Id(_V_),[AttributeDecl(Static,ConstDecl(Id($4),ClassType(Id(Wt0)),NullLiteral())),MethodDecl(Id(Z_3q3),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(285,ArrayType(325,ArrayType(91,ArrayType(4,ArrayType(48,ArrayType(2,ArrayType(34,BoolType)))))))),param(Id(_7),ArrayType(285,ArrayType(325,ArrayType(91,ArrayType(4,ArrayType(48,ArrayType(2,ArrayType(34,BoolType)))))))),param(Id(_),ArrayType(1,ArrayType(91,ArrayType(48,ArrayType(8,ArrayType(9732707,ArrayType(9,ArrayType(91,IntType)))))))),param(Id(_),ArrayType(1,ArrayType(91,ArrayType(48,ArrayType(8,ArrayType(9732707,ArrayType(9,ArrayType(91,IntType)))))))),param(Id(Z_T),ArrayType(1,ArrayType(91,ArrayType(48,ArrayType(8,ArrayType(9732707,ArrayType(9,ArrayType(91,IntType)))))))),param(Id(_),IntType),param(Id(__),IntType),param(Id(_),IntType),param(Id(B_),ClassType(Id(__)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(d),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($2Q),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 211))

    def test_212(self):
        line = '''Class _5:I{Val _X22,$_,_:Array [String ,27];Var W_3vT20UyLX,n:Float ;Val $_,$_54q:Boolean ;Var $Rd,_5:_6;Var y:Array [Array [Array [Array [Boolean ,0B101001],0100],0x3E],0100];}Class _dU{Var $__c:Array [Boolean ,0100];}Class _{}Class _HUK__{}'''
        expect = '''Program([ClassDecl(Id(_5),Id(I),[AttributeDecl(Instance,ConstDecl(Id(_X22),ArrayType(27,StringType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(27,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(27,StringType),None)),AttributeDecl(Instance,VarDecl(Id(W_3vT20UyLX),FloatType)),AttributeDecl(Instance,VarDecl(Id(n),FloatType)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_54q),BoolType,None)),AttributeDecl(Static,VarDecl(Id($Rd),ClassType(Id(_6)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_5),ClassType(Id(_6)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(y),ArrayType(64,ArrayType(62,ArrayType(64,ArrayType(41,BoolType))))))]),ClassDecl(Id(_dU),[AttributeDecl(Static,VarDecl(Id($__c),ArrayType(64,BoolType)))]),ClassDecl(Id(_),[]),ClassDecl(Id(_HUK__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 212))

    def test_213(self):
        line = '''Class Q0:z_{$0(a,f:Array [Array [Float ,0B1111],0b1_0];_6:Array [Int ,7];x,_:Array [String ,0b10_10];T_3_zqY:Array [Array [String ,0B1],0113]){Break ;} }Class _d{}Class _b4eB_{Constructor (){}Constructor (){Continue ;} }Class C9:__l8__{}'''
        expect = '''Program([ClassDecl(Id(Q0),Id(z_),[MethodDecl(Id($0),Static,[param(Id(a),ArrayType(2,ArrayType(15,FloatType))),param(Id(f),ArrayType(2,ArrayType(15,FloatType))),param(Id(_6),ArrayType(7,IntType)),param(Id(x),ArrayType(10,StringType)),param(Id(_),ArrayType(10,StringType)),param(Id(T_3_zqY),ArrayType(75,ArrayType(1,StringType)))],Block([Break]))]),ClassDecl(Id(_d),[]),ClassDecl(Id(_b4eB_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue]))]),ClassDecl(Id(C9),Id(__l8__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 213))

    def test_214(self):
        line = '''Class bW:c{Destructor (){}Destructor (){Break ;}Destructor (){} }Class _9i{Var E8_:Float ;Var y,$_,_T_:Boolean ;J_(h,A,z,g:Array [Array [Array [Array [Float ,0x46],0b100010],051],5_9];lF,u__19J:Array [Array [Array [String ,0X29],6778],0x46];_,_,_:__){Break ;Continue ;Var dn2:String ;} }'''
        expect = '''Program([ClassDecl(Id(bW),Id(c),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Break])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_9i),[AttributeDecl(Instance,VarDecl(Id(E8_),FloatType)),AttributeDecl(Instance,VarDecl(Id(y),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Instance,VarDecl(Id(_T_),BoolType)),MethodDecl(Id(J_),Instance,[param(Id(h),ArrayType(59,ArrayType(41,ArrayType(34,ArrayType(70,FloatType))))),param(Id(A),ArrayType(59,ArrayType(41,ArrayType(34,ArrayType(70,FloatType))))),param(Id(z),ArrayType(59,ArrayType(41,ArrayType(34,ArrayType(70,FloatType))))),param(Id(g),ArrayType(59,ArrayType(41,ArrayType(34,ArrayType(70,FloatType))))),param(Id(lF),ArrayType(70,ArrayType(6778,ArrayType(41,StringType)))),param(Id(u__19J),ArrayType(70,ArrayType(6778,ArrayType(41,StringType)))),param(Id(_),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(_),ClassType(Id(__)))],Block([Break,Continue,VarDecl(Id(dn2),StringType)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 214))

    def test_215(self):
        line = '''Class Jr{Var $1:String ;Destructor (){} }Class F{Val _i,$0,_,$V:Int ;Val m_,_X__,_:Array [Array [Array [Array [Array [String ,0b11],0X58],0b1_0_0_1_1_100],0B1],01_6];Constructor (i6:Float ){}Constructor (){}Destructor (){Continue ;}M6ID(_8D621,__C:Int ;os:Int ;A_,H_,I:t){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(Jr),[AttributeDecl(Static,VarDecl(Id($1),StringType)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(F),[AttributeDecl(Instance,ConstDecl(Id(_i),IntType,None)),AttributeDecl(Static,ConstDecl(Id($0),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($V),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(m_),ArrayType(14,ArrayType(1,ArrayType(156,ArrayType(88,ArrayType(3,StringType))))),None)),AttributeDecl(Instance,ConstDecl(Id(_X__),ArrayType(14,ArrayType(1,ArrayType(156,ArrayType(88,ArrayType(3,StringType))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(14,ArrayType(1,ArrayType(156,ArrayType(88,ArrayType(3,StringType))))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(i6),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(M6ID),Instance,[param(Id(_8D621),IntType),param(Id(__C),IntType),param(Id(os),IntType),param(Id(A_),ClassType(Id(t))),param(Id(H_),ClassType(Id(t))),param(Id(I),ClassType(Id(t)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 215))

    def test_216(self):
        line = '''Class U:d{Val __:String ;_(_,nM6C,_,___,_E_6:Boolean ;n:g){} }Class _:_{$0(){}Var __,$y:__P;Constructor (){Break ;Continue ;}Val Z,__660_,$P:Array [Array [Array [String ,01],0X20],01];Var $9:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(U),Id(d),[AttributeDecl(Instance,ConstDecl(Id(__),StringType,None)),MethodDecl(Id(_),Instance,[param(Id(_),BoolType),param(Id(nM6C),BoolType),param(Id(_),BoolType),param(Id(___),BoolType),param(Id(_E_6),BoolType),param(Id(n),ClassType(Id(g)))],Block([]))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id($0),Static,[],Block([])),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(__P)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($y),ClassType(Id(__P)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([Break,Continue])),AttributeDecl(Instance,ConstDecl(Id(Z),ArrayType(1,ArrayType(32,ArrayType(1,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(__660_),ArrayType(1,ArrayType(32,ArrayType(1,StringType))),None)),AttributeDecl(Static,ConstDecl(Id($P),ArrayType(1,ArrayType(32,ArrayType(1,StringType))),None)),AttributeDecl(Static,VarDecl(Id($9),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 216))

    def test_217(self):
        line = '''Class _{}Class _{}Class _{Val $jK:Array [Boolean ,0X7];}Class R{$_(_:T;f,C__,Mw:d0){Break ;Return ;}Constructor (_:Array [String ,06_30];_,n,S4x,e,M0,_,I__:Array [Boolean ,0B1];_,vi,Q,N9___,b:R6W){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($jK),ArrayType(7,BoolType),None))]),ClassDecl(Id(R),[MethodDecl(Id($_),Static,[param(Id(_),ClassType(Id(T))),param(Id(f),ClassType(Id(d0))),param(Id(C__),ClassType(Id(d0))),param(Id(Mw),ClassType(Id(d0)))],Block([Break,Return()])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(408,StringType)),param(Id(_),ArrayType(1,BoolType)),param(Id(n),ArrayType(1,BoolType)),param(Id(S4x),ArrayType(1,BoolType)),param(Id(e),ArrayType(1,BoolType)),param(Id(M0),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType)),param(Id(I__),ArrayType(1,BoolType)),param(Id(_),ClassType(Id(R6W))),param(Id(vi),ClassType(Id(R6W))),param(Id(Q),ClassType(Id(R6W))),param(Id(N9___),ClassType(Id(R6W))),param(Id(b),ClassType(Id(R6W)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 217))

    def test_218(self):
        line = '''Class B_8:_{Val u,_:Array [Array [Float ,01_5_540_4_4_3],0B1001100];}Class N_{Var $9,J_02:Boolean ;Var __,_,$V,$sR,$67,$j,_9:Int ;}Class f:e{Constructor (){} }Class __{}Class _{}'''
        expect = '''Program([ClassDecl(Id(B_8),Id(_),[AttributeDecl(Instance,ConstDecl(Id(u),ArrayType(76,ArrayType(3588387,FloatType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(76,ArrayType(3588387,FloatType)),None))]),ClassDecl(Id(N_),[AttributeDecl(Static,VarDecl(Id($9),BoolType)),AttributeDecl(Instance,VarDecl(Id(J_02),BoolType)),AttributeDecl(Instance,VarDecl(Id(__),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType)),AttributeDecl(Static,VarDecl(Id($V),IntType)),AttributeDecl(Static,VarDecl(Id($sR),IntType)),AttributeDecl(Static,VarDecl(Id($67),IntType)),AttributeDecl(Static,VarDecl(Id($j),IntType)),AttributeDecl(Instance,VarDecl(Id(_9),IntType))]),ClassDecl(Id(f),Id(e),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(__),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 218))

    def test_219(self):
        line = '''Class bvF5_0_0_0{}Class _W_:_9{Val $oe:Float ;}Class _Z{Val $_,$4H,bw,$3_,$wE__,_1r_6,D_,O_,_G:Int ;Constructor (){Continue ;}_(){} }Class w7{Val Q:Array [String ,0B1];}'''
        expect = '''Program([ClassDecl(Id(bvF5_0_0_0),[]),ClassDecl(Id(_W_),Id(_9),[AttributeDecl(Static,ConstDecl(Id($oe),FloatType,None))]),ClassDecl(Id(_Z),[AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($4H),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(bw),IntType,None)),AttributeDecl(Static,ConstDecl(Id($3_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($wE__),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_1r_6),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(D_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(O_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_G),IntType,None)),MethodDecl(Id(Constructor),Instance,[],Block([Continue])),MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(w7),[AttributeDecl(Instance,ConstDecl(Id(Q),ArrayType(1,StringType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 219))

    def test_220(self):
        line = '''Class D8{}Class M_:j8{}Class D_p__{Constructor (_9:Boolean ;_,_,FEs:Array [Array [Boolean ,055],0X41];v,_A,_,_,P,__6:Array [Array [Array [Array [Array [Array [String ,02],77],04_5],02_1],77],0x3];gG,v,m_q,_963pz:n;_,K:Boolean ){} }Class Es{_k(){} }'''
        expect = '''Program([ClassDecl(Id(D8),[]),ClassDecl(Id(M_),Id(j8),[]),ClassDecl(Id(D_p__),[MethodDecl(Id(Constructor),Instance,[param(Id(_9),BoolType),param(Id(_),ArrayType(65,ArrayType(45,BoolType))),param(Id(_),ArrayType(65,ArrayType(45,BoolType))),param(Id(FEs),ArrayType(65,ArrayType(45,BoolType))),param(Id(v),ArrayType(3,ArrayType(77,ArrayType(17,ArrayType(37,ArrayType(77,ArrayType(2,StringType))))))),param(Id(_A),ArrayType(3,ArrayType(77,ArrayType(17,ArrayType(37,ArrayType(77,ArrayType(2,StringType))))))),param(Id(_),ArrayType(3,ArrayType(77,ArrayType(17,ArrayType(37,ArrayType(77,ArrayType(2,StringType))))))),param(Id(_),ArrayType(3,ArrayType(77,ArrayType(17,ArrayType(37,ArrayType(77,ArrayType(2,StringType))))))),param(Id(P),ArrayType(3,ArrayType(77,ArrayType(17,ArrayType(37,ArrayType(77,ArrayType(2,StringType))))))),param(Id(__6),ArrayType(3,ArrayType(77,ArrayType(17,ArrayType(37,ArrayType(77,ArrayType(2,StringType))))))),param(Id(gG),ClassType(Id(n))),param(Id(v),ClassType(Id(n))),param(Id(m_q),ClassType(Id(n))),param(Id(_963pz),ClassType(Id(n))),param(Id(_),BoolType),param(Id(K),BoolType)],Block([]))]),ClassDecl(Id(Es),[MethodDecl(Id(_k),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 220))

    def test_221(self):
        line = '''Class t{Constructor (){Return ;}Constructor (){Break ;} }Class wZ4554_:_07{}Class _:f{}Class E{Val $_,$d__,$0,$_:Boolean ;Val $C_Ct:String ;Constructor (a1,v,_:Array [Array [Boolean ,0X32],0b1_0]){} }'''
        expect = '''Program([ClassDecl(Id(t),[MethodDecl(Id(Constructor),Instance,[],Block([Return()])),MethodDecl(Id(Constructor),Instance,[],Block([Break]))]),ClassDecl(Id(wZ4554_),Id(_07),[]),ClassDecl(Id(_),Id(f),[]),ClassDecl(Id(E),[AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($d__),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($0),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($C_Ct),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(a1),ArrayType(2,ArrayType(50,BoolType))),param(Id(v),ArrayType(2,ArrayType(50,BoolType))),param(Id(_),ArrayType(2,ArrayType(50,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 221))

    def test_222(self):
        line = '''Class k{}Class y:P_A7{Constructor (_g:Array [Array [Boolean ,63],8];a_,A,D,____7_,w:Array [Float ,63];V_32_,_:___1;n:String ){Val P:Boolean ;} }Class _{Var _,$_o,$6_,$_n:Array [Array [Array [Float ,0626],0134],63];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(k),[]),ClassDecl(Id(y),Id(P_A7),[MethodDecl(Id(Constructor),Instance,[param(Id(_g),ArrayType(8,ArrayType(63,BoolType))),param(Id(a_),ArrayType(63,FloatType)),param(Id(A),ArrayType(63,FloatType)),param(Id(D),ArrayType(63,FloatType)),param(Id(____7_),ArrayType(63,FloatType)),param(Id(w),ArrayType(63,FloatType)),param(Id(V_32_),ClassType(Id(___1))),param(Id(_),ClassType(Id(___1))),param(Id(n),StringType)],Block([ConstDecl(Id(P),BoolType,None)]))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(63,ArrayType(92,ArrayType(406,FloatType))))),AttributeDecl(Static,VarDecl(Id($_o),ArrayType(63,ArrayType(92,ArrayType(406,FloatType))))),AttributeDecl(Static,VarDecl(Id($6_),ArrayType(63,ArrayType(92,ArrayType(406,FloatType))))),AttributeDecl(Static,VarDecl(Id($_n),ArrayType(63,ArrayType(92,ArrayType(406,FloatType))))),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 222))

    def test_223(self):
        line = '''Class Qm_:_5{}Class z1_{Destructor (){} }Class _8{Var V,pL,$O_0,$V__:Array [Array [Array [Boolean ,0B1_0],11],04];$8g(){}a(_d:Array [Array [Array [Array [Array [Array [Int ,6_7],0b1],6],0b1],0XE5_E],05]){} }'''
        expect = '''Program([ClassDecl(Id(Qm_),Id(_5),[]),ClassDecl(Id(z1_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_8),[AttributeDecl(Instance,VarDecl(Id(V),ArrayType(4,ArrayType(11,ArrayType(2,BoolType))))),AttributeDecl(Instance,VarDecl(Id(pL),ArrayType(4,ArrayType(11,ArrayType(2,BoolType))))),AttributeDecl(Static,VarDecl(Id($O_0),ArrayType(4,ArrayType(11,ArrayType(2,BoolType))))),AttributeDecl(Static,VarDecl(Id($V__),ArrayType(4,ArrayType(11,ArrayType(2,BoolType))))),MethodDecl(Id($8g),Static,[],Block([])),MethodDecl(Id(a),Instance,[param(Id(_d),ArrayType(5,ArrayType(3678,ArrayType(1,ArrayType(6,ArrayType(1,ArrayType(67,IntType)))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 223))

    def test_224(self):
        line = '''Class oyP{Constructor (_65:_;__,_,_:String ){}Constructor (__7,_0:Array [Array [Int ,0x8],0B1_1];_3,_,_Sv,_0__,_y5_,_,e:__){Return ;} }Class _:Eo2{Val $Z,$4:Array [Array [Float ,0B10100],07_4_445];Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(oyP),[MethodDecl(Id(Constructor),Instance,[param(Id(_65),ClassType(Id(_))),param(Id(__),StringType),param(Id(_),StringType),param(Id(_),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__7),ArrayType(3,ArrayType(8,IntType))),param(Id(_0),ArrayType(3,ArrayType(8,IntType))),param(Id(_3),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(_Sv),ClassType(Id(__))),param(Id(_0__),ClassType(Id(__))),param(Id(_y5_),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(e),ClassType(Id(__)))],Block([Return()]))]),ClassDecl(Id(_),Id(Eo2),[AttributeDecl(Static,ConstDecl(Id($Z),ArrayType(31013,ArrayType(20,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($4),ArrayType(31013,ArrayType(20,FloatType)),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 224))

    def test_225(self):
        line = '''Class _l3{Destructor (){Continue ;}b(N_8_:n___;wx:N__qR_s47;S:String ;_l44_7:A;_,O,K:Array [Int ,015];_,u_3,l5,_,T:Array [Int ,015];_:y;d_,T_,_:Array [Int ,0XD];V,_v_:String ;_,s_5,_T3t__M0:Array [Float ,0b110]){} }'''
        expect = '''Program([ClassDecl(Id(_l3),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(b),Instance,[param(Id(N_8_),ClassType(Id(n___))),param(Id(wx),ClassType(Id(N__qR_s47))),param(Id(S),StringType),param(Id(_l44_7),ClassType(Id(A))),param(Id(_),ArrayType(13,IntType)),param(Id(O),ArrayType(13,IntType)),param(Id(K),ArrayType(13,IntType)),param(Id(_),ArrayType(13,IntType)),param(Id(u_3),ArrayType(13,IntType)),param(Id(l5),ArrayType(13,IntType)),param(Id(_),ArrayType(13,IntType)),param(Id(T),ArrayType(13,IntType)),param(Id(_),ClassType(Id(y))),param(Id(d_),ArrayType(13,IntType)),param(Id(T_),ArrayType(13,IntType)),param(Id(_),ArrayType(13,IntType)),param(Id(V),StringType),param(Id(_v_),StringType),param(Id(_),ArrayType(6,FloatType)),param(Id(s_5),ArrayType(6,FloatType)),param(Id(_T3t__M0),ArrayType(6,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 225))

    def test_226(self):
        line = '''Class yV{Var O__:W__;}Class _1:l{}Class R_6_{Constructor (_V_:Array [Array [Array [Int ,60],0X1C],0x24];__,P_i:C3){} }Class _h{$5(TO,X39:_;S:h5){}Val _,$D1,__846_:Array [Array [Array [Array [Int ,60],0x7_35],60],057];}'''
        expect = '''Program([ClassDecl(Id(yV),[AttributeDecl(Instance,VarDecl(Id(O__),ClassType(Id(W__)),NullLiteral()))]),ClassDecl(Id(_1),Id(l),[]),ClassDecl(Id(R_6_),[MethodDecl(Id(Constructor),Instance,[param(Id(_V_),ArrayType(36,ArrayType(28,ArrayType(60,IntType)))),param(Id(__),ClassType(Id(C3))),param(Id(P_i),ClassType(Id(C3)))],Block([]))]),ClassDecl(Id(_h),[MethodDecl(Id($5),Static,[param(Id(TO),ClassType(Id(_))),param(Id(X39),ClassType(Id(_))),param(Id(S),ClassType(Id(h5)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(47,ArrayType(60,ArrayType(1845,ArrayType(60,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($D1),ArrayType(47,ArrayType(60,ArrayType(1845,ArrayType(60,IntType)))),None)),AttributeDecl(Instance,ConstDecl(Id(__846_),ArrayType(47,ArrayType(60,ArrayType(1845,ArrayType(60,IntType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 226))

    def test_227(self):
        line = '''Class Q66:M_d{}Class _:JSkB{Destructor (){} }Class _0X{_(Hu726:Array [Array [Array [Int ,0b10_1],0b110111],0B1];f,a,__Q,_:Boolean ;Q:l_04;__:_){} }Class N_0_:o_{Destructor (){}Val $2,__3w7,$g3:_Y;}'''
        expect = '''Program([ClassDecl(Id(Q66),Id(M_d),[]),ClassDecl(Id(_),Id(JSkB),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_0X),[MethodDecl(Id(_),Instance,[param(Id(Hu726),ArrayType(1,ArrayType(55,ArrayType(5,IntType)))),param(Id(f),BoolType),param(Id(a),BoolType),param(Id(__Q),BoolType),param(Id(_),BoolType),param(Id(Q),ClassType(Id(l_04))),param(Id(__),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(N_0_),Id(o_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($2),ClassType(Id(_Y)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__3w7),ClassType(Id(_Y)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($g3),ClassType(Id(_Y)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 227))

    def test_228(self):
        line = '''Class _X__:Z3M{$_(_:c;L,m67V,Z_0_:Array [Float ,0B11]){}Var $5_:__940_;R(){}$3B(_,T9:t77qky0){}Constructor (l_:Array [String ,0B100];v:Array [Array [Array [Array [Int ,0xA],426],063],063];_:__kr){} }'''
        expect = '''Program([ClassDecl(Id(_X__),Id(Z3M),[MethodDecl(Id($_),Static,[param(Id(_),ClassType(Id(c))),param(Id(L),ArrayType(3,FloatType)),param(Id(m67V),ArrayType(3,FloatType)),param(Id(Z_0_),ArrayType(3,FloatType))],Block([])),AttributeDecl(Static,VarDecl(Id($5_),ClassType(Id(__940_)),NullLiteral())),MethodDecl(Id(R),Instance,[],Block([])),MethodDecl(Id($3B),Static,[param(Id(_),ClassType(Id(t77qky0))),param(Id(T9),ClassType(Id(t77qky0)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(l_),ArrayType(4,StringType)),param(Id(v),ArrayType(51,ArrayType(51,ArrayType(426,ArrayType(10,IntType))))),param(Id(_),ClassType(Id(__kr)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 228))

    def test_229(self):
        line = '''Class t:_{}Class P:n{Constructor (){}Destructor (){Continue ;Break ;}Constructor (W,k1,F:Array [Array [Array [Array [Float ,0x5E],0XD],071],33_5_2]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(t),Id(_),[]),ClassDecl(Id(P),Id(n),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Break])),MethodDecl(Id(Constructor),Instance,[param(Id(W),ArrayType(3352,ArrayType(57,ArrayType(13,ArrayType(94,FloatType))))),param(Id(k1),ArrayType(3352,ArrayType(57,ArrayType(13,ArrayType(94,FloatType))))),param(Id(F),ArrayType(3352,ArrayType(57,ArrayType(13,ArrayType(94,FloatType)))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 229))

    def test_230(self):
        line = '''Class Yd{H(_:Boolean ;U8,W,Ct,D7,T,ig6__,__9,S_,_X:Array [Int ,04_4_2];F:String ;_:Array [Float ,0x4_0];D_U,_l,_,_,m_3,m,_7:String ){}Destructor (){} }Class z:_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(Yd),[MethodDecl(Id(H),Instance,[param(Id(_),BoolType),param(Id(U8),ArrayType(290,IntType)),param(Id(W),ArrayType(290,IntType)),param(Id(Ct),ArrayType(290,IntType)),param(Id(D7),ArrayType(290,IntType)),param(Id(T),ArrayType(290,IntType)),param(Id(ig6__),ArrayType(290,IntType)),param(Id(__9),ArrayType(290,IntType)),param(Id(S_),ArrayType(290,IntType)),param(Id(_X),ArrayType(290,IntType)),param(Id(F),StringType),param(Id(_),ArrayType(64,FloatType)),param(Id(D_U),StringType),param(Id(_l),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(m_3),StringType),param(Id(m),StringType),param(Id(_7),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(z),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 230))

    def test_231(self):
        line = '''Class _{Val _:Float ;Destructor (){Break ;}Val $_:Array [Int ,41];Q(H:Array [Array [Array [Array [Int ,0x3F],2],0XD],0b11]){}Var $91,$z,$T,__:_58_;Var _,n:Array [Array [String ,0XD],0b11001];}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),MethodDecl(Id(Destructor),Instance,[],Block([Break])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(41,IntType),None)),MethodDecl(Id(Q),Instance,[param(Id(H),ArrayType(3,ArrayType(13,ArrayType(2,ArrayType(63,IntType)))))],Block([])),AttributeDecl(Static,VarDecl(Id($91),ClassType(Id(_58_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($z),ClassType(Id(_58_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($T),ClassType(Id(_58_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(_58_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(25,ArrayType(13,StringType)))),AttributeDecl(Instance,VarDecl(Id(n),ArrayType(25,ArrayType(13,StringType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 231))

    def test_232(self):
        line = '''Class _{$_S(B5,d6:Array [Array [Boolean ,0xC],78];_:Int ){}Destructor (){}Val $X6,$_D5B__k,$V,$_:String ;}Class _7:_{Var $6,$_,_8:Array [Array [Array [Array [Array [String ,0XD_2],76],78],17_4_0],78];c(){}R_9(){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($_S),Static,[param(Id(B5),ArrayType(78,ArrayType(12,BoolType))),param(Id(d6),ArrayType(78,ArrayType(12,BoolType))),param(Id(_),IntType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($X6),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_D5B__k),StringType,None)),AttributeDecl(Static,ConstDecl(Id($V),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_),StringType,None))]),ClassDecl(Id(_7),Id(_),[AttributeDecl(Static,VarDecl(Id($6),ArrayType(78,ArrayType(1740,ArrayType(78,ArrayType(76,ArrayType(210,StringType))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(78,ArrayType(1740,ArrayType(78,ArrayType(76,ArrayType(210,StringType))))))),AttributeDecl(Instance,VarDecl(Id(_8),ArrayType(78,ArrayType(1740,ArrayType(78,ArrayType(76,ArrayType(210,StringType))))))),MethodDecl(Id(c),Instance,[],Block([])),MethodDecl(Id(R_9),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 232))

    def test_233(self):
        line = '''Class B1:r8{}Class m{}Class _{Constructor (_V_AP:Array [String ,98]){}Destructor (){} }Class I:_{Val $T:Float ;$_n(_:String ){} }Class _:_{$d(){}$33_F78W5(){}Val M:String ;}Class _xP_o:H{}'''
        expect = '''Program([ClassDecl(Id(B1),Id(r8),[]),ClassDecl(Id(m),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_V_AP),ArrayType(98,StringType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(I),Id(_),[AttributeDecl(Static,ConstDecl(Id($T),FloatType,None)),MethodDecl(Id($_n),Static,[param(Id(_),StringType)],Block([]))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id($d),Static,[],Block([])),MethodDecl(Id($33_F78W5),Static,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(M),StringType,None))]),ClassDecl(Id(_xP_o),Id(H),[])])'''
        self.assertTrue(TestAST.test(line, expect, 233))

    def test_234(self):
        line = '''Class __5:_R{___(_,E:Int ;_U:k;fgeM:_7;_,S:_){Break ;}Qai(){} }Class _{w(l3,K_81,_:Array [Int ,89];Z__8:String ;_,r,_:Array [Array [Array [Array [Array [Int ,0123],0B1],38_55_2],0X2A],0x26]){Break ;}Var qvq,_B,$_:M;}'''
        expect = '''Program([ClassDecl(Id(__5),Id(_R),[MethodDecl(Id(___),Instance,[param(Id(_),IntType),param(Id(E),IntType),param(Id(_U),ClassType(Id(k))),param(Id(fgeM),ClassType(Id(_7))),param(Id(_),ClassType(Id(_))),param(Id(S),ClassType(Id(_)))],Block([Break])),MethodDecl(Id(Qai),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(w),Instance,[param(Id(l3),ArrayType(89,IntType)),param(Id(K_81),ArrayType(89,IntType)),param(Id(_),ArrayType(89,IntType)),param(Id(Z__8),StringType),param(Id(_),ArrayType(38,ArrayType(42,ArrayType(38552,ArrayType(1,ArrayType(83,IntType)))))),param(Id(r),ArrayType(38,ArrayType(42,ArrayType(38552,ArrayType(1,ArrayType(83,IntType)))))),param(Id(_),ArrayType(38,ArrayType(42,ArrayType(38552,ArrayType(1,ArrayType(83,IntType))))))],Block([Break])),AttributeDecl(Instance,VarDecl(Id(qvq),ClassType(Id(M)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_B),ClassType(Id(M)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(M)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 234))

    def test_235(self):
        line = '''Class _{}Class _20_I8{Destructor (){}Val E__n,$R,$_:___0q0;}Class _2:_{Val f,$2,_5,_,_,$F33_6,$t,$p,__,n,$zf21,J4s,$e,_4Z_R1p0__,$Y,$5,_:y;}Class _E{fV__(t__B_:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_20_I8),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(E__n),ClassType(Id(___0q0)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($R),ClassType(Id(___0q0)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(___0q0)),NullLiteral()))]),ClassDecl(Id(_2),Id(_),[AttributeDecl(Instance,ConstDecl(Id(f),ClassType(Id(y)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($2),ClassType(Id(y)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_5),ClassType(Id(y)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(y)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(y)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($F33_6),ClassType(Id(y)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($t),ClassType(Id(y)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($p),ClassType(Id(y)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(y)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(n),ClassType(Id(y)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($zf21),ClassType(Id(y)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(J4s),ClassType(Id(y)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($e),ClassType(Id(y)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_4Z_R1p0__),ClassType(Id(y)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($Y),ClassType(Id(y)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($5),ClassType(Id(y)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(y)),NullLiteral()))]),ClassDecl(Id(_E),[MethodDecl(Id(fV__),Instance,[param(Id(t__B_),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 235))

    def test_236(self):
        line = '''Class _{Constructor (_1,r:Array [Array [Array [Array [String ,0123],3],0xEAD9E4C_53B],0XF]){Continue ;} }Class _9{Val $__:Array [Float ,0B11101];}Class __{Var $Y4:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_1),ArrayType(15,ArrayType(1008677995835,ArrayType(3,ArrayType(83,StringType))))),param(Id(r),ArrayType(15,ArrayType(1008677995835,ArrayType(3,ArrayType(83,StringType)))))],Block([Continue]))]),ClassDecl(Id(_9),[AttributeDecl(Static,ConstDecl(Id($__),ArrayType(29,FloatType),None))]),ClassDecl(Id(__),[AttributeDecl(Static,VarDecl(Id($Y4),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 236))

    def test_237(self):
        line = '''Class k0n:E_j_i{Constructor (b:Array [Float ,0B11010];__:Array [Array [Int ,93],0x1_9];x8:String ;m_,_:_;U:Array [Array [Array [Int ,0X43],0B11010],0x7];J,XU9,N:Array [Array [Array [Float ,0B11010],07_7_1],93]){Continue ;}$_(s,_s:_){}Val w,$K9:Array [Array [Int ,93],0x2];Val $iu,Vo:Array [Array [Boolean ,02],0x1];}'''
        expect = '''Program([ClassDecl(Id(k0n),Id(E_j_i),[MethodDecl(Id(Constructor),Instance,[param(Id(b),ArrayType(26,FloatType)),param(Id(__),ArrayType(25,ArrayType(93,IntType))),param(Id(x8),StringType),param(Id(m_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(U),ArrayType(7,ArrayType(26,ArrayType(67,IntType)))),param(Id(J),ArrayType(93,ArrayType(505,ArrayType(26,FloatType)))),param(Id(XU9),ArrayType(93,ArrayType(505,ArrayType(26,FloatType)))),param(Id(N),ArrayType(93,ArrayType(505,ArrayType(26,FloatType))))],Block([Continue])),MethodDecl(Id($_),Static,[param(Id(s),ClassType(Id(_))),param(Id(_s),ClassType(Id(_)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(w),ArrayType(2,ArrayType(93,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($K9),ArrayType(2,ArrayType(93,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($iu),ArrayType(1,ArrayType(2,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(Vo),ArrayType(1,ArrayType(2,BoolType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 237))

    def test_238(self):
        line = '''Class B:__0_{Destructor (){Continue ;}Constructor (k_5__:_){}$6k__(x_y3:Array [Array [Float ,05],0b1001001];_C,_,Yu_0_:Array [Boolean ,0xA_3D];_G92,N7,_:Boolean ){}Var w686,$_gJ:String ;}Class _:_{}Class _8v:_{}'''
        expect = '''Program([ClassDecl(Id(B),Id(__0_),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(k_5__),ClassType(Id(_)))],Block([])),MethodDecl(Id($6k__),Static,[param(Id(x_y3),ArrayType(73,ArrayType(5,FloatType))),param(Id(_C),ArrayType(2621,BoolType)),param(Id(_),ArrayType(2621,BoolType)),param(Id(Yu_0_),ArrayType(2621,BoolType)),param(Id(_G92),BoolType),param(Id(N7),BoolType),param(Id(_),BoolType)],Block([])),AttributeDecl(Instance,VarDecl(Id(w686),StringType)),AttributeDecl(Static,VarDecl(Id($_gJ),StringType))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_8v),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 238))

    def test_239(self):
        line = '''Class k:_{Destructor (){} }Class U_ZH:yG{$TU(_,sQ_2:Array [Array [Array [Array [Array [Int ,0X19],0b10],35],35],014]){}Var $_7_fYx4_,$5:Array [Array [Array [Array [Int ,013],013],013],073];}'''
        expect = '''Program([ClassDecl(Id(k),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(U_ZH),Id(yG),[MethodDecl(Id($TU),Static,[param(Id(_),ArrayType(12,ArrayType(35,ArrayType(35,ArrayType(2,ArrayType(25,IntType)))))),param(Id(sQ_2),ArrayType(12,ArrayType(35,ArrayType(35,ArrayType(2,ArrayType(25,IntType))))))],Block([])),AttributeDecl(Static,VarDecl(Id($_7_fYx4_),ArrayType(59,ArrayType(11,ArrayType(11,ArrayType(11,IntType)))))),AttributeDecl(Static,VarDecl(Id($5),ArrayType(59,ArrayType(11,ArrayType(11,ArrayType(11,IntType))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 239))

    def test_240(self):
        line = '''Class _t:__{}Class ___:e{}Class _{Var $S5__08q:Array [Array [Array [Int ,0x55],18],053];}Class Q_yi9_1:l{Var O:Array [Boolean ,0B1_1_0_1];Val $0_:Array [Int ,053];}Class __{Var $K,U,F,__x:Array [Array [Array [Array [Array [Float ,3_2],0B1],0X2_2],0x24],800];}'''
        expect = '''Program([ClassDecl(Id(_t),Id(__),[]),ClassDecl(Id(___),Id(e),[]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($S5__08q),ArrayType(43,ArrayType(18,ArrayType(85,IntType)))))]),ClassDecl(Id(Q_yi9_1),Id(l),[AttributeDecl(Instance,VarDecl(Id(O),ArrayType(13,BoolType))),AttributeDecl(Static,ConstDecl(Id($0_),ArrayType(43,IntType),None))]),ClassDecl(Id(__),[AttributeDecl(Static,VarDecl(Id($K),ArrayType(800,ArrayType(36,ArrayType(34,ArrayType(1,ArrayType(32,FloatType))))))),AttributeDecl(Instance,VarDecl(Id(U),ArrayType(800,ArrayType(36,ArrayType(34,ArrayType(1,ArrayType(32,FloatType))))))),AttributeDecl(Instance,VarDecl(Id(F),ArrayType(800,ArrayType(36,ArrayType(34,ArrayType(1,ArrayType(32,FloatType))))))),AttributeDecl(Instance,VarDecl(Id(__x),ArrayType(800,ArrayType(36,ArrayType(34,ArrayType(1,ArrayType(32,FloatType)))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 240))

    def test_241(self):
        line = '''Class DU09_3__:_{}Class V_337:QV{}Class __{Val $_x,K1Pi_,_,_kk5,$2o:Boolean ;Constructor (W:N){}Constructor (JH,_,_,Lw,_3,__,L28,_,_,Y:Array [Int ,0XE];__,_,w,_,Y:N1){}_(){Break ;} }'''
        expect = '''Program([ClassDecl(Id(DU09_3__),Id(_),[]),ClassDecl(Id(V_337),Id(QV),[]),ClassDecl(Id(__),[AttributeDecl(Static,ConstDecl(Id($_x),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(K1Pi_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_kk5),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($2o),BoolType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(W),ClassType(Id(N)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(JH),ArrayType(14,IntType)),param(Id(_),ArrayType(14,IntType)),param(Id(_),ArrayType(14,IntType)),param(Id(Lw),ArrayType(14,IntType)),param(Id(_3),ArrayType(14,IntType)),param(Id(__),ArrayType(14,IntType)),param(Id(L28),ArrayType(14,IntType)),param(Id(_),ArrayType(14,IntType)),param(Id(_),ArrayType(14,IntType)),param(Id(Y),ArrayType(14,IntType)),param(Id(__),ClassType(Id(N1))),param(Id(_),ClassType(Id(N1))),param(Id(w),ClassType(Id(N1))),param(Id(_),ClassType(Id(N1))),param(Id(Y),ClassType(Id(N1)))],Block([])),MethodDecl(Id(_),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 241))

    def test_242(self):
        line = '''Class Z:_164__{}Class __:n2F_{}Class N{}Class b{Constructor (ZV_8:Array [Array [Array [Int ,36],03_3],0b1];m0:Int ;_39_t:Array [Int ,033];o:Float ){ {} }}Class _31:__{Val $2,$_5dK_:Array [Array [Boolean ,0x64],033];Constructor (f:Float ;_:T;_N,g:Array [String ,03]){} }'''
        expect = '''Program([ClassDecl(Id(Z),Id(_164__),[]),ClassDecl(Id(__),Id(n2F_),[]),ClassDecl(Id(N),[]),ClassDecl(Id(b),[MethodDecl(Id(Constructor),Instance,[param(Id(ZV_8),ArrayType(1,ArrayType(27,ArrayType(36,IntType)))),param(Id(m0),IntType),param(Id(_39_t),ArrayType(27,IntType)),param(Id(o),FloatType)],Block([Block([])]))]),ClassDecl(Id(_31),Id(__),[AttributeDecl(Static,ConstDecl(Id($2),ArrayType(27,ArrayType(100,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($_5dK_),ArrayType(27,ArrayType(100,BoolType)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(f),FloatType),param(Id(_),ClassType(Id(T))),param(Id(_N),ArrayType(3,StringType)),param(Id(g),ArrayType(3,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 242))

    def test_243(self):
        line = '''Class _v{Constructor (b:String ;_:Int ;_6,c:O__;r2,_11:D;_,ko:Float ;r,__:Array [String ,0x7];U,__:Array [Array [Int ,06_4],05_4];_K:Int ){}Constructor (){Continue ;{} }}'''
        expect = '''Program([ClassDecl(Id(_v),[MethodDecl(Id(Constructor),Instance,[param(Id(b),StringType),param(Id(_),IntType),param(Id(_6),ClassType(Id(O__))),param(Id(c),ClassType(Id(O__))),param(Id(r2),ClassType(Id(D))),param(Id(_11),ClassType(Id(D))),param(Id(_),FloatType),param(Id(ko),FloatType),param(Id(r),ArrayType(7,StringType)),param(Id(__),ArrayType(7,StringType)),param(Id(U),ArrayType(44,ArrayType(52,IntType))),param(Id(__),ArrayType(44,ArrayType(52,IntType))),param(Id(_K),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue,Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 243))

    def test_244(self):
        line = '''Class _9_f{Destructor (){}_8(tj:Array [String ,040]){ {} }Var _,_,$___,$_,___7,$_,$9_c2:Array [Array [String ,0x9E],0XB];Destructor (){} }Class _:_{Constructor (c8_6___7z,_,_:Array [Boolean ,040];X_D:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_9_f),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_8),Instance,[param(Id(tj),ArrayType(32,StringType))],Block([Block([])])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(11,ArrayType(158,StringType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(11,ArrayType(158,StringType)))),AttributeDecl(Static,VarDecl(Id($___),ArrayType(11,ArrayType(158,StringType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(11,ArrayType(158,StringType)))),AttributeDecl(Instance,VarDecl(Id(___7),ArrayType(11,ArrayType(158,StringType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(11,ArrayType(158,StringType)))),AttributeDecl(Static,VarDecl(Id($9_c2),ArrayType(11,ArrayType(158,StringType)))),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(c8_6___7z),ArrayType(32,BoolType)),param(Id(_),ArrayType(32,BoolType)),param(Id(_),ArrayType(32,BoolType)),param(Id(X_D),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 244))

    def test_245(self):
        line = '''Class _H{}Class _:T{Var $654,$t_t:Boolean ;}Class u{Var $b:_;Val X,__4:Array [Float ,0112];}Class M:_{}Class __0:_{}Class _:n_z{Var _3,$1:String ;}Class _k{}Class _{$Am(b8__,T:fF;_,M:__U__){}Constructor (){Break ;} }Class _6_c{}'''
        expect = '''Program([ClassDecl(Id(_H),[]),ClassDecl(Id(_),Id(T),[AttributeDecl(Static,VarDecl(Id($654),BoolType)),AttributeDecl(Static,VarDecl(Id($t_t),BoolType))]),ClassDecl(Id(u),[AttributeDecl(Static,VarDecl(Id($b),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(X),ArrayType(74,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(__4),ArrayType(74,FloatType),None))]),ClassDecl(Id(M),Id(_),[]),ClassDecl(Id(__0),Id(_),[]),ClassDecl(Id(_),Id(n_z),[AttributeDecl(Instance,VarDecl(Id(_3),StringType)),AttributeDecl(Static,VarDecl(Id($1),StringType))]),ClassDecl(Id(_k),[]),ClassDecl(Id(_),[MethodDecl(Id($Am),Static,[param(Id(b8__),ClassType(Id(fF))),param(Id(T),ClassType(Id(fF))),param(Id(_),ClassType(Id(__U__))),param(Id(M),ClassType(Id(__U__)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Break]))]),ClassDecl(Id(_6_c),[])])'''
        self.assertTrue(TestAST.test(line, expect, 245))

    def test_246(self):
        line = '''Class r{$tQ(){}$_(W:Boolean ){}P(V9F,__,dz_E:_;_:Int ;_p,T_k,M:Float ;g:_M_y;x_:Array [Array [String ,0B10010],0B1];s83a6q:pM;l3:Array [Int ,0X6]){Break ;}Constructor (v,__,K:Array [Array [Int ,95_6_8],0X41]){} }Class __9{}'''
        expect = '''Program([ClassDecl(Id(r),[MethodDecl(Id($tQ),Static,[],Block([])),MethodDecl(Id($_),Static,[param(Id(W),BoolType)],Block([])),MethodDecl(Id(P),Instance,[param(Id(V9F),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(dz_E),ClassType(Id(_))),param(Id(_),IntType),param(Id(_p),FloatType),param(Id(T_k),FloatType),param(Id(M),FloatType),param(Id(g),ClassType(Id(_M_y))),param(Id(x_),ArrayType(1,ArrayType(18,StringType))),param(Id(s83a6q),ClassType(Id(pM))),param(Id(l3),ArrayType(6,IntType))],Block([Break])),MethodDecl(Id(Constructor),Instance,[param(Id(v),ArrayType(65,ArrayType(9568,IntType))),param(Id(__),ArrayType(65,ArrayType(9568,IntType))),param(Id(K),ArrayType(65,ArrayType(9568,IntType)))],Block([]))]),ClassDecl(Id(__9),[])])'''
        self.assertTrue(TestAST.test(line, expect, 246))

    def test_247(self):
        line = '''Class __:KX{Val $_,$dx:_;}Class L:Y{Val $55,GI:Array [Array [Array [String ,4],01],87];Var b,_,$6:_;}Class __7xb7:_{Var P,_,p_J_:Float ;Destructor (){}Constructor (){} }Class _g:_{$_z(S_3V0:Array [Array [Float ,0B10],87];_:Array [Boolean ,01];_:_){} }Class h:_k1{}'''
        expect = '''Program([ClassDecl(Id(__),Id(KX),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($dx),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(L),Id(Y),[AttributeDecl(Static,ConstDecl(Id($55),ArrayType(87,ArrayType(1,ArrayType(4,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(GI),ArrayType(87,ArrayType(1,ArrayType(4,StringType))),None)),AttributeDecl(Instance,VarDecl(Id(b),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($6),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(__7xb7),Id(_),[AttributeDecl(Instance,VarDecl(Id(P),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Instance,VarDecl(Id(p_J_),FloatType)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_g),Id(_),[MethodDecl(Id($_z),Static,[param(Id(S_3V0),ArrayType(87,ArrayType(2,FloatType))),param(Id(_),ArrayType(1,BoolType)),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(h),Id(_k1),[])])'''
        self.assertTrue(TestAST.test(line, expect, 247))

    def test_248(self):
        line = '''Class A{_(_,_s,__:Z8;__,w,_3,_:E){}Val $_,$4:Array [Array [Array [Array [Int ,86],0b101011],0B1_0_1],0b101011];}Class _{Constructor (){}$Wb(){Return ;} }Class _:__Y{Val _72,_4:Array [Int ,052];Constructor (){} }Class __{$6_(r:Array [Array [Boolean ,052],0B10]){Break ;}Destructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(A),[MethodDecl(Id(_),Instance,[param(Id(_),ClassType(Id(Z8))),param(Id(_s),ClassType(Id(Z8))),param(Id(__),ClassType(Id(Z8))),param(Id(__),ClassType(Id(E))),param(Id(w),ClassType(Id(E))),param(Id(_3),ClassType(Id(E))),param(Id(_),ClassType(Id(E)))],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(43,ArrayType(5,ArrayType(43,ArrayType(86,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($4),ArrayType(43,ArrayType(5,ArrayType(43,ArrayType(86,IntType)))),None))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($Wb),Static,[],Block([Return()]))]),ClassDecl(Id(_),Id(__Y),[AttributeDecl(Instance,ConstDecl(Id(_72),ArrayType(42,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_4),ArrayType(42,IntType),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(__),[MethodDecl(Id($6_),Static,[param(Id(r),ArrayType(2,ArrayType(42,BoolType)))],Block([Break])),MethodDecl(Id(Destructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 248))

    def test_249(self):
        line = '''Class _{Constructor (p:_;_6G,_:String ;_,_:Array [Array [Array [Int ,060],0b1],0x34];kH4l,Q:Array [Float ,02];__6:k;B_O,_:Array [Array [Array [Array [Array [Float ,0B11011],83],0xE],0x34],0b1]){}Val $n,$_,_m:_;}Class _O:_{}Class __6w{}Class m{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(p),ClassType(Id(_))),param(Id(_6G),StringType),param(Id(_),StringType),param(Id(_),ArrayType(52,ArrayType(1,ArrayType(48,IntType)))),param(Id(_),ArrayType(52,ArrayType(1,ArrayType(48,IntType)))),param(Id(kH4l),ArrayType(2,FloatType)),param(Id(Q),ArrayType(2,FloatType)),param(Id(__6),ClassType(Id(k))),param(Id(B_O),ArrayType(1,ArrayType(52,ArrayType(14,ArrayType(83,ArrayType(27,FloatType)))))),param(Id(_),ArrayType(1,ArrayType(52,ArrayType(14,ArrayType(83,ArrayType(27,FloatType))))))],Block([])),AttributeDecl(Static,ConstDecl(Id($n),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_m),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_O),Id(_),[]),ClassDecl(Id(__6w),[]),ClassDecl(Id(m),[])])'''
        self.assertTrue(TestAST.test(line, expect, 249))

    def test_250(self):
        line = '''Class D_S{}Class _:Y8{Val _m_,$_:String ;Destructor (){} }Class _7_:_5g_{Val _:Array [Int ,0112];Var a:Array [Array [Int ,0b1_10_0],0B1101];}Class o:Y7_{Destructor (){} }Class i__{}Class _5x7J{}'''
        expect = '''Program([ClassDecl(Id(D_S),[]),ClassDecl(Id(_),Id(Y8),[AttributeDecl(Instance,ConstDecl(Id(_m_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_7_),Id(_5g_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(74,IntType),None)),AttributeDecl(Instance,VarDecl(Id(a),ArrayType(13,ArrayType(12,IntType))))]),ClassDecl(Id(o),Id(Y7_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(i__),[]),ClassDecl(Id(_5x7J),[])])'''
        self.assertTrue(TestAST.test(line, expect, 250))

    def test_251(self):
        line = '''Class Yeq:U__{Val __,$_:Array [String ,0x17];Var _1__:Array [Array [Array [Array [Int ,0b1010000],0b1],02],0136];Val eR:String ;}Class _:_{}Class __{Destructor (){} }Class ___:_{}Class _U_:__{Constructor (){}Constructor (){} }Class r{}Class M{}'''
        expect = '''Program([ClassDecl(Id(Yeq),Id(U__),[AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(23,StringType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(23,StringType),None)),AttributeDecl(Instance,VarDecl(Id(_1__),ArrayType(94,ArrayType(2,ArrayType(1,ArrayType(80,IntType)))))),AttributeDecl(Instance,ConstDecl(Id(eR),StringType,None))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(___),Id(_),[]),ClassDecl(Id(_U_),Id(__),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(r),[]),ClassDecl(Id(M),[])])'''
        self.assertTrue(TestAST.test(line, expect, 251))

    def test_252(self):
        line = '''Class _{Var Jj,$7:__7;}Class _{p(WFa,q1q:Int ;_0,rP_0,_3X2:Array [Array [Float ,0b10],0X40];_:Float ;_:Array [Boolean ,4];TEeoG_,VN6_,b:_;_,Z,_7,r2:Array [Boolean ,6];__7,_:Float ;N_,_,_,J:b;q_:Array [String ,07];_k6:Boolean ;_:Int ;_7:Array [Array [Array [Float ,95],59_64],025]){Break ;}Constructor (){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(Jj),ClassType(Id(__7)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($7),ClassType(Id(__7)),NullLiteral()))]),ClassDecl(Id(_),[MethodDecl(Id(p),Instance,[param(Id(WFa),IntType),param(Id(q1q),IntType),param(Id(_0),ArrayType(64,ArrayType(2,FloatType))),param(Id(rP_0),ArrayType(64,ArrayType(2,FloatType))),param(Id(_3X2),ArrayType(64,ArrayType(2,FloatType))),param(Id(_),FloatType),param(Id(_),ArrayType(4,BoolType)),param(Id(TEeoG_),ClassType(Id(_))),param(Id(VN6_),ClassType(Id(_))),param(Id(b),ClassType(Id(_))),param(Id(_),ArrayType(6,BoolType)),param(Id(Z),ArrayType(6,BoolType)),param(Id(_7),ArrayType(6,BoolType)),param(Id(r2),ArrayType(6,BoolType)),param(Id(__7),FloatType),param(Id(_),FloatType),param(Id(N_),ClassType(Id(b))),param(Id(_),ClassType(Id(b))),param(Id(_),ClassType(Id(b))),param(Id(J),ClassType(Id(b))),param(Id(q_),ArrayType(7,StringType)),param(Id(_k6),BoolType),param(Id(_),IntType),param(Id(_7),ArrayType(21,ArrayType(5964,ArrayType(95,FloatType))))],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 252))

    def test_253(self):
        line = '''Class v:Y{Destructor (){}Val $_,$6_,$_,_3:Float ;}Class _PUw:_J1i{Constructor (_0:_1;LW,k,_,h:Array [Array [Array [Boolean ,8],0x4D],0X28]){}Val _m,p_,_:Boolean ;Val _9K,$G:h;}'''
        expect = '''Program([ClassDecl(Id(v),Id(Y),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($6_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_3),FloatType,None))]),ClassDecl(Id(_PUw),Id(_J1i),[MethodDecl(Id(Constructor),Instance,[param(Id(_0),ClassType(Id(_1))),param(Id(LW),ArrayType(40,ArrayType(77,ArrayType(8,BoolType)))),param(Id(k),ArrayType(40,ArrayType(77,ArrayType(8,BoolType)))),param(Id(_),ArrayType(40,ArrayType(77,ArrayType(8,BoolType)))),param(Id(h),ArrayType(40,ArrayType(77,ArrayType(8,BoolType))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_m),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(p_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_9K),ClassType(Id(h)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($G),ClassType(Id(h)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 253))

    def test_254(self):
        line = '''Class _{_7(_,z,_,p,e_63_31Y,_:String ;_,_,__,n:Array [Float ,0xA82_259];to:Array [Array [Boolean ,016],15];__,N3:Array [Int ,0b1001111];J,dyq:Float ){} }Class _8{Constructor (q_,_o:Array [String ,0XB_9_D8_E];_:_4_2){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(_7),Instance,[param(Id(_),StringType),param(Id(z),StringType),param(Id(_),StringType),param(Id(p),StringType),param(Id(e_63_31Y),StringType),param(Id(_),StringType),param(Id(_),ArrayType(11018841,FloatType)),param(Id(_),ArrayType(11018841,FloatType)),param(Id(__),ArrayType(11018841,FloatType)),param(Id(n),ArrayType(11018841,FloatType)),param(Id(to),ArrayType(15,ArrayType(14,BoolType))),param(Id(__),ArrayType(79,IntType)),param(Id(N3),ArrayType(79,IntType)),param(Id(J),FloatType),param(Id(dyq),FloatType)],Block([]))]),ClassDecl(Id(_8),[MethodDecl(Id(Constructor),Instance,[param(Id(q_),ArrayType(761230,StringType)),param(Id(_o),ArrayType(761230,StringType)),param(Id(_),ClassType(Id(_4_2)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 254))

    def test_255(self):
        line = '''Class _{Constructor (W:Array [Array [Array [Array [String ,012],0465],0X41],0B1000110];_0_:Array [Float ,0X41];mN:Boolean ;_1,pMO_:Array [Array [Array [Array [String ,0X41],012],1_6],0x4C]){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(W),ArrayType(70,ArrayType(65,ArrayType(309,ArrayType(10,StringType))))),param(Id(_0_),ArrayType(65,FloatType)),param(Id(mN),BoolType),param(Id(_1),ArrayType(76,ArrayType(16,ArrayType(10,ArrayType(65,StringType))))),param(Id(pMO_),ArrayType(76,ArrayType(16,ArrayType(10,ArrayType(65,StringType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 255))

    def test_256(self):
        line = '''Class _:_{Var _,G,hz8b,$Z:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0B1010001],83],0135],0b1100],2_59],0135],83],0B10_0_0_100],0b1];Var $_:Array [Int ,8];}Class L:O{}Class X9wV:Y{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,ArrayType(68,ArrayType(83,ArrayType(93,ArrayType(259,ArrayType(12,ArrayType(93,ArrayType(83,ArrayType(81,BoolType))))))))))),AttributeDecl(Instance,VarDecl(Id(G),ArrayType(1,ArrayType(68,ArrayType(83,ArrayType(93,ArrayType(259,ArrayType(12,ArrayType(93,ArrayType(83,ArrayType(81,BoolType))))))))))),AttributeDecl(Instance,VarDecl(Id(hz8b),ArrayType(1,ArrayType(68,ArrayType(83,ArrayType(93,ArrayType(259,ArrayType(12,ArrayType(93,ArrayType(83,ArrayType(81,BoolType))))))))))),AttributeDecl(Static,VarDecl(Id($Z),ArrayType(1,ArrayType(68,ArrayType(83,ArrayType(93,ArrayType(259,ArrayType(12,ArrayType(93,ArrayType(83,ArrayType(81,BoolType))))))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(8,IntType)))]),ClassDecl(Id(L),Id(O),[]),ClassDecl(Id(X9wV),Id(Y),[])])'''
        self.assertTrue(TestAST.test(line, expect, 256))

    def test_257(self):
        line = '''Class _{}Class _:_{$M_(_,N:_;y,p,_,y0W:Boolean ;_8,J__:Array [Int ,0x23];_Z2sh:Array [Array [Array [Array [Int ,052_73_434_27],01_0_2],0B11],9];ni_s:Array [Array [Float ,9],0XD_15]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id($M_),Static,[param(Id(_),ClassType(Id(_))),param(Id(N),ClassType(Id(_))),param(Id(y),BoolType),param(Id(p),BoolType),param(Id(_),BoolType),param(Id(y0W),BoolType),param(Id(_8),ArrayType(35,IntType)),param(Id(J__),ArrayType(35,IntType)),param(Id(_Z2sh),ArrayType(9,ArrayType(3,ArrayType(66,ArrayType(90031895,IntType))))),param(Id(ni_s),ArrayType(3349,ArrayType(9,FloatType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 257))

    def test_258(self):
        line = '''Class _:_{}Class L{}Class _6{Constructor (_,_y:__5_;K5_:String ;_,_,j,U_A,_:Array [Array [Array [Boolean ,9_7],0b1],0X3C];_2_V,D_r:_4){}Constructor (JRV_,_:String ){Break ;}H(_,_wI,Y,Ek,__:Array [Boolean ,0x4C];_Q:Array [Boolean ,0142];__,P:_){}Val _,$4,R_,$9___H__32__:x1_;Val _:d9b;Destructor (){ {} }}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(L),[]),ClassDecl(Id(_6),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(__5_))),param(Id(_y),ClassType(Id(__5_))),param(Id(K5_),StringType),param(Id(_),ArrayType(60,ArrayType(1,ArrayType(97,BoolType)))),param(Id(_),ArrayType(60,ArrayType(1,ArrayType(97,BoolType)))),param(Id(j),ArrayType(60,ArrayType(1,ArrayType(97,BoolType)))),param(Id(U_A),ArrayType(60,ArrayType(1,ArrayType(97,BoolType)))),param(Id(_),ArrayType(60,ArrayType(1,ArrayType(97,BoolType)))),param(Id(_2_V),ClassType(Id(_4))),param(Id(D_r),ClassType(Id(_4)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(JRV_),StringType),param(Id(_),StringType)],Block([Break])),MethodDecl(Id(H),Instance,[param(Id(_),ArrayType(76,BoolType)),param(Id(_wI),ArrayType(76,BoolType)),param(Id(Y),ArrayType(76,BoolType)),param(Id(Ek),ArrayType(76,BoolType)),param(Id(__),ArrayType(76,BoolType)),param(Id(_Q),ArrayType(98,BoolType)),param(Id(__),ClassType(Id(_))),param(Id(P),ClassType(Id(_)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(x1_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($4),ClassType(Id(x1_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(R_),ClassType(Id(x1_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($9___H__32__),ClassType(Id(x1_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(d9b)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 258))

    def test_259(self):
        line = '''Class __:_{Val c4:Array [Array [Boolean ,0b11010],0122];_2(_q7:Array [Int ,0X1B];F:Boolean ){Continue ;}V(_41l__:Boolean ;_O:String ){Return ;} }Class __{Destructor (){p98::$Z8c();} }Class t{}Class v{}'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[AttributeDecl(Instance,ConstDecl(Id(c4),ArrayType(82,ArrayType(26,BoolType)),None)),MethodDecl(Id(_2),Instance,[param(Id(_q7),ArrayType(27,IntType)),param(Id(F),BoolType)],Block([Continue])),MethodDecl(Id(V),Instance,[param(Id(_41l__),BoolType),param(Id(_O),StringType)],Block([Return()]))]),ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([Call(Id(p98),Id($Z8c),[])]))]),ClassDecl(Id(t),[]),ClassDecl(Id(v),[])])'''
        self.assertTrue(TestAST.test(line, expect, 259))

    def test_260(self):
        line = '''Class _l{Destructor (){} }Class _:O{b(_,_:_;_xd,U_7,n:Boolean ;___7,_,_,__:Array [Array [Array [Boolean ,91],067],0XB3_79];O,___5,J:Array [Boolean ,0x45];_Y:__){} }Class ___iZ7W:_{}'''
        expect = '''Program([ClassDecl(Id(_l),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(O),[MethodDecl(Id(b),Instance,[param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_xd),BoolType),param(Id(U_7),BoolType),param(Id(n),BoolType),param(Id(___7),ArrayType(45945,ArrayType(55,ArrayType(91,BoolType)))),param(Id(_),ArrayType(45945,ArrayType(55,ArrayType(91,BoolType)))),param(Id(_),ArrayType(45945,ArrayType(55,ArrayType(91,BoolType)))),param(Id(__),ArrayType(45945,ArrayType(55,ArrayType(91,BoolType)))),param(Id(O),ArrayType(69,BoolType)),param(Id(___5),ArrayType(69,BoolType)),param(Id(J),ArrayType(69,BoolType)),param(Id(_Y),ClassType(Id(__)))],Block([]))]),ClassDecl(Id(___iZ7W),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 260))

    def test_261(self):
        line = '''Class _p_m:gbV{Constructor (_,l_:_;_,Y:Float ;w,O1:Boolean ;S:_;_:o;s_:Boolean ;dW_292:Array [Float ,2];_,Ia9:u_K;b_:Array [Array [Array [Array [Float ,0X7FB],040],18],0b10000];aY:Int ;om1,N2,h9:M;_:_;V,_,H:Int ){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_p_m),Id(gbV),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(l_),ClassType(Id(_))),param(Id(_),FloatType),param(Id(Y),FloatType),param(Id(w),BoolType),param(Id(O1),BoolType),param(Id(S),ClassType(Id(_))),param(Id(_),ClassType(Id(o))),param(Id(s_),BoolType),param(Id(dW_292),ArrayType(2,FloatType)),param(Id(_),ClassType(Id(u_K))),param(Id(Ia9),ClassType(Id(u_K))),param(Id(b_),ArrayType(16,ArrayType(18,ArrayType(32,ArrayType(2043,FloatType))))),param(Id(aY),IntType),param(Id(om1),ClassType(Id(M))),param(Id(N2),ClassType(Id(M))),param(Id(h9),ClassType(Id(M))),param(Id(_),ClassType(Id(_))),param(Id(V),IntType),param(Id(_),IntType),param(Id(H),IntType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 261))

    def test_262(self):
        line = '''Class _:_{Constructor (_,_,_F:Int ;O_aT17_,q7x_4:Array [Int ,20];_14:Array [Array [Array [Array [Array [Array [Array [String ,20],20],015_1_7],0B1010011],0B1010011],0x73_F27],9]){}Constructor (_:Array [String ,02337];QvP:_T;bZ,f,m7,__cG,m_,x_z,k_a51:Boolean ){}Var _G:__1l;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(_),IntType),param(Id(_F),IntType),param(Id(O_aT17_),ArrayType(20,IntType)),param(Id(q7x_4),ArrayType(20,IntType)),param(Id(_14),ArrayType(9,ArrayType(474919,ArrayType(83,ArrayType(83,ArrayType(847,ArrayType(20,ArrayType(20,StringType))))))))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1247,StringType)),param(Id(QvP),ClassType(Id(_T))),param(Id(bZ),BoolType),param(Id(f),BoolType),param(Id(m7),BoolType),param(Id(__cG),BoolType),param(Id(m_),BoolType),param(Id(x_z),BoolType),param(Id(k_a51),BoolType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_G),ClassType(Id(__1l)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 262))

    def test_263(self):
        line = '''Class _{}Class eC:B0{}Class _:J{}Class n_5{_(f_:Array [Array [Array [Int ,0B1010111],031],0x1C]){}$_(){}$_(_,a__Y,SJ:Array [Float ,0x1C];_:Array [Float ,0B1_1];_,_:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(eC),Id(B0),[]),ClassDecl(Id(_),Id(J),[]),ClassDecl(Id(n_5),[MethodDecl(Id(_),Instance,[param(Id(f_),ArrayType(28,ArrayType(25,ArrayType(87,IntType))))],Block([])),MethodDecl(Id($_),Static,[],Block([])),MethodDecl(Id($_),Static,[param(Id(_),ArrayType(28,FloatType)),param(Id(a__Y),ArrayType(28,FloatType)),param(Id(SJ),ArrayType(28,FloatType)),param(Id(_),ArrayType(3,FloatType)),param(Id(_),FloatType),param(Id(_),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 263))

    def test_264(self):
        line = '''Class o{Constructor (){}Var _q,Y0:Array [Array [Boolean ,0X9_A_2_C],4];Var gq:Array [Array [Array [Boolean ,0B10100],0b1000011],8];Var $o_,I,l,$2,$3:_h__;Destructor (){}Val F6k3:f0;$5f(_:_;O,_:_;G_:String ;_,r_,_n,F,_:_;c3,i:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(o),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_q),ArrayType(4,ArrayType(39468,BoolType)))),AttributeDecl(Instance,VarDecl(Id(Y0),ArrayType(4,ArrayType(39468,BoolType)))),AttributeDecl(Instance,VarDecl(Id(gq),ArrayType(8,ArrayType(67,ArrayType(20,BoolType))))),AttributeDecl(Static,VarDecl(Id($o_),ClassType(Id(_h__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(I),ClassType(Id(_h__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(l),ClassType(Id(_h__)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($2),ClassType(Id(_h__)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($3),ClassType(Id(_h__)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(F6k3),ClassType(Id(f0)),NullLiteral())),MethodDecl(Id($5f),Static,[param(Id(_),ClassType(Id(_))),param(Id(O),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(G_),StringType),param(Id(_),ClassType(Id(_))),param(Id(r_),ClassType(Id(_))),param(Id(_n),ClassType(Id(_))),param(Id(F),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(c3),BoolType),param(Id(i),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 264))

    def test_265(self):
        line = '''Class an0:ij_4983{Destructor (){}Constructor (){} }Class _:t{d2(d_,W:Array [Array [Float ,2],03_76];_AA__,I:Array [Array [Float ,0xA],34];_2,q__6,Q:_R;_H0,s:Array [String ,021]){} }'''
        expect = '''Program([ClassDecl(Id(an0),Id(ij_4983),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(t),[MethodDecl(Id(d2),Instance,[param(Id(d_),ArrayType(254,ArrayType(2,FloatType))),param(Id(W),ArrayType(254,ArrayType(2,FloatType))),param(Id(_AA__),ArrayType(34,ArrayType(10,FloatType))),param(Id(I),ArrayType(34,ArrayType(10,FloatType))),param(Id(_2),ClassType(Id(_R))),param(Id(q__6),ClassType(Id(_R))),param(Id(Q),ClassType(Id(_R))),param(Id(_H0),ArrayType(17,StringType)),param(Id(s),ArrayType(17,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 265))

    def test_266(self):
        line = '''Class _:_{Constructor (v,_8,y3,BH:Boolean ;l,h,__:m;O,RZQ:_;w_,_3,p__:Boolean ;_:_;t2,kY:Boolean ;_3:_;_:_;_:Array [String ,0127];__,_gSMt:Boolean ;S,k__:Int ;U,_,_,k7_:__){} }Class _477{Constructor (){Val _2:Array [Float ,03];}Constructor (){}Val $3:Array [Array [Array [Float ,0B1],0127],32];$_(F,_:K7V){Continue ;Val _,H__:Int ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(v),BoolType),param(Id(_8),BoolType),param(Id(y3),BoolType),param(Id(BH),BoolType),param(Id(l),ClassType(Id(m))),param(Id(h),ClassType(Id(m))),param(Id(__),ClassType(Id(m))),param(Id(O),ClassType(Id(_))),param(Id(RZQ),ClassType(Id(_))),param(Id(w_),BoolType),param(Id(_3),BoolType),param(Id(p__),BoolType),param(Id(_),ClassType(Id(_))),param(Id(t2),BoolType),param(Id(kY),BoolType),param(Id(_3),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(87,StringType)),param(Id(__),BoolType),param(Id(_gSMt),BoolType),param(Id(S),IntType),param(Id(k__),IntType),param(Id(U),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(k7_),ClassType(Id(__)))],Block([]))]),ClassDecl(Id(_477),[MethodDecl(Id(Constructor),Instance,[],Block([ConstDecl(Id(_2),ArrayType(3,FloatType),None)])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($3),ArrayType(32,ArrayType(87,ArrayType(1,FloatType))),None)),MethodDecl(Id($_),Static,[param(Id(F),ClassType(Id(K7V))),param(Id(_),ClassType(Id(K7V)))],Block([Continue,ConstDecl(Id(_),IntType,None),ConstDecl(Id(H__),IntType,None)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 266))

    def test_267(self):
        line = '''Class _:Q{Constructor (_:Array [Int ,0X3F];__:_r;m,z7,k,_,L,_:_){}$p(_8,Y7:Boolean ;_i,y:Array [Array [String ,0B11],0X3F]){} }Class e1_:C{Constructor (o____,_3__:V_;_3:D){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(Q),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(63,IntType)),param(Id(__),ClassType(Id(_r))),param(Id(m),ClassType(Id(_))),param(Id(z7),ClassType(Id(_))),param(Id(k),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(L),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([])),MethodDecl(Id($p),Static,[param(Id(_8),BoolType),param(Id(Y7),BoolType),param(Id(_i),ArrayType(63,ArrayType(3,StringType))),param(Id(y),ArrayType(63,ArrayType(3,StringType)))],Block([]))]),ClassDecl(Id(e1_),Id(C),[MethodDecl(Id(Constructor),Instance,[param(Id(o____),ClassType(Id(V_))),param(Id(_3__),ClassType(Id(V_))),param(Id(_3),ClassType(Id(D)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 267))

    def test_268(self):
        line = '''Class _6{Constructor (_:Float ;_,_:_;__1:H2;C0Xn:Array [Boolean ,0x13];Y:p;_,__0O:Boolean ){} }Class _{Val $5_,$a_,$_,$1_X,$R2_:H_C17_;Constructor (_y:x4){} }Class d{Val $4,$6,$_:Int ;}'''
        expect = '''Program([ClassDecl(Id(_6),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(__1),ClassType(Id(H2))),param(Id(C0Xn),ArrayType(19,BoolType)),param(Id(Y),ClassType(Id(p))),param(Id(_),BoolType),param(Id(__0O),BoolType)],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($5_),ClassType(Id(H_C17_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($a_),ClassType(Id(H_C17_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(H_C17_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($1_X),ClassType(Id(H_C17_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($R2_),ClassType(Id(H_C17_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_y),ClassType(Id(x4)))],Block([]))]),ClassDecl(Id(d),[AttributeDecl(Static,ConstDecl(Id($4),IntType,None)),AttributeDecl(Static,ConstDecl(Id($6),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 268))

    def test_269(self):
        line = '''Class _8P:_{Constructor (){}Val $1l,$H,$H6,$9_,$__6_S1nb_1_6,z_:Array [Array [Float ,0b110100],020];}Class qF6m__Fe__:_{Constructor (){}Destructor (){} }Class f1V:k91__{Var $0,$6_:U;}Class aD:E{}Class f4P0{Var X:Boolean ;}Class r{}'''
        expect = '''Program([ClassDecl(Id(_8P),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($1l),ArrayType(16,ArrayType(52,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($H),ArrayType(16,ArrayType(52,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($H6),ArrayType(16,ArrayType(52,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($9_),ArrayType(16,ArrayType(52,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($__6_S1nb_1_6),ArrayType(16,ArrayType(52,FloatType)),None)),AttributeDecl(Instance,ConstDecl(Id(z_),ArrayType(16,ArrayType(52,FloatType)),None))]),ClassDecl(Id(qF6m__Fe__),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(f1V),Id(k91__),[AttributeDecl(Static,VarDecl(Id($0),ClassType(Id(U)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($6_),ClassType(Id(U)),NullLiteral()))]),ClassDecl(Id(aD),Id(E),[]),ClassDecl(Id(f4P0),[AttributeDecl(Instance,VarDecl(Id(X),BoolType))]),ClassDecl(Id(r),[])])'''
        self.assertTrue(TestAST.test(line, expect, 269))

    def test_270(self):
        line = '''Class K{$3(){} }Class Q4{}Class vcH:_{Constructor (_:Array [Array [Boolean ,0B110010],0x38];_:Array [Array [Boolean ,3],0X1];XUr7,_:Int ;z,yN:_2;o,m,f3:Array [Int ,0B1];_3j,H028:_){} }'''
        expect = '''Program([ClassDecl(Id(K),[MethodDecl(Id($3),Static,[],Block([]))]),ClassDecl(Id(Q4),[]),ClassDecl(Id(vcH),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(56,ArrayType(50,BoolType))),param(Id(_),ArrayType(1,ArrayType(3,BoolType))),param(Id(XUr7),IntType),param(Id(_),IntType),param(Id(z),ClassType(Id(_2))),param(Id(yN),ClassType(Id(_2))),param(Id(o),ArrayType(1,IntType)),param(Id(m),ArrayType(1,IntType)),param(Id(f3),ArrayType(1,IntType)),param(Id(_3j),ClassType(Id(_))),param(Id(H028),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 270))

    def test_271(self):
        line = '''Class a{$__5_(h:Array [Array [Array [Array [Array [Float ,0b1011001],016],93],016],0X16];S9O_8j_62,S6w79:Array [Float ,93];M__,r:String ;W:_;_,I:Array [Float ,4_2];____:Array [Int ,07_3];V:Array [String ,05]){} }'''
        expect = '''Program([ClassDecl(Id(a),[MethodDecl(Id($__5_),Static,[param(Id(h),ArrayType(22,ArrayType(14,ArrayType(93,ArrayType(14,ArrayType(89,FloatType)))))),param(Id(S9O_8j_62),ArrayType(93,FloatType)),param(Id(S6w79),ArrayType(93,FloatType)),param(Id(M__),StringType),param(Id(r),StringType),param(Id(W),ClassType(Id(_))),param(Id(_),ArrayType(42,FloatType)),param(Id(I),ArrayType(42,FloatType)),param(Id(____),ArrayType(59,IntType)),param(Id(V),ArrayType(5,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 271))

    def test_272(self):
        line = '''Class _:_6_8{_(b,P_,Y:Int ){}Constructor (){} }Class E_:_Z{}Class q:_{Var _3:Array [String ,96];Constructor (_:Float ;_:_15;_B:Array [Array [Array [Float ,0X12],0x51],0X12]){}Var Y,$_0:Array [Float ,96];}Class M:___{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_6_8),[MethodDecl(Id(_),Instance,[param(Id(b),IntType),param(Id(P_),IntType),param(Id(Y),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(E_),Id(_Z),[]),ClassDecl(Id(q),Id(_),[AttributeDecl(Instance,VarDecl(Id(_3),ArrayType(96,StringType))),MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(_),ClassType(Id(_15))),param(Id(_B),ArrayType(18,ArrayType(81,ArrayType(18,FloatType))))],Block([])),AttributeDecl(Instance,VarDecl(Id(Y),ArrayType(96,FloatType))),AttributeDecl(Static,VarDecl(Id($_0),ArrayType(96,FloatType)))]),ClassDecl(Id(M),Id(___),[])])'''
        self.assertTrue(TestAST.test(line, expect, 272))

    def test_273(self):
        line = '''Class t{Val J6t4:Array [Array [Array [Array [Float ,0b1111],0B110011],0x15],0b11];Var $_:_3;Constructor (k_,_,_F,a,Q8:S;y:Array [Array [Array [Array [Int ,9],0x2_C],03],0B1_0];B_:Array [Int ,03];__B_m,___A3Jo:Array [String ,0B1_0_1]){}Val a0:Array [Array [String ,0x15],03];}'''
        expect = '''Program([ClassDecl(Id(t),[AttributeDecl(Instance,ConstDecl(Id(J6t4),ArrayType(3,ArrayType(21,ArrayType(51,ArrayType(15,FloatType)))),None)),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_3)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(k_),ClassType(Id(S))),param(Id(_),ClassType(Id(S))),param(Id(_F),ClassType(Id(S))),param(Id(a),ClassType(Id(S))),param(Id(Q8),ClassType(Id(S))),param(Id(y),ArrayType(2,ArrayType(3,ArrayType(44,ArrayType(9,IntType))))),param(Id(B_),ArrayType(3,IntType)),param(Id(__B_m),ArrayType(5,StringType)),param(Id(___A3Jo),ArrayType(5,StringType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(a0),ArrayType(3,ArrayType(21,StringType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 273))

    def test_274(self):
        line = '''Class _U9:c{}Class _k:_{Constructor (){} }Class IR_N{Val $z43:String ;Constructor (_:Array [Array [Array [Array [Array [Array [Array [Int ,2_8_4532_4_5],67],67],0X32],0105],0105],07];C,e:Array [Array [String ,0b10_1],0xF_0]){Continue ;} }Class _:j{}Class ST4:_{}Class __4:__8{}Class _5_{}'''
        expect = '''Program([ClassDecl(Id(_U9),Id(c),[]),ClassDecl(Id(_k),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(IR_N),[AttributeDecl(Static,ConstDecl(Id($z43),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(7,ArrayType(69,ArrayType(69,ArrayType(50,ArrayType(67,ArrayType(67,ArrayType(28453245,IntType)))))))),param(Id(C),ArrayType(240,ArrayType(5,StringType))),param(Id(e),ArrayType(240,ArrayType(5,StringType)))],Block([Continue]))]),ClassDecl(Id(_),Id(j),[]),ClassDecl(Id(ST4),Id(_),[]),ClassDecl(Id(__4),Id(__8),[]),ClassDecl(Id(_5_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 274))

    def test_275(self):
        line = '''Class o:zIK{Constructor (H,M4om__6:_;k,_:Array [Array [Array [Array [Array [Int ,0x5C],024],8],0b1],0B1];xE,c_:__5N){}Val $P6_2:Float ;Var $g,$__,$_:_;}Class _77:__{}Class _7Vs{}'''
        expect = '''Program([ClassDecl(Id(o),Id(zIK),[MethodDecl(Id(Constructor),Instance,[param(Id(H),ClassType(Id(_))),param(Id(M4om__6),ClassType(Id(_))),param(Id(k),ArrayType(1,ArrayType(1,ArrayType(8,ArrayType(20,ArrayType(92,IntType)))))),param(Id(_),ArrayType(1,ArrayType(1,ArrayType(8,ArrayType(20,ArrayType(92,IntType)))))),param(Id(xE),ClassType(Id(__5N))),param(Id(c_),ClassType(Id(__5N)))],Block([])),AttributeDecl(Static,ConstDecl(Id($P6_2),FloatType,None)),AttributeDecl(Static,VarDecl(Id($g),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_77),Id(__),[]),ClassDecl(Id(_7Vs),[])])'''
        self.assertTrue(TestAST.test(line, expect, 275))

    def test_276(self):
        line = '''Class U5_{Var $__,_,$36,$K_7:Array [Array [Array [Boolean ,025],0XF_38],0b1];}Class s{g(u:Array [Int ,0x5];m:String ;E:Boolean ){} }Class g2b{Val $5,$w_Geo_mx5,p_:d;}'''
        expect = '''Program([ClassDecl(Id(U5_),[AttributeDecl(Static,VarDecl(Id($__),ArrayType(1,ArrayType(3896,ArrayType(21,BoolType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,ArrayType(3896,ArrayType(21,BoolType))))),AttributeDecl(Static,VarDecl(Id($36),ArrayType(1,ArrayType(3896,ArrayType(21,BoolType))))),AttributeDecl(Static,VarDecl(Id($K_7),ArrayType(1,ArrayType(3896,ArrayType(21,BoolType)))))]),ClassDecl(Id(s),[MethodDecl(Id(g),Instance,[param(Id(u),ArrayType(5,IntType)),param(Id(m),StringType),param(Id(E),BoolType)],Block([]))]),ClassDecl(Id(g2b),[AttributeDecl(Static,ConstDecl(Id($5),ClassType(Id(d)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($w_Geo_mx5),ClassType(Id(d)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(p_),ClassType(Id(d)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 276))

    def test_277(self):
        line = '''Class __:_{}Class _{Var $g,r,s:J_;}Class _8_:__{Var _U,$25,_:Array [Float ,0XE0];Constructor (__:_;mZ8Xgs7:__x;T2:V){}Destructor (){} }Class x_1__{}Class Q_{Val c54,A_,b_,$2,Ue,$8:String ;}'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($g),ClassType(Id(J_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(r),ClassType(Id(J_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(s),ClassType(Id(J_)),NullLiteral()))]),ClassDecl(Id(_8_),Id(__),[AttributeDecl(Instance,VarDecl(Id(_U),ArrayType(224,FloatType))),AttributeDecl(Static,VarDecl(Id($25),ArrayType(224,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(224,FloatType))),MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(_))),param(Id(mZ8Xgs7),ClassType(Id(__x))),param(Id(T2),ClassType(Id(V)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(x_1__),[]),ClassDecl(Id(Q_),[AttributeDecl(Instance,ConstDecl(Id(c54),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(A_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(b_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($2),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(Ue),StringType,None)),AttributeDecl(Static,ConstDecl(Id($8),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 277))

    def test_278(self):
        line = '''Class Vl9{Destructor (){Break ;}Val $_:r;}Class _4{Var $B,$7_,_:Array [Boolean ,2];}Class y_x{Constructor (){}Destructor (){} }Class _{}Class E{Destructor (){Continue ;} }Class _:d{}Class _5{}'''
        expect = '''Program([ClassDecl(Id(Vl9),[MethodDecl(Id(Destructor),Instance,[],Block([Break])),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(r)),NullLiteral()))]),ClassDecl(Id(_4),[AttributeDecl(Static,VarDecl(Id($B),ArrayType(2,BoolType))),AttributeDecl(Static,VarDecl(Id($7_),ArrayType(2,BoolType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(2,BoolType)))]),ClassDecl(Id(y_x),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(E),[MethodDecl(Id(Destructor),Instance,[],Block([Continue]))]),ClassDecl(Id(_),Id(d),[]),ClassDecl(Id(_5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 278))

    def test_279(self):
        line = '''Class X4775{Destructor (){}Destructor (){}Constructor (_:String ){ {}Break ;}Var $If :Array [Boolean ,0X1_B];Constructor (){Val _,N:Array [Array [Array [String ,0B11],014],0b1];} }Class _{}Class _{Constructor (){} }Class N:_b__{}Class L:_9_{}Class t{Var _Jr_9l:Array [Int ,0b1];}'''
        expect = '''Program([ClassDecl(Id(X4775),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType)],Block([Block([]),Break])),AttributeDecl(Static,VarDecl(Id($If),ArrayType(27,BoolType))),MethodDecl(Id(Constructor),Instance,[],Block([ConstDecl(Id(_),ArrayType(1,ArrayType(12,ArrayType(3,StringType))),None),ConstDecl(Id(N),ArrayType(1,ArrayType(12,ArrayType(3,StringType))),None)]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(N),Id(_b__),[]),ClassDecl(Id(L),Id(_9_),[]),ClassDecl(Id(t),[AttributeDecl(Instance,VarDecl(Id(_Jr_9l),ArrayType(1,IntType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 279))

    def test_280(self):
        line = '''Class _:_1{Constructor (){}Constructor (_:Int ;_,Ly,_,_9,B__2:Array [Array [Array [Array [String ,25],02],0B10110],035];_,V:Int ;_E,__Z_,x_8:_L_;G:String ;e8,D55B,_,W:String ){}Val $v:Float ;Val x4_:Int ;Constructor (_9_:__){} }Class _:f{}Class q{}Class __V:__{}Class v:_90_{}Class Dko:_{Destructor (){_::$_._();} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_1),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(_),ArrayType(29,ArrayType(22,ArrayType(2,ArrayType(25,StringType))))),param(Id(Ly),ArrayType(29,ArrayType(22,ArrayType(2,ArrayType(25,StringType))))),param(Id(_),ArrayType(29,ArrayType(22,ArrayType(2,ArrayType(25,StringType))))),param(Id(_9),ArrayType(29,ArrayType(22,ArrayType(2,ArrayType(25,StringType))))),param(Id(B__2),ArrayType(29,ArrayType(22,ArrayType(2,ArrayType(25,StringType))))),param(Id(_),IntType),param(Id(V),IntType),param(Id(_E),ClassType(Id(_L_))),param(Id(__Z_),ClassType(Id(_L_))),param(Id(x_8),ClassType(Id(_L_))),param(Id(G),StringType),param(Id(e8),StringType),param(Id(D55B),StringType),param(Id(_),StringType),param(Id(W),StringType)],Block([])),AttributeDecl(Static,ConstDecl(Id($v),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(x4_),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_9_),ClassType(Id(__)))],Block([]))]),ClassDecl(Id(_),Id(f),[]),ClassDecl(Id(q),[]),ClassDecl(Id(__V),Id(__),[]),ClassDecl(Id(v),Id(_90_),[]),ClassDecl(Id(Dko),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Call(FieldAccess(Id(_),Id($_)),Id(_),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 280))

    def test_281(self):
        line = '''Class M7{}Class n{}Class _j5_:_{}Class _:uD{$X4(d_,v79__4__,d:String ;D:Array [Array [Array [Array [Float ,8_8_65_92],88],0b1],05_6_6];_,F8_,s,_,d,U_,___:_D_6X){ {} }}Class _{}Class _6_{}'''
        expect = '''Program([ClassDecl(Id(M7),[]),ClassDecl(Id(n),[]),ClassDecl(Id(_j5_),Id(_),[]),ClassDecl(Id(_),Id(uD),[MethodDecl(Id($X4),Static,[param(Id(d_),StringType),param(Id(v79__4__),StringType),param(Id(d),StringType),param(Id(D),ArrayType(374,ArrayType(1,ArrayType(88,ArrayType(886592,FloatType))))),param(Id(_),ClassType(Id(_D_6X))),param(Id(F8_),ClassType(Id(_D_6X))),param(Id(s),ClassType(Id(_D_6X))),param(Id(_),ClassType(Id(_D_6X))),param(Id(d),ClassType(Id(_D_6X))),param(Id(U_),ClassType(Id(_D_6X))),param(Id(___),ClassType(Id(_D_6X)))],Block([Block([])]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_6_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 281))

    def test_282(self):
        line = '''Class L2_2_BZ{Constructor (_:String ;_:Boolean ){} }Class _{Var $C:Array [Float ,050];Constructor (_:p29__;A,V:Int ;_S,X9:Array [Boolean ,0b111];e_,Ak__0w9:Boolean ;f:__379){} }'''
        expect = '''Program([ClassDecl(Id(L2_2_BZ),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($C),ArrayType(40,FloatType))),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(p29__))),param(Id(A),IntType),param(Id(V),IntType),param(Id(_S),ArrayType(7,BoolType)),param(Id(X9),ArrayType(7,BoolType)),param(Id(e_),BoolType),param(Id(Ak__0w9),BoolType),param(Id(f),ClassType(Id(__379)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 282))

    def test_283(self):
        line = '''Class _{Constructor (H:_;b:Float ){} }Class _:t{}Class j:_{Var $_,S_:h1;ds_E7R(){} }Class b_:___{$4(_5G,_:String ){}Val $t9_06S:Array [Array [Float ,2],1_9_69];Destructor (){Var k,s,__:K;} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(H),ClassType(Id(_))),param(Id(b),FloatType)],Block([]))]),ClassDecl(Id(_),Id(t),[]),ClassDecl(Id(j),Id(_),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(h1)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(S_),ClassType(Id(h1)),NullLiteral())),MethodDecl(Id(ds_E7R),Instance,[],Block([]))]),ClassDecl(Id(b_),Id(___),[MethodDecl(Id($4),Static,[param(Id(_5G),StringType),param(Id(_),StringType)],Block([])),AttributeDecl(Static,ConstDecl(Id($t9_06S),ArrayType(1969,ArrayType(2,FloatType)),None)),MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(k),ClassType(Id(K)),NullLiteral()),VarDecl(Id(s),ClassType(Id(K)),NullLiteral()),VarDecl(Id(__),ClassType(Id(K)),NullLiteral())]))])])'''
        self.assertTrue(TestAST.test(line, expect, 283))

    def test_284(self):
        line = '''Class _{Var V7:Array [Array [String ,0X3C],0B1011001];Constructor (_:Float ;z2v_,W,_43,Pi48_1:I69_){ {} }Val $4_12__zJ:Array [Array [Int ,0B1011001],06];Constructor (_,__3,_,_:_;l,_9:Int ;__,Ihn0_,_o,d,S,n_:_d;_:_;l:Array [Array [Array [Int ,3],63],0B1011001]){}Val C:_;}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(V7),ArrayType(89,ArrayType(60,StringType)))),MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(z2v_),ClassType(Id(I69_))),param(Id(W),ClassType(Id(I69_))),param(Id(_43),ClassType(Id(I69_))),param(Id(Pi48_1),ClassType(Id(I69_)))],Block([Block([])])),AttributeDecl(Static,ConstDecl(Id($4_12__zJ),ArrayType(6,ArrayType(89,IntType)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(__3),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(l),IntType),param(Id(_9),IntType),param(Id(__),ClassType(Id(_d))),param(Id(Ihn0_),ClassType(Id(_d))),param(Id(_o),ClassType(Id(_d))),param(Id(d),ClassType(Id(_d))),param(Id(S),ClassType(Id(_d))),param(Id(n_),ClassType(Id(_d))),param(Id(_),ClassType(Id(_))),param(Id(l),ArrayType(89,ArrayType(63,ArrayType(3,IntType))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(C),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 284))

    def test_285(self):
        line = '''Class L:_V{Constructor (){}Val $_s:Array [Array [Array [Array [Array [Int ,03],0b11100],05_6],06],0b11];Var _Z__:_;}Class J_6:x3M{}Class _5:_{$_(_T___,_PK:Array [String ,0B11100]){} }'''
        expect = '''Program([ClassDecl(Id(L),Id(_V),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_s),ArrayType(3,ArrayType(6,ArrayType(46,ArrayType(28,ArrayType(3,IntType))))),None)),AttributeDecl(Instance,VarDecl(Id(_Z__),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(J_6),Id(x3M),[]),ClassDecl(Id(_5),Id(_),[MethodDecl(Id($_),Static,[param(Id(_T___),ArrayType(28,StringType)),param(Id(_PK),ArrayType(28,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 285))

    def test_286(self):
        line = '''Class _:_8{_(_,L:Array [String ,0b101];_,W:E;__P5,__xw4,_,H____3:Float ;P:Array [Array [Float ,0B1],0x54];_,_,l,W:Float ){} }Class __{}Class _{Destructor (){Break ;}Val $7_3:String ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_8),[MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(5,StringType)),param(Id(L),ArrayType(5,StringType)),param(Id(_),ClassType(Id(E))),param(Id(W),ClassType(Id(E))),param(Id(__P5),FloatType),param(Id(__xw4),FloatType),param(Id(_),FloatType),param(Id(H____3),FloatType),param(Id(P),ArrayType(84,ArrayType(1,FloatType))),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(l),FloatType),param(Id(W),FloatType)],Block([]))]),ClassDecl(Id(__),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Break])),AttributeDecl(Static,ConstDecl(Id($7_3),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 286))

    def test_287(self):
        line = '''Class R{}Class _8:f{}Class _{Var $q2,$I1,$_:Boolean ;Val $0:Boolean ;$_9(Y,f:q_;wR1_6:j;_,_,_:Boolean ;_:Int ;q,qS_,_,_8,V:_u_9){} }Class _{}Class __{}Class l_{Constructor (k:_){} }'''
        expect = '''Program([ClassDecl(Id(R),[]),ClassDecl(Id(_8),Id(f),[]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($q2),BoolType)),AttributeDecl(Static,VarDecl(Id($I1),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Static,ConstDecl(Id($0),BoolType,None)),MethodDecl(Id($_9),Static,[param(Id(Y),ClassType(Id(q_))),param(Id(f),ClassType(Id(q_))),param(Id(wR1_6),ClassType(Id(j))),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(_),IntType),param(Id(q),ClassType(Id(_u_9))),param(Id(qS_),ClassType(Id(_u_9))),param(Id(_),ClassType(Id(_u_9))),param(Id(_8),ClassType(Id(_u_9))),param(Id(V),ClassType(Id(_u_9)))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(__),[]),ClassDecl(Id(l_),[MethodDecl(Id(Constructor),Instance,[param(Id(k),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 287))

    def test_288(self):
        line = '''Class U6{}Class _S:b7_{}Class _:B{Constructor (d,_OC,_:Int ){} }Class _j3I{}Class t:p{}Class D{}Class u{Val _,$6p:Float ;Val m,$D,o:Array [Array [Array [Array [Array [Array [Array [String ,04],0X7_8_8],7],0B1110],0B1011100],0X2],0x34];p_(__:Array [Boolean ,0B1011100];G,t84:String ){} }Class _i:_jJ_5{}Class c__:__C{}'''
        expect = '''Program([ClassDecl(Id(U6),[]),ClassDecl(Id(_S),Id(b7_),[]),ClassDecl(Id(_),Id(B),[MethodDecl(Id(Constructor),Instance,[param(Id(d),IntType),param(Id(_OC),IntType),param(Id(_),IntType)],Block([]))]),ClassDecl(Id(_j3I),[]),ClassDecl(Id(t),Id(p),[]),ClassDecl(Id(D),[]),ClassDecl(Id(u),[AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($6p),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(m),ArrayType(52,ArrayType(2,ArrayType(92,ArrayType(14,ArrayType(7,ArrayType(1928,ArrayType(4,StringType))))))),None)),AttributeDecl(Static,ConstDecl(Id($D),ArrayType(52,ArrayType(2,ArrayType(92,ArrayType(14,ArrayType(7,ArrayType(1928,ArrayType(4,StringType))))))),None)),AttributeDecl(Instance,ConstDecl(Id(o),ArrayType(52,ArrayType(2,ArrayType(92,ArrayType(14,ArrayType(7,ArrayType(1928,ArrayType(4,StringType))))))),None)),MethodDecl(Id(p_),Instance,[param(Id(__),ArrayType(92,BoolType)),param(Id(G),StringType),param(Id(t84),StringType)],Block([]))]),ClassDecl(Id(_i),Id(_jJ_5),[]),ClassDecl(Id(c__),Id(__C),[])])'''
        self.assertTrue(TestAST.test(line, expect, 288))

    def test_289(self):
        line = '''Class u_4SQ7{Var QI_:Array [Array [Array [Array [Array [Array [Array [Array [Int ,9],0b101010],0X21],015],042],06],35],35];Val __:Int ;}Class __:_3{Destructor (){Return ;Continue ;Break ;} }'''
        expect = '''Program([ClassDecl(Id(u_4SQ7),[AttributeDecl(Instance,VarDecl(Id(QI_),ArrayType(35,ArrayType(35,ArrayType(6,ArrayType(34,ArrayType(13,ArrayType(33,ArrayType(42,ArrayType(9,IntType)))))))))),AttributeDecl(Instance,ConstDecl(Id(__),IntType,None))]),ClassDecl(Id(__),Id(_3),[MethodDecl(Id(Destructor),Instance,[],Block([Return(),Continue,Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 289))

    def test_290(self):
        line = '''Class o_w_{$N(_wBEUv81,_5_,m__,V_:q;_,ER_u,_:Array [Array [Array [Boolean ,0B11000],0x22],95];H:_;kZ,X_4_,d_:Float ){Continue ;} }Class _{_(_:Array [Array [String ,95],02_3];h,U3:V){} }Class _B:_{Val V4_:Array [Array [Array [Int ,95],0b1_0_1],81_4];Var $1:T9n;I1L(o_71:Array [Int ,0113];_A_n:Float ;_N,_,_:_){}Var A:v6Z3;}Class P0C:_{}Class E:i{}'''
        expect = '''Program([ClassDecl(Id(o_w_),[MethodDecl(Id($N),Static,[param(Id(_wBEUv81),ClassType(Id(q))),param(Id(_5_),ClassType(Id(q))),param(Id(m__),ClassType(Id(q))),param(Id(V_),ClassType(Id(q))),param(Id(_),ArrayType(95,ArrayType(34,ArrayType(24,BoolType)))),param(Id(ER_u),ArrayType(95,ArrayType(34,ArrayType(24,BoolType)))),param(Id(_),ArrayType(95,ArrayType(34,ArrayType(24,BoolType)))),param(Id(H),ClassType(Id(_))),param(Id(kZ),FloatType),param(Id(X_4_),FloatType),param(Id(d_),FloatType)],Block([Continue]))]),ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(19,ArrayType(95,StringType))),param(Id(h),ClassType(Id(V))),param(Id(U3),ClassType(Id(V)))],Block([]))]),ClassDecl(Id(_B),Id(_),[AttributeDecl(Instance,ConstDecl(Id(V4_),ArrayType(814,ArrayType(5,ArrayType(95,IntType))),None)),AttributeDecl(Static,VarDecl(Id($1),ClassType(Id(T9n)),NullLiteral())),MethodDecl(Id(I1L),Instance,[param(Id(o_71),ArrayType(75,IntType)),param(Id(_A_n),FloatType),param(Id(_N),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([])),AttributeDecl(Instance,VarDecl(Id(A),ClassType(Id(v6Z3)),NullLiteral()))]),ClassDecl(Id(P0C),Id(_),[]),ClassDecl(Id(E),Id(i),[])])'''
        self.assertTrue(TestAST.test(line, expect, 290))

    def test_291(self):
        line = '''Class _:wA{}Class UX{}Class _:Tt_{}Class _x4_{Val $h:_;Var $61:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,01],846],0B1],0x1D],0X3D],0X3D],0B1011000],03];Var ZFBT40:Array [Array [Int ,8],8];Var $23_6,$_:_;}'''
        expect = '''Program([ClassDecl(Id(_),Id(wA),[]),ClassDecl(Id(UX),[]),ClassDecl(Id(_),Id(Tt_),[]),ClassDecl(Id(_x4_),[AttributeDecl(Static,ConstDecl(Id($h),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($61),ArrayType(3,ArrayType(88,ArrayType(61,ArrayType(61,ArrayType(29,ArrayType(1,ArrayType(846,ArrayType(1,BoolType)))))))))),AttributeDecl(Instance,VarDecl(Id(ZFBT40),ArrayType(8,ArrayType(8,IntType)))),AttributeDecl(Static,VarDecl(Id($23_6),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 291))

    def test_292(self):
        line = '''Class c{Constructor (b,__:Int ;_J:String ;_,M,_f_,__7_:Array [Array [Int ,0X2],0111]){}Constructor (){}Destructor (){} }Class k{}Class _f_:D5_H{Val Q_,_T_,__7z,$Y,$J:_;}'''
        expect = '''Program([ClassDecl(Id(c),[MethodDecl(Id(Constructor),Instance,[param(Id(b),IntType),param(Id(__),IntType),param(Id(_J),StringType),param(Id(_),ArrayType(73,ArrayType(2,IntType))),param(Id(M),ArrayType(73,ArrayType(2,IntType))),param(Id(_f_),ArrayType(73,ArrayType(2,IntType))),param(Id(__7_),ArrayType(73,ArrayType(2,IntType)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(k),[]),ClassDecl(Id(_f_),Id(D5_H),[AttributeDecl(Instance,ConstDecl(Id(Q_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_T_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__7z),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($Y),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($J),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 292))

    def test_293(self):
        line = '''Class __:U59{Constructor (){}Var _:Array [Array [Array [Int ,02],6_9],043_5_53];Var _:Array [Boolean ,0xE8];}Class _{}Class _:t53{$0(_:Array [String ,93]){} }Class P7:_n90{}'''
        expect = '''Program([ClassDecl(Id(__),Id(U59),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(18283,ArrayType(69,ArrayType(2,IntType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(232,BoolType)))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(t53),[MethodDecl(Id($0),Static,[param(Id(_),ArrayType(93,StringType))],Block([]))]),ClassDecl(Id(P7),Id(_n90),[])])'''
        self.assertTrue(TestAST.test(line, expect, 293))

    def test_294(self):
        line = '''Class m8_{}Class D{Constructor (){}in(_a,_1:h;w:Float ;d541Xs,_z,M_z,m4GAn1_Qx_,I,_,hHi:Boolean ;__,l:Int ;_Q,_0Q:String ;__S8,_6_8,Q52:Array [Array [Boolean ,0X39],0b1]){Var m4,Do_y:_;}Var LL:String ;}'''
        expect = '''Program([ClassDecl(Id(m8_),[]),ClassDecl(Id(D),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(in),Instance,[param(Id(_a),ClassType(Id(h))),param(Id(_1),ClassType(Id(h))),param(Id(w),FloatType),param(Id(d541Xs),BoolType),param(Id(_z),BoolType),param(Id(M_z),BoolType),param(Id(m4GAn1_Qx_),BoolType),param(Id(I),BoolType),param(Id(_),BoolType),param(Id(hHi),BoolType),param(Id(__),IntType),param(Id(l),IntType),param(Id(_Q),StringType),param(Id(_0Q),StringType),param(Id(__S8),ArrayType(1,ArrayType(57,BoolType))),param(Id(_6_8),ArrayType(1,ArrayType(57,BoolType))),param(Id(Q52),ArrayType(1,ArrayType(57,BoolType)))],Block([VarDecl(Id(m4),ClassType(Id(_)),NullLiteral()),VarDecl(Id(Do_y),ClassType(Id(_)),NullLiteral())])),AttributeDecl(Instance,VarDecl(Id(LL),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 294))

    def test_295(self):
        line = '''Class r{}Class UA07:X{$T1T(__6:String ;o_eGr_0:Array [Array [Int ,0b110110],0b1_10];_hJ3_8G72:Array [Boolean ,0b110110]){}Destructor (){Continue ;}Constructor (){Continue ;Break ;Continue ;Return ;}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(r),[]),ClassDecl(Id(UA07),Id(X),[MethodDecl(Id($T1T),Static,[param(Id(__6),StringType),param(Id(o_eGr_0),ArrayType(6,ArrayType(54,IntType))),param(Id(_hJ3_8G72),ArrayType(54,BoolType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[],Block([Continue,Break,Continue,Return()])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 295))

    def test_296(self):
        line = '''Class _Q_a:__{_(_9,_e_7,_,_,_,SR,_k,_6_8_3_:Array [Array [String ,0b1000101],02];N:Array [Array [Array [String ,0b11_1],0b1],0B111];t03,_,W,U,_:__n_5){ {} }Var M,_,t,Ch,$2_,_:_;}Class _:a{}'''
        expect = '''Program([ClassDecl(Id(_Q_a),Id(__),[MethodDecl(Id(_),Instance,[param(Id(_9),ArrayType(2,ArrayType(69,StringType))),param(Id(_e_7),ArrayType(2,ArrayType(69,StringType))),param(Id(_),ArrayType(2,ArrayType(69,StringType))),param(Id(_),ArrayType(2,ArrayType(69,StringType))),param(Id(_),ArrayType(2,ArrayType(69,StringType))),param(Id(SR),ArrayType(2,ArrayType(69,StringType))),param(Id(_k),ArrayType(2,ArrayType(69,StringType))),param(Id(_6_8_3_),ArrayType(2,ArrayType(69,StringType))),param(Id(N),ArrayType(7,ArrayType(1,ArrayType(7,StringType)))),param(Id(t03),ClassType(Id(__n_5))),param(Id(_),ClassType(Id(__n_5))),param(Id(W),ClassType(Id(__n_5))),param(Id(U),ClassType(Id(__n_5))),param(Id(_),ClassType(Id(__n_5)))],Block([Block([])])),AttributeDecl(Instance,VarDecl(Id(M),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(t),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Ch),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($2_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_),Id(a),[])])'''
        self.assertTrue(TestAST.test(line, expect, 296))

    def test_297(self):
        line = '''Class _:____{Var $s8,$E,$i:Float ;}Class ___:_{Destructor (){Return ;}Var H:Float ;Constructor (dc,_A_B:Z;_,U5:_0__12;U:Int ;v,_4,__,_,_,___,o:Int ;__:Array [String ,0124]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(____),[AttributeDecl(Static,VarDecl(Id($s8),FloatType)),AttributeDecl(Static,VarDecl(Id($E),FloatType)),AttributeDecl(Static,VarDecl(Id($i),FloatType))]),ClassDecl(Id(___),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Return()])),AttributeDecl(Instance,VarDecl(Id(H),FloatType)),MethodDecl(Id(Constructor),Instance,[param(Id(dc),ClassType(Id(Z))),param(Id(_A_B),ClassType(Id(Z))),param(Id(_),ClassType(Id(_0__12))),param(Id(U5),ClassType(Id(_0__12))),param(Id(U),IntType),param(Id(v),IntType),param(Id(_4),IntType),param(Id(__),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(___),IntType),param(Id(o),IntType),param(Id(__),ArrayType(84,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 297))

    def test_298(self):
        line = '''Class _U:_6_{Var U,l,_58,c,$D_Y,_1,$i7,_7__:_;Val _W,$A6,$l4,$9,RL:N;}Class X3_2{$6_4U(){}$7(){}__(){}Constructor (){}Var M8,$5:Int ;Constructor (__Rd_:Array [Array [Float ,0b100],04];__8,v:__;N8:Array [Boolean ,0b1];sJ,___:Array [Float ,0B101011]){} }'''
        expect = '''Program([ClassDecl(Id(_U),Id(_6_),[AttributeDecl(Instance,VarDecl(Id(U),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(l),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_58),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(c),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($D_Y),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_1),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($i7),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_7__),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_W),ClassType(Id(N)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($A6),ClassType(Id(N)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($l4),ClassType(Id(N)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($9),ClassType(Id(N)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(RL),ClassType(Id(N)),NullLiteral()))]),ClassDecl(Id(X3_2),[MethodDecl(Id($6_4U),Static,[],Block([])),MethodDecl(Id($7),Static,[],Block([])),MethodDecl(Id(__),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(M8),IntType)),AttributeDecl(Static,VarDecl(Id($5),IntType)),MethodDecl(Id(Constructor),Instance,[param(Id(__Rd_),ArrayType(4,ArrayType(4,FloatType))),param(Id(__8),ClassType(Id(__))),param(Id(v),ClassType(Id(__))),param(Id(N8),ArrayType(1,BoolType)),param(Id(sJ),ArrayType(43,FloatType)),param(Id(___),ArrayType(43,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 298))

    def test_299(self):
        line = '''Class _{Var $2:Array [Array [String ,0X2C],1];PN_1W___(){} }Class _k{}Class c2:_{$M_w(){}Val __0_:Array [Float ,0B1];}Class E:c8{}Class _{Destructor (){} }Class j3:NP7L_{}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($2),ArrayType(1,ArrayType(44,StringType)))),MethodDecl(Id(PN_1W___),Instance,[],Block([]))]),ClassDecl(Id(_k),[]),ClassDecl(Id(c2),Id(_),[MethodDecl(Id($M_w),Static,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(__0_),ArrayType(1,FloatType),None))]),ClassDecl(Id(E),Id(c8),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(j3),Id(NP7L_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 299))

    def test_300(self):
        line = '''Class _:_{Var W_c:Array [Array [Float ,06],07_6_0_5262_6_6];_(_,_:Array [Array [Array [Array [Array [Array [String ,0143],0x9_F],0X5],0b1],0b1_10_0_01],07]){Break ;Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(W_c),ArrayType(130198710,ArrayType(6,FloatType)))),MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(7,ArrayType(49,ArrayType(1,ArrayType(5,ArrayType(159,ArrayType(99,StringType))))))),param(Id(_),ArrayType(7,ArrayType(49,ArrayType(1,ArrayType(5,ArrayType(159,ArrayType(99,StringType)))))))],Block([Break,Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 300))

    def test_301(self):
        line = '''Class V:F{}Class p:G4u{Constructor (m_3P_,l5N,h,E,_,M_3,_O:_a2;L_5,d,__46t:Int ;p_:Array [Array [Array [Array [String ,056],0b101100],06],69];_:Array [String ,69];_,_4I,_:_3kH9;_:Int ;j:_){}Val $_:Float ;$7(_9v,w:Int ;R,T_:_){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(V),Id(F),[]),ClassDecl(Id(p),Id(G4u),[MethodDecl(Id(Constructor),Instance,[param(Id(m_3P_),ClassType(Id(_a2))),param(Id(l5N),ClassType(Id(_a2))),param(Id(h),ClassType(Id(_a2))),param(Id(E),ClassType(Id(_a2))),param(Id(_),ClassType(Id(_a2))),param(Id(M_3),ClassType(Id(_a2))),param(Id(_O),ClassType(Id(_a2))),param(Id(L_5),IntType),param(Id(d),IntType),param(Id(__46t),IntType),param(Id(p_),ArrayType(69,ArrayType(6,ArrayType(44,ArrayType(46,StringType))))),param(Id(_),ArrayType(69,StringType)),param(Id(_),ClassType(Id(_3kH9))),param(Id(_4I),ClassType(Id(_3kH9))),param(Id(_),ClassType(Id(_3kH9))),param(Id(_),IntType),param(Id(j),ClassType(Id(_)))],Block([])),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),MethodDecl(Id($7),Static,[param(Id(_9v),IntType),param(Id(w),IntType),param(Id(R),ClassType(Id(_))),param(Id(T_),ClassType(Id(_)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 301))

    def test_302(self):
        line = '''Class QW:_{}Class _h{$1(_:String ;_79,_LW,g:Array [Float ,0X3_7];lE,sa4_6,_,Z:Array [String ,0b1000110];v,i:Float ){Return ;}Val $T:Array [Array [Array [Int ,82],0x5D],0B1];}'''
        expect = '''Program([ClassDecl(Id(QW),Id(_),[]),ClassDecl(Id(_h),[MethodDecl(Id($1),Static,[param(Id(_),StringType),param(Id(_79),ArrayType(55,FloatType)),param(Id(_LW),ArrayType(55,FloatType)),param(Id(g),ArrayType(55,FloatType)),param(Id(lE),ArrayType(70,StringType)),param(Id(sa4_6),ArrayType(70,StringType)),param(Id(_),ArrayType(70,StringType)),param(Id(Z),ArrayType(70,StringType)),param(Id(v),FloatType),param(Id(i),FloatType)],Block([Return()])),AttributeDecl(Static,ConstDecl(Id($T),ArrayType(1,ArrayType(93,ArrayType(82,IntType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 302))

    def test_303(self):
        line = '''Class _:Z_{Val $5:Int ;Constructor (_J_:Int ;_,_,J9O,_:_;_,qC:Boolean ;t,q_z:Array [Int ,02]){} }Class X__{Constructor (Q_4:Int ;_z_77_,_:Y){} }Class q{Destructor (){} }Class _:_6{}'''
        expect = '''Program([ClassDecl(Id(_),Id(Z_),[AttributeDecl(Static,ConstDecl(Id($5),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_J_),IntType),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(J9O),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),BoolType),param(Id(qC),BoolType),param(Id(t),ArrayType(2,IntType)),param(Id(q_z),ArrayType(2,IntType))],Block([]))]),ClassDecl(Id(X__),[MethodDecl(Id(Constructor),Instance,[param(Id(Q_4),IntType),param(Id(_z_77_),ClassType(Id(Y))),param(Id(_),ClassType(Id(Y)))],Block([]))]),ClassDecl(Id(q),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_6),[])])'''
        self.assertTrue(TestAST.test(line, expect, 303))

    def test_304(self):
        line = '''Class _014c6{Val O,$5N,$51_,$__,q:Int ;$f(_W,_:__3;H_,j:_s;__,__W0:__;__,K,a__,F:o;_,_87__,QO,_:Float ;J:Array [Array [Array [Float ,04_4_7],0XC],07]){}Destructor (){} }Class _5U8z{}'''
        expect = '''Program([ClassDecl(Id(_014c6),[AttributeDecl(Instance,ConstDecl(Id(O),IntType,None)),AttributeDecl(Static,ConstDecl(Id($5N),IntType,None)),AttributeDecl(Static,ConstDecl(Id($51_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($__),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(q),IntType,None)),MethodDecl(Id($f),Static,[param(Id(_W),ClassType(Id(__3))),param(Id(_),ClassType(Id(__3))),param(Id(H_),ClassType(Id(_s))),param(Id(j),ClassType(Id(_s))),param(Id(__),ClassType(Id(__))),param(Id(__W0),ClassType(Id(__))),param(Id(__),ClassType(Id(o))),param(Id(K),ClassType(Id(o))),param(Id(a__),ClassType(Id(o))),param(Id(F),ClassType(Id(o))),param(Id(_),FloatType),param(Id(_87__),FloatType),param(Id(QO),FloatType),param(Id(_),FloatType),param(Id(J),ArrayType(7,ArrayType(12,ArrayType(295,FloatType))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_5U8z),[])])'''
        self.assertTrue(TestAST.test(line, expect, 304))

    def test_305(self):
        line = '''Class TV:_{Constructor (){}Constructor (_Z,_:Boolean ;_4__f,_6:Array [Array [Boolean ,10],040]){}Val $dY,_:Int ;Val $0_,$58H:Array [Array [Float ,0B1101],10];Var y9g:Array [Float ,0x46];Destructor (){}Destructor (){}Destructor (){}Var $__2:_;}'''
        expect = '''Program([ClassDecl(Id(TV),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_Z),BoolType),param(Id(_),BoolType),param(Id(_4__f),ArrayType(32,ArrayType(10,BoolType))),param(Id(_6),ArrayType(32,ArrayType(10,BoolType)))],Block([])),AttributeDecl(Static,ConstDecl(Id($dY),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($0_),ArrayType(10,ArrayType(13,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($58H),ArrayType(10,ArrayType(13,FloatType)),None)),AttributeDecl(Instance,VarDecl(Id(y9g),ArrayType(70,FloatType))),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($__2),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 305))

    def test_306(self):
        line = '''Class _e1:_8_{Constructor (){} }Class A:a_C{}Class _P_{Constructor (a:String ;_9,__,_,_c,_:Array [Array [Array [Boolean ,0B1],0B10000],639];d,_7:Array [String ,0131];F:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_e1),Id(_8_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(A),Id(a_C),[]),ClassDecl(Id(_P_),[MethodDecl(Id(Constructor),Instance,[param(Id(a),StringType),param(Id(_9),ArrayType(639,ArrayType(16,ArrayType(1,BoolType)))),param(Id(__),ArrayType(639,ArrayType(16,ArrayType(1,BoolType)))),param(Id(_),ArrayType(639,ArrayType(16,ArrayType(1,BoolType)))),param(Id(_c),ArrayType(639,ArrayType(16,ArrayType(1,BoolType)))),param(Id(_),ArrayType(639,ArrayType(16,ArrayType(1,BoolType)))),param(Id(d),ArrayType(89,StringType)),param(Id(_7),ArrayType(89,StringType)),param(Id(F),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 306))

    def test_307(self):
        line = '''Class _:_u{Constructor (a_:Float ;_:__;t,_,_V:_ZgM;_,_B,N____,d,_8Y:Array [String ,0X2];_2__7_7__1l:e){}A(){Var pTu7,_:Boolean ;} }Class _:w{Var $_Fu,_K:Int ;}Class _0:_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_u),[MethodDecl(Id(Constructor),Instance,[param(Id(a_),FloatType),param(Id(_),ClassType(Id(__))),param(Id(t),ClassType(Id(_ZgM))),param(Id(_),ClassType(Id(_ZgM))),param(Id(_V),ClassType(Id(_ZgM))),param(Id(_),ArrayType(2,StringType)),param(Id(_B),ArrayType(2,StringType)),param(Id(N____),ArrayType(2,StringType)),param(Id(d),ArrayType(2,StringType)),param(Id(_8Y),ArrayType(2,StringType)),param(Id(_2__7_7__1l),ClassType(Id(e)))],Block([])),MethodDecl(Id(A),Instance,[],Block([VarDecl(Id(pTu7),BoolType),VarDecl(Id(_),BoolType)]))]),ClassDecl(Id(_),Id(w),[AttributeDecl(Static,VarDecl(Id($_Fu),IntType)),AttributeDecl(Instance,VarDecl(Id(_K),IntType))]),ClassDecl(Id(_0),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 307))

    def test_308(self):
        line = '''Class _z:b{Constructor (_5J5:Float ;__:D;_o,A_:_;_:Int ;_v,_,_,_,__1:Array [Array [Array [Array [String ,0x8],0x5],06772_1],0166_6];BC7,v,E:Int ){}$h0(__,__280a1,Y:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_z),Id(b),[MethodDecl(Id(Constructor),Instance,[param(Id(_5J5),FloatType),param(Id(__),ClassType(Id(D))),param(Id(_o),ClassType(Id(_))),param(Id(A_),ClassType(Id(_))),param(Id(_),IntType),param(Id(_v),ArrayType(950,ArrayType(28625,ArrayType(5,ArrayType(8,StringType))))),param(Id(_),ArrayType(950,ArrayType(28625,ArrayType(5,ArrayType(8,StringType))))),param(Id(_),ArrayType(950,ArrayType(28625,ArrayType(5,ArrayType(8,StringType))))),param(Id(_),ArrayType(950,ArrayType(28625,ArrayType(5,ArrayType(8,StringType))))),param(Id(__1),ArrayType(950,ArrayType(28625,ArrayType(5,ArrayType(8,StringType))))),param(Id(BC7),IntType),param(Id(v),IntType),param(Id(E),IntType)],Block([])),MethodDecl(Id($h0),Static,[param(Id(__),FloatType),param(Id(__280a1),FloatType),param(Id(Y),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 308))

    def test_309(self):
        line = '''Class Y6Fw2m:_{$_(_:Array [Boolean ,0b1];t_3:Boolean ){}Constructor (BJ6lZ:Int ){Break ;{}Return ;Continue ;}Val $4:Array [Array [Boolean ,0B1001011],0b111100];$___(w:Float ){Break ;} }'''
        expect = '''Program([ClassDecl(Id(Y6Fw2m),Id(_),[MethodDecl(Id($_),Static,[param(Id(_),ArrayType(1,BoolType)),param(Id(t_3),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(BJ6lZ),IntType)],Block([Break,Block([]),Return(),Continue])),AttributeDecl(Static,ConstDecl(Id($4),ArrayType(60,ArrayType(75,BoolType)),None)),MethodDecl(Id($___),Static,[param(Id(w),FloatType)],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 309))

    def test_310(self):
        line = '''Class __{}Class _7_{Val $_,_:Int ;Constructor (f41:Float ){} }Class _1I_{$J9_(){}Constructor (_,_,f_9__28r,W7:_0;_vFw8,_,P8:_;_O:Int ){Break ;}Val $9_9,$QV_:Array [Array [Float ,0x28_A7_2],043];}'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(_7_),[AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(f41),FloatType)],Block([]))]),ClassDecl(Id(_1I_),[MethodDecl(Id($J9_),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_0))),param(Id(_),ClassType(Id(_0))),param(Id(f_9__28r),ClassType(Id(_0))),param(Id(W7),ClassType(Id(_0))),param(Id(_vFw8),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(P8),ClassType(Id(_))),param(Id(_O),IntType)],Block([Break])),AttributeDecl(Static,ConstDecl(Id($9_9),ArrayType(35,ArrayType(166514,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($QV_),ArrayType(35,ArrayType(166514,FloatType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 310))

    def test_311(self):
        line = '''Class sy:g{}Class _81_V_V8N_{}Class W_p_C{Var $1:Array [String ,82];}Class _:n{}Class J:_{Var J,M,u:Int ;Constructor (__2G:Boolean ){Continue ;}Val $3:Array [Float ,07];}'''
        expect = '''Program([ClassDecl(Id(sy),Id(g),[]),ClassDecl(Id(_81_V_V8N_),[]),ClassDecl(Id(W_p_C),[AttributeDecl(Static,VarDecl(Id($1),ArrayType(82,StringType)))]),ClassDecl(Id(_),Id(n),[]),ClassDecl(Id(J),Id(_),[AttributeDecl(Instance,VarDecl(Id(J),IntType)),AttributeDecl(Instance,VarDecl(Id(M),IntType)),AttributeDecl(Instance,VarDecl(Id(u),IntType)),MethodDecl(Id(Constructor),Instance,[param(Id(__2G),BoolType)],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($3),ArrayType(7,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 311))

    def test_312(self):
        line = '''Class _:_{r(_,__98:Array [Array [String ,03_1_405_7],9_8_0];_b,_t_:Array [Array [Array [Array [String ,073],073],0x7],0b1_0];c8__,_,Vh:String ;Am,Z,G:Boolean ){}Var _:Int ;}Class F:__8G_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(r),Instance,[param(Id(_),ArrayType(980,ArrayType(104495,StringType))),param(Id(__98),ArrayType(980,ArrayType(104495,StringType))),param(Id(_b),ArrayType(2,ArrayType(7,ArrayType(59,ArrayType(59,StringType))))),param(Id(_t_),ArrayType(2,ArrayType(7,ArrayType(59,ArrayType(59,StringType))))),param(Id(c8__),StringType),param(Id(_),StringType),param(Id(Vh),StringType),param(Id(Am),BoolType),param(Id(Z),BoolType),param(Id(G),BoolType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_),IntType))]),ClassDecl(Id(F),Id(__8G_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 312))

    def test_313(self):
        line = '''Class __43:_U8{$4(D_,J:Array [String ,0501]){ {}Return ;}Val z,$_,fp,$A:Array [String ,0B1010100];$2s(){}q(_3d:YP;_,_,a9,_xc,V,n1R,D,G,__l_0:Array [Array [Array [Int ,5],05_7],076]){} }'''
        expect = '''Program([ClassDecl(Id(__43),Id(_U8),[MethodDecl(Id($4),Static,[param(Id(D_),ArrayType(321,StringType)),param(Id(J),ArrayType(321,StringType))],Block([Block([]),Return()])),AttributeDecl(Instance,ConstDecl(Id(z),ArrayType(84,StringType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(84,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(fp),ArrayType(84,StringType),None)),AttributeDecl(Static,ConstDecl(Id($A),ArrayType(84,StringType),None)),MethodDecl(Id($2s),Static,[],Block([])),MethodDecl(Id(q),Instance,[param(Id(_3d),ClassType(Id(YP))),param(Id(_),ArrayType(62,ArrayType(47,ArrayType(5,IntType)))),param(Id(_),ArrayType(62,ArrayType(47,ArrayType(5,IntType)))),param(Id(a9),ArrayType(62,ArrayType(47,ArrayType(5,IntType)))),param(Id(_xc),ArrayType(62,ArrayType(47,ArrayType(5,IntType)))),param(Id(V),ArrayType(62,ArrayType(47,ArrayType(5,IntType)))),param(Id(n1R),ArrayType(62,ArrayType(47,ArrayType(5,IntType)))),param(Id(D),ArrayType(62,ArrayType(47,ArrayType(5,IntType)))),param(Id(G),ArrayType(62,ArrayType(47,ArrayType(5,IntType)))),param(Id(__l_0),ArrayType(62,ArrayType(47,ArrayType(5,IntType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 313))

    def test_314(self):
        line = '''Class S2:bG_0{__86_ff(ck:Array [Array [Array [Float ,0x9_50],0B100100],4];_,N2:Boolean ;_,U2R_,UL:String ){} }Class iP{}Class g:_R{_(){}$7(X,A_,K,Y,_:Array [Float ,0X8]){} }Class _:_{Constructor (_3_5,S,N80l:Array [Float ,0B100100];r,Xe,_,N,V:Array [Array [Array [Array [Array [Array [Int ,11],0b11011],07],4],07],0X10]){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(S2),Id(bG_0),[MethodDecl(Id(__86_ff),Instance,[param(Id(ck),ArrayType(4,ArrayType(36,ArrayType(2384,FloatType)))),param(Id(_),BoolType),param(Id(N2),BoolType),param(Id(_),StringType),param(Id(U2R_),StringType),param(Id(UL),StringType)],Block([]))]),ClassDecl(Id(iP),[]),ClassDecl(Id(g),Id(_R),[MethodDecl(Id(_),Instance,[],Block([])),MethodDecl(Id($7),Static,[param(Id(X),ArrayType(8,FloatType)),param(Id(A_),ArrayType(8,FloatType)),param(Id(K),ArrayType(8,FloatType)),param(Id(Y),ArrayType(8,FloatType)),param(Id(_),ArrayType(8,FloatType))],Block([]))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_3_5),ArrayType(36,FloatType)),param(Id(S),ArrayType(36,FloatType)),param(Id(N80l),ArrayType(36,FloatType)),param(Id(r),ArrayType(16,ArrayType(7,ArrayType(4,ArrayType(7,ArrayType(27,ArrayType(11,IntType))))))),param(Id(Xe),ArrayType(16,ArrayType(7,ArrayType(4,ArrayType(7,ArrayType(27,ArrayType(11,IntType))))))),param(Id(_),ArrayType(16,ArrayType(7,ArrayType(4,ArrayType(7,ArrayType(27,ArrayType(11,IntType))))))),param(Id(N),ArrayType(16,ArrayType(7,ArrayType(4,ArrayType(7,ArrayType(27,ArrayType(11,IntType))))))),param(Id(V),ArrayType(16,ArrayType(7,ArrayType(4,ArrayType(7,ArrayType(27,ArrayType(11,IntType)))))))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 314))

    def test_315(self):
        line = '''Class _{}Class _{Var vh,E,_h_,_,__,__k,Sf,$5_:Array [Boolean ,0X2F];Constructor (_:Float ;_0_:Boolean ;_:Array [Boolean ,0X2F];E:String ;l,_:String ;_0:Array [Int ,0b1];Q0:Q){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(vh),ArrayType(47,BoolType))),AttributeDecl(Instance,VarDecl(Id(E),ArrayType(47,BoolType))),AttributeDecl(Instance,VarDecl(Id(_h_),ArrayType(47,BoolType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(47,BoolType))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(47,BoolType))),AttributeDecl(Instance,VarDecl(Id(__k),ArrayType(47,BoolType))),AttributeDecl(Instance,VarDecl(Id(Sf),ArrayType(47,BoolType))),AttributeDecl(Static,VarDecl(Id($5_),ArrayType(47,BoolType))),MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(_0_),BoolType),param(Id(_),ArrayType(47,BoolType)),param(Id(E),StringType),param(Id(l),StringType),param(Id(_),StringType),param(Id(_0),ArrayType(1,IntType)),param(Id(Q0),ClassType(Id(Q)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 315))

    def test_316(self):
        line = '''Class L{Val $7,$l,_:Array [Array [Boolean ,0x78],0x14];Var E,$40,$78_D:Array [Array [Array [Array [Boolean ,0b10111],0b10111],0B10],0B110101];Destructor (){}Val m,$F,U,w:Array [Boolean ,0B110101];Val $6,_,$376,G:Float ;}'''
        expect = '''Program([ClassDecl(Id(L),[AttributeDecl(Static,ConstDecl(Id($7),ArrayType(20,ArrayType(120,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($l),ArrayType(20,ArrayType(120,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(20,ArrayType(120,BoolType)),None)),AttributeDecl(Instance,VarDecl(Id(E),ArrayType(53,ArrayType(2,ArrayType(23,ArrayType(23,BoolType)))))),AttributeDecl(Static,VarDecl(Id($40),ArrayType(53,ArrayType(2,ArrayType(23,ArrayType(23,BoolType)))))),AttributeDecl(Static,VarDecl(Id($78_D),ArrayType(53,ArrayType(2,ArrayType(23,ArrayType(23,BoolType)))))),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(m),ArrayType(53,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($F),ArrayType(53,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(U),ArrayType(53,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(w),ArrayType(53,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($6),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($376),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(G),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 316))

    def test_317(self):
        line = '''Class s:Vd539{}Class d{Val T4:Array [Array [Int ,0xD1],013];Destructor (){Break ;} }Class _0{Destructor (){Return ;} }Class Y{Val $q,g4_,$8,O__:String ;Var $5,$E___5g:Float ;}Class iw:R{Val O,_:f;}'''
        expect = '''Program([ClassDecl(Id(s),Id(Vd539),[]),ClassDecl(Id(d),[AttributeDecl(Instance,ConstDecl(Id(T4),ArrayType(11,ArrayType(209,IntType)),None)),MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(_0),[MethodDecl(Id(Destructor),Instance,[],Block([Return()]))]),ClassDecl(Id(Y),[AttributeDecl(Static,ConstDecl(Id($q),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(g4_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($8),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(O__),StringType,None)),AttributeDecl(Static,VarDecl(Id($5),FloatType)),AttributeDecl(Static,VarDecl(Id($E___5g),FloatType))]),ClassDecl(Id(iw),Id(R),[AttributeDecl(Instance,ConstDecl(Id(O),ClassType(Id(f)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(f)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 317))

    def test_318(self):
        line = '''Class __e8F:q{_(_7y:Int ){}Var k__n9,$__:String ;}Class C{Constructor (_h:Array [String ,01_10];v,_,___,q,s773,m95,_:__6VE8;__,yy,x,f:Int ){} }Class l{}Class q{}Class k__:_{}Class B{}'''
        expect = '''Program([ClassDecl(Id(__e8F),Id(q),[MethodDecl(Id(_),Instance,[param(Id(_7y),IntType)],Block([])),AttributeDecl(Instance,VarDecl(Id(k__n9),StringType)),AttributeDecl(Static,VarDecl(Id($__),StringType))]),ClassDecl(Id(C),[MethodDecl(Id(Constructor),Instance,[param(Id(_h),ArrayType(72,StringType)),param(Id(v),ClassType(Id(__6VE8))),param(Id(_),ClassType(Id(__6VE8))),param(Id(___),ClassType(Id(__6VE8))),param(Id(q),ClassType(Id(__6VE8))),param(Id(s773),ClassType(Id(__6VE8))),param(Id(m95),ClassType(Id(__6VE8))),param(Id(_),ClassType(Id(__6VE8))),param(Id(__),IntType),param(Id(yy),IntType),param(Id(x),IntType),param(Id(f),IntType)],Block([]))]),ClassDecl(Id(l),[]),ClassDecl(Id(q),[]),ClassDecl(Id(k__),Id(_),[]),ClassDecl(Id(B),[])])'''
        self.assertTrue(TestAST.test(line, expect, 318))

    def test_319(self):
        line = '''Class _5{Var $d_:Array [Array [Array [Array [Array [String ,0B100001],07],93],037],0B1];}Class _{}Class _2{}Class Q{Constructor (){} }Class _{Var bs4,_,$DLe:Array [Array [Boolean ,0b110101],93];}'''
        expect = '''Program([ClassDecl(Id(_5),[AttributeDecl(Static,VarDecl(Id($d_),ArrayType(1,ArrayType(31,ArrayType(93,ArrayType(7,ArrayType(33,StringType)))))))]),ClassDecl(Id(_),[]),ClassDecl(Id(_2),[]),ClassDecl(Id(Q),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(bs4),ArrayType(93,ArrayType(53,BoolType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(93,ArrayType(53,BoolType)))),AttributeDecl(Static,VarDecl(Id($DLe),ArrayType(93,ArrayType(53,BoolType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 319))

    def test_320(self):
        line = '''Class o5_04t:F{Destructor (){}Constructor (v:String ;_:_;_ef,k__q1__,_,pJ,U:_2_;_9t3dI24,_,_7,_:_;_92F:z;g:Array [Array [String ,0b1_0_0],6];__g,_:d){}$_(){}R_(e0,N3:_){}__(){}$__(){} }'''
        expect = '''Program([ClassDecl(Id(o5_04t),Id(F),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(v),StringType),param(Id(_),ClassType(Id(_))),param(Id(_ef),ClassType(Id(_2_))),param(Id(k__q1__),ClassType(Id(_2_))),param(Id(_),ClassType(Id(_2_))),param(Id(pJ),ClassType(Id(_2_))),param(Id(U),ClassType(Id(_2_))),param(Id(_9t3dI24),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_7),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_92F),ClassType(Id(z))),param(Id(g),ArrayType(6,ArrayType(4,StringType))),param(Id(__g),ClassType(Id(d))),param(Id(_),ClassType(Id(d)))],Block([])),MethodDecl(Id($_),Static,[],Block([])),MethodDecl(Id(R_),Instance,[param(Id(e0),ClassType(Id(_))),param(Id(N3),ClassType(Id(_)))],Block([])),MethodDecl(Id(__),Instance,[],Block([])),MethodDecl(Id($__),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 320))

    def test_321(self):
        line = '''Class W4_:_{Constructor (){} }Class FH_X_o{}Class _E{Var $B:Array [Array [Array [Array [String ,1_6],0b1000111],68],0B1011100];Destructor (){}nLm(){ {}Var J4:Boolean ;} }Class _{}Class o{}Class _{Constructor (){} }Class a6_:z{}'''
        expect = '''Program([ClassDecl(Id(W4_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(FH_X_o),[]),ClassDecl(Id(_E),[AttributeDecl(Static,VarDecl(Id($B),ArrayType(92,ArrayType(68,ArrayType(71,ArrayType(16,StringType)))))),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(nLm),Instance,[],Block([Block([]),VarDecl(Id(J4),BoolType)]))]),ClassDecl(Id(_),[]),ClassDecl(Id(o),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(a6_),Id(z),[])])'''
        self.assertTrue(TestAST.test(line, expect, 321))

    def test_322(self):
        line = '''Class B:w{Destructor (){Var C:Array [String ,01];Return ;}J(_d__,f:Boolean ;_G:String ;_,_x:Array [Float ,7];_,w,QS,__6,_:G){}Constructor (Z,M,I:Array [Array [Float ,0b1],0B101101]){} }'''
        expect = '''Program([ClassDecl(Id(B),Id(w),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(C),ArrayType(1,StringType)),Return()])),MethodDecl(Id(J),Instance,[param(Id(_d__),BoolType),param(Id(f),BoolType),param(Id(_G),StringType),param(Id(_),ArrayType(7,FloatType)),param(Id(_x),ArrayType(7,FloatType)),param(Id(_),ClassType(Id(G))),param(Id(w),ClassType(Id(G))),param(Id(QS),ClassType(Id(G))),param(Id(__6),ClassType(Id(G))),param(Id(_),ClassType(Id(G)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(Z),ArrayType(45,ArrayType(1,FloatType))),param(Id(M),ArrayType(45,ArrayType(1,FloatType))),param(Id(I),ArrayType(45,ArrayType(1,FloatType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 322))

    def test_323(self):
        line = '''Class _b3o224{}Class _26{$4L(q,_:Boolean ;R,__R:Float ;__,D:C;I:_;_:Int ;_U5,_l_,_,_:_;_:Array [Float ,7];I_1:Array [String ,7];U,_:Array [Float ,5];_:Boolean ;V:Array [String ,0XD3]){}Constructor (__Kk,_,l,_7,_:Array [Array [Array [Array [Int ,063],0b1],0b11101],063];_:_){} }'''
        expect = '''Program([ClassDecl(Id(_b3o224),[]),ClassDecl(Id(_26),[MethodDecl(Id($4L),Static,[param(Id(q),BoolType),param(Id(_),BoolType),param(Id(R),FloatType),param(Id(__R),FloatType),param(Id(__),ClassType(Id(C))),param(Id(D),ClassType(Id(C))),param(Id(I),ClassType(Id(_))),param(Id(_),IntType),param(Id(_U5),ClassType(Id(_))),param(Id(_l_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(7,FloatType)),param(Id(I_1),ArrayType(7,StringType)),param(Id(U),ArrayType(5,FloatType)),param(Id(_),ArrayType(5,FloatType)),param(Id(_),BoolType),param(Id(V),ArrayType(211,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__Kk),ArrayType(51,ArrayType(29,ArrayType(1,ArrayType(51,IntType))))),param(Id(_),ArrayType(51,ArrayType(29,ArrayType(1,ArrayType(51,IntType))))),param(Id(l),ArrayType(51,ArrayType(29,ArrayType(1,ArrayType(51,IntType))))),param(Id(_7),ArrayType(51,ArrayType(29,ArrayType(1,ArrayType(51,IntType))))),param(Id(_),ArrayType(51,ArrayType(29,ArrayType(1,ArrayType(51,IntType))))),param(Id(_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 323))

    def test_324(self):
        line = '''Class C:Y{Constructor (){Break ;}$4(_l,U9,____75,lY,___,_j__:Array [Array [Float ,04],0b1000];_,e:String ;e_,oI7:String ){} }Class _:_{Var _F,o3_:Array [Boolean ,0B111_0];}'''
        expect = '''Program([ClassDecl(Id(C),Id(Y),[MethodDecl(Id(Constructor),Instance,[],Block([Break])),MethodDecl(Id($4),Static,[param(Id(_l),ArrayType(8,ArrayType(4,FloatType))),param(Id(U9),ArrayType(8,ArrayType(4,FloatType))),param(Id(____75),ArrayType(8,ArrayType(4,FloatType))),param(Id(lY),ArrayType(8,ArrayType(4,FloatType))),param(Id(___),ArrayType(8,ArrayType(4,FloatType))),param(Id(_j__),ArrayType(8,ArrayType(4,FloatType))),param(Id(_),StringType),param(Id(e),StringType),param(Id(e_),StringType),param(Id(oI7),StringType)],Block([]))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(_F),ArrayType(14,BoolType))),AttributeDecl(Instance,VarDecl(Id(o3_),ArrayType(14,BoolType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 324))

    def test_325(self):
        line = '''Class Y:_{}Class __{Val L,__,Z_3,tE,$p_KX,f:Array [Array [Array [Array [Int ,06],0B1],3482],0106];}Class pR:C_{Constructor (){ {} }Var $2,$_,_sk:_;$__(_:Array [String ,0b11100];qk:Array [Array [String ,0x22],91]){}_v_(F_O:Array [Boolean ,02];R:Array [Array [Boolean ,0x22],0B1];vH_yJ_X:Array [Array [Int ,0xB],0x47]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(Y),Id(_),[]),ClassDecl(Id(__),[AttributeDecl(Instance,ConstDecl(Id(L),ArrayType(70,ArrayType(3482,ArrayType(1,ArrayType(6,IntType)))),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(70,ArrayType(3482,ArrayType(1,ArrayType(6,IntType)))),None)),AttributeDecl(Instance,ConstDecl(Id(Z_3),ArrayType(70,ArrayType(3482,ArrayType(1,ArrayType(6,IntType)))),None)),AttributeDecl(Instance,ConstDecl(Id(tE),ArrayType(70,ArrayType(3482,ArrayType(1,ArrayType(6,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($p_KX),ArrayType(70,ArrayType(3482,ArrayType(1,ArrayType(6,IntType)))),None)),AttributeDecl(Instance,ConstDecl(Id(f),ArrayType(70,ArrayType(3482,ArrayType(1,ArrayType(6,IntType)))),None))]),ClassDecl(Id(pR),Id(C_),[MethodDecl(Id(Constructor),Instance,[],Block([Block([])])),AttributeDecl(Static,VarDecl(Id($2),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_sk),ClassType(Id(_)),NullLiteral())),MethodDecl(Id($__),Static,[param(Id(_),ArrayType(28,StringType)),param(Id(qk),ArrayType(91,ArrayType(34,StringType)))],Block([])),MethodDecl(Id(_v_),Instance,[param(Id(F_O),ArrayType(2,BoolType)),param(Id(R),ArrayType(1,ArrayType(34,BoolType))),param(Id(vH_yJ_X),ArrayType(71,ArrayType(11,IntType)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 325))

    def test_326(self):
        line = '''Class S_r_:g{Constructor (_:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,02],05],0x26],0x26],22],0B1_1_0],0b1],026];_,L,_,_:String ){Break ;Var HM,_,Wt__:Array [Array [Array [Float ,0b1_1],0b1],026];} }'''
        expect = '''Program([ClassDecl(Id(S_r_),Id(g),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(22,ArrayType(1,ArrayType(6,ArrayType(22,ArrayType(38,ArrayType(38,ArrayType(5,ArrayType(2,BoolType))))))))),param(Id(_),StringType),param(Id(L),StringType),param(Id(_),StringType),param(Id(_),StringType)],Block([Break,VarDecl(Id(HM),ArrayType(22,ArrayType(1,ArrayType(3,FloatType)))),VarDecl(Id(_),ArrayType(22,ArrayType(1,ArrayType(3,FloatType)))),VarDecl(Id(Wt__),ArrayType(22,ArrayType(1,ArrayType(3,FloatType))))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 326))

    def test_327(self):
        line = '''Class F7z{Var __,$7:Array [Array [Array [Array [Array [Array [Array [Array [String ,031],02_3],031],4],020],0X8],0x1],02];}Class hZ{}Class _U:m{Var $4_:Array [Array [Boolean ,03_3],0b1100];}'''
        expect = '''Program([ClassDecl(Id(F7z),[AttributeDecl(Instance,VarDecl(Id(__),ArrayType(2,ArrayType(1,ArrayType(8,ArrayType(16,ArrayType(4,ArrayType(25,ArrayType(19,ArrayType(25,StringType)))))))))),AttributeDecl(Static,VarDecl(Id($7),ArrayType(2,ArrayType(1,ArrayType(8,ArrayType(16,ArrayType(4,ArrayType(25,ArrayType(19,ArrayType(25,StringType))))))))))]),ClassDecl(Id(hZ),[]),ClassDecl(Id(_U),Id(m),[AttributeDecl(Static,VarDecl(Id($4_),ArrayType(12,ArrayType(27,BoolType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 327))

    def test_328(self):
        line = '''Class _j{Val $_:_;Destructor (){} }Class _:___1{Val $oX_5:zL;$j1C(){}Constructor (D_9:Array [Array [Array [Array [Array [Array [Float ,0B101],07],7],0x41],67],67]){} }Class H{Constructor (v:Array [Array [String ,06],0b1_00];f,X_,j4:Array [Boolean ,07];_:Boolean ;_:Array [Int ,8_9];P,a_:F;N1:Float ){} }Class _J:_5ZkgScIX4{}'''
        expect = '''Program([ClassDecl(Id(_j),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(___1),[AttributeDecl(Static,ConstDecl(Id($oX_5),ClassType(Id(zL)),NullLiteral())),MethodDecl(Id($j1C),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(D_9),ArrayType(67,ArrayType(67,ArrayType(65,ArrayType(7,ArrayType(7,ArrayType(5,FloatType)))))))],Block([]))]),ClassDecl(Id(H),[MethodDecl(Id(Constructor),Instance,[param(Id(v),ArrayType(4,ArrayType(6,StringType))),param(Id(f),ArrayType(7,BoolType)),param(Id(X_),ArrayType(7,BoolType)),param(Id(j4),ArrayType(7,BoolType)),param(Id(_),BoolType),param(Id(_),ArrayType(89,IntType)),param(Id(P),ClassType(Id(F))),param(Id(a_),ClassType(Id(F))),param(Id(N1),FloatType)],Block([]))]),ClassDecl(Id(_J),Id(_5ZkgScIX4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 328))

    def test_329(self):
        line = '''Class u_:w1_5c{}Class j:_{Var _,$4:_;Destructor (){}Constructor (){} }Class _{___(KC,_7r_:String ;z:Array [Boolean ,4_5];_,U2H__U:Array [Array [Float ,80],0x5A]){}Val $_,k3__,$KB:Array [Array [String ,053],80];}Class R:_{Val _W:_N_76;}'''
        expect = '''Program([ClassDecl(Id(u_),Id(w1_5c),[]),ClassDecl(Id(j),Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($4),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(___),Instance,[param(Id(KC),StringType),param(Id(_7r_),StringType),param(Id(z),ArrayType(45,BoolType)),param(Id(_),ArrayType(90,ArrayType(80,FloatType))),param(Id(U2H__U),ArrayType(90,ArrayType(80,FloatType)))],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(80,ArrayType(43,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(k3__),ArrayType(80,ArrayType(43,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($KB),ArrayType(80,ArrayType(43,StringType)),None))]),ClassDecl(Id(R),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_W),ClassType(Id(_N_76)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 329))

    def test_330(self):
        line = '''Class __{}Class L:r7{Constructor (j,_3:Array [Boolean ,7_7]){}Var g,_3w,x:__;Val $2B,$__8ge1:Boolean ;Var __,$G,$f:Float ;Var _:_6;}Class __:____h2_{}Class X61_{}Class w4{}'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(L),Id(r7),[MethodDecl(Id(Constructor),Instance,[param(Id(j),ArrayType(77,BoolType)),param(Id(_3),ArrayType(77,BoolType))],Block([])),AttributeDecl(Instance,VarDecl(Id(g),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_3w),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(x),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($2B),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($__8ge1),BoolType,None)),AttributeDecl(Instance,VarDecl(Id(__),FloatType)),AttributeDecl(Static,VarDecl(Id($G),FloatType)),AttributeDecl(Static,VarDecl(Id($f),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_6)),NullLiteral()))]),ClassDecl(Id(__),Id(____h2_),[]),ClassDecl(Id(X61_),[]),ClassDecl(Id(w4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 330))

    def test_331(self):
        line = '''Class G:n{Destructor (){Return ;} }Class _N_:J{}Class S6:_{}Class _{}Class y__:_2P{Constructor (S:String ;z72:Array [Array [Array [Array [Int ,0X61],7],0X61],0XA7_8];_8___6__,C_:Int ;UL:C){}Val __A:Int ;}'''
        expect = '''Program([ClassDecl(Id(G),Id(n),[MethodDecl(Id(Destructor),Instance,[],Block([Return()]))]),ClassDecl(Id(_N_),Id(J),[]),ClassDecl(Id(S6),Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(y__),Id(_2P),[MethodDecl(Id(Constructor),Instance,[param(Id(S),StringType),param(Id(z72),ArrayType(2680,ArrayType(97,ArrayType(7,ArrayType(97,IntType))))),param(Id(_8___6__),IntType),param(Id(C_),IntType),param(Id(UL),ClassType(Id(C)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(__A),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 331))

    def test_332(self):
        line = '''Class M:_{Val Q,$_6,_:_;}Class l{$_(K968,_L,_,c,___M_:Array [Array [Boolean ,061],0B1001];Z:Array [Array [Array [Boolean ,061],041_5],0b10101];__:String ;u,_:Array [String ,0x50];J:__j){} }'''
        expect = '''Program([ClassDecl(Id(M),Id(_),[AttributeDecl(Instance,ConstDecl(Id(Q),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_6),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(l),[MethodDecl(Id($_),Static,[param(Id(K968),ArrayType(9,ArrayType(49,BoolType))),param(Id(_L),ArrayType(9,ArrayType(49,BoolType))),param(Id(_),ArrayType(9,ArrayType(49,BoolType))),param(Id(c),ArrayType(9,ArrayType(49,BoolType))),param(Id(___M_),ArrayType(9,ArrayType(49,BoolType))),param(Id(Z),ArrayType(21,ArrayType(269,ArrayType(49,BoolType)))),param(Id(__),StringType),param(Id(u),ArrayType(80,StringType)),param(Id(_),ArrayType(80,StringType)),param(Id(J),ClassType(Id(__j)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 332))

    def test_333(self):
        line = '''Class tjz:w{}Class _XF:_F{Val $FBU,$_0_:cA_Z;}Class E_{}Class __3q{____J(N,_Vf,_,d5TC_:Array [String ,0B1010];_,Q:UL;t6,T,_:Array [Array [Float ,06],0x2];H:Boolean ;v_,_:H){}Val v:Int ;}'''
        expect = '''Program([ClassDecl(Id(tjz),Id(w),[]),ClassDecl(Id(_XF),Id(_F),[AttributeDecl(Static,ConstDecl(Id($FBU),ClassType(Id(cA_Z)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_0_),ClassType(Id(cA_Z)),NullLiteral()))]),ClassDecl(Id(E_),[]),ClassDecl(Id(__3q),[MethodDecl(Id(____J),Instance,[param(Id(N),ArrayType(10,StringType)),param(Id(_Vf),ArrayType(10,StringType)),param(Id(_),ArrayType(10,StringType)),param(Id(d5TC_),ArrayType(10,StringType)),param(Id(_),ClassType(Id(UL))),param(Id(Q),ClassType(Id(UL))),param(Id(t6),ArrayType(2,ArrayType(6,FloatType))),param(Id(T),ArrayType(2,ArrayType(6,FloatType))),param(Id(_),ArrayType(2,ArrayType(6,FloatType))),param(Id(H),BoolType),param(Id(v_),ClassType(Id(H))),param(Id(_),ClassType(Id(H)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(v),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 333))

    def test_334(self):
        line = '''Class D:d_i_{Var $0:String ;}Class B:h{}Class _{}Class j:b{}Class _2Pz:B7V{}Class T{}Class _{Constructor (rO_:Array [String ,7];_:Int ;_:Array [Array [Array [Int ,0x14],0b10],0X3F_7]){} }Class __{}'''
        expect = '''Program([ClassDecl(Id(D),Id(d_i_),[AttributeDecl(Static,VarDecl(Id($0),StringType))]),ClassDecl(Id(B),Id(h),[]),ClassDecl(Id(_),[]),ClassDecl(Id(j),Id(b),[]),ClassDecl(Id(_2Pz),Id(B7V),[]),ClassDecl(Id(T),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(rO_),ArrayType(7,StringType)),param(Id(_),IntType),param(Id(_),ArrayType(1015,ArrayType(2,ArrayType(20,IntType))))],Block([]))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 334))

    def test_335(self):
        line = '''Class _:_{Destructor (){}_(____,_,_,m,_,_,l:CH7;_j8,T,_VE:Boolean ;a,wM_:String ;h5:Array [Array [Array [Array [Array [Int ,050],0b1_10],0x68],90],050]){Continue ;} }Class _Jz{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(____),ClassType(Id(CH7))),param(Id(_),ClassType(Id(CH7))),param(Id(_),ClassType(Id(CH7))),param(Id(m),ClassType(Id(CH7))),param(Id(_),ClassType(Id(CH7))),param(Id(_),ClassType(Id(CH7))),param(Id(l),ClassType(Id(CH7))),param(Id(_j8),BoolType),param(Id(T),BoolType),param(Id(_VE),BoolType),param(Id(a),StringType),param(Id(wM_),StringType),param(Id(h5),ArrayType(40,ArrayType(90,ArrayType(104,ArrayType(6,ArrayType(40,IntType))))))],Block([Continue]))]),ClassDecl(Id(_Jz),[])])'''
        self.assertTrue(TestAST.test(line, expect, 335))

    def test_336(self):
        line = '''Class __y:__U{}Class _:_{Destructor (){}Val _,$0_Zh,$1D:Array [Int ,061];Constructor (M5:_2;_W,__:Int ;t:Array [Float ,061]){} }Class _Z{Var $r7_Wq:Int ;Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(__y),Id(__U),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(49,IntType),None)),AttributeDecl(Static,ConstDecl(Id($0_Zh),ArrayType(49,IntType),None)),AttributeDecl(Static,ConstDecl(Id($1D),ArrayType(49,IntType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(M5),ClassType(Id(_2))),param(Id(_W),IntType),param(Id(__),IntType),param(Id(t),ArrayType(49,FloatType))],Block([]))]),ClassDecl(Id(_Z),[AttributeDecl(Static,VarDecl(Id($r7_Wq),IntType)),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 336))

    def test_337(self):
        line = '''Class g9_:__{}Class rP__{Destructor (){}Constructor (){} }Class EI2:qs2e{}Class O3V_{Val JH_VXV,$x:__r3_Q;Constructor (X_,D_,N:_){}Val _9:Array [Array [Float ,0106],71];}'''
        expect = '''Program([ClassDecl(Id(g9_),Id(__),[]),ClassDecl(Id(rP__),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(EI2),Id(qs2e),[]),ClassDecl(Id(O3V_),[AttributeDecl(Instance,ConstDecl(Id(JH_VXV),ClassType(Id(__r3_Q)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($x),ClassType(Id(__r3_Q)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(X_),ClassType(Id(_))),param(Id(D_),ClassType(Id(_))),param(Id(N),ClassType(Id(_)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_9),ArrayType(71,ArrayType(70,FloatType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 337))

    def test_338(self):
        line = '''Class _:k0{Val S:Array [Array [Array [Array [Float ,0x3],0x9F_72F],0x39],0xD];Var $5,$_:_E_;$3(G9:Array [Array [Int ,0x39],0B1100011];M5:G;_N18:Int ){} }Class j:_i{Var v:k6;}'''
        expect = '''Program([ClassDecl(Id(_),Id(k0),[AttributeDecl(Instance,ConstDecl(Id(S),ArrayType(13,ArrayType(57,ArrayType(653103,ArrayType(3,FloatType)))),None)),AttributeDecl(Static,VarDecl(Id($5),ClassType(Id(_E_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_E_)),NullLiteral())),MethodDecl(Id($3),Static,[param(Id(G9),ArrayType(99,ArrayType(57,IntType))),param(Id(M5),ClassType(Id(G))),param(Id(_N18),IntType)],Block([]))]),ClassDecl(Id(j),Id(_i),[AttributeDecl(Instance,VarDecl(Id(v),ClassType(Id(k6)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 338))

    def test_339(self):
        line = '''Class __{Val k,S:kC;}Class _:X_{$9(){}Constructor (Q,a_,_5_i:F;o:Array [Array [Array [Array [Array [Array [Float ,0b1000010],69],0X5E],0B1],0B1001111],0b1];__7,j:String ){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(__),[AttributeDecl(Instance,ConstDecl(Id(k),ClassType(Id(kC)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(S),ClassType(Id(kC)),NullLiteral()))]),ClassDecl(Id(_),Id(X_),[MethodDecl(Id($9),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(Q),ClassType(Id(F))),param(Id(a_),ClassType(Id(F))),param(Id(_5_i),ClassType(Id(F))),param(Id(o),ArrayType(1,ArrayType(79,ArrayType(1,ArrayType(94,ArrayType(69,ArrayType(66,FloatType))))))),param(Id(__7),StringType),param(Id(j),StringType)],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 339))

    def test_340(self):
        line = '''Class f{Val _N__25A,$16a,_:h_;Constructor (__:String ;qP0_,_kb8_,n,_:Array [Array [Array [Boolean ,0X31],32],0xB]){}sf(G,_,_,C,_K:Array [Array [Array [Boolean ,32],074],32]){} }'''
        expect = '''Program([ClassDecl(Id(f),[AttributeDecl(Instance,ConstDecl(Id(_N__25A),ClassType(Id(h_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($16a),ClassType(Id(h_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(h_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(__),StringType),param(Id(qP0_),ArrayType(11,ArrayType(32,ArrayType(49,BoolType)))),param(Id(_kb8_),ArrayType(11,ArrayType(32,ArrayType(49,BoolType)))),param(Id(n),ArrayType(11,ArrayType(32,ArrayType(49,BoolType)))),param(Id(_),ArrayType(11,ArrayType(32,ArrayType(49,BoolType))))],Block([])),MethodDecl(Id(sf),Instance,[param(Id(G),ArrayType(32,ArrayType(60,ArrayType(32,BoolType)))),param(Id(_),ArrayType(32,ArrayType(60,ArrayType(32,BoolType)))),param(Id(_),ArrayType(32,ArrayType(60,ArrayType(32,BoolType)))),param(Id(C),ArrayType(32,ArrayType(60,ArrayType(32,BoolType)))),param(Id(_K),ArrayType(32,ArrayType(60,ArrayType(32,BoolType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 340))

    def test_341(self):
        line = '''Class _:g{}Class t6_:_1_{Val _,_0_geE_,_:Int ;Destructor (){}Var O__p:Boolean ;Destructor (){} }Class ___:G_{Destructor (){}Var $78,K:Array [Array [String ,0B10111],03];}'''
        expect = '''Program([ClassDecl(Id(_),Id(g),[]),ClassDecl(Id(t6_),Id(_1_),[AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_0_geE_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(O__p),BoolType)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(___),Id(G_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($78),ArrayType(3,ArrayType(23,StringType)))),AttributeDecl(Instance,VarDecl(Id(K),ArrayType(3,ArrayType(23,StringType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 341))

    def test_342(self):
        line = '''Class __{}Class _{Constructor (f_:Array [Array [Array [Array [String ,3],015],02],030];_,__2,_,wh:__;u,q__:e){}Destructor (){}$j_(M:__;_:Int ;H90,_:__;H:Array [Boolean ,4]){}Val $c_R2_:vd;}'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(f_),ArrayType(24,ArrayType(2,ArrayType(13,ArrayType(3,StringType))))),param(Id(_),ClassType(Id(__))),param(Id(__2),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(wh),ClassType(Id(__))),param(Id(u),ClassType(Id(e))),param(Id(q__),ClassType(Id(e)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($j_),Static,[param(Id(M),ClassType(Id(__))),param(Id(_),IntType),param(Id(H90),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(H),ArrayType(4,BoolType))],Block([])),AttributeDecl(Static,ConstDecl(Id($c_R2_),ClassType(Id(vd)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 342))

    def test_343(self):
        line = '''Class j_:g{Var $ba4,$E:String ;Val O,$_,O0A_6:String ;Var _,$_:Array [Array [Array [Float ,01_6],5],0xC];Val _:Array [Array [Boolean ,044],2_3];}Class _0{}Class i6{}Class _:oOz{Destructor (){} }Class nQ{Constructor (__:abD){} }Class _9:_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(j_),Id(g),[AttributeDecl(Static,VarDecl(Id($ba4),StringType)),AttributeDecl(Static,VarDecl(Id($E),StringType)),AttributeDecl(Instance,ConstDecl(Id(O),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(O0A_6),StringType,None)),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(12,ArrayType(5,ArrayType(14,FloatType))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(12,ArrayType(5,ArrayType(14,FloatType))))),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(23,ArrayType(36,BoolType)),None))]),ClassDecl(Id(_0),[]),ClassDecl(Id(i6),[]),ClassDecl(Id(_),Id(oOz),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(nQ),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(abD)))],Block([]))]),ClassDecl(Id(_9),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 343))

    def test_344(self):
        line = '''Class _{}Class _{$43q(){} }Class t:_8{}Class i0c22:r_3_{Val $4vD_rI,$4,_,$i,$V,l:Int ;Var D2_,K:j;}Class p7:_{_N_X5(){Return ;Break ;}Destructor (){}_n(_Q_,_2,M:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id($43q),Static,[],Block([]))]),ClassDecl(Id(t),Id(_8),[]),ClassDecl(Id(i0c22),Id(r_3_),[AttributeDecl(Static,ConstDecl(Id($4vD_rI),IntType,None)),AttributeDecl(Static,ConstDecl(Id($4),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($i),IntType,None)),AttributeDecl(Static,ConstDecl(Id($V),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(l),IntType,None)),AttributeDecl(Instance,VarDecl(Id(D2_),ClassType(Id(j)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(K),ClassType(Id(j)),NullLiteral()))]),ClassDecl(Id(p7),Id(_),[MethodDecl(Id(_N_X5),Instance,[],Block([Return(),Break])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_n),Instance,[param(Id(_Q_),BoolType),param(Id(_2),BoolType),param(Id(M),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 344))

    def test_345(self):
        line = '''Class w76X_Z_Ba{Constructor (_L5jeg,__:Float ){}Destructor (){} }Class _:v6{}Class b6s8_C{}Class _2L_:_d__{Val $E,c_658:Boolean ;}Class _{}Class __{Destructor (){Return ;} }Class _99:_{Val $e5,$0:Float ;}'''
        expect = '''Program([ClassDecl(Id(w76X_Z_Ba),[MethodDecl(Id(Constructor),Instance,[param(Id(_L5jeg),FloatType),param(Id(__),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(v6),[]),ClassDecl(Id(b6s8_C),[]),ClassDecl(Id(_2L_),Id(_d__),[AttributeDecl(Static,ConstDecl(Id($E),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(c_658),BoolType,None))]),ClassDecl(Id(_),[]),ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([Return()]))]),ClassDecl(Id(_99),Id(_),[AttributeDecl(Static,ConstDecl(Id($e5),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($0),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 345))

    def test_346(self):
        line = '''Class _:ty{Destructor (){}_i(e,_,__,O8,_2:String ){Break ;}Var $_7,$_3:Array [Boolean ,5];}Class _{$8(x,P:String ;_,_,h_E,_:String ){}Constructor (){Continue ;} }Class _6:f{}'''
        expect = '''Program([ClassDecl(Id(_),Id(ty),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_i),Instance,[param(Id(e),StringType),param(Id(_),StringType),param(Id(__),StringType),param(Id(O8),StringType),param(Id(_2),StringType)],Block([Break])),AttributeDecl(Static,VarDecl(Id($_7),ArrayType(5,BoolType))),AttributeDecl(Static,VarDecl(Id($_3),ArrayType(5,BoolType)))]),ClassDecl(Id(_),[MethodDecl(Id($8),Static,[param(Id(x),StringType),param(Id(P),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(h_E),StringType),param(Id(_),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue]))]),ClassDecl(Id(_6),Id(f),[])])'''
        self.assertTrue(TestAST.test(line, expect, 346))

    def test_347(self):
        line = '''Class _i{Constructor (){}Constructor (WwE,Lz9_,_3,Z:Array [Array [Array [String ,0131],02],0XF];_,r_,_:_;w7__,l_:Array [Array [Array [Float ,07],04_5],0B1];j:Float ){}__Uj_(_:Int ;d_,_,x:Array [Boolean ,0X3_47FED_27];_i_:Float ){Break ;}Val Z:Array [Array [String ,0b1_0],4];}Class f:q_{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_i),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(WwE),ArrayType(15,ArrayType(2,ArrayType(89,StringType)))),param(Id(Lz9_),ArrayType(15,ArrayType(2,ArrayType(89,StringType)))),param(Id(_3),ArrayType(15,ArrayType(2,ArrayType(89,StringType)))),param(Id(Z),ArrayType(15,ArrayType(2,ArrayType(89,StringType)))),param(Id(_),ClassType(Id(_))),param(Id(r_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(w7__),ArrayType(1,ArrayType(37,ArrayType(7,FloatType)))),param(Id(l_),ArrayType(1,ArrayType(37,ArrayType(7,FloatType)))),param(Id(j),FloatType)],Block([])),MethodDecl(Id(__Uj_),Instance,[param(Id(_),IntType),param(Id(d_),ArrayType(880799015,BoolType)),param(Id(_),ArrayType(880799015,BoolType)),param(Id(x),ArrayType(880799015,BoolType)),param(Id(_i_),FloatType)],Block([Break])),AttributeDecl(Instance,ConstDecl(Id(Z),ArrayType(4,ArrayType(2,StringType)),None))]),ClassDecl(Id(f),Id(q_),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 347))

    def test_348(self):
        line = '''Class I{Constructor (_,x,YE_:_){}Destructor (){} }Class _f{Constructor (_v9:String ;_4,aE_:_){}Constructor (_,L,e:String ;L_6Y4M,fM:Array [Boolean ,0XA_8]){} }Class l:_{Destructor (){G::$_();} }'''
        expect = '''Program([ClassDecl(Id(I),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(x),ClassType(Id(_))),param(Id(YE_),ClassType(Id(_)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_f),[MethodDecl(Id(Constructor),Instance,[param(Id(_v9),StringType),param(Id(_4),ClassType(Id(_))),param(Id(aE_),ClassType(Id(_)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(L),StringType),param(Id(e),StringType),param(Id(L_6Y4M),ArrayType(168,BoolType)),param(Id(fM),ArrayType(168,BoolType))],Block([]))]),ClassDecl(Id(l),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Call(Id(G),Id($_),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 348))

    def test_349(self):
        line = '''Class _{Var $H4:Array [Array [Array [Boolean ,0B1011],0xF1_F2_C],041];}Class _{Destructor (){Continue ;}Var $VcT_5v:e;Val $92:Float ;Destructor (){}Constructor (_,k:__;K2_M,Rj_:ZF){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($H4),ArrayType(33,ArrayType(991020,ArrayType(11,BoolType)))))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Static,VarDecl(Id($VcT_5v),ClassType(Id(e)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($92),FloatType,None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(__))),param(Id(k),ClassType(Id(__))),param(Id(K2_M),ClassType(Id(ZF))),param(Id(Rj_),ClassType(Id(ZF)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 349))

    def test_350(self):
        line = '''Class __:X1Q{}Class H{Constructor (w__,_S6,V_,p:Array [Float ,65];c0:_1w;ZZ:Boolean ;O40,Q6NBJ,v,_8,C64,Qu36P,XK,_,X:_;J__,I,T:Array [Float ,0124];W:Array [Int ,07]){}Var $g8:_;}'''
        expect = '''Program([ClassDecl(Id(__),Id(X1Q),[]),ClassDecl(Id(H),[MethodDecl(Id(Constructor),Instance,[param(Id(w__),ArrayType(65,FloatType)),param(Id(_S6),ArrayType(65,FloatType)),param(Id(V_),ArrayType(65,FloatType)),param(Id(p),ArrayType(65,FloatType)),param(Id(c0),ClassType(Id(_1w))),param(Id(ZZ),BoolType),param(Id(O40),ClassType(Id(_))),param(Id(Q6NBJ),ClassType(Id(_))),param(Id(v),ClassType(Id(_))),param(Id(_8),ClassType(Id(_))),param(Id(C64),ClassType(Id(_))),param(Id(Qu36P),ClassType(Id(_))),param(Id(XK),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(X),ClassType(Id(_))),param(Id(J__),ArrayType(84,FloatType)),param(Id(I),ArrayType(84,FloatType)),param(Id(T),ArrayType(84,FloatType)),param(Id(W),ArrayType(7,IntType))],Block([])),AttributeDecl(Static,VarDecl(Id($g8),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 350))

    def test_351(self):
        line = '''Class __{Var $_:Array [Array [Float ,0xBE],0xF_D];Destructor (){Var ___,__:Int ;} }Class __{Constructor (){} }Class ___81{Destructor (){} }Class ___:I{}Class muz{}Class _27:_1{}Class __:Q68_L{}'''
        expect = '''Program([ClassDecl(Id(__),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(253,ArrayType(190,FloatType)))),MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(___),IntType),VarDecl(Id(__),IntType)]))]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(___81),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(___),Id(I),[]),ClassDecl(Id(muz),[]),ClassDecl(Id(_27),Id(_1),[]),ClassDecl(Id(__),Id(Q68_L),[])])'''
        self.assertTrue(TestAST.test(line, expect, 351))

    def test_352(self):
        line = '''Class UT{Constructor (_P:Int ){}r(p7,p_9__,P,c:Array [Array [String ,072],0X3C];Qc:_D){}Destructor (){Continue ;}UiLP7F(jTDUO:Array [Array [Float ,0b111010],05]){}Constructor (os,l_6,z:Array [Boolean ,7]){} }'''
        expect = '''Program([ClassDecl(Id(UT),[MethodDecl(Id(Constructor),Instance,[param(Id(_P),IntType)],Block([])),MethodDecl(Id(r),Instance,[param(Id(p7),ArrayType(60,ArrayType(58,StringType))),param(Id(p_9__),ArrayType(60,ArrayType(58,StringType))),param(Id(P),ArrayType(60,ArrayType(58,StringType))),param(Id(c),ArrayType(60,ArrayType(58,StringType))),param(Id(Qc),ClassType(Id(_D)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(UiLP7F),Instance,[param(Id(jTDUO),ArrayType(5,ArrayType(58,FloatType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(os),ArrayType(7,BoolType)),param(Id(l_6),ArrayType(7,BoolType)),param(Id(z),ArrayType(7,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 352))

    def test_353(self):
        line = '''Class v:Y32_{$D(I,__:Boolean ;_,_M_,g_g:Boolean ;_,_,b:Array [Array [Array [Array [Array [Array [Float ,0X2],0xAB9],96],0X43],0x30],96]){}$_(){}Destructor (){}Constructor (id_:d){}Val D:l;}'''
        expect = '''Program([ClassDecl(Id(v),Id(Y32_),[MethodDecl(Id($D),Static,[param(Id(I),BoolType),param(Id(__),BoolType),param(Id(_),BoolType),param(Id(_M_),BoolType),param(Id(g_g),BoolType),param(Id(_),ArrayType(96,ArrayType(48,ArrayType(67,ArrayType(96,ArrayType(2745,ArrayType(2,FloatType))))))),param(Id(_),ArrayType(96,ArrayType(48,ArrayType(67,ArrayType(96,ArrayType(2745,ArrayType(2,FloatType))))))),param(Id(b),ArrayType(96,ArrayType(48,ArrayType(67,ArrayType(96,ArrayType(2745,ArrayType(2,FloatType)))))))],Block([])),MethodDecl(Id($_),Static,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(id_),ClassType(Id(d)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(D),ClassType(Id(l)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 353))

    def test_354(self):
        line = '''Class X2_C:g{m(U,__r4J___E5,_S:String ;_:Array [Array [Array [Array [Array [Array [String ,0x2C],0XC],0B1_0],0x2C],0x2C],0B11]){}_(_76,__I_:_;__:Array [Array [Boolean ,0X2],62];GZ8_7:d;C,a:Array [Array [Int ,052],052];_,_g,T4:Array [Array [Array [Float ,0B1000100],02],06];w68:String ){} }Class E{}Class p{Destructor (){}Val _:Array [Int ,0x2C];}'''
        expect = '''Program([ClassDecl(Id(X2_C),Id(g),[MethodDecl(Id(m),Instance,[param(Id(U),StringType),param(Id(__r4J___E5),StringType),param(Id(_S),StringType),param(Id(_),ArrayType(3,ArrayType(44,ArrayType(44,ArrayType(2,ArrayType(12,ArrayType(44,StringType)))))))],Block([])),MethodDecl(Id(_),Instance,[param(Id(_76),ClassType(Id(_))),param(Id(__I_),ClassType(Id(_))),param(Id(__),ArrayType(62,ArrayType(2,BoolType))),param(Id(GZ8_7),ClassType(Id(d))),param(Id(C),ArrayType(42,ArrayType(42,IntType))),param(Id(a),ArrayType(42,ArrayType(42,IntType))),param(Id(_),ArrayType(6,ArrayType(2,ArrayType(68,FloatType)))),param(Id(_g),ArrayType(6,ArrayType(2,ArrayType(68,FloatType)))),param(Id(T4),ArrayType(6,ArrayType(2,ArrayType(68,FloatType)))),param(Id(w68),StringType)],Block([]))]),ClassDecl(Id(E),[]),ClassDecl(Id(p),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(44,IntType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 354))

    def test_355(self):
        line = '''Class __:t1y{$e(){Var c:Array [Array [Boolean ,9_087_0],69];} }Class __:O{_(ep,H,G_:_){_b::$_();Continue ;Continue ;{Continue ;} }$__(_yW,r:Array [Array [Array [Boolean ,0b1],0b1_0_1],0x60];_,f_:_Db__;_6:Int ;O:A){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(t1y),[MethodDecl(Id($e),Static,[],Block([VarDecl(Id(c),ArrayType(69,ArrayType(90870,BoolType)))]))]),ClassDecl(Id(__),Id(O),[MethodDecl(Id(_),Instance,[param(Id(ep),ClassType(Id(_))),param(Id(H),ClassType(Id(_))),param(Id(G_),ClassType(Id(_)))],Block([Call(Id(_b),Id($_),[]),Continue,Continue,Block([Continue])])),MethodDecl(Id($__),Static,[param(Id(_yW),ArrayType(96,ArrayType(5,ArrayType(1,BoolType)))),param(Id(r),ArrayType(96,ArrayType(5,ArrayType(1,BoolType)))),param(Id(_),ClassType(Id(_Db__))),param(Id(f_),ClassType(Id(_Db__))),param(Id(_6),IntType),param(Id(O),ClassType(Id(A)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 355))

    def test_356(self):
        line = '''Class _{Constructor (h:__;S,g7:Float ;_3_,_,_:String ;u,_mE6j_7Z,_,_:Array [Array [String ,0x2],0xA8A8_06]){} }Class e:B{}Class _28T3:s{Val _L:Boolean ;Constructor (K_:String ;_,_,_59Oq,Y6:Int ){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(h),ClassType(Id(__))),param(Id(S),FloatType),param(Id(g7),FloatType),param(Id(_3_),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(u),ArrayType(11053062,ArrayType(2,StringType))),param(Id(_mE6j_7Z),ArrayType(11053062,ArrayType(2,StringType))),param(Id(_),ArrayType(11053062,ArrayType(2,StringType))),param(Id(_),ArrayType(11053062,ArrayType(2,StringType)))],Block([]))]),ClassDecl(Id(e),Id(B),[]),ClassDecl(Id(_28T3),Id(s),[AttributeDecl(Instance,ConstDecl(Id(_L),BoolType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(K_),StringType),param(Id(_),IntType),param(Id(_),IntType),param(Id(_59Oq),IntType),param(Id(Y6),IntType)],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 356))

    def test_357(self):
        line = '''Class D:X{Destructor (){} }Class D1:f34E{}Class O{}Class _7_2{}Class O:_{}Class h{}Class _A__:B638_{Destructor (){} }Class y_0{}Class _bUV{Var _,u:_m0;Destructor (){} }Class _{Val j_v__7q,$34,$R:Float ;Var $_:Int ;}'''
        expect = '''Program([ClassDecl(Id(D),Id(X),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(D1),Id(f34E),[]),ClassDecl(Id(O),[]),ClassDecl(Id(_7_2),[]),ClassDecl(Id(O),Id(_),[]),ClassDecl(Id(h),[]),ClassDecl(Id(_A__),Id(B638_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(y_0),[]),ClassDecl(Id(_bUV),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_m0)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(u),ClassType(Id(_m0)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(j_v__7q),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($34),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($R),FloatType,None)),AttributeDecl(Static,VarDecl(Id($_),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 357))

    def test_358(self):
        line = '''Class _D:__{}Class C4_:F_{Val $8,_,G:W_;Constructor (__0:_){}Constructor (_A:_K1_8;a,_,_:Int ;d:Array [Array [Array [String ,0b1_0],0b1011111],0x2];_N47m,_1G,_,M,_o:_;__9,O:__CW_7;P:_8;q,_:Array [Array [Boolean ,14],0XF2_93]){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(_D),Id(__),[]),ClassDecl(Id(C4_),Id(F_),[AttributeDecl(Static,ConstDecl(Id($8),ClassType(Id(W_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(W_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(G),ClassType(Id(W_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(__0),ClassType(Id(_)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_A),ClassType(Id(_K1_8))),param(Id(a),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(d),ArrayType(2,ArrayType(95,ArrayType(2,StringType)))),param(Id(_N47m),ClassType(Id(_))),param(Id(_1G),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(M),ClassType(Id(_))),param(Id(_o),ClassType(Id(_))),param(Id(__9),ClassType(Id(__CW_7))),param(Id(O),ClassType(Id(__CW_7))),param(Id(P),ClassType(Id(_8))),param(Id(q),ArrayType(62099,ArrayType(14,BoolType))),param(Id(_),ArrayType(62099,ArrayType(14,BoolType)))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 358))

    def test_359(self):
        line = '''Class q_:hp{Destructor (){Val _:Array [String ,0b1];Val W,m7,_:b;}Destructor (){}Val _,n,lM:Array [Int ,0b1011010];Constructor (){} }Class h_{_(_:Array [Array [Array [Array [Array [Array [Int ,0b1011010],0X6],0XC_0F],7_14],0X48],0113];E:N_4){} }'''
        expect = '''Program([ClassDecl(Id(q_),Id(hp),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_),ArrayType(1,StringType),None),ConstDecl(Id(W),ClassType(Id(b)),NullLiteral()),ConstDecl(Id(m7),ClassType(Id(b)),NullLiteral()),ConstDecl(Id(_),ClassType(Id(b)),NullLiteral())])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(90,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(n),ArrayType(90,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(lM),ArrayType(90,IntType),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(h_),[MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(75,ArrayType(72,ArrayType(714,ArrayType(3087,ArrayType(6,ArrayType(90,IntType))))))),param(Id(E),ClassType(Id(N_4)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 359))

    def test_360(self):
        line = '''Class _{Var $6g,iS_C51,J,$_,k:String ;Var _:b4;}Class _9_k_:__0__{}Class t_:_3F{Constructor (_,_,u_:Int ;i,q:Array [String ,0B1100010];c_GS,m3T:Array [Int ,50];_8,y_,_:String ){Return ;}P(_:Float ){}Destructor (){Continue ;}$v(){Val p,_:Boolean ;Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($6g),StringType)),AttributeDecl(Instance,VarDecl(Id(iS_C51),StringType)),AttributeDecl(Instance,VarDecl(Id(J),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Instance,VarDecl(Id(k),StringType)),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(b4)),NullLiteral()))]),ClassDecl(Id(_9_k_),Id(__0__),[]),ClassDecl(Id(t_),Id(_3F),[MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(_),IntType),param(Id(u_),IntType),param(Id(i),ArrayType(98,StringType)),param(Id(q),ArrayType(98,StringType)),param(Id(c_GS),ArrayType(50,IntType)),param(Id(m3T),ArrayType(50,IntType)),param(Id(_8),StringType),param(Id(y_),StringType),param(Id(_),StringType)],Block([Return()])),MethodDecl(Id(P),Instance,[param(Id(_),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id($v),Static,[],Block([ConstDecl(Id(p),BoolType,None),ConstDecl(Id(_),BoolType,None),Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 360))

    def test_361(self):
        line = '''Class _0:G{Constructor (____6,__,e_:Array [Array [Array [Array [Array [Int ,0xD],3],47],47],03];_kD_:Array [String ,0b1010100];BZ,w1R_8:Array [Array [Array [Array [Array [Float ,05],0b1010100],8_8],0b1010100],4_227_2]){} }'''
        expect = '''Program([ClassDecl(Id(_0),Id(G),[MethodDecl(Id(Constructor),Instance,[param(Id(____6),ArrayType(3,ArrayType(47,ArrayType(47,ArrayType(3,ArrayType(13,IntType)))))),param(Id(__),ArrayType(3,ArrayType(47,ArrayType(47,ArrayType(3,ArrayType(13,IntType)))))),param(Id(e_),ArrayType(3,ArrayType(47,ArrayType(47,ArrayType(3,ArrayType(13,IntType)))))),param(Id(_kD_),ArrayType(84,StringType)),param(Id(BZ),ArrayType(42272,ArrayType(84,ArrayType(88,ArrayType(84,ArrayType(5,FloatType)))))),param(Id(w1R_8),ArrayType(42272,ArrayType(84,ArrayType(88,ArrayType(84,ArrayType(5,FloatType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 361))

    def test_362(self):
        line = '''Class d:_13{Constructor (_7:Array [Float ,10];c,I_E,_,__1q,___PH4:Array [String ,6_1];a:Array [Array [Float ,0x2],0x8];Ai_,I__,q:Array [Array [Int ,10],5_81_5]){} }Class _:_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(d),Id(_13),[MethodDecl(Id(Constructor),Instance,[param(Id(_7),ArrayType(10,FloatType)),param(Id(c),ArrayType(61,StringType)),param(Id(I_E),ArrayType(61,StringType)),param(Id(_),ArrayType(61,StringType)),param(Id(__1q),ArrayType(61,StringType)),param(Id(___PH4),ArrayType(61,StringType)),param(Id(a),ArrayType(8,ArrayType(2,FloatType))),param(Id(Ai_),ArrayType(5815,ArrayType(10,IntType))),param(Id(I__),ArrayType(5815,ArrayType(10,IntType))),param(Id(q),ArrayType(5815,ArrayType(10,IntType)))],Block([]))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 362))

    def test_363(self):
        line = '''Class f71{Constructor (_3,_,Qy5:Array [String ,0xD_B9_9];_h:_w;_Hj:g___45;_:Array [Array [Array [Array [String ,0X61],99],4],0X91_C_5_E]){}Constructor (){Continue ;} }Class _:_{}Class Al:Z89D{}Class u__:X{Destructor (){} }Class __0{}'''
        expect = '''Program([ClassDecl(Id(f71),[MethodDecl(Id(Constructor),Instance,[param(Id(_3),ArrayType(56217,StringType)),param(Id(_),ArrayType(56217,StringType)),param(Id(Qy5),ArrayType(56217,StringType)),param(Id(_h),ClassType(Id(_w))),param(Id(_Hj),ClassType(Id(g___45))),param(Id(_),ArrayType(597086,ArrayType(4,ArrayType(99,ArrayType(97,StringType)))))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue]))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(Al),Id(Z89D),[]),ClassDecl(Id(u__),Id(X),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__0),[])])'''
        self.assertTrue(TestAST.test(line, expect, 363))

    def test_364(self):
        line = '''Class _5{y_(Llh:Boolean ;I,U:Array [Array [String ,067],0B10000];_1z,cn:R;_E:Array [Array [Array [Float ,25],0x5],90];_:F;n,_7_d:Array [Float ,90];K:String ;c,e:_;Q_,_:Array [Array [Float ,0x60],0x2];I_,_:Array [String ,0x89]){} }Class _3:___{}'''
        expect = '''Program([ClassDecl(Id(_5),[MethodDecl(Id(y_),Instance,[param(Id(Llh),BoolType),param(Id(I),ArrayType(16,ArrayType(55,StringType))),param(Id(U),ArrayType(16,ArrayType(55,StringType))),param(Id(_1z),ClassType(Id(R))),param(Id(cn),ClassType(Id(R))),param(Id(_E),ArrayType(90,ArrayType(5,ArrayType(25,FloatType)))),param(Id(_),ClassType(Id(F))),param(Id(n),ArrayType(90,FloatType)),param(Id(_7_d),ArrayType(90,FloatType)),param(Id(K),StringType),param(Id(c),ClassType(Id(_))),param(Id(e),ClassType(Id(_))),param(Id(Q_),ArrayType(2,ArrayType(96,FloatType))),param(Id(_),ArrayType(2,ArrayType(96,FloatType))),param(Id(I_),ArrayType(137,StringType)),param(Id(_),ArrayType(137,StringType))],Block([]))]),ClassDecl(Id(_3),Id(___),[])])'''
        self.assertTrue(TestAST.test(line, expect, 364))

    def test_365(self):
        line = '''Class _{$H9K_9(G,i,T,V:_;R_e,R,_3:__91;u,k_,_:Int ;_u14L8:Array [Float ,6];Q,_,_6E:Array [Array [Array [Array [Float ,0xC],0B101100],050],0XF];U_,_,__l_p:Int ;_A_t_,o,_f,_,r,W4,J5,n,lQS,__,J6C_:mj_;n_7,_,A:Array [Array [String ,0X3F],0B10];i_,_:String ){Break ;} }Class _4{Val $_:Boolean ;}Class A3z6jR:_m{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($H9K_9),Static,[param(Id(G),ClassType(Id(_))),param(Id(i),ClassType(Id(_))),param(Id(T),ClassType(Id(_))),param(Id(V),ClassType(Id(_))),param(Id(R_e),ClassType(Id(__91))),param(Id(R),ClassType(Id(__91))),param(Id(_3),ClassType(Id(__91))),param(Id(u),IntType),param(Id(k_),IntType),param(Id(_),IntType),param(Id(_u14L8),ArrayType(6,FloatType)),param(Id(Q),ArrayType(15,ArrayType(40,ArrayType(44,ArrayType(12,FloatType))))),param(Id(_),ArrayType(15,ArrayType(40,ArrayType(44,ArrayType(12,FloatType))))),param(Id(_6E),ArrayType(15,ArrayType(40,ArrayType(44,ArrayType(12,FloatType))))),param(Id(U_),IntType),param(Id(_),IntType),param(Id(__l_p),IntType),param(Id(_A_t_),ClassType(Id(mj_))),param(Id(o),ClassType(Id(mj_))),param(Id(_f),ClassType(Id(mj_))),param(Id(_),ClassType(Id(mj_))),param(Id(r),ClassType(Id(mj_))),param(Id(W4),ClassType(Id(mj_))),param(Id(J5),ClassType(Id(mj_))),param(Id(n),ClassType(Id(mj_))),param(Id(lQS),ClassType(Id(mj_))),param(Id(__),ClassType(Id(mj_))),param(Id(J6C_),ClassType(Id(mj_))),param(Id(n_7),ArrayType(2,ArrayType(63,StringType))),param(Id(_),ArrayType(2,ArrayType(63,StringType))),param(Id(A),ArrayType(2,ArrayType(63,StringType))),param(Id(i_),StringType),param(Id(_),StringType)],Block([Break]))]),ClassDecl(Id(_4),[AttributeDecl(Static,ConstDecl(Id($_),BoolType,None))]),ClassDecl(Id(A3z6jR),Id(_m),[])])'''
        self.assertTrue(TestAST.test(line, expect, 365))

    def test_366(self):
        line = '''Class iG1:__P{Val $_91Q,$c5_:Array [Array [Array [Array [Array [Array [Array [Array [Int ,92],4],044],03],0xFE5_7],92],044],0XEC];}Class _{}Class _{Val o:Int ;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(iG1),Id(__P),[AttributeDecl(Static,ConstDecl(Id($_91Q),ArrayType(236,ArrayType(36,ArrayType(92,ArrayType(65111,ArrayType(3,ArrayType(36,ArrayType(4,ArrayType(92,IntType)))))))),None)),AttributeDecl(Static,ConstDecl(Id($c5_),ArrayType(236,ArrayType(36,ArrayType(92,ArrayType(65111,ArrayType(3,ArrayType(36,ArrayType(4,ArrayType(92,IntType)))))))),None))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(o),IntType,None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 366))

    def test_367(self):
        line = '''Class _J_6:CmA{}Class P{Constructor (HL_46:String ;L,_SD9:Array [String ,0B101001]){} }Class _{$sK_(_:Array [Float ,0b11011];Q02,_,D,j:Array [Array [Array [String ,0B101001],0B11_00_10_00],0b11011]){}Q(q:l_){} }'''
        expect = '''Program([ClassDecl(Id(_J_6),Id(CmA),[]),ClassDecl(Id(P),[MethodDecl(Id(Constructor),Instance,[param(Id(HL_46),StringType),param(Id(L),ArrayType(41,StringType)),param(Id(_SD9),ArrayType(41,StringType))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id($sK_),Static,[param(Id(_),ArrayType(27,FloatType)),param(Id(Q02),ArrayType(27,ArrayType(200,ArrayType(41,StringType)))),param(Id(_),ArrayType(27,ArrayType(200,ArrayType(41,StringType)))),param(Id(D),ArrayType(27,ArrayType(200,ArrayType(41,StringType)))),param(Id(j),ArrayType(27,ArrayType(200,ArrayType(41,StringType))))],Block([])),MethodDecl(Id(Q),Instance,[param(Id(q),ClassType(Id(l_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 367))

    def test_368(self):
        line = '''Class _{}Class yD_y16Ixo{Val $_,$_:Array [Array [Array [Array [Float ,07_2],0x46],2_63],0X7B49];$_(H,_a,_0:Int ;L,_G:Array [Array [String ,0B1010010],0B1010010];B:_TS_){}Val $1_:_;}Class p_{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(yD_y16Ixo),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(31561,ArrayType(263,ArrayType(70,ArrayType(58,FloatType)))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(31561,ArrayType(263,ArrayType(70,ArrayType(58,FloatType)))),None)),MethodDecl(Id($_),Static,[param(Id(H),IntType),param(Id(_a),IntType),param(Id(_0),IntType),param(Id(L),ArrayType(82,ArrayType(82,StringType))),param(Id(_G),ArrayType(82,ArrayType(82,StringType))),param(Id(B),ClassType(Id(_TS_)))],Block([])),AttributeDecl(Static,ConstDecl(Id($1_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(p_),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 368))

    def test_369(self):
        line = '''Class __:z_{Constructor (d_,_,_0:Boolean ;C:Boolean ;F,_,_6,EV_29_:Array [Float ,0b1100001];U:Array [Array [String ,11],0b1]){}Destructor (){}Val Q:_2vDoe___WA;}Class n5_{Var $_:D;Destructor (){Break ;} }Class _:_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(z_),[MethodDecl(Id(Constructor),Instance,[param(Id(d_),BoolType),param(Id(_),BoolType),param(Id(_0),BoolType),param(Id(C),BoolType),param(Id(F),ArrayType(97,FloatType)),param(Id(_),ArrayType(97,FloatType)),param(Id(_6),ArrayType(97,FloatType)),param(Id(EV_29_),ArrayType(97,FloatType)),param(Id(U),ArrayType(1,ArrayType(11,StringType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(Q),ClassType(Id(_2vDoe___WA)),NullLiteral()))]),ClassDecl(Id(n5_),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(D)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 369))

    def test_370(self):
        line = '''Class _:f{Constructor (a,L3,_,_,_:Array [Array [Int ,0X2],4];F,_Y,C:e;_h,_:U3_;t8,_:Array [Boolean ,01];_g:Float ;NS__L,G,_,k,_,_73_,_2:__;w:Float ;E:Array [Boolean ,0x13]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(f),[MethodDecl(Id(Constructor),Instance,[param(Id(a),ArrayType(4,ArrayType(2,IntType))),param(Id(L3),ArrayType(4,ArrayType(2,IntType))),param(Id(_),ArrayType(4,ArrayType(2,IntType))),param(Id(_),ArrayType(4,ArrayType(2,IntType))),param(Id(_),ArrayType(4,ArrayType(2,IntType))),param(Id(F),ClassType(Id(e))),param(Id(_Y),ClassType(Id(e))),param(Id(C),ClassType(Id(e))),param(Id(_h),ClassType(Id(U3_))),param(Id(_),ClassType(Id(U3_))),param(Id(t8),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType)),param(Id(_g),FloatType),param(Id(NS__L),ClassType(Id(__))),param(Id(G),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(k),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(_73_),ClassType(Id(__))),param(Id(_2),ClassType(Id(__))),param(Id(w),FloatType),param(Id(E),ArrayType(19,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 370))

    def test_371(self):
        line = '''Class _M:M{Constructor (_31jI,s:Array [Array [Array [String ,04],70],0X13];C:Array [Array [Array [Boolean ,0xA],0b1],055]){}Destructor (){ {}{Break ;}Break ;Break ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_M),Id(M),[MethodDecl(Id(Constructor),Instance,[param(Id(_31jI),ArrayType(19,ArrayType(70,ArrayType(4,StringType)))),param(Id(s),ArrayType(19,ArrayType(70,ArrayType(4,StringType)))),param(Id(C),ArrayType(45,ArrayType(1,ArrayType(10,BoolType))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([]),Block([Break]),Break,Break,Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 371))

    def test_372(self):
        line = '''Class __8_:dv2{Val $em,U:Array [Float ,02];_D(_:Array [Boolean ,4];D__xo6:Array [Float ,0x1A];E_:Boolean ){} }Class Q{}Class f{Var yJ:x;}Class Q{Constructor (_,_:Boolean ){}Val $Da:W;}'''
        expect = '''Program([ClassDecl(Id(__8_),Id(dv2),[AttributeDecl(Static,ConstDecl(Id($em),ArrayType(2,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(U),ArrayType(2,FloatType),None)),MethodDecl(Id(_D),Instance,[param(Id(_),ArrayType(4,BoolType)),param(Id(D__xo6),ArrayType(26,FloatType)),param(Id(E_),BoolType)],Block([]))]),ClassDecl(Id(Q),[]),ClassDecl(Id(f),[AttributeDecl(Instance,VarDecl(Id(yJ),ClassType(Id(x)),NullLiteral()))]),ClassDecl(Id(Q),[MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(_),BoolType)],Block([])),AttributeDecl(Static,ConstDecl(Id($Da),ClassType(Id(W)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 372))

    def test_373(self):
        line = '''Class L{_1B(G,k4_,IR:Array [Float ,9]){} }Class j__{Constructor (R,__5_k:Array [Array [Array [Float ,0XD_0_8F],7_7_6_9_4],5]){Break ;} }Class _{}Class E5__:_{Destructor (){Break ;}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(L),[MethodDecl(Id(_1B),Instance,[param(Id(G),ArrayType(9,FloatType)),param(Id(k4_),ArrayType(9,FloatType)),param(Id(IR),ArrayType(9,FloatType))],Block([]))]),ClassDecl(Id(j__),[MethodDecl(Id(Constructor),Instance,[param(Id(R),ArrayType(5,ArrayType(77694,ArrayType(53391,FloatType)))),param(Id(__5_k),ArrayType(5,ArrayType(77694,ArrayType(53391,FloatType))))],Block([Break]))]),ClassDecl(Id(_),[]),ClassDecl(Id(E5__),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Break])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 373))

    def test_374(self):
        line = '''Class _{Constructor (_Z:Array [Array [Array [Float ,065],0x2],065];_,q:Float ;C_c_:Array [String ,0B100_1_1];E,l31_:Array [Array [Array [Array [Array [Array [Array [Boolean ,065],4],0xE],065],7_7],0B101110],0b1001110]){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_Z),ArrayType(53,ArrayType(2,ArrayType(53,FloatType)))),param(Id(_),FloatType),param(Id(q),FloatType),param(Id(C_c_),ArrayType(19,StringType)),param(Id(E),ArrayType(78,ArrayType(46,ArrayType(77,ArrayType(53,ArrayType(14,ArrayType(4,ArrayType(53,BoolType)))))))),param(Id(l31_),ArrayType(78,ArrayType(46,ArrayType(77,ArrayType(53,ArrayType(14,ArrayType(4,ArrayType(53,BoolType))))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 374))

    def test_375(self):
        line = '''Class r5{Constructor (KA:T_;_,_,__q,___,D,_,p,_P,b,j:Boolean ;_,__:Array [String ,0137]){Var D:Array [Array [Array [Array [Float ,0X12],0b100],0137],0b1000111];} }Class S{}Class _V___1{Val $0,$uB4h,tH,_hU_:Array [Float ,0XAB70];}'''
        expect = '''Program([ClassDecl(Id(r5),[MethodDecl(Id(Constructor),Instance,[param(Id(KA),ClassType(Id(T_))),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(__q),BoolType),param(Id(___),BoolType),param(Id(D),BoolType),param(Id(_),BoolType),param(Id(p),BoolType),param(Id(_P),BoolType),param(Id(b),BoolType),param(Id(j),BoolType),param(Id(_),ArrayType(95,StringType)),param(Id(__),ArrayType(95,StringType))],Block([VarDecl(Id(D),ArrayType(71,ArrayType(95,ArrayType(4,ArrayType(18,FloatType)))))]))]),ClassDecl(Id(S),[]),ClassDecl(Id(_V___1),[AttributeDecl(Static,ConstDecl(Id($0),ArrayType(43888,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($uB4h),ArrayType(43888,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(tH),ArrayType(43888,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_hU_),ArrayType(43888,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 375))

    def test_376(self):
        line = '''Class n32mof6{}Class n9_g{}Class a4:f_{n(T6,_x:Boolean ;K__:Float ;_:Boolean ;M_g_:Boolean ){}Constructor (q1,__rc___H:__n;uY_,o,__,_:Array [Array [Int ,0X32],0x14]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(n32mof6),[]),ClassDecl(Id(n9_g),[]),ClassDecl(Id(a4),Id(f_),[MethodDecl(Id(n),Instance,[param(Id(T6),BoolType),param(Id(_x),BoolType),param(Id(K__),FloatType),param(Id(_),BoolType),param(Id(M_g_),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(q1),ClassType(Id(__n))),param(Id(__rc___H),ClassType(Id(__n))),param(Id(uY_),ArrayType(20,ArrayType(50,IntType))),param(Id(o),ArrayType(20,ArrayType(50,IntType))),param(Id(__),ArrayType(20,ArrayType(50,IntType))),param(Id(_),ArrayType(20,ArrayType(50,IntType)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 376))

    def test_377(self):
        line = '''Class _8{}Class I:pa{}Class _3:__q{}Class k_{}Class z:kz{Var $_,_,$_,$j:Array [Array [Float ,027],027];Val $r_:Array [Array [Array [Int ,0XC],0XC],0B1];Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_8),[]),ClassDecl(Id(I),Id(pa),[]),ClassDecl(Id(_3),Id(__q),[]),ClassDecl(Id(k_),[]),ClassDecl(Id(z),Id(kz),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(23,ArrayType(23,FloatType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(23,ArrayType(23,FloatType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(23,ArrayType(23,FloatType)))),AttributeDecl(Static,VarDecl(Id($j),ArrayType(23,ArrayType(23,FloatType)))),AttributeDecl(Static,ConstDecl(Id($r_),ArrayType(1,ArrayType(12,ArrayType(12,IntType))),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 377))

    def test_378(self):
        line = '''Class o{_7(_wk:Array [Array [Array [Array [Array [Array [Int ,0B1],046],95],0B11010],06_3],0b110110];e,_Z:B;__T,_L_cL:o0;_:Array [Array [Int ,046],0b1];_BYAv:_9;_:String ;_,FN,_:Array [Int ,0B11010];a_u__z,mI,B6:Array [Float ,8]){} }'''
        expect = '''Program([ClassDecl(Id(o),[MethodDecl(Id(_7),Instance,[param(Id(_wk),ArrayType(54,ArrayType(51,ArrayType(26,ArrayType(95,ArrayType(38,ArrayType(1,IntType))))))),param(Id(e),ClassType(Id(B))),param(Id(_Z),ClassType(Id(B))),param(Id(__T),ClassType(Id(o0))),param(Id(_L_cL),ClassType(Id(o0))),param(Id(_),ArrayType(1,ArrayType(38,IntType))),param(Id(_BYAv),ClassType(Id(_9))),param(Id(_),StringType),param(Id(_),ArrayType(26,IntType)),param(Id(FN),ArrayType(26,IntType)),param(Id(_),ArrayType(26,IntType)),param(Id(a_u__z),ArrayType(8,FloatType)),param(Id(mI),ArrayType(8,FloatType)),param(Id(B6),ArrayType(8,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 378))

    def test_379(self):
        line = '''Class _{Constructor (__:Int ;_,_r__,_:Int ;w_,U2_0:Array [Array [Boolean ,0X2],0B11];_,Y:Q;_,B,_:_431v;__3:_;I,h3_6,B:Array [Array [Boolean ,0B111110],42];__:Array [Int ,047];cfeL__dG,f,_8:Array [Array [Array [String ,05_0],0b1_1_1],0XB];_:String ){}Constructor (){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),IntType),param(Id(_),IntType),param(Id(_r__),IntType),param(Id(_),IntType),param(Id(w_),ArrayType(3,ArrayType(2,BoolType))),param(Id(U2_0),ArrayType(3,ArrayType(2,BoolType))),param(Id(_),ClassType(Id(Q))),param(Id(Y),ClassType(Id(Q))),param(Id(_),ClassType(Id(_431v))),param(Id(B),ClassType(Id(_431v))),param(Id(_),ClassType(Id(_431v))),param(Id(__3),ClassType(Id(_))),param(Id(I),ArrayType(42,ArrayType(62,BoolType))),param(Id(h3_6),ArrayType(42,ArrayType(62,BoolType))),param(Id(B),ArrayType(42,ArrayType(62,BoolType))),param(Id(__),ArrayType(39,IntType)),param(Id(cfeL__dG),ArrayType(11,ArrayType(7,ArrayType(40,StringType)))),param(Id(f),ArrayType(11,ArrayType(7,ArrayType(40,StringType)))),param(Id(_8),ArrayType(11,ArrayType(7,ArrayType(40,StringType)))),param(Id(_),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 379))

    def test_380(self):
        line = '''Class _{}Class m_:_{Val o_:Array [Boolean ,0X9_4C];Val $3:Boolean ;b(__6,_:String ){} }Class _:_sc{}Class _{}Class _:_L{Constructor (P__:Array [Array [Array [Float ,0B10010],0B10010],0B1_11]){} }Class J5{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(m_),Id(_),[AttributeDecl(Instance,ConstDecl(Id(o_),ArrayType(2380,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($3),BoolType,None)),MethodDecl(Id(b),Instance,[param(Id(__6),StringType),param(Id(_),StringType)],Block([]))]),ClassDecl(Id(_),Id(_sc),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(_L),[MethodDecl(Id(Constructor),Instance,[param(Id(P__),ArrayType(7,ArrayType(18,ArrayType(18,FloatType))))],Block([]))]),ClassDecl(Id(J5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 380))

    def test_381(self):
        line = '''Class _LP4_3035:YG3{$_g5(__7_0,_8:Array [Array [Array [Array [Array [Array [Int ,0x6],022],0B1],85],0xB],020]){}Constructor (_:Int ;S2_,b,_:Int ;__,XF_6:Float ){}Constructor (_4P0n_A:Float ){}_9Up_(){}Destructor (){Var e,D_,_:Array [String ,0X37C7];} }'''
        expect = '''Program([ClassDecl(Id(_LP4_3035),Id(YG3),[MethodDecl(Id($_g5),Static,[param(Id(__7_0),ArrayType(16,ArrayType(11,ArrayType(85,ArrayType(1,ArrayType(18,ArrayType(6,IntType))))))),param(Id(_8),ArrayType(16,ArrayType(11,ArrayType(85,ArrayType(1,ArrayType(18,ArrayType(6,IntType)))))))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(S2_),IntType),param(Id(b),IntType),param(Id(_),IntType),param(Id(__),FloatType),param(Id(XF_6),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_4P0n_A),FloatType)],Block([])),MethodDecl(Id(_9Up_),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(e),ArrayType(14279,StringType)),VarDecl(Id(D_),ArrayType(14279,StringType)),VarDecl(Id(_),ArrayType(14279,StringType))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 381))

    def test_382(self):
        line = '''Class _6{Var $w4,$4,y7:b_;Constructor (_Y,T_:Boolean ){Val __:Float ;}Var t9zO:Array [Array [Float ,0B1_01],0B1_1]=---New _()._.S()*--_s__::$__._+-p::$_O;Val $__,U5,$7m1r:Array [String ,014];}'''
        expect = '''Program([ClassDecl(Id(_6),[AttributeDecl(Static,VarDecl(Id($w4),ClassType(Id(b_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($4),ClassType(Id(b_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(y7),ClassType(Id(b_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_Y),BoolType),param(Id(T_),BoolType)],Block([ConstDecl(Id(__),FloatType,None)])),AttributeDecl(Instance,VarDecl(Id(t9zO),ArrayType(3,ArrayType(5,FloatType)),BinaryOp(+,BinaryOp(*,UnaryOp(-,UnaryOp(-,UnaryOp(-,CallExpr(FieldAccess(NewExpr(Id(_),[]),Id(_)),Id(S),[])))),UnaryOp(-,UnaryOp(-,FieldAccess(FieldAccess(Id(_s__),Id($__)),Id(_))))),UnaryOp(-,FieldAccess(Id(p),Id($_O)))))),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(12,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(U5),ArrayType(12,StringType),None)),AttributeDecl(Static,ConstDecl(Id($7m1r),ArrayType(12,StringType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 382))

    def test_383(self):
        line = '''Class ai:_{$_9(L9l_8y:__;_,p_:__;_lm,Z,i:String ;_T9:Boolean ;__1XZ,_Z,_r:String ){}Val $81K,$z_AD_,$S:Array [Array [Array [Array [Array [Array [Boolean ,0B1_1],0xA],2_5],0B1],0X23],0b11000];}Class _{}Class _:t{}'''
        expect = '''Program([ClassDecl(Id(ai),Id(_),[MethodDecl(Id($_9),Static,[param(Id(L9l_8y),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(p_),ClassType(Id(__))),param(Id(_lm),StringType),param(Id(Z),StringType),param(Id(i),StringType),param(Id(_T9),BoolType),param(Id(__1XZ),StringType),param(Id(_Z),StringType),param(Id(_r),StringType)],Block([])),AttributeDecl(Static,ConstDecl(Id($81K),ArrayType(24,ArrayType(35,ArrayType(1,ArrayType(25,ArrayType(10,ArrayType(3,BoolType)))))),None)),AttributeDecl(Static,ConstDecl(Id($z_AD_),ArrayType(24,ArrayType(35,ArrayType(1,ArrayType(25,ArrayType(10,ArrayType(3,BoolType)))))),None)),AttributeDecl(Static,ConstDecl(Id($S),ArrayType(24,ArrayType(35,ArrayType(1,ArrayType(25,ArrayType(10,ArrayType(3,BoolType)))))),None))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(t),[])])'''
        self.assertTrue(TestAST.test(line, expect, 383))

    def test_384(self):
        line = '''Class u{Destructor (){} }Class E:_{Destructor (){Break ;} }Class _q:_{$_4A(_65:Array [Array [String ,8_8],05_627]){Break ;}$K(){} }Class _4__82{}Class __:_{Val _8a63K__l,$_XP:__;}Class FB:_{}Class D:__{Val $_:_;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(u),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(E),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(_q),Id(_),[MethodDecl(Id($_4A),Static,[param(Id(_65),ArrayType(2967,ArrayType(88,StringType)))],Block([Break])),MethodDecl(Id($K),Static,[],Block([]))]),ClassDecl(Id(_4__82),[]),ClassDecl(Id(__),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_8a63K__l),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_XP),ClassType(Id(__)),NullLiteral()))]),ClassDecl(Id(FB),Id(_),[]),ClassDecl(Id(D),Id(__),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 384))

    def test_385(self):
        line = '''Class x:_{$_(){} }Class Z_{Constructor (__C:Boolean ){}Val $7__n9_e:Boolean ;}Class z_9{Constructor (__:Array [Float ,64];_:Float ;L680,v,Gx:Boolean ;_,_:Array [Array [Array [String ,01_7104_5_24_20],03],64]){}Destructor (){} }Class I:B3{y_7(_9,_:Int ;___3,_1:o){} }'''
        expect = '''Program([ClassDecl(Id(x),Id(_),[MethodDecl(Id($_),Static,[],Block([]))]),ClassDecl(Id(Z_),[MethodDecl(Id(Constructor),Instance,[param(Id(__C),BoolType)],Block([])),AttributeDecl(Static,ConstDecl(Id($7__n9_e),BoolType,None))]),ClassDecl(Id(z_9),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(64,FloatType)),param(Id(_),FloatType),param(Id(L680),BoolType),param(Id(v),BoolType),param(Id(Gx),BoolType),param(Id(_),ArrayType(64,ArrayType(3,ArrayType(253908240,StringType)))),param(Id(_),ArrayType(64,ArrayType(3,ArrayType(253908240,StringType))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(I),Id(B3),[MethodDecl(Id(y_7),Instance,[param(Id(_9),IntType),param(Id(_),IntType),param(Id(___3),ClassType(Id(o))),param(Id(_1),ClassType(Id(o)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 385))

    def test_386(self):
        line = '''Class _{Constructor (S:__5__8;q,_,_:G;_X:Array [Int ,94];U_:Int ;_:Int ;_5,___6,J5:Array [Array [Array [Array [Array [Array [Boolean ,065],065],0xC7],0b1_0],065],0b100010];xu1,__4:Array [Array [Int ,0x60],065];L,_:Array [Array [Array [Float ,94],011_6],94]){Return ;}Var n:Int ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(S),ClassType(Id(__5__8))),param(Id(q),ClassType(Id(G))),param(Id(_),ClassType(Id(G))),param(Id(_),ClassType(Id(G))),param(Id(_X),ArrayType(94,IntType)),param(Id(U_),IntType),param(Id(_),IntType),param(Id(_5),ArrayType(34,ArrayType(53,ArrayType(2,ArrayType(199,ArrayType(53,ArrayType(53,BoolType))))))),param(Id(___6),ArrayType(34,ArrayType(53,ArrayType(2,ArrayType(199,ArrayType(53,ArrayType(53,BoolType))))))),param(Id(J5),ArrayType(34,ArrayType(53,ArrayType(2,ArrayType(199,ArrayType(53,ArrayType(53,BoolType))))))),param(Id(xu1),ArrayType(53,ArrayType(96,IntType))),param(Id(__4),ArrayType(53,ArrayType(96,IntType))),param(Id(L),ArrayType(94,ArrayType(78,ArrayType(94,FloatType)))),param(Id(_),ArrayType(94,ArrayType(78,ArrayType(94,FloatType))))],Block([Return()])),AttributeDecl(Instance,VarDecl(Id(n),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 386))

    def test_387(self):
        line = '''Class _66{Val _,$_,Y:D;Constructor (){Return ;} }Class _a__{}Class _7f:_{}Class u:H{}Class _:U_{Var $_:Array [Float ,0b1001111];Constructor (){Var __3,_0D:Array [Array [Array [Array [Float ,04_7],075],0B111],0b1_11];Return ;} }'''
        expect = '''Program([ClassDecl(Id(_66),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(D)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(D)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(Y),ClassType(Id(D)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([Return()]))]),ClassDecl(Id(_a__),[]),ClassDecl(Id(_7f),Id(_),[]),ClassDecl(Id(u),Id(H),[]),ClassDecl(Id(_),Id(U_),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(79,FloatType))),MethodDecl(Id(Constructor),Instance,[],Block([VarDecl(Id(__3),ArrayType(7,ArrayType(7,ArrayType(61,ArrayType(39,FloatType))))),VarDecl(Id(_0D),ArrayType(7,ArrayType(7,ArrayType(61,ArrayType(39,FloatType))))),Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 387))

    def test_388(self):
        line = '''Class g{}Class u_8_{Constructor (_:Array [Array [Array [Array [Array [Array [Array [Boolean ,0B1011000],0B1011000],0B111],3],0B1],0X50],0B11];J:Array [Boolean ,074]){}Val $__:_F3;Val __E_4:Array [Int ,0x6_E];_0y_(w,I_:Int ;Jh:Array [Array [Array [Array [Array [Int ,0b1_0_01],04],5],0X50],0X9];P,__:String ;Hv,_:Array [Float ,3_7]){}Var _:Array [String ,0B1_0];}'''
        expect = '''Program([ClassDecl(Id(g),[]),ClassDecl(Id(u_8_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(3,ArrayType(80,ArrayType(1,ArrayType(3,ArrayType(7,ArrayType(88,ArrayType(88,BoolType)))))))),param(Id(J),ArrayType(60,BoolType))],Block([])),AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(_F3)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__E_4),ArrayType(110,IntType),None)),MethodDecl(Id(_0y_),Instance,[param(Id(w),IntType),param(Id(I_),IntType),param(Id(Jh),ArrayType(9,ArrayType(80,ArrayType(5,ArrayType(4,ArrayType(9,IntType)))))),param(Id(P),StringType),param(Id(__),StringType),param(Id(Hv),ArrayType(37,FloatType)),param(Id(_),ArrayType(37,FloatType))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(2,StringType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 388))

    def test_389(self):
        line = '''Class _{}Class _m7:_7{___4_A(_:Array [Array [Int ,0X7],8];j_G_1,l:R;_7:Array [Array [Array [Int ,0X20],0X20],06_2_4];_T_,mA,_:String ){}H7(__i:j;X6:Float ;__Z2l7,xT:S){} }Class B:T{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_m7),Id(_7),[MethodDecl(Id(___4_A),Instance,[param(Id(_),ArrayType(8,ArrayType(7,IntType))),param(Id(j_G_1),ClassType(Id(R))),param(Id(l),ClassType(Id(R))),param(Id(_7),ArrayType(404,ArrayType(32,ArrayType(32,IntType)))),param(Id(_T_),StringType),param(Id(mA),StringType),param(Id(_),StringType)],Block([])),MethodDecl(Id(H7),Instance,[param(Id(__i),ClassType(Id(j))),param(Id(X6),FloatType),param(Id(__Z2l7),ClassType(Id(S))),param(Id(xT),ClassType(Id(S)))],Block([]))]),ClassDecl(Id(B),Id(T),[])])'''
        self.assertTrue(TestAST.test(line, expect, 389))

    def test_390(self):
        line = '''Class _8:_{}Class w:_{$Q(__3H:Int ;T:Array [Array [Int ,0X4B],0X4B];ae6__r_:Array [Int ,27];k,_78:Array [String ,0b11];_aLi1_aX,KS7,zu,_,_:_){} }Class _{}Class _q:_2_{}Class __57D5{}'''
        expect = '''Program([ClassDecl(Id(_8),Id(_),[]),ClassDecl(Id(w),Id(_),[MethodDecl(Id($Q),Static,[param(Id(__3H),IntType),param(Id(T),ArrayType(75,ArrayType(75,IntType))),param(Id(ae6__r_),ArrayType(27,IntType)),param(Id(k),ArrayType(3,StringType)),param(Id(_78),ArrayType(3,StringType)),param(Id(_aLi1_aX),ClassType(Id(_))),param(Id(KS7),ClassType(Id(_))),param(Id(zu),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_q),Id(_2_),[]),ClassDecl(Id(__57D5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 390))

    def test_391(self):
        line = '''Class b_{Constructor (_,__:s){}Constructor (_3C3Lu:Array [Array [Int ,0xD],06_040_3];W__,o,Y0,a:Array [Array [Array [Array [Int ,0X56],0b10_1],8],0xC_77_F];T:Array [Array [Array [Array [Boolean ,0B1000011],0b1010100],7],0b1_10];y_:_8){Continue ;}Val __1e:_P;}'''
        expect = '''Program([ClassDecl(Id(b_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(s))),param(Id(__),ClassType(Id(s)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_3C3Lu),ArrayType(24835,ArrayType(13,IntType))),param(Id(W__),ArrayType(51071,ArrayType(8,ArrayType(5,ArrayType(86,IntType))))),param(Id(o),ArrayType(51071,ArrayType(8,ArrayType(5,ArrayType(86,IntType))))),param(Id(Y0),ArrayType(51071,ArrayType(8,ArrayType(5,ArrayType(86,IntType))))),param(Id(a),ArrayType(51071,ArrayType(8,ArrayType(5,ArrayType(86,IntType))))),param(Id(T),ArrayType(6,ArrayType(7,ArrayType(84,ArrayType(67,BoolType))))),param(Id(y_),ClassType(Id(_8)))],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(__1e),ClassType(Id(_P)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 391))

    def test_392(self):
        line = '''Class H:_{}Class _:g1{Val $f,$_t_M_p:__l;}Class t9Dr:vk8{Val $_780,Q,_p5e,z:_5;_i_6(X__1__:Array [Int ,0X64]){Val k,U9:Boolean ;} }Class _6:Ps4N_21{Var _,$TW6:Array [String ,68];}'''
        expect = '''Program([ClassDecl(Id(H),Id(_),[]),ClassDecl(Id(_),Id(g1),[AttributeDecl(Static,ConstDecl(Id($f),ClassType(Id(__l)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_t_M_p),ClassType(Id(__l)),NullLiteral()))]),ClassDecl(Id(t9Dr),Id(vk8),[AttributeDecl(Static,ConstDecl(Id($_780),ClassType(Id(_5)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(Q),ClassType(Id(_5)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_p5e),ClassType(Id(_5)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(z),ClassType(Id(_5)),NullLiteral())),MethodDecl(Id(_i_6),Instance,[param(Id(X__1__),ArrayType(100,IntType))],Block([ConstDecl(Id(k),BoolType,None),ConstDecl(Id(U9),BoolType,None)]))]),ClassDecl(Id(_6),Id(Ps4N_21),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(68,StringType))),AttributeDecl(Static,VarDecl(Id($TW6),ArrayType(68,StringType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 392))

    def test_393(self):
        line = '''Class pBToY3{Var $9_K1,$_,__,$__,$__,x,p5:String ;Var $_,_8,b3_,_E,_,$F76_t_:Float ;}Class W{$_(){} }Class _{$pA_J_2T3(i3_,_:Array [String ,01];l,T:Boolean ;E:_){}Constructor (){} }Class N1x{}'''
        expect = '''Program([ClassDecl(Id(pBToY3),[AttributeDecl(Static,VarDecl(Id($9_K1),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Instance,VarDecl(Id(__),StringType)),AttributeDecl(Static,VarDecl(Id($__),StringType)),AttributeDecl(Static,VarDecl(Id($__),StringType)),AttributeDecl(Instance,VarDecl(Id(x),StringType)),AttributeDecl(Instance,VarDecl(Id(p5),StringType)),AttributeDecl(Static,VarDecl(Id($_),FloatType)),AttributeDecl(Instance,VarDecl(Id(_8),FloatType)),AttributeDecl(Instance,VarDecl(Id(b3_),FloatType)),AttributeDecl(Instance,VarDecl(Id(_E),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Static,VarDecl(Id($F76_t_),FloatType))]),ClassDecl(Id(W),[MethodDecl(Id($_),Static,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id($pA_J_2T3),Static,[param(Id(i3_),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(l),BoolType),param(Id(T),BoolType),param(Id(E),ClassType(Id(_)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(N1x),[])])'''
        self.assertTrue(TestAST.test(line, expect, 393))

    def test_394(self):
        line = '''Class p:E{Val _,_v,m_:String ;Constructor (fL_,_,z_,_3,_r_1,qpc:Int ;_1x,w_:Array [Array [Array [Float ,06],90],0X20];nJ,d,tm,T:Array [Array [Array [String ,90],03],01_72];_7,D,____,_:Array [String ,06]){} }'''
        expect = '''Program([ClassDecl(Id(p),Id(E),[AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_v),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(m_),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(fL_),IntType),param(Id(_),IntType),param(Id(z_),IntType),param(Id(_3),IntType),param(Id(_r_1),IntType),param(Id(qpc),IntType),param(Id(_1x),ArrayType(32,ArrayType(90,ArrayType(6,FloatType)))),param(Id(w_),ArrayType(32,ArrayType(90,ArrayType(6,FloatType)))),param(Id(nJ),ArrayType(122,ArrayType(3,ArrayType(90,StringType)))),param(Id(d),ArrayType(122,ArrayType(3,ArrayType(90,StringType)))),param(Id(tm),ArrayType(122,ArrayType(3,ArrayType(90,StringType)))),param(Id(T),ArrayType(122,ArrayType(3,ArrayType(90,StringType)))),param(Id(_7),ArrayType(6,StringType)),param(Id(D),ArrayType(6,StringType)),param(Id(____),ArrayType(6,StringType)),param(Id(_),ArrayType(6,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 394))

    def test_395(self):
        line = '''Class _:t_{}Class _h{Val __:Array [Float ,0b1100011];}Class H{Constructor (W5:Array [Array [Array [Int ,01],0b1_0],0xF5_C];M0,_9_:Array [Boolean ,012]){}Destructor (){Var _,_,_3,__1:Int ;Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(t_),[]),ClassDecl(Id(_h),[AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(99,FloatType),None))]),ClassDecl(Id(H),[MethodDecl(Id(Constructor),Instance,[param(Id(W5),ArrayType(3932,ArrayType(2,ArrayType(1,IntType)))),param(Id(M0),ArrayType(10,BoolType)),param(Id(_9_),ArrayType(10,BoolType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(_),IntType),VarDecl(Id(_),IntType),VarDecl(Id(_3),IntType),VarDecl(Id(__1),IntType),Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 395))

    def test_396(self):
        line = '''Class _{}Class u{}Class Sp{}Class _:P{}Class _{Destructor (){}Constructor (_i__,A_:Array [Array [Float ,0B1000011],0B1]){} }Class _M{Var H,$6T,d__m,$_,n:_x8_;Constructor (){} }Class _N:_{}Class __{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(u),[]),ClassDecl(Id(Sp),[]),ClassDecl(Id(_),Id(P),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_i__),ArrayType(1,ArrayType(67,FloatType))),param(Id(A_),ArrayType(1,ArrayType(67,FloatType)))],Block([]))]),ClassDecl(Id(_M),[AttributeDecl(Instance,VarDecl(Id(H),ClassType(Id(_x8_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($6T),ClassType(Id(_x8_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(d__m),ClassType(Id(_x8_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_x8_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(n),ClassType(Id(_x8_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_N),Id(_),[]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 396))

    def test_397(self):
        line = '''Class N{Val _8,$x,_:String ;}Class _{Constructor (){Continue ;} }Class Y:_G{Destructor (){Var Jr1c:Array [Array [Float ,0x4],065];Return ;}Destructor (){}Val B7_8_:Array [String ,70];Constructor (_5_,_,_,g:Int ;A:Float ){}Val H,_:__T;}Class E5:_{}'''
        expect = '''Program([ClassDecl(Id(N),[AttributeDecl(Instance,ConstDecl(Id(_8),StringType,None)),AttributeDecl(Static,ConstDecl(Id($x),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([Continue]))]),ClassDecl(Id(Y),Id(_G),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(Jr1c),ArrayType(53,ArrayType(4,FloatType))),Return()])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(B7_8_),ArrayType(70,StringType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_5_),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(g),IntType),param(Id(A),FloatType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(H),ClassType(Id(__T)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(__T)),NullLiteral()))]),ClassDecl(Id(E5),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 397))

    def test_398(self):
        line = '''Class _{Val t_2_,$kt_3_7x:Array [Array [Array [Int ,88],017],74];}Class _{Constructor (Nh:Int ){___13::$O();} }Class dJ7{}Class _OpBBb_E{$_(__8Jh_,w:Array [Array [Boolean ,05],017]){} }Class Zu{}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(t_2_),ArrayType(74,ArrayType(15,ArrayType(88,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($kt_3_7x),ArrayType(74,ArrayType(15,ArrayType(88,IntType))),None))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(Nh),IntType)],Block([Call(Id(___13),Id($O),[])]))]),ClassDecl(Id(dJ7),[]),ClassDecl(Id(_OpBBb_E),[MethodDecl(Id($_),Static,[param(Id(__8Jh_),ArrayType(15,ArrayType(5,BoolType))),param(Id(w),ArrayType(15,ArrayType(5,BoolType)))],Block([]))]),ClassDecl(Id(Zu),[])])'''
        self.assertTrue(TestAST.test(line, expect, 398))

    def test_399(self):
        line = '''Class v4:__N3{}Class Lf_0_w{}Class _a_{Destructor (){Break ;}Constructor (U_:Array [Array [Array [String ,01],5_7],0b111011];_,_J3T:Boolean ;_23:_1___7){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(v4),Id(__N3),[]),ClassDecl(Id(Lf_0_w),[]),ClassDecl(Id(_a_),[MethodDecl(Id(Destructor),Instance,[],Block([Break])),MethodDecl(Id(Constructor),Instance,[param(Id(U_),ArrayType(59,ArrayType(57,ArrayType(1,StringType)))),param(Id(_),BoolType),param(Id(_J3T),BoolType),param(Id(_23),ClassType(Id(_1___7)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 399))

    def test_400(self):
        line = '''Class Y{Var $0,$v:Array [Array [Array [Array [Array [String ,0b1],0x2B],07],0xC_CA],077];}Class q_:_D{}Class _4_:___{Constructor (NZ,o__,__:Array [String ,69];_k:_;_H:_;___,_6,_63c_:String ){} }Class U6_{}Class _{}Class B:_2{}Class zU{}Class _02_y_{}'''
        expect = '''Program([ClassDecl(Id(Y),[AttributeDecl(Static,VarDecl(Id($0),ArrayType(63,ArrayType(3274,ArrayType(7,ArrayType(43,ArrayType(1,StringType))))))),AttributeDecl(Static,VarDecl(Id($v),ArrayType(63,ArrayType(3274,ArrayType(7,ArrayType(43,ArrayType(1,StringType)))))))]),ClassDecl(Id(q_),Id(_D),[]),ClassDecl(Id(_4_),Id(___),[MethodDecl(Id(Constructor),Instance,[param(Id(NZ),ArrayType(69,StringType)),param(Id(o__),ArrayType(69,StringType)),param(Id(__),ArrayType(69,StringType)),param(Id(_k),ClassType(Id(_))),param(Id(_H),ClassType(Id(_))),param(Id(___),StringType),param(Id(_6),StringType),param(Id(_63c_),StringType)],Block([]))]),ClassDecl(Id(U6_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(B),Id(_2),[]),ClassDecl(Id(zU),[]),ClassDecl(Id(_02_y_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 400))

    def test_401(self):
        line = '''Class _:_{}Class _:c__72__{}Class _0{}Class taO:_35Q{}Class _:O{}Class _:H{Constructor (){Continue ;}_(_,L,H:Y;_,_:Int ;J,j,_0_:String ;f6_:Array [Array [Float ,013],0B111110]){} }Class q{Val $7u:_;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),Id(c__72__),[]),ClassDecl(Id(_0),[]),ClassDecl(Id(taO),Id(_35Q),[]),ClassDecl(Id(_),Id(O),[]),ClassDecl(Id(_),Id(H),[MethodDecl(Id(Constructor),Instance,[],Block([Continue])),MethodDecl(Id(_),Instance,[param(Id(_),ClassType(Id(Y))),param(Id(L),ClassType(Id(Y))),param(Id(H),ClassType(Id(Y))),param(Id(_),IntType),param(Id(_),IntType),param(Id(J),StringType),param(Id(j),StringType),param(Id(_0_),StringType),param(Id(f6_),ArrayType(62,ArrayType(11,FloatType)))],Block([]))]),ClassDecl(Id(q),[AttributeDecl(Static,ConstDecl(Id($7u),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 401))

    def test_402(self):
        line = '''Class _:tQ{Constructor (_:Float ){Return ;}Var _:Array [Array [String ,0xA_E_6DEA],0x2A];}Class P:c{Constructor (_:Array [Array [Array [Float ,8],0B1],0X4_B]){} }Class X_:_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(tQ),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType)],Block([Return()])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(42,ArrayType(11431402,StringType))))]),ClassDecl(Id(P),Id(c),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(75,ArrayType(1,ArrayType(8,FloatType))))],Block([]))]),ClassDecl(Id(X_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 402))

    def test_403(self):
        line = '''Class __F{_X(v,_:Float ;_:Array [Array [Boolean ,89],0B1_1_0_11]){}Val U08,_,__7_,TgZ:Array [Array [String ,0X3C],89];Constructor (){Break ;Return ;}$82(_:Int ;_p_,_a_:Array [Array [Float ,071],0XC_B]){} }'''
        expect = '''Program([ClassDecl(Id(__F),[MethodDecl(Id(_X),Instance,[param(Id(v),FloatType),param(Id(_),FloatType),param(Id(_),ArrayType(27,ArrayType(89,BoolType)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(U08),ArrayType(89,ArrayType(60,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(89,ArrayType(60,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(__7_),ArrayType(89,ArrayType(60,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(TgZ),ArrayType(89,ArrayType(60,StringType)),None)),MethodDecl(Id(Constructor),Instance,[],Block([Break,Return()])),MethodDecl(Id($82),Static,[param(Id(_),IntType),param(Id(_p_),ArrayType(203,ArrayType(57,FloatType))),param(Id(_a_),ArrayType(203,ArrayType(57,FloatType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 403))

    def test_404(self):
        line = '''Class _:_7_9_GQ{Var _x:String ;}Class k:_{}Class f{Var G__x_:Array [Boolean ,9_14];}Class __:G0{}Class f:_{Val $t,$66:Array [Array [Float ,41],033];Constructor (m_,_5,z:String ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_7_9_GQ),[AttributeDecl(Instance,VarDecl(Id(_x),StringType))]),ClassDecl(Id(k),Id(_),[]),ClassDecl(Id(f),[AttributeDecl(Instance,VarDecl(Id(G__x_),ArrayType(914,BoolType)))]),ClassDecl(Id(__),Id(G0),[]),ClassDecl(Id(f),Id(_),[AttributeDecl(Static,ConstDecl(Id($t),ArrayType(27,ArrayType(41,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($66),ArrayType(27,ArrayType(41,FloatType)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(m_),StringType),param(Id(_5),StringType),param(Id(z),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 404))

    def test_405(self):
        line = '''Class ygh{}Class I:_tl{Constructor (_E6:_;v1l:Array [Array [Array [Array [Array [Array [String ,065_0],060],0130],0B1],0B11010],07]){}Destructor (){} }Class k:_v82lG_{}Class u{}'''
        expect = '''Program([ClassDecl(Id(ygh),[]),ClassDecl(Id(I),Id(_tl),[MethodDecl(Id(Constructor),Instance,[param(Id(_E6),ClassType(Id(_))),param(Id(v1l),ArrayType(7,ArrayType(26,ArrayType(1,ArrayType(88,ArrayType(48,ArrayType(424,StringType)))))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(k),Id(_v82lG_),[]),ClassDecl(Id(u),[])])'''
        self.assertTrue(TestAST.test(line, expect, 405))

    def test_406(self):
        line = '''Class Bw0{Constructor (_W5,Y:j;Us,g:Int ;__0,V,_:Boolean ;Q:Array [String ,06];F_:Float ;_:__;mp6,_:Array [Array [Array [Array [Boolean ,0x4D],0B1011010],0b1111],0x7_B];_:Array [Array [Boolean ,4],0x9]){} }'''
        expect = '''Program([ClassDecl(Id(Bw0),[MethodDecl(Id(Constructor),Instance,[param(Id(_W5),ClassType(Id(j))),param(Id(Y),ClassType(Id(j))),param(Id(Us),IntType),param(Id(g),IntType),param(Id(__0),BoolType),param(Id(V),BoolType),param(Id(_),BoolType),param(Id(Q),ArrayType(6,StringType)),param(Id(F_),FloatType),param(Id(_),ClassType(Id(__))),param(Id(mp6),ArrayType(123,ArrayType(15,ArrayType(90,ArrayType(77,BoolType))))),param(Id(_),ArrayType(123,ArrayType(15,ArrayType(90,ArrayType(77,BoolType))))),param(Id(_),ArrayType(9,ArrayType(4,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 406))

    def test_407(self):
        line = '''Class _{}Class _:_{Constructor (m:Boolean ){}Var _7T,$9_,$s1,C:Array [Array [Boolean ,07],040];}Class f:y{}Class m_6:_{$3(T,_89,_6:Array [Array [Boolean ,0X1],6]){}Val $_,__b:Int ;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(m),BoolType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_7T),ArrayType(32,ArrayType(7,BoolType)))),AttributeDecl(Static,VarDecl(Id($9_),ArrayType(32,ArrayType(7,BoolType)))),AttributeDecl(Static,VarDecl(Id($s1),ArrayType(32,ArrayType(7,BoolType)))),AttributeDecl(Instance,VarDecl(Id(C),ArrayType(32,ArrayType(7,BoolType))))]),ClassDecl(Id(f),Id(y),[]),ClassDecl(Id(m_6),Id(_),[MethodDecl(Id($3),Static,[param(Id(T),ArrayType(6,ArrayType(1,BoolType))),param(Id(_89),ArrayType(6,ArrayType(1,BoolType))),param(Id(_6),ArrayType(6,ArrayType(1,BoolType)))],Block([])),AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(__b),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 407))

    def test_408(self):
        line = '''Class e5J___S6_5{$39(_,_6_:Array [Array [Array [Array [Int ,0B1011011],0113],0113],59];py:Array [Float ,0x7];B_:Array [Boolean ,0X4]){}Val R,_,$r4,$_:I6;}Class _Lb{Val d,c,$e,__7K:Array [Float ,0x1B];Val s:Array [String ,0b1100100];C8_(_:Array [Array [Float ,1],0B1_01_11]){} }'''
        expect = '''Program([ClassDecl(Id(e5J___S6_5),[MethodDecl(Id($39),Static,[param(Id(_),ArrayType(59,ArrayType(75,ArrayType(75,ArrayType(91,IntType))))),param(Id(_6_),ArrayType(59,ArrayType(75,ArrayType(75,ArrayType(91,IntType))))),param(Id(py),ArrayType(7,FloatType)),param(Id(B_),ArrayType(4,BoolType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(R),ClassType(Id(I6)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(I6)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($r4),ClassType(Id(I6)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(I6)),NullLiteral()))]),ClassDecl(Id(_Lb),[AttributeDecl(Instance,ConstDecl(Id(d),ArrayType(27,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(c),ArrayType(27,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($e),ArrayType(27,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(__7K),ArrayType(27,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(s),ArrayType(100,StringType),None)),MethodDecl(Id(C8_),Instance,[param(Id(_),ArrayType(23,ArrayType(1,FloatType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 408))

    def test_409(self):
        line = '''Class _{Constructor (D,q:_;b2,_:Array [Int ,5];d,e8:Array [Array [Array [Array [Boolean ,0b1011111],0b1011111],05],0B1001001];_1E,_Ez:p;_,_,__:_gE){}Destructor (){}Var $3O_:n;_(){Return ;} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(D),ClassType(Id(_))),param(Id(q),ClassType(Id(_))),param(Id(b2),ArrayType(5,IntType)),param(Id(_),ArrayType(5,IntType)),param(Id(d),ArrayType(73,ArrayType(5,ArrayType(95,ArrayType(95,BoolType))))),param(Id(e8),ArrayType(73,ArrayType(5,ArrayType(95,ArrayType(95,BoolType))))),param(Id(_1E),ClassType(Id(p))),param(Id(_Ez),ClassType(Id(p))),param(Id(_),ClassType(Id(_gE))),param(Id(_),ClassType(Id(_gE))),param(Id(__),ClassType(Id(_gE)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($3O_),ClassType(Id(n)),NullLiteral())),MethodDecl(Id(_),Instance,[],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 409))

    def test_410(self):
        line = '''Class S{$_c_(___,P2,_,_:Array [Int ,79]){} }Class _0:Q_J{}Class N_6{$___(B,_,_,_1:Int ;_:_0;L,_:String ;_g_:Int ;V0,Fy_1iV:Array [Int ,0160_44];f_9_0,k:Array [Array [Boolean ,2_1],01_2]){}$_(_,_9,_:Float ;y:Array [Array [Array [Int ,0X9_5],0x5D],0X6_9]){} }Class l4__3y_{}'''
        expect = '''Program([ClassDecl(Id(S),[MethodDecl(Id($_c_),Static,[param(Id(___),ArrayType(79,IntType)),param(Id(P2),ArrayType(79,IntType)),param(Id(_),ArrayType(79,IntType)),param(Id(_),ArrayType(79,IntType))],Block([]))]),ClassDecl(Id(_0),Id(Q_J),[]),ClassDecl(Id(N_6),[MethodDecl(Id($___),Static,[param(Id(B),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(_1),IntType),param(Id(_),ClassType(Id(_0))),param(Id(L),StringType),param(Id(_),StringType),param(Id(_g_),IntType),param(Id(V0),ArrayType(7204,IntType)),param(Id(Fy_1iV),ArrayType(7204,IntType)),param(Id(f_9_0),ArrayType(10,ArrayType(21,BoolType))),param(Id(k),ArrayType(10,ArrayType(21,BoolType)))],Block([])),MethodDecl(Id($_),Static,[param(Id(_),FloatType),param(Id(_9),FloatType),param(Id(_),FloatType),param(Id(y),ArrayType(105,ArrayType(93,ArrayType(149,IntType))))],Block([]))]),ClassDecl(Id(l4__3y_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 410))

    def test_411(self):
        line = '''Class _{Var $6:Array [Float ,0B11011];}Class X0:_{Val $_,$5,$___,$_:Int ;}Class _:w{Var __,n:Array [Array [Int ,2],44];}Class x:_{Constructor (_,FNf6L:Array [Array [Array [Array [Array [Array [Int ,44],0117],07_2_27],0117],0B1],0X1_8];o__T,dJ,i:j;K:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($6),ArrayType(27,FloatType)))]),ClassDecl(Id(X0),Id(_),[AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($5),IntType,None)),AttributeDecl(Static,ConstDecl(Id($___),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_),IntType,None))]),ClassDecl(Id(_),Id(w),[AttributeDecl(Instance,VarDecl(Id(__),ArrayType(44,ArrayType(2,IntType)))),AttributeDecl(Instance,VarDecl(Id(n),ArrayType(44,ArrayType(2,IntType))))]),ClassDecl(Id(x),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(24,ArrayType(1,ArrayType(79,ArrayType(3735,ArrayType(79,ArrayType(44,IntType))))))),param(Id(FNf6L),ArrayType(24,ArrayType(1,ArrayType(79,ArrayType(3735,ArrayType(79,ArrayType(44,IntType))))))),param(Id(o__T),ClassType(Id(j))),param(Id(dJ),ClassType(Id(j))),param(Id(i),ClassType(Id(j))),param(Id(K),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 411))

    def test_412(self):
        line = '''Class f:_{Constructor (){ {} }}Class R{_8ld3_E(){}Destructor (){}$h__7eP(sHs,y:Boolean ;__,_,s3,_,z:__;_:Array [Boolean ,0X55]){Break ;Val T_:X_o___;} }Class A3_{}Class i{}Class O:W{_3(){}Destructor (){Continue ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(f),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(R),[MethodDecl(Id(_8ld3_E),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($h__7eP),Static,[param(Id(sHs),BoolType),param(Id(y),BoolType),param(Id(__),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(s3),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(z),ClassType(Id(__))),param(Id(_),ArrayType(85,BoolType))],Block([Break,ConstDecl(Id(T_),ClassType(Id(X_o___)),NullLiteral())]))]),ClassDecl(Id(A3_),[]),ClassDecl(Id(i),[]),ClassDecl(Id(O),Id(W),[MethodDecl(Id(_3),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 412))

    def test_413(self):
        line = '''Class _{Val _4t_,_:Boolean ;Destructor (){}Var $_,$e__,_,$_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0b1],47],0b1000100],063],063],0B1100001],0X2],03_360_553_4_617_3_56_75],0x9],9],0XDE_6_7D97],0X24],47],7],6_7];}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_4t_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(67,ArrayType(7,ArrayType(47,ArrayType(36,ArrayType(233209239,ArrayType(9,ArrayType(9,ArrayType(122094591916989,ArrayType(2,ArrayType(97,ArrayType(51,ArrayType(51,ArrayType(68,ArrayType(47,ArrayType(1,BoolType))))))))))))))))),AttributeDecl(Static,VarDecl(Id($e__),ArrayType(67,ArrayType(7,ArrayType(47,ArrayType(36,ArrayType(233209239,ArrayType(9,ArrayType(9,ArrayType(122094591916989,ArrayType(2,ArrayType(97,ArrayType(51,ArrayType(51,ArrayType(68,ArrayType(47,ArrayType(1,BoolType))))))))))))))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(67,ArrayType(7,ArrayType(47,ArrayType(36,ArrayType(233209239,ArrayType(9,ArrayType(9,ArrayType(122094591916989,ArrayType(2,ArrayType(97,ArrayType(51,ArrayType(51,ArrayType(68,ArrayType(47,ArrayType(1,BoolType))))))))))))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(67,ArrayType(7,ArrayType(47,ArrayType(36,ArrayType(233209239,ArrayType(9,ArrayType(9,ArrayType(122094591916989,ArrayType(2,ArrayType(97,ArrayType(51,ArrayType(51,ArrayType(68,ArrayType(47,ArrayType(1,BoolType)))))))))))))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 413))

    def test_414(self):
        line = '''Class _L_{}Class U:_8{}Class _:V_U_p{Val u0:Array [Float ,0110];Destructor (){Var _:Array [Array [Boolean ,0b1_1],0b10];} }Class _{}Class l:_{$_(R:Float ){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_L_),[]),ClassDecl(Id(U),Id(_8),[]),ClassDecl(Id(_),Id(V_U_p),[AttributeDecl(Instance,ConstDecl(Id(u0),ArrayType(72,FloatType),None)),MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(_),ArrayType(2,ArrayType(3,BoolType)))]))]),ClassDecl(Id(_),[]),ClassDecl(Id(l),Id(_),[MethodDecl(Id($_),Static,[param(Id(R),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 414))

    def test_415(self):
        line = '''Class _1_:M{Var $F0:Boolean ;Destructor (){}Val $q:Float ;Constructor (L:String ;__:Array [Array [Array [Array [Array [String ,0x11],0xE4_6],01],0B10001],0b1]){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(_1_),Id(M),[AttributeDecl(Static,VarDecl(Id($F0),BoolType)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($q),FloatType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(L),StringType),param(Id(__),ArrayType(1,ArrayType(17,ArrayType(1,ArrayType(3654,ArrayType(17,StringType))))))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 415))

    def test_416(self):
        line = '''Class _{}Class __88_{Val $18:t8;Val $q:Int ;Var _:Array [Array [Array [String ,0XD],0b101011],6];}Class C{Val _531o,$_y:Array [Array [Int ,0x42],0b101011];Val $0,H,_YM,hv:_;Val $_9_2:Array [Float ,04_13];}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(__88_),[AttributeDecl(Static,ConstDecl(Id($18),ClassType(Id(t8)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($q),IntType,None)),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(6,ArrayType(43,ArrayType(13,StringType)))))]),ClassDecl(Id(C),[AttributeDecl(Instance,ConstDecl(Id(_531o),ArrayType(43,ArrayType(66,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($_y),ArrayType(43,ArrayType(66,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($0),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(H),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_YM),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(hv),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_9_2),ArrayType(267,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 416))

    def test_417(self):
        line = '''Class K6:____{Destructor (){} }Class kSB{Var $6,c,$C0_ZpO,$O9Jz_:Int ;}Class v_:J_{$_(n95,F,M,__,T,_,o22:Array [Boolean ,44];_,_1n:Array [Int ,0X14];l:Array [Boolean ,047];E0,_8_:Array [Boolean ,047];_9:Boolean ;_44,t6:p){} }'''
        expect = '''Program([ClassDecl(Id(K6),Id(____),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(kSB),[AttributeDecl(Static,VarDecl(Id($6),IntType)),AttributeDecl(Instance,VarDecl(Id(c),IntType)),AttributeDecl(Static,VarDecl(Id($C0_ZpO),IntType)),AttributeDecl(Static,VarDecl(Id($O9Jz_),IntType))]),ClassDecl(Id(v_),Id(J_),[MethodDecl(Id($_),Static,[param(Id(n95),ArrayType(44,BoolType)),param(Id(F),ArrayType(44,BoolType)),param(Id(M),ArrayType(44,BoolType)),param(Id(__),ArrayType(44,BoolType)),param(Id(T),ArrayType(44,BoolType)),param(Id(_),ArrayType(44,BoolType)),param(Id(o22),ArrayType(44,BoolType)),param(Id(_),ArrayType(20,IntType)),param(Id(_1n),ArrayType(20,IntType)),param(Id(l),ArrayType(39,BoolType)),param(Id(E0),ArrayType(39,BoolType)),param(Id(_8_),ArrayType(39,BoolType)),param(Id(_9),BoolType),param(Id(_44),ClassType(Id(p))),param(Id(t6),ClassType(Id(p)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 417))

    def test_418(self):
        line = '''Class __2U_{}Class b:_D{}Class M:eb{Destructor (){Return ;} }Class _{Constructor (X,__7:Array [Array [String ,0121],0b1];_,_E_:Boolean ;_Mbi94_,_n,G_9:Int ){New G2_()._();} }Class J8{}'''
        expect = '''Program([ClassDecl(Id(__2U_),[]),ClassDecl(Id(b),Id(_D),[]),ClassDecl(Id(M),Id(eb),[MethodDecl(Id(Destructor),Instance,[],Block([Return()]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(X),ArrayType(1,ArrayType(81,StringType))),param(Id(__7),ArrayType(1,ArrayType(81,StringType))),param(Id(_),BoolType),param(Id(_E_),BoolType),param(Id(_Mbi94_),IntType),param(Id(_n),IntType),param(Id(G_9),IntType)],Block([Call(NewExpr(Id(G2_),[]),Id(_),[])]))]),ClassDecl(Id(J8),[])])'''
        self.assertTrue(TestAST.test(line, expect, 418))

    def test_419(self):
        line = '''Class _{}Class __:x{}Class c_{Constructor (){Continue ;Continue ;Continue ;}f(_,_51:_2;_:Int ){}Constructor (L:Boolean ){} }Class _:c{}Class _:_H7{}Class R{}Class lB:i{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(__),Id(x),[]),ClassDecl(Id(c_),[MethodDecl(Id(Constructor),Instance,[],Block([Continue,Continue,Continue])),MethodDecl(Id(f),Instance,[param(Id(_),ClassType(Id(_2))),param(Id(_51),ClassType(Id(_2))),param(Id(_),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(L),BoolType)],Block([]))]),ClassDecl(Id(_),Id(c),[]),ClassDecl(Id(_),Id(_H7),[]),ClassDecl(Id(R),[]),ClassDecl(Id(lB),Id(i),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 419))

    def test_420(self):
        line = '''Class t:_{Var $3_,$_6,qK:Boolean ;Constructor (N:KE;_3_7:Boolean ;_:Boolean ;_,_5,L__u,B_,_,_4,_,_a:Int ){} }Class a893___m_:v{__(_,U:Array [Boolean ,0X36]){} }Class _{Constructor (h_B:_){Val p:Array [Array [Array [Array [Int ,3],0b100001],071],11];Continue ;}$_D(_,_,H__:Int ){Continue ;} }Class _:_{}Class Y{}'''
        expect = '''Program([ClassDecl(Id(t),Id(_),[AttributeDecl(Static,VarDecl(Id($3_),BoolType)),AttributeDecl(Static,VarDecl(Id($_6),BoolType)),AttributeDecl(Instance,VarDecl(Id(qK),BoolType)),MethodDecl(Id(Constructor),Instance,[param(Id(N),ClassType(Id(KE))),param(Id(_3_7),BoolType),param(Id(_),BoolType),param(Id(_),IntType),param(Id(_5),IntType),param(Id(L__u),IntType),param(Id(B_),IntType),param(Id(_),IntType),param(Id(_4),IntType),param(Id(_),IntType),param(Id(_a),IntType)],Block([]))]),ClassDecl(Id(a893___m_),Id(v),[MethodDecl(Id(__),Instance,[param(Id(_),ArrayType(54,BoolType)),param(Id(U),ArrayType(54,BoolType))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(h_B),ClassType(Id(_)))],Block([ConstDecl(Id(p),ArrayType(11,ArrayType(57,ArrayType(33,ArrayType(3,IntType)))),None),Continue])),MethodDecl(Id($_D),Static,[param(Id(_),IntType),param(Id(_),IntType),param(Id(H__),IntType)],Block([Continue]))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(Y),[])])'''
        self.assertTrue(TestAST.test(line, expect, 420))

    def test_421(self):
        line = '''Class _3O__:_14_8{Val _:Float ;}Class o5{Destructor (){}T_(){Val G_,Ago,H,p1:Array [Int ,0X20];}Constructor (t,_Wh7:Array [Array [Int ,0b101110],07_67];_,z_E_6,_:Boolean ){Break ;}Val $_,Y7_b,$p:_4;Var $_P8rj,$MA,$8:_2L_k;}Class __9:t{}'''
        expect = '''Program([ClassDecl(Id(_3O__),Id(_14_8),[AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None))]),ClassDecl(Id(o5),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(T_),Instance,[],Block([ConstDecl(Id(G_),ArrayType(32,IntType),None),ConstDecl(Id(Ago),ArrayType(32,IntType),None),ConstDecl(Id(H),ArrayType(32,IntType),None),ConstDecl(Id(p1),ArrayType(32,IntType),None)])),MethodDecl(Id(Constructor),Instance,[param(Id(t),ArrayType(503,ArrayType(46,IntType))),param(Id(_Wh7),ArrayType(503,ArrayType(46,IntType))),param(Id(_),BoolType),param(Id(z_E_6),BoolType),param(Id(_),BoolType)],Block([Break])),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_4)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(Y7_b),ClassType(Id(_4)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($p),ClassType(Id(_4)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_P8rj),ClassType(Id(_2L_k)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($MA),ClassType(Id(_2L_k)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($8),ClassType(Id(_2L_k)),NullLiteral()))]),ClassDecl(Id(__9),Id(t),[])])'''
        self.assertTrue(TestAST.test(line, expect, 421))

    def test_422(self):
        line = '''Class Ag{}Class d{Val $P,_zF,$_,_:String ;}Class y{}Class __{}Class _{}Class _{}Class _6h_8:X{}Class EM:_{Var _:Array [Array [Array [Boolean ,05],0b1_00_1_00],0B1_1];}'''
        expect = '''Program([ClassDecl(Id(Ag),[]),ClassDecl(Id(d),[AttributeDecl(Static,ConstDecl(Id($P),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_zF),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None))]),ClassDecl(Id(y),[]),ClassDecl(Id(__),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_6h_8),Id(X),[]),ClassDecl(Id(EM),Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,ArrayType(36,ArrayType(5,BoolType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 422))

    def test_423(self):
        line = '''Class p:_{Destructor (){}Constructor (__V5,MZI:Boolean ;w,e,_,i_,_:Array [Int ,0b1];x,d:Array [Array [Array [Array [Boolean ,0b1011010],6],0b1011010],0X34];T:_e){Break ;y::$_();Break ;}Var $_145_24z___Y:Boolean ;Constructor (CEQ,_E_wG_:Array [Array [Int ,0B11],0x7]){} }Class __6I_z:_{}'''
        expect = '''Program([ClassDecl(Id(p),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__V5),BoolType),param(Id(MZI),BoolType),param(Id(w),ArrayType(1,IntType)),param(Id(e),ArrayType(1,IntType)),param(Id(_),ArrayType(1,IntType)),param(Id(i_),ArrayType(1,IntType)),param(Id(_),ArrayType(1,IntType)),param(Id(x),ArrayType(52,ArrayType(90,ArrayType(6,ArrayType(90,BoolType))))),param(Id(d),ArrayType(52,ArrayType(90,ArrayType(6,ArrayType(90,BoolType))))),param(Id(T),ClassType(Id(_e)))],Block([Break,Call(Id(y),Id($_),[]),Break])),AttributeDecl(Static,VarDecl(Id($_145_24z___Y),BoolType)),MethodDecl(Id(Constructor),Instance,[param(Id(CEQ),ArrayType(7,ArrayType(3,IntType))),param(Id(_E_wG_),ArrayType(7,ArrayType(3,IntType)))],Block([]))]),ClassDecl(Id(__6I_z),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 423))

    def test_424(self):
        line = '''Class _:_x2{Constructor (Zz_S_,n6:Boolean ;_:_5__;i_:_;_:Array [String ,0x21];O5:k4){} }Class w:_{Var $kE,$3K,_s:__p_l8Jv92;Val _,s,$1_:Array [Array [Array [Array [Array [String ,0101],49],0b1],0x21],49];}Class M_:__5__{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_x2),[MethodDecl(Id(Constructor),Instance,[param(Id(Zz_S_),BoolType),param(Id(n6),BoolType),param(Id(_),ClassType(Id(_5__))),param(Id(i_),ClassType(Id(_))),param(Id(_),ArrayType(33,StringType)),param(Id(O5),ClassType(Id(k4)))],Block([]))]),ClassDecl(Id(w),Id(_),[AttributeDecl(Static,VarDecl(Id($kE),ClassType(Id(__p_l8Jv92)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($3K),ClassType(Id(__p_l8Jv92)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_s),ClassType(Id(__p_l8Jv92)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(49,ArrayType(33,ArrayType(1,ArrayType(49,ArrayType(65,StringType))))),None)),AttributeDecl(Instance,ConstDecl(Id(s),ArrayType(49,ArrayType(33,ArrayType(1,ArrayType(49,ArrayType(65,StringType))))),None)),AttributeDecl(Static,ConstDecl(Id($1_),ArrayType(49,ArrayType(33,ArrayType(1,ArrayType(49,ArrayType(65,StringType))))),None))]),ClassDecl(Id(M_),Id(__5__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 424))

    def test_425(self):
        line = '''Class j{}Class _{}Class __b:E_Z7o7_{Var G,c:Array [Array [Float ,06],0X26];Val _,$1_85_,_:Array [Float ,33];}Class _:o{}Class _x:_{$j(_5:Array [Array [Array [Int ,0B1],0135],48_9_2_3]){Var _,___,x_:Array [Float ,0b1];}Destructor (){}Val _:Array [String ,0X28_F];}'''
        expect = '''Program([ClassDecl(Id(j),[]),ClassDecl(Id(_),[]),ClassDecl(Id(__b),Id(E_Z7o7_),[AttributeDecl(Instance,VarDecl(Id(G),ArrayType(38,ArrayType(6,FloatType)))),AttributeDecl(Instance,VarDecl(Id(c),ArrayType(38,ArrayType(6,FloatType)))),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(33,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($1_85_),ArrayType(33,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(33,FloatType),None))]),ClassDecl(Id(_),Id(o),[]),ClassDecl(Id(_x),Id(_),[MethodDecl(Id($j),Static,[param(Id(_5),ArrayType(48923,ArrayType(93,ArrayType(1,IntType))))],Block([VarDecl(Id(_),ArrayType(1,FloatType)),VarDecl(Id(___),ArrayType(1,FloatType)),VarDecl(Id(x_),ArrayType(1,FloatType))])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(655,StringType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 425))

    def test_426(self):
        line = '''Class _:f8F___{Val _,$_:Float ;}Class O9:_{T_(_,a4O,P0z,o:Array [Array [Float ,0B10100],0B10100]){}Constructor (bR,j,_:Array [Boolean ,0B1];_,cu:y){}Constructor (){} }Class __{}Class K{}Class d{}'''
        expect = '''Program([ClassDecl(Id(_),Id(f8F___),[AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None))]),ClassDecl(Id(O9),Id(_),[MethodDecl(Id(T_),Instance,[param(Id(_),ArrayType(20,ArrayType(20,FloatType))),param(Id(a4O),ArrayType(20,ArrayType(20,FloatType))),param(Id(P0z),ArrayType(20,ArrayType(20,FloatType))),param(Id(o),ArrayType(20,ArrayType(20,FloatType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(bR),ArrayType(1,BoolType)),param(Id(j),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType)),param(Id(_),ClassType(Id(y))),param(Id(cu),ClassType(Id(y)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(__),[]),ClassDecl(Id(K),[]),ClassDecl(Id(d),[])])'''
        self.assertTrue(TestAST.test(line, expect, 426))

    def test_427(self):
        line = '''Class _8{Val $8:String ;}Class Z_:R__Ar{Val $5_,$_0k,$3,_,$D,_:Array [Boolean ,0X2];Val t,s:Array [Int ,3];Var x,_:Array [Array [Float ,07],73];__c_4(){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_8),[AttributeDecl(Static,ConstDecl(Id($8),StringType,None))]),ClassDecl(Id(Z_),Id(R__Ar),[AttributeDecl(Static,ConstDecl(Id($5_),ArrayType(2,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_0k),ArrayType(2,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($3),ArrayType(2,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($D),ArrayType(2,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(t),ArrayType(3,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(s),ArrayType(3,IntType),None)),AttributeDecl(Instance,VarDecl(Id(x),ArrayType(73,ArrayType(7,FloatType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(73,ArrayType(7,FloatType)))),MethodDecl(Id(__c_4),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 427))

    def test_428(self):
        line = '''Class E0_:_{Var $q:Float ;Var $1,$_8,c113_:String ;}Class U{}Class G4_{Constructor (u_:Array [Array [Float ,0x10],06]){Continue ;Continue ;Break ;}Val $CJ,O,_,_,__:z;Var $0:Array [Int ,98];}Class r:_{$_51(){}Destructor (){Val _:a;} }Class _009:_{}Class p:z{Var $X0_,$__X_y509_:_75;}Class ___{Constructor (R:f_;_i,A:Int ;AJ5G0:Boolean ;_:O6){ {Break ;} }}'''
        expect = '''Program([ClassDecl(Id(E0_),Id(_),[AttributeDecl(Static,VarDecl(Id($q),FloatType)),AttributeDecl(Static,VarDecl(Id($1),StringType)),AttributeDecl(Static,VarDecl(Id($_8),StringType)),AttributeDecl(Instance,VarDecl(Id(c113_),StringType))]),ClassDecl(Id(U),[]),ClassDecl(Id(G4_),[MethodDecl(Id(Constructor),Instance,[param(Id(u_),ArrayType(6,ArrayType(16,FloatType)))],Block([Continue,Continue,Break])),AttributeDecl(Static,ConstDecl(Id($CJ),ClassType(Id(z)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(O),ClassType(Id(z)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(z)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(z)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(z)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($0),ArrayType(98,IntType)))]),ClassDecl(Id(r),Id(_),[MethodDecl(Id($_51),Static,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_),ClassType(Id(a)),NullLiteral())]))]),ClassDecl(Id(_009),Id(_),[]),ClassDecl(Id(p),Id(z),[AttributeDecl(Static,VarDecl(Id($X0_),ClassType(Id(_75)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__X_y509_),ClassType(Id(_75)),NullLiteral()))]),ClassDecl(Id(___),[MethodDecl(Id(Constructor),Instance,[param(Id(R),ClassType(Id(f_))),param(Id(_i),IntType),param(Id(A),IntType),param(Id(AJ5G0),BoolType),param(Id(_),ClassType(Id(O6)))],Block([Block([Break])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 428))

    def test_429(self):
        line = '''Class ____Bo{F8(_:String ;__,_,_:Array [String ,0B1111];ad,V:Int ;_:Array [Array [Boolean ,83],0x44];d:Boolean ;_,v,oA,_:Array [Array [String ,0X8_6_F],0B1111]){}Destructor (){ {} }Val $9:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(____Bo),[MethodDecl(Id(F8),Instance,[param(Id(_),StringType),param(Id(__),ArrayType(15,StringType)),param(Id(_),ArrayType(15,StringType)),param(Id(_),ArrayType(15,StringType)),param(Id(ad),IntType),param(Id(V),IntType),param(Id(_),ArrayType(68,ArrayType(83,BoolType))),param(Id(d),BoolType),param(Id(_),ArrayType(15,ArrayType(2159,StringType))),param(Id(v),ArrayType(15,ArrayType(2159,StringType))),param(Id(oA),ArrayType(15,ArrayType(2159,StringType))),param(Id(_),ArrayType(15,ArrayType(2159,StringType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),AttributeDecl(Static,ConstDecl(Id($9),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 429))

    def test_430(self):
        line = '''Class _9{$p(___:g){}Val $_,pF:Float ;Destructor (){} }Class M:_{Constructor (b:_;_:_;L_7370,_aY763__:Array [Array [Boolean ,8],0b1]){}_(qcQ,I,__8_:Array [String ,36]){} }Class _7{}'''
        expect = '''Program([ClassDecl(Id(_9),[MethodDecl(Id($p),Static,[param(Id(___),ClassType(Id(g)))],Block([])),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(pF),FloatType,None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(M),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(b),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(L_7370),ArrayType(1,ArrayType(8,BoolType))),param(Id(_aY763__),ArrayType(1,ArrayType(8,BoolType)))],Block([])),MethodDecl(Id(_),Instance,[param(Id(qcQ),ArrayType(36,StringType)),param(Id(I),ArrayType(36,StringType)),param(Id(__8_),ArrayType(36,StringType))],Block([]))]),ClassDecl(Id(_7),[])])'''
        self.assertTrue(TestAST.test(line, expect, 430))

    def test_431(self):
        line = '''Class _3u:c{Val $6_:Array [Array [Int ,0xF7_5],0x6];}Class _:_PJ2_{}Class __82:_{Val _:X_;Destructor (){Continue ;Var _:Array [String ,0b11];Val _64,_:v_b;Var _,_:Boolean ;{}Continue ;}ZOY(_,Fp:Array [Float ,0b101];__3B_:k3G;_,O,_,U,_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(_3u),Id(c),[AttributeDecl(Static,ConstDecl(Id($6_),ArrayType(6,ArrayType(3957,IntType)),None))]),ClassDecl(Id(_),Id(_PJ2_),[]),ClassDecl(Id(__82),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(X_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([Continue,VarDecl(Id(_),ArrayType(3,StringType)),ConstDecl(Id(_64),ClassType(Id(v_b)),NullLiteral()),ConstDecl(Id(_),ClassType(Id(v_b)),NullLiteral()),VarDecl(Id(_),BoolType),VarDecl(Id(_),BoolType),Block([]),Continue])),MethodDecl(Id(ZOY),Instance,[param(Id(_),ArrayType(5,FloatType)),param(Id(Fp),ArrayType(5,FloatType)),param(Id(__3B_),ClassType(Id(k3G))),param(Id(_),BoolType),param(Id(O),BoolType),param(Id(_),BoolType),param(Id(U),BoolType),param(Id(_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 431))

    def test_432(self):
        line = '''Class C:_f{Constructor (X:Array [Array [Array [Array [Array [Array [Array [String ,01],0xEC_1_A],051],3_07],0XE7],1_7_467],0X6_6];__,_:Array [Array [Array [Int ,0B1],5],07];_,_Y:_){} }Class __:_{}Class _{_(_,r_:String ;_0:Array [Float ,4]){} }'''
        expect = '''Program([ClassDecl(Id(C),Id(_f),[MethodDecl(Id(Constructor),Instance,[param(Id(X),ArrayType(102,ArrayType(17467,ArrayType(231,ArrayType(307,ArrayType(41,ArrayType(60442,ArrayType(1,StringType)))))))),param(Id(__),ArrayType(7,ArrayType(5,ArrayType(1,IntType)))),param(Id(_),ArrayType(7,ArrayType(5,ArrayType(1,IntType)))),param(Id(_),ClassType(Id(_))),param(Id(_Y),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[param(Id(_),StringType),param(Id(r_),StringType),param(Id(_0),ArrayType(4,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 432))

    def test_433(self):
        line = '''Class NY_75:H__{Val $7,_AbS,$1,_h,q9,u2,$T_5_0,T_:q;Destructor (){}Val _T:Array [String ,0XC];}Class c{$3(_,__,_,_i:Array [String ,2]){Continue ;}Val l_,$l6:x;}Class _w{Constructor (){}Destructor (){ {} }Constructor (a4:G;_4,_MbD:F;__5,_3:String ){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(NY_75),Id(H__),[AttributeDecl(Static,ConstDecl(Id($7),ClassType(Id(q)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_AbS),ClassType(Id(q)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($1),ClassType(Id(q)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_h),ClassType(Id(q)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(q9),ClassType(Id(q)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(u2),ClassType(Id(q)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($T_5_0),ClassType(Id(q)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(T_),ClassType(Id(q)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_T),ArrayType(12,StringType),None))]),ClassDecl(Id(c),[MethodDecl(Id($3),Static,[param(Id(_),ArrayType(2,StringType)),param(Id(__),ArrayType(2,StringType)),param(Id(_),ArrayType(2,StringType)),param(Id(_i),ArrayType(2,StringType))],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(l_),ClassType(Id(x)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($l6),ClassType(Id(x)),NullLiteral()))]),ClassDecl(Id(_w),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),MethodDecl(Id(Constructor),Instance,[param(Id(a4),ClassType(Id(G))),param(Id(_4),ClassType(Id(F))),param(Id(_MbD),ClassType(Id(F))),param(Id(__5),StringType),param(Id(_3),StringType)],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 433))

    def test_434(self):
        line = '''Class _:h_{}Class _M{}Class _{}Class X{Val $8b,$_5,$_:Array [Array [String ,53],53];Constructor (){}Constructor (_V:Array [Float ,0X4B];_,_:Boolean ;_:C9_c;P,R_:Array [Float ,0B1010110]){} }Class __7{$B(){Break ;}Var _:_1_w;}'''
        expect = '''Program([ClassDecl(Id(_),Id(h_),[]),ClassDecl(Id(_M),[]),ClassDecl(Id(_),[]),ClassDecl(Id(X),[AttributeDecl(Static,ConstDecl(Id($8b),ArrayType(53,ArrayType(53,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($_5),ArrayType(53,ArrayType(53,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(53,ArrayType(53,StringType)),None)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_V),ArrayType(75,FloatType)),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(_),ClassType(Id(C9_c))),param(Id(P),ArrayType(86,FloatType)),param(Id(R_),ArrayType(86,FloatType))],Block([]))]),ClassDecl(Id(__7),[MethodDecl(Id($B),Static,[],Block([Break])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_1_w)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 434))

    def test_435(self):
        line = '''Class S55{Constructor (ii,_3,__,__,T:n){}__(_I:Array [Array [String ,01],0B10111];Jg:Array [Array [Array [String ,0X3],0b1_0_1_1_01],10];P,_:__;l6:_;Z:Array [Int ,01_4_1];_k,_:k){} }'''
        expect = '''Program([ClassDecl(Id(S55),[MethodDecl(Id(Constructor),Instance,[param(Id(ii),ClassType(Id(n))),param(Id(_3),ClassType(Id(n))),param(Id(__),ClassType(Id(n))),param(Id(__),ClassType(Id(n))),param(Id(T),ClassType(Id(n)))],Block([])),MethodDecl(Id(__),Instance,[param(Id(_I),ArrayType(23,ArrayType(1,StringType))),param(Id(Jg),ArrayType(10,ArrayType(45,ArrayType(3,StringType)))),param(Id(P),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(l6),ClassType(Id(_))),param(Id(Z),ArrayType(97,IntType)),param(Id(_k),ClassType(Id(k))),param(Id(_),ClassType(Id(k)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 435))

    def test_436(self):
        line = '''Class _:PQ{}Class F9mxI_O:_G{}Class _:m_{}Class b:P5_{Constructor (){} }Class P:U0R{Var __7y2,$_,FMzQ:_;$_(){} }Class b{}Class D{Constructor (_F_0_:Array [Float ,0x4C];y2:Int ;_d2:Array [Array [Array [Array [Float ,0B10],07],074],0B110011]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(PQ),[]),ClassDecl(Id(F9mxI_O),Id(_G),[]),ClassDecl(Id(_),Id(m_),[]),ClassDecl(Id(b),Id(P5_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(P),Id(U0R),[AttributeDecl(Instance,VarDecl(Id(__7y2),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(FMzQ),ClassType(Id(_)),NullLiteral())),MethodDecl(Id($_),Static,[],Block([]))]),ClassDecl(Id(b),[]),ClassDecl(Id(D),[MethodDecl(Id(Constructor),Instance,[param(Id(_F_0_),ArrayType(76,FloatType)),param(Id(y2),IntType),param(Id(_d2),ArrayType(51,ArrayType(60,ArrayType(7,ArrayType(2,FloatType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 436))

    def test_437(self):
        line = '''Class uH:Wf{}Class T{$A5(_g0:Array [String ,0X7];A:String ;__,_,_:Array [Array [Array [Array [String ,0X30],20],0x5],0B100011]){}Var _S5,_A,$ws1b_,_:Array [Array [Array [Float ,033],033],5];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(uH),Id(Wf),[]),ClassDecl(Id(T),[MethodDecl(Id($A5),Static,[param(Id(_g0),ArrayType(7,StringType)),param(Id(A),StringType),param(Id(__),ArrayType(35,ArrayType(5,ArrayType(20,ArrayType(48,StringType))))),param(Id(_),ArrayType(35,ArrayType(5,ArrayType(20,ArrayType(48,StringType))))),param(Id(_),ArrayType(35,ArrayType(5,ArrayType(20,ArrayType(48,StringType)))))],Block([])),AttributeDecl(Instance,VarDecl(Id(_S5),ArrayType(5,ArrayType(27,ArrayType(27,FloatType))))),AttributeDecl(Instance,VarDecl(Id(_A),ArrayType(5,ArrayType(27,ArrayType(27,FloatType))))),AttributeDecl(Static,VarDecl(Id($ws1b_),ArrayType(5,ArrayType(27,ArrayType(27,FloatType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(5,ArrayType(27,ArrayType(27,FloatType))))),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 437))

    def test_438(self):
        line = '''Class Q:o2{}Class z1:e{Constructor (_:Array [Array [Array [Int ,55],03],01];y,g1,_,y,_b,Z,_:Array [Array [Boolean ,065],0X1A];_,O:Boolean ;xe,_3_7_:__){} }Class _Vi:z{}'''
        expect = '''Program([ClassDecl(Id(Q),Id(o2),[]),ClassDecl(Id(z1),Id(e),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,ArrayType(3,ArrayType(55,IntType)))),param(Id(y),ArrayType(26,ArrayType(53,BoolType))),param(Id(g1),ArrayType(26,ArrayType(53,BoolType))),param(Id(_),ArrayType(26,ArrayType(53,BoolType))),param(Id(y),ArrayType(26,ArrayType(53,BoolType))),param(Id(_b),ArrayType(26,ArrayType(53,BoolType))),param(Id(Z),ArrayType(26,ArrayType(53,BoolType))),param(Id(_),ArrayType(26,ArrayType(53,BoolType))),param(Id(_),BoolType),param(Id(O),BoolType),param(Id(xe),ClassType(Id(__))),param(Id(_3_7_),ClassType(Id(__)))],Block([]))]),ClassDecl(Id(_Vi),Id(z),[])])'''
        self.assertTrue(TestAST.test(line, expect, 438))

    def test_439(self):
        line = '''Class _1:_{Val fP:Boolean ;Val _j:_;}Class _{$7(h__t,g:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0b1],0101],53],04],53],0x9_7],06],31],3_18_2],0b1000011]){} }'''
        expect = '''Program([ClassDecl(Id(_1),Id(_),[AttributeDecl(Instance,ConstDecl(Id(fP),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_j),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_),[MethodDecl(Id($7),Static,[param(Id(h__t),ArrayType(67,ArrayType(3182,ArrayType(31,ArrayType(6,ArrayType(151,ArrayType(53,ArrayType(4,ArrayType(53,ArrayType(65,ArrayType(1,FloatType))))))))))),param(Id(g),ArrayType(67,ArrayType(3182,ArrayType(31,ArrayType(6,ArrayType(151,ArrayType(53,ArrayType(4,ArrayType(53,ArrayType(65,ArrayType(1,FloatType)))))))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 439))

    def test_440(self):
        line = '''Class B8__4{Var A,_F7,$_:K_9__;Var $68,$_6:Array [Int ,16];Val $45_1HI:Array [Array [Array [Array [Array [Array [Array [String ,06],07],0116],057_4],0116],16_8],9];Var $w:Int ;}'''
        expect = '''Program([ClassDecl(Id(B8__4),[AttributeDecl(Instance,VarDecl(Id(A),ClassType(Id(K_9__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_F7),ClassType(Id(K_9__)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(K_9__)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($68),ArrayType(16,IntType))),AttributeDecl(Static,VarDecl(Id($_6),ArrayType(16,IntType))),AttributeDecl(Static,ConstDecl(Id($45_1HI),ArrayType(9,ArrayType(168,ArrayType(78,ArrayType(380,ArrayType(78,ArrayType(7,ArrayType(6,StringType))))))),None)),AttributeDecl(Static,VarDecl(Id($w),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 440))

    def test_441(self):
        line = '''Class _:v9t{Var $75_,$_:q;$m(yf5c,z:Array [Float ,0b110001];_,_,Z:__5_;_7:Array [Int ,0b110001]){} }Class I{}Class _{}Class _9_:_2_DhAm93O{}Class _Rj6Xe:s5{}Class o8_0{}Class _LD:w{}'''
        expect = '''Program([ClassDecl(Id(_),Id(v9t),[AttributeDecl(Static,VarDecl(Id($75_),ClassType(Id(q)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(q)),NullLiteral())),MethodDecl(Id($m),Static,[param(Id(yf5c),ArrayType(49,FloatType)),param(Id(z),ArrayType(49,FloatType)),param(Id(_),ClassType(Id(__5_))),param(Id(_),ClassType(Id(__5_))),param(Id(Z),ClassType(Id(__5_))),param(Id(_7),ArrayType(49,IntType))],Block([]))]),ClassDecl(Id(I),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_9_),Id(_2_DhAm93O),[]),ClassDecl(Id(_Rj6Xe),Id(s5),[]),ClassDecl(Id(o8_0),[]),ClassDecl(Id(_LD),Id(w),[])])'''
        self.assertTrue(TestAST.test(line, expect, 441))

    def test_442(self):
        line = '''Class _D8p1{Constructor (_4F5:Array [Array [Boolean ,0X21],0b10_10]){}Destructor (){}Val _:Q8;Constructor (N,J2:v;_,_74Y,I:_;__:Array [Boolean ,02]){}Val a:Q___;$_(){} }Class x:N{Destructor (){} }Class _:o{}'''
        expect = '''Program([ClassDecl(Id(_D8p1),[MethodDecl(Id(Constructor),Instance,[param(Id(_4F5),ArrayType(10,ArrayType(33,BoolType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(Q8)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(N),ClassType(Id(v))),param(Id(J2),ClassType(Id(v))),param(Id(_),ClassType(Id(_))),param(Id(_74Y),ClassType(Id(_))),param(Id(I),ClassType(Id(_))),param(Id(__),ArrayType(2,BoolType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(a),ClassType(Id(Q___)),NullLiteral())),MethodDecl(Id($_),Static,[],Block([]))]),ClassDecl(Id(x),Id(N),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(o),[])])'''
        self.assertTrue(TestAST.test(line, expect, 442))

    def test_443(self):
        line = '''Class L_60{}Class p{Constructor (k_:Array [Array [Array [Array [Boolean ,0X3B],0X3B],0X3B],06_345_0_4]){ {} }Var j:Boolean ;}Class o:j_{}Class N__:Z{$Bz_(){} }Class __2SH{}Class _{Var $6,_,$8N:Array [Float ,07];Val $F:Array [Array [Array [String ,01],0x1],04];}'''
        expect = '''Program([ClassDecl(Id(L_60),[]),ClassDecl(Id(p),[MethodDecl(Id(Constructor),Instance,[param(Id(k_),ArrayType(211268,ArrayType(59,ArrayType(59,ArrayType(59,BoolType)))))],Block([Block([])])),AttributeDecl(Instance,VarDecl(Id(j),BoolType))]),ClassDecl(Id(o),Id(j_),[]),ClassDecl(Id(N__),Id(Z),[MethodDecl(Id($Bz_),Static,[],Block([]))]),ClassDecl(Id(__2SH),[]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($6),ArrayType(7,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(7,FloatType))),AttributeDecl(Static,VarDecl(Id($8N),ArrayType(7,FloatType))),AttributeDecl(Static,ConstDecl(Id($F),ArrayType(4,ArrayType(1,ArrayType(1,StringType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 443))

    def test_444(self):
        line = '''Class y_:R{Constructor (_:R__;z2:String ;_:_;og__,i_8,e,_,_,_5,P:Array [Array [Array [Array [Array [Array [Boolean ,040],0X1D],0x5B],0b111110],0XF_C_6],040]){} }Class ___a5{}'''
        expect = '''Program([ClassDecl(Id(y_),Id(R),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(R__))),param(Id(z2),StringType),param(Id(_),ClassType(Id(_))),param(Id(og__),ArrayType(32,ArrayType(4038,ArrayType(62,ArrayType(91,ArrayType(29,ArrayType(32,BoolType))))))),param(Id(i_8),ArrayType(32,ArrayType(4038,ArrayType(62,ArrayType(91,ArrayType(29,ArrayType(32,BoolType))))))),param(Id(e),ArrayType(32,ArrayType(4038,ArrayType(62,ArrayType(91,ArrayType(29,ArrayType(32,BoolType))))))),param(Id(_),ArrayType(32,ArrayType(4038,ArrayType(62,ArrayType(91,ArrayType(29,ArrayType(32,BoolType))))))),param(Id(_),ArrayType(32,ArrayType(4038,ArrayType(62,ArrayType(91,ArrayType(29,ArrayType(32,BoolType))))))),param(Id(_5),ArrayType(32,ArrayType(4038,ArrayType(62,ArrayType(91,ArrayType(29,ArrayType(32,BoolType))))))),param(Id(P),ArrayType(32,ArrayType(4038,ArrayType(62,ArrayType(91,ArrayType(29,ArrayType(32,BoolType)))))))],Block([]))]),ClassDecl(Id(___a5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 444))

    def test_445(self):
        line = '''Class _:u95{}Class _{Constructor (_2D_,_,I:Array [Array [Boolean ,0b1],0x33];C__:_){}Destructor (){}Destructor (){} }Class _8{}Class W_:_2{}Class _{$6_(Q:_;_,d,_58M,kz,G95,_:_3D){} }Class o_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(u95),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_2D_),ArrayType(51,ArrayType(1,BoolType))),param(Id(_),ArrayType(51,ArrayType(1,BoolType))),param(Id(I),ArrayType(51,ArrayType(1,BoolType))),param(Id(C__),ClassType(Id(_)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_8),[]),ClassDecl(Id(W_),Id(_2),[]),ClassDecl(Id(_),[MethodDecl(Id($6_),Static,[param(Id(Q),ClassType(Id(_))),param(Id(_),ClassType(Id(_3D))),param(Id(d),ClassType(Id(_3D))),param(Id(_58M),ClassType(Id(_3D))),param(Id(kz),ClassType(Id(_3D))),param(Id(G95),ClassType(Id(_3D))),param(Id(_),ClassType(Id(_3D)))],Block([]))]),ClassDecl(Id(o_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 445))

    def test_446(self):
        line = '''Class _:Yu_{Val $_,$i,_n7g,_58_:_;Constructor (Av:String ;K_U5e:nW0k){}Constructor (t1:Array [Array [Boolean ,8],0x50];Yn,O,x,_,_:Array [Array [Array [Boolean ,0x50],0b110011],07];J4:_AL){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(Yu_),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($i),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_n7g),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_58_),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(Av),StringType),param(Id(K_U5e),ClassType(Id(nW0k)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(t1),ArrayType(80,ArrayType(8,BoolType))),param(Id(Yn),ArrayType(7,ArrayType(51,ArrayType(80,BoolType)))),param(Id(O),ArrayType(7,ArrayType(51,ArrayType(80,BoolType)))),param(Id(x),ArrayType(7,ArrayType(51,ArrayType(80,BoolType)))),param(Id(_),ArrayType(7,ArrayType(51,ArrayType(80,BoolType)))),param(Id(_),ArrayType(7,ArrayType(51,ArrayType(80,BoolType)))),param(Id(J4),ClassType(Id(_AL)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 446))

    def test_447(self):
        line = '''Class A{$_(n3,z,xz_,_K,_1,v:Array [Array [Float ,0X53],0b1];_3_,UV,_,l,__2Za_:Array [Array [Array [Array [Array [Array [String ,0X9],04],2],0b1_1],044],0x2]){Break ;Continue ;{Return ;}n::$_c.bTZ7.m()._j7().x.I8Qc_();Break ;} }'''
        expect = '''Program([ClassDecl(Id(A),[MethodDecl(Id($_),Static,[param(Id(n3),ArrayType(1,ArrayType(83,FloatType))),param(Id(z),ArrayType(1,ArrayType(83,FloatType))),param(Id(xz_),ArrayType(1,ArrayType(83,FloatType))),param(Id(_K),ArrayType(1,ArrayType(83,FloatType))),param(Id(_1),ArrayType(1,ArrayType(83,FloatType))),param(Id(v),ArrayType(1,ArrayType(83,FloatType))),param(Id(_3_),ArrayType(2,ArrayType(36,ArrayType(3,ArrayType(2,ArrayType(4,ArrayType(9,StringType))))))),param(Id(UV),ArrayType(2,ArrayType(36,ArrayType(3,ArrayType(2,ArrayType(4,ArrayType(9,StringType))))))),param(Id(_),ArrayType(2,ArrayType(36,ArrayType(3,ArrayType(2,ArrayType(4,ArrayType(9,StringType))))))),param(Id(l),ArrayType(2,ArrayType(36,ArrayType(3,ArrayType(2,ArrayType(4,ArrayType(9,StringType))))))),param(Id(__2Za_),ArrayType(2,ArrayType(36,ArrayType(3,ArrayType(2,ArrayType(4,ArrayType(9,StringType)))))))],Block([Break,Continue,Block([Return()]),Call(FieldAccess(CallExpr(CallExpr(FieldAccess(FieldAccess(Id(n),Id($_c)),Id(bTZ7)),Id(m),[]),Id(_j7),[]),Id(x)),Id(I8Qc_),[]),Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 447))

    def test_448(self):
        line = '''Class _i:_{Var $__,$_:B;}Class __:p{_(_:Array [String ,0XC_9];_:V__;O5H,k,_9Y:Boolean ){}Var w,$_,B_,$2:Array [Float ,0x4A];}Class ___4M_:_{Constructor (g:V;_:Int ;_x:Array [Array [Boolean ,0x1],0XC]){Return ;{} }}'''
        expect = '''Program([ClassDecl(Id(_i),Id(_),[AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(B)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(B)),NullLiteral()))]),ClassDecl(Id(__),Id(p),[MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(201,StringType)),param(Id(_),ClassType(Id(V__))),param(Id(O5H),BoolType),param(Id(k),BoolType),param(Id(_9Y),BoolType)],Block([])),AttributeDecl(Instance,VarDecl(Id(w),ArrayType(74,FloatType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(74,FloatType))),AttributeDecl(Instance,VarDecl(Id(B_),ArrayType(74,FloatType))),AttributeDecl(Static,VarDecl(Id($2),ArrayType(74,FloatType)))]),ClassDecl(Id(___4M_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(g),ClassType(Id(V))),param(Id(_),IntType),param(Id(_x),ArrayType(12,ArrayType(1,BoolType)))],Block([Return(),Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 448))

    def test_449(self):
        line = '''Class _W2:_pDo{}Class x:u3_8_I_{}Class y2c:_{}Class P05:gNa{}Class X0_{Val _,w_,$S_D7:Array [Array [Array [Int ,0XC_5DC6],01],0b1];}Class D{Val $r_8,_u1D5,G_2_,a0,n:Array [Array [Boolean ,06],8];}Class v{Constructor (z,_,_T:String ;d:t3){} }'''
        expect = '''Program([ClassDecl(Id(_W2),Id(_pDo),[]),ClassDecl(Id(x),Id(u3_8_I_),[]),ClassDecl(Id(y2c),Id(_),[]),ClassDecl(Id(P05),Id(gNa),[]),ClassDecl(Id(X0_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(1,ArrayType(810438,IntType))),None)),AttributeDecl(Instance,ConstDecl(Id(w_),ArrayType(1,ArrayType(1,ArrayType(810438,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($S_D7),ArrayType(1,ArrayType(1,ArrayType(810438,IntType))),None))]),ClassDecl(Id(D),[AttributeDecl(Static,ConstDecl(Id($r_8),ArrayType(8,ArrayType(6,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(_u1D5),ArrayType(8,ArrayType(6,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(G_2_),ArrayType(8,ArrayType(6,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(a0),ArrayType(8,ArrayType(6,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(n),ArrayType(8,ArrayType(6,BoolType)),None))]),ClassDecl(Id(v),[MethodDecl(Id(Constructor),Instance,[param(Id(z),StringType),param(Id(_),StringType),param(Id(_T),StringType),param(Id(d),ClassType(Id(t3)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 449))

    def test_450(self):
        line = '''Class i:s__{}Class __{_0_(G:_d;_:String ;D,l2:Boolean ;e,u:Boolean ){Continue ;}Val _,_,$4:Array [Array [Array [Array [Array [Array [Float ,8],0B100],0B100110],065],243_92_6],0x13];}Class U:__{}'''
        expect = '''Program([ClassDecl(Id(i),Id(s__),[]),ClassDecl(Id(__),[MethodDecl(Id(_0_),Instance,[param(Id(G),ClassType(Id(_d))),param(Id(_),StringType),param(Id(D),BoolType),param(Id(l2),BoolType),param(Id(e),BoolType),param(Id(u),BoolType)],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(19,ArrayType(243926,ArrayType(53,ArrayType(38,ArrayType(4,ArrayType(8,FloatType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(19,ArrayType(243926,ArrayType(53,ArrayType(38,ArrayType(4,ArrayType(8,FloatType)))))),None)),AttributeDecl(Static,ConstDecl(Id($4),ArrayType(19,ArrayType(243926,ArrayType(53,ArrayType(38,ArrayType(4,ArrayType(8,FloatType)))))),None))]),ClassDecl(Id(U),Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 450))

    def test_451(self):
        line = '''Class J_jm_:_{Constructor (){} }Class O{}Class Cc:_{Constructor (Z:Int ;T4:Array [Array [Array [Boolean ,81],0b1_10_01],45];_6W_D,_:_P){}$5k(N,y:Array [Boolean ,81];_64lU:y;_:Array [Float ,0XF];N:Array [Array [Float ,0X1],0B1_0];e_5:Array [Int ,0B1];mh,_3:Z;__:_3){} }'''
        expect = '''Program([ClassDecl(Id(J_jm_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(O),[]),ClassDecl(Id(Cc),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(Z),IntType),param(Id(T4),ArrayType(45,ArrayType(25,ArrayType(81,BoolType)))),param(Id(_6W_D),ClassType(Id(_P))),param(Id(_),ClassType(Id(_P)))],Block([])),MethodDecl(Id($5k),Static,[param(Id(N),ArrayType(81,BoolType)),param(Id(y),ArrayType(81,BoolType)),param(Id(_64lU),ClassType(Id(y))),param(Id(_),ArrayType(15,FloatType)),param(Id(N),ArrayType(2,ArrayType(1,FloatType))),param(Id(e_5),ArrayType(1,IntType)),param(Id(mh),ClassType(Id(Z))),param(Id(_3),ClassType(Id(Z))),param(Id(__),ClassType(Id(_3)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 451))

    def test_452(self):
        line = '''Class A_:_{}Class __{}Class n{}Class _:n{}Class I{Constructor (_2:A01_2){Return ;} }Class o__:p{Val I,$_Y_46,$P776:_F;_7h(__:Array [Array [String ,05],0b1];__,a:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(A_),Id(_),[]),ClassDecl(Id(__),[]),ClassDecl(Id(n),[]),ClassDecl(Id(_),Id(n),[]),ClassDecl(Id(I),[MethodDecl(Id(Constructor),Instance,[param(Id(_2),ClassType(Id(A01_2)))],Block([Return()]))]),ClassDecl(Id(o__),Id(p),[AttributeDecl(Instance,ConstDecl(Id(I),ClassType(Id(_F)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_Y_46),ClassType(Id(_F)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($P776),ClassType(Id(_F)),NullLiteral())),MethodDecl(Id(_7h),Instance,[param(Id(__),ArrayType(1,ArrayType(5,StringType))),param(Id(__),BoolType),param(Id(a),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 452))

    def test_453(self):
        line = '''Class _V:__{Constructor (_:String ;__:Array [Boolean ,9_59_6];_,_Z,__:Array [Array [Array [Array [Int ,79],0x5E],0X97D],0125];__03_:Float ;a:___;C:d__pK5;_9,gc,_:Array [Array [Int ,0B1001011],79];_u9:Array [Float ,79];ht83,_0:Array [String ,0B1001011];__5:Array [Array [String ,031],0B1]){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_V),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(__),ArrayType(9596,BoolType)),param(Id(_),ArrayType(85,ArrayType(2429,ArrayType(94,ArrayType(79,IntType))))),param(Id(_Z),ArrayType(85,ArrayType(2429,ArrayType(94,ArrayType(79,IntType))))),param(Id(__),ArrayType(85,ArrayType(2429,ArrayType(94,ArrayType(79,IntType))))),param(Id(__03_),FloatType),param(Id(a),ClassType(Id(___))),param(Id(C),ClassType(Id(d__pK5))),param(Id(_9),ArrayType(79,ArrayType(75,IntType))),param(Id(gc),ArrayType(79,ArrayType(75,IntType))),param(Id(_),ArrayType(79,ArrayType(75,IntType))),param(Id(_u9),ArrayType(79,FloatType)),param(Id(ht83),ArrayType(75,StringType)),param(Id(_0),ArrayType(75,StringType)),param(Id(__5),ArrayType(1,ArrayType(25,StringType)))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 453))

    def test_454(self):
        line = '''Class z_{W7_(Yi,SzX,r0q:Array [Array [Float ,040],0b11_1];__K,b_:_;Q:Boolean ;e0:String ;jX,N,_:Boolean ;cP,__,k__:Array [Array [Boolean ,0X8C_5],8]){} }Class _G_{}Class _{Val $7:Array [String ,0B10111];}Class kF{}'''
        expect = '''Program([ClassDecl(Id(z_),[MethodDecl(Id(W7_),Instance,[param(Id(Yi),ArrayType(7,ArrayType(32,FloatType))),param(Id(SzX),ArrayType(7,ArrayType(32,FloatType))),param(Id(r0q),ArrayType(7,ArrayType(32,FloatType))),param(Id(__K),ClassType(Id(_))),param(Id(b_),ClassType(Id(_))),param(Id(Q),BoolType),param(Id(e0),StringType),param(Id(jX),BoolType),param(Id(N),BoolType),param(Id(_),BoolType),param(Id(cP),ArrayType(8,ArrayType(2245,BoolType))),param(Id(__),ArrayType(8,ArrayType(2245,BoolType))),param(Id(k__),ArrayType(8,ArrayType(2245,BoolType)))],Block([]))]),ClassDecl(Id(_G_),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($7),ArrayType(23,StringType),None))]),ClassDecl(Id(kF),[])])'''
        self.assertTrue(TestAST.test(line, expect, 454))

    def test_455(self):
        line = '''Class _0K{Val $_5:Array [Array [Float ,021],8];Var _C_,zN,D:Int ;}Class z{}Class _5_9:_{$Y0(hwi,_a90m0,__Oo_:Array [Array [Array [Array [Array [Array [Array [Int ,0B1_0],0X3_6],7],0X8],01_6],0b10011],0b1]){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_0K),[AttributeDecl(Static,ConstDecl(Id($_5),ArrayType(8,ArrayType(17,FloatType)),None)),AttributeDecl(Instance,VarDecl(Id(_C_),IntType)),AttributeDecl(Instance,VarDecl(Id(zN),IntType)),AttributeDecl(Instance,VarDecl(Id(D),IntType))]),ClassDecl(Id(z),[]),ClassDecl(Id(_5_9),Id(_),[MethodDecl(Id($Y0),Static,[param(Id(hwi),ArrayType(1,ArrayType(19,ArrayType(14,ArrayType(8,ArrayType(7,ArrayType(54,ArrayType(2,IntType)))))))),param(Id(_a90m0),ArrayType(1,ArrayType(19,ArrayType(14,ArrayType(8,ArrayType(7,ArrayType(54,ArrayType(2,IntType)))))))),param(Id(__Oo_),ArrayType(1,ArrayType(19,ArrayType(14,ArrayType(8,ArrayType(7,ArrayType(54,ArrayType(2,IntType))))))))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 455))

    def test_456(self):
        line = '''Class _:V{}Class v{__(_48_:Boolean ;m_,x:Array [Boolean ,0XA];y:T7;VP_,K_:Array [Boolean ,0x24];S__,_,k_:Array [String ,0b1];a2:Boolean ;A3,_:Boolean ;h:Array [Array [Array [Array [Array [String ,63],0x1],0b1_1],0B1],63];Z3L:String ;_,F,z,_,_k_:Q_;_:H;g3V,nd60,_W,p_a:Ml){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(V),[]),ClassDecl(Id(v),[MethodDecl(Id(__),Instance,[param(Id(_48_),BoolType),param(Id(m_),ArrayType(10,BoolType)),param(Id(x),ArrayType(10,BoolType)),param(Id(y),ClassType(Id(T7))),param(Id(VP_),ArrayType(36,BoolType)),param(Id(K_),ArrayType(36,BoolType)),param(Id(S__),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(k_),ArrayType(1,StringType)),param(Id(a2),BoolType),param(Id(A3),BoolType),param(Id(_),BoolType),param(Id(h),ArrayType(63,ArrayType(1,ArrayType(3,ArrayType(1,ArrayType(63,StringType)))))),param(Id(Z3L),StringType),param(Id(_),ClassType(Id(Q_))),param(Id(F),ClassType(Id(Q_))),param(Id(z),ClassType(Id(Q_))),param(Id(_),ClassType(Id(Q_))),param(Id(_k_),ClassType(Id(Q_))),param(Id(_),ClassType(Id(H))),param(Id(g3V),ClassType(Id(Ml))),param(Id(nd60),ClassType(Id(Ml))),param(Id(_W),ClassType(Id(Ml))),param(Id(p_a),ClassType(Id(Ml)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 456))

    def test_457(self):
        line = '''Class u{Constructor (W_,_75,U,F3:Array [Array [Array [Array [Int ,0b1000101],02_4_4_4],04],0b1];t:Boolean ;_mE5ar,__z_Ww,AHN:String ){Var y,__mG,__,__,_Z:String ;_::$7.w()._.dA.E();} }'''
        expect = '''Program([ClassDecl(Id(u),[MethodDecl(Id(Constructor),Instance,[param(Id(W_),ArrayType(1,ArrayType(4,ArrayType(1316,ArrayType(69,IntType))))),param(Id(_75),ArrayType(1,ArrayType(4,ArrayType(1316,ArrayType(69,IntType))))),param(Id(U),ArrayType(1,ArrayType(4,ArrayType(1316,ArrayType(69,IntType))))),param(Id(F3),ArrayType(1,ArrayType(4,ArrayType(1316,ArrayType(69,IntType))))),param(Id(t),BoolType),param(Id(_mE5ar),StringType),param(Id(__z_Ww),StringType),param(Id(AHN),StringType)],Block([VarDecl(Id(y),StringType),VarDecl(Id(__mG),StringType),VarDecl(Id(__),StringType),VarDecl(Id(__),StringType),VarDecl(Id(_Z),StringType),Call(FieldAccess(FieldAccess(CallExpr(FieldAccess(Id(_),Id($7)),Id(w),[]),Id(_)),Id(dA)),Id(E),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 457))

    def test_458(self):
        line = '''Class _{}Class __{Destructor (){Val _,_,_p_p_,c,t:_;} }Class Y1{}Class Uc:f7R223__{}Class _:y{}Class _BjOM{_(_:Array [Float ,023]){}Var $t_,$2,d,_,___3Y7HB2,S6:XB_;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_),ClassType(Id(_)),NullLiteral()),ConstDecl(Id(_),ClassType(Id(_)),NullLiteral()),ConstDecl(Id(_p_p_),ClassType(Id(_)),NullLiteral()),ConstDecl(Id(c),ClassType(Id(_)),NullLiteral()),ConstDecl(Id(t),ClassType(Id(_)),NullLiteral())]))]),ClassDecl(Id(Y1),[]),ClassDecl(Id(Uc),Id(f7R223__),[]),ClassDecl(Id(_),Id(y),[]),ClassDecl(Id(_BjOM),[MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(19,FloatType))],Block([])),AttributeDecl(Static,VarDecl(Id($t_),ClassType(Id(XB_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($2),ClassType(Id(XB_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(d),ClassType(Id(XB_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(XB_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(___3Y7HB2),ClassType(Id(XB_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(S6),ClassType(Id(XB_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 458))

    def test_459(self):
        line = '''Class _:Vw1{Constructor (W,_N,X3Z:__Gx){}Constructor (_c0:Array [Int ,0xE];__,y5_,_qd:Float ;E:Array [Boolean ,1_2_8];O3,j,_,_9q:Boolean ){}Val $ed,$_67:Array [Boolean ,0X4_87];}Class _7958{}'''
        expect = '''Program([ClassDecl(Id(_),Id(Vw1),[MethodDecl(Id(Constructor),Instance,[param(Id(W),ClassType(Id(__Gx))),param(Id(_N),ClassType(Id(__Gx))),param(Id(X3Z),ClassType(Id(__Gx)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_c0),ArrayType(14,IntType)),param(Id(__),FloatType),param(Id(y5_),FloatType),param(Id(_qd),FloatType),param(Id(E),ArrayType(128,BoolType)),param(Id(O3),BoolType),param(Id(j),BoolType),param(Id(_),BoolType),param(Id(_9q),BoolType)],Block([])),AttributeDecl(Static,ConstDecl(Id($ed),ArrayType(1159,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_67),ArrayType(1159,BoolType),None))]),ClassDecl(Id(_7958),[])])'''
        self.assertTrue(TestAST.test(line, expect, 459))

    def test_460(self):
        line = '''Class mL___:M_{Var $l5:_d;}Class M:j{Var $__:Array [Boolean ,0b10001];Val g:Array [Array [Array [Array [Array [Array [Boolean ,0B110101],6],0x31],034],529_6],0b1_0];}Class _{}Class _dq{}'''
        expect = '''Program([ClassDecl(Id(mL___),Id(M_),[AttributeDecl(Static,VarDecl(Id($l5),ClassType(Id(_d)),NullLiteral()))]),ClassDecl(Id(M),Id(j),[AttributeDecl(Static,VarDecl(Id($__),ArrayType(17,BoolType))),AttributeDecl(Instance,ConstDecl(Id(g),ArrayType(2,ArrayType(5296,ArrayType(28,ArrayType(49,ArrayType(6,ArrayType(53,BoolType)))))),None))]),ClassDecl(Id(_),[]),ClassDecl(Id(_dq),[])])'''
        self.assertTrue(TestAST.test(line, expect, 460))

    def test_461(self):
        line = '''Class P7{}Class _{Destructor (){} }Class _:_{}Class U:O{_(__,Av,G2,u:Array [Array [Array [Int ,0B1],022],0X12_8];_,H:Array [Int ,022];S:Array [Array [Array [Boolean ,0x4D],0X5],0XB_F_B];_2,E_,_,W,h:p47){} }Class _p{$W(_,_:Float ){Continue ;} }Class a9_:_{}Class H7_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(P7),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(U),Id(O),[MethodDecl(Id(_),Instance,[param(Id(__),ArrayType(296,ArrayType(18,ArrayType(1,IntType)))),param(Id(Av),ArrayType(296,ArrayType(18,ArrayType(1,IntType)))),param(Id(G2),ArrayType(296,ArrayType(18,ArrayType(1,IntType)))),param(Id(u),ArrayType(296,ArrayType(18,ArrayType(1,IntType)))),param(Id(_),ArrayType(18,IntType)),param(Id(H),ArrayType(18,IntType)),param(Id(S),ArrayType(3067,ArrayType(5,ArrayType(77,BoolType)))),param(Id(_2),ClassType(Id(p47))),param(Id(E_),ClassType(Id(p47))),param(Id(_),ClassType(Id(p47))),param(Id(W),ClassType(Id(p47))),param(Id(h),ClassType(Id(p47)))],Block([]))]),ClassDecl(Id(_p),[MethodDecl(Id($W),Static,[param(Id(_),FloatType),param(Id(_),FloatType)],Block([Continue]))]),ClassDecl(Id(a9_),Id(_),[]),ClassDecl(Id(H7_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 461))

    def test_462(self):
        line = '''Class _6:o{V(d7,_,pR,j_,G,_8,_:Array [Array [Array [Array [Array [Float ,0132],0b1],4],0B11],0xE8];F:A0;Y997,_0__6__t,_M:g__582;a4,c2,W_72158:Boolean ;_:Boolean ){Continue ;} }Class __3{}'''
        expect = '''Program([ClassDecl(Id(_6),Id(o),[MethodDecl(Id(V),Instance,[param(Id(d7),ArrayType(232,ArrayType(3,ArrayType(4,ArrayType(1,ArrayType(90,FloatType)))))),param(Id(_),ArrayType(232,ArrayType(3,ArrayType(4,ArrayType(1,ArrayType(90,FloatType)))))),param(Id(pR),ArrayType(232,ArrayType(3,ArrayType(4,ArrayType(1,ArrayType(90,FloatType)))))),param(Id(j_),ArrayType(232,ArrayType(3,ArrayType(4,ArrayType(1,ArrayType(90,FloatType)))))),param(Id(G),ArrayType(232,ArrayType(3,ArrayType(4,ArrayType(1,ArrayType(90,FloatType)))))),param(Id(_8),ArrayType(232,ArrayType(3,ArrayType(4,ArrayType(1,ArrayType(90,FloatType)))))),param(Id(_),ArrayType(232,ArrayType(3,ArrayType(4,ArrayType(1,ArrayType(90,FloatType)))))),param(Id(F),ClassType(Id(A0))),param(Id(Y997),ClassType(Id(g__582))),param(Id(_0__6__t),ClassType(Id(g__582))),param(Id(_M),ClassType(Id(g__582))),param(Id(a4),BoolType),param(Id(c2),BoolType),param(Id(W_72158),BoolType),param(Id(_),BoolType)],Block([Continue]))]),ClassDecl(Id(__3),[])])'''
        self.assertTrue(TestAST.test(line, expect, 462))

    def test_463(self):
        line = '''Class _{Constructor (_J:Array [Array [Array [Array [Array [Array [Array [Array [String ,41],0x6],0xD_4],0b1],0XA],047],047],0B10000];__4k_,t:_){Val KOP,_:Float ;}Val $5:Float ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_J),ArrayType(16,ArrayType(39,ArrayType(39,ArrayType(10,ArrayType(1,ArrayType(212,ArrayType(6,ArrayType(41,StringType))))))))),param(Id(__4k_),ClassType(Id(_))),param(Id(t),ClassType(Id(_)))],Block([ConstDecl(Id(KOP),FloatType,None),ConstDecl(Id(_),FloatType,None)])),AttributeDecl(Static,ConstDecl(Id($5),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 463))

    def test_464(self):
        line = '''Class v8_:_7_{}Class _zk{}Class yU_{Destructor (){}Val $_S,h:_6B5_;Constructor (X,_,_7:Array [Boolean ,0x16];_,z__,_K8_:Array [Array [Array [Array [Array [Array [String ,1_3],25],25],0b1001011],8],0b1001011];B_f9:Int ){} }Class ___{}Class __:_{}'''
        expect = '''Program([ClassDecl(Id(v8_),Id(_7_),[]),ClassDecl(Id(_zk),[]),ClassDecl(Id(yU_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_S),ClassType(Id(_6B5_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(h),ClassType(Id(_6B5_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(X),ArrayType(22,BoolType)),param(Id(_),ArrayType(22,BoolType)),param(Id(_7),ArrayType(22,BoolType)),param(Id(_),ArrayType(75,ArrayType(8,ArrayType(75,ArrayType(25,ArrayType(25,ArrayType(13,StringType))))))),param(Id(z__),ArrayType(75,ArrayType(8,ArrayType(75,ArrayType(25,ArrayType(25,ArrayType(13,StringType))))))),param(Id(_K8_),ArrayType(75,ArrayType(8,ArrayType(75,ArrayType(25,ArrayType(25,ArrayType(13,StringType))))))),param(Id(B_f9),IntType)],Block([]))]),ClassDecl(Id(___),[]),ClassDecl(Id(__),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 464))

    def test_465(self):
        line = '''Class _5:j{}Class _{}Class q:__{Destructor (){ {}Break ;Continue ;Val A:Array [Array [Array [Int ,023],3_238],05];} }Class _Y__8:qw{}Class v_{}Class __:E_{Constructor (){} }Class d{}'''
        expect = '''Program([ClassDecl(Id(_5),Id(j),[]),ClassDecl(Id(_),[]),ClassDecl(Id(q),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([Block([]),Break,Continue,ConstDecl(Id(A),ArrayType(5,ArrayType(3238,ArrayType(19,IntType))),None)]))]),ClassDecl(Id(_Y__8),Id(qw),[]),ClassDecl(Id(v_),[]),ClassDecl(Id(__),Id(E_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(d),[])])'''
        self.assertTrue(TestAST.test(line, expect, 465))

    def test_466(self):
        line = '''Class NC{Constructor (_I_,f7a5_:Boolean ;gm8__:Array [String ,0x3_9C];_9:Array [Array [Boolean ,0X2_8],0x3]){}Q7__5T_(){}Constructor (){}Val $1,Rr,P:Array [Boolean ,0B1010001];Destructor (){}Destructor (){} }Class V{}Class Q{Val $_f998:Array [Boolean ,0142];}'''
        expect = '''Program([ClassDecl(Id(NC),[MethodDecl(Id(Constructor),Instance,[param(Id(_I_),BoolType),param(Id(f7a5_),BoolType),param(Id(gm8__),ArrayType(924,StringType)),param(Id(_9),ArrayType(3,ArrayType(40,BoolType)))],Block([])),MethodDecl(Id(Q7__5T_),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($1),ArrayType(81,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(Rr),ArrayType(81,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(P),ArrayType(81,BoolType),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(V),[]),ClassDecl(Id(Q),[AttributeDecl(Static,ConstDecl(Id($_f998),ArrayType(98,BoolType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 466))

    def test_467(self):
        line = '''Class _41_:H{Destructor (){}$__(_:String ;W:Array [Array [Array [Float ,0b1],0xC],78];K:Array [Float ,7];L,C,I7:Boolean ;_,__:Array [Array [Array [Array [Float ,0X68],0X9],0124],0B1]){}B(){Return ;} }Class N2{Destructor (){}Val $_:_;}Class _72_{}'''
        expect = '''Program([ClassDecl(Id(_41_),Id(H),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($__),Static,[param(Id(_),StringType),param(Id(W),ArrayType(78,ArrayType(12,ArrayType(1,FloatType)))),param(Id(K),ArrayType(7,FloatType)),param(Id(L),BoolType),param(Id(C),BoolType),param(Id(I7),BoolType),param(Id(_),ArrayType(1,ArrayType(84,ArrayType(9,ArrayType(104,FloatType))))),param(Id(__),ArrayType(1,ArrayType(84,ArrayType(9,ArrayType(104,FloatType)))))],Block([])),MethodDecl(Id(B),Instance,[],Block([Return()]))]),ClassDecl(Id(N2),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_72_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 467))

    def test_468(self):
        line = '''Class _9VsIS0tgyA{_zZS(U:Array [Int ,0x62];_0:Array [Array [Int ,0X39],0b10101];B_g5A21:Array [Array [Array [Array [Array [Array [Boolean ,6],0B1],030],7_6],0125],055]){} }'''
        expect = '''Program([ClassDecl(Id(_9VsIS0tgyA),[MethodDecl(Id(_zZS),Instance,[param(Id(U),ArrayType(98,IntType)),param(Id(_0),ArrayType(21,ArrayType(57,IntType))),param(Id(B_g5A21),ArrayType(45,ArrayType(85,ArrayType(76,ArrayType(24,ArrayType(1,ArrayType(6,BoolType)))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 468))

    def test_469(self):
        line = '''Class _1{Var $4,$50,_:__6M_9A;Constructor (_2,_6:Array [Boolean ,0B1];_hb:Array [Array [Array [Int ,017],017],017]){Var _46_,b_,j_,k_,z,_,_:Array [Array [Array [Array [Array [String ,21],0XA],0X11],0x8],03];}Destructor (){Return ;} }'''
        expect = '''Program([ClassDecl(Id(_1),[AttributeDecl(Static,VarDecl(Id($4),ClassType(Id(__6M_9A)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($50),ClassType(Id(__6M_9A)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(__6M_9A)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_2),ArrayType(1,BoolType)),param(Id(_6),ArrayType(1,BoolType)),param(Id(_hb),ArrayType(15,ArrayType(15,ArrayType(15,IntType))))],Block([VarDecl(Id(_46_),ArrayType(3,ArrayType(8,ArrayType(17,ArrayType(10,ArrayType(21,StringType)))))),VarDecl(Id(b_),ArrayType(3,ArrayType(8,ArrayType(17,ArrayType(10,ArrayType(21,StringType)))))),VarDecl(Id(j_),ArrayType(3,ArrayType(8,ArrayType(17,ArrayType(10,ArrayType(21,StringType)))))),VarDecl(Id(k_),ArrayType(3,ArrayType(8,ArrayType(17,ArrayType(10,ArrayType(21,StringType)))))),VarDecl(Id(z),ArrayType(3,ArrayType(8,ArrayType(17,ArrayType(10,ArrayType(21,StringType)))))),VarDecl(Id(_),ArrayType(3,ArrayType(8,ArrayType(17,ArrayType(10,ArrayType(21,StringType)))))),VarDecl(Id(_),ArrayType(3,ArrayType(8,ArrayType(17,ArrayType(10,ArrayType(21,StringType))))))])),MethodDecl(Id(Destructor),Instance,[],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 469))

    def test_470(self):
        line = '''Class _2_0:_4P{Destructor (){} }Class __{}Class P6:_6X_{$5_(s_:Array [Array [Array [Array [String ,540],0B111110],04],0B111110];_,_5__,T,J,_m,_o:Array [Boolean ,0X22]){Val u66:Array [Array [Float ,0b101111],0X22];Return ;} }Class g__{Var $c,_K3F8,_,H,n:Array [String ,0104];}Class x{}Class B_{}Class _:_{}'''
        expect = '''Program([ClassDecl(Id(_2_0),Id(_4P),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),[]),ClassDecl(Id(P6),Id(_6X_),[MethodDecl(Id($5_),Static,[param(Id(s_),ArrayType(62,ArrayType(4,ArrayType(62,ArrayType(540,StringType))))),param(Id(_),ArrayType(34,BoolType)),param(Id(_5__),ArrayType(34,BoolType)),param(Id(T),ArrayType(34,BoolType)),param(Id(J),ArrayType(34,BoolType)),param(Id(_m),ArrayType(34,BoolType)),param(Id(_o),ArrayType(34,BoolType))],Block([ConstDecl(Id(u66),ArrayType(34,ArrayType(47,FloatType)),None),Return()]))]),ClassDecl(Id(g__),[AttributeDecl(Static,VarDecl(Id($c),ArrayType(68,StringType))),AttributeDecl(Instance,VarDecl(Id(_K3F8),ArrayType(68,StringType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(68,StringType))),AttributeDecl(Instance,VarDecl(Id(H),ArrayType(68,StringType))),AttributeDecl(Instance,VarDecl(Id(n),ArrayType(68,StringType)))]),ClassDecl(Id(x),[]),ClassDecl(Id(B_),[]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 470))

    def test_471(self):
        line = '''Class Y3_{Constructor (_S0,e_9h:_;nr,A:Array [Int ,01];a:Array [Array [Array [Array [Array [Array [Boolean ,77],77],0b11_10],0b111001],01],0B1011101];vg,_XY,_Y,a5m:Array [Int ,0x41];___,H3,B,_:U;e:__2bD;Z_4:vE_;p:J;_:Array [String ,0B1011101]){} }'''
        expect = '''Program([ClassDecl(Id(Y3_),[MethodDecl(Id(Constructor),Instance,[param(Id(_S0),ClassType(Id(_))),param(Id(e_9h),ClassType(Id(_))),param(Id(nr),ArrayType(1,IntType)),param(Id(A),ArrayType(1,IntType)),param(Id(a),ArrayType(93,ArrayType(1,ArrayType(57,ArrayType(14,ArrayType(77,ArrayType(77,BoolType))))))),param(Id(vg),ArrayType(65,IntType)),param(Id(_XY),ArrayType(65,IntType)),param(Id(_Y),ArrayType(65,IntType)),param(Id(a5m),ArrayType(65,IntType)),param(Id(___),ClassType(Id(U))),param(Id(H3),ClassType(Id(U))),param(Id(B),ClassType(Id(U))),param(Id(_),ClassType(Id(U))),param(Id(e),ClassType(Id(__2bD))),param(Id(Z_4),ClassType(Id(vE_))),param(Id(p),ClassType(Id(J))),param(Id(_),ArrayType(93,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 471))

    def test_472(self):
        line = '''Class _{Val $6:Int ;}Class _:K{$19v(l:Array [Float ,0x8];Twtv,v,w:Array [Array [Float ,0520],4];Z,e8,w_17,_:String ;M,_:W;q_,_p:Boolean ){Return ;Return ;}Val $A,B__8:_1;}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($6),IntType,None))]),ClassDecl(Id(_),Id(K),[MethodDecl(Id($19v),Static,[param(Id(l),ArrayType(8,FloatType)),param(Id(Twtv),ArrayType(4,ArrayType(336,FloatType))),param(Id(v),ArrayType(4,ArrayType(336,FloatType))),param(Id(w),ArrayType(4,ArrayType(336,FloatType))),param(Id(Z),StringType),param(Id(e8),StringType),param(Id(w_17),StringType),param(Id(_),StringType),param(Id(M),ClassType(Id(W))),param(Id(_),ClassType(Id(W))),param(Id(q_),BoolType),param(Id(_p),BoolType)],Block([Return(),Return()])),AttributeDecl(Static,ConstDecl(Id($A),ClassType(Id(_1)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(B__8),ClassType(Id(_1)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 472))

    def test_473(self):
        line = '''Class D__:___{Constructor (y,_i,_:Array [Array [Float ,0b1],0b11000];k,_4:Array [Array [Array [Float ,0x39],10],027];_o:Array [Float ,0B1];cWR9wG,_:Boolean ){_::$_x();} }Class _{}'''
        expect = '''Program([ClassDecl(Id(D__),Id(___),[MethodDecl(Id(Constructor),Instance,[param(Id(y),ArrayType(24,ArrayType(1,FloatType))),param(Id(_i),ArrayType(24,ArrayType(1,FloatType))),param(Id(_),ArrayType(24,ArrayType(1,FloatType))),param(Id(k),ArrayType(23,ArrayType(10,ArrayType(57,FloatType)))),param(Id(_4),ArrayType(23,ArrayType(10,ArrayType(57,FloatType)))),param(Id(_o),ArrayType(1,FloatType)),param(Id(cWR9wG),BoolType),param(Id(_),BoolType)],Block([Call(Id(_),Id($_x),[])]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 473))

    def test_474(self):
        line = '''Class A:W{Val _:G_w;}Class _0{Constructor (_,JR:_Z;B1,Z,r7_,X,S_T:String ;_x,_:Array [Array [Array [Boolean ,0X25],0xA],6];_3__:Array [Array [Float ,0xF],91];O,_k,P535,b:_h){} }'''
        expect = '''Program([ClassDecl(Id(A),Id(W),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(G_w)),NullLiteral()))]),ClassDecl(Id(_0),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_Z))),param(Id(JR),ClassType(Id(_Z))),param(Id(B1),StringType),param(Id(Z),StringType),param(Id(r7_),StringType),param(Id(X),StringType),param(Id(S_T),StringType),param(Id(_x),ArrayType(6,ArrayType(10,ArrayType(37,BoolType)))),param(Id(_),ArrayType(6,ArrayType(10,ArrayType(37,BoolType)))),param(Id(_3__),ArrayType(91,ArrayType(15,FloatType))),param(Id(O),ClassType(Id(_h))),param(Id(_k),ClassType(Id(_h))),param(Id(P535),ClassType(Id(_h))),param(Id(b),ClassType(Id(_h)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 474))

    def test_475(self):
        line = '''Class _:_5i__{Val i_,$_,$__V,$_8:Float ;Constructor (_,fY,N,_T,K4,_,vz,q2:b){z::$_.h().P_G();Break ;Val p,L,F,z910,j_6:Boolean ;}Destructor (){}Val g_:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_5i__),[AttributeDecl(Instance,ConstDecl(Id(i_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($__V),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_8),FloatType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(b))),param(Id(fY),ClassType(Id(b))),param(Id(N),ClassType(Id(b))),param(Id(_T),ClassType(Id(b))),param(Id(K4),ClassType(Id(b))),param(Id(_),ClassType(Id(b))),param(Id(vz),ClassType(Id(b))),param(Id(q2),ClassType(Id(b)))],Block([Call(CallExpr(FieldAccess(Id(z),Id($_)),Id(h),[]),Id(P_G),[]),Break,ConstDecl(Id(p),BoolType,None),ConstDecl(Id(L),BoolType,None),ConstDecl(Id(F),BoolType,None),ConstDecl(Id(z910),BoolType,None),ConstDecl(Id(j_6),BoolType,None)])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(g_),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 475))

    def test_476(self):
        line = '''Class _8{}Class _:__80{Var m_:Int ;Constructor (){}Var $0N,_,$_:W;}Class _6:O7{Var _9:Array [Int ,0B1_1];}Class _3:m{}Class T:_{Val X,$1:Array [Boolean ,012];}Class _:_7{}'''
        expect = '''Program([ClassDecl(Id(_8),[]),ClassDecl(Id(_),Id(__80),[AttributeDecl(Instance,VarDecl(Id(m_),IntType)),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($0N),ClassType(Id(W)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(W)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(W)),NullLiteral()))]),ClassDecl(Id(_6),Id(O7),[AttributeDecl(Instance,VarDecl(Id(_9),ArrayType(3,IntType)))]),ClassDecl(Id(_3),Id(m),[]),ClassDecl(Id(T),Id(_),[AttributeDecl(Instance,ConstDecl(Id(X),ArrayType(10,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($1),ArrayType(10,BoolType),None))]),ClassDecl(Id(_),Id(_7),[])])'''
        self.assertTrue(TestAST.test(line, expect, 476))

    def test_477(self):
        line = '''Class _W{Var $_3R:Array [Array [Array [Array [Array [Array [Array [Array [String ,0B1010001],72_7_3],0b1_01],02_7],0107],02],0107],0X11];Destructor (){Break ;} }Class l{Constructor (a,M,_:Array [Float ,6];__,x,T4DV__:Array [Array [Array [Int ,0107],0b10111],0b10_1];_,_,UN:_5_){Break ;Var V,L,_8:W;Break ;{}{} }}Class _{}Class n{}Class k4:__7{}'''
        expect = '''Program([ClassDecl(Id(_W),[AttributeDecl(Static,VarDecl(Id($_3R),ArrayType(17,ArrayType(71,ArrayType(2,ArrayType(71,ArrayType(23,ArrayType(5,ArrayType(7273,ArrayType(81,StringType)))))))))),MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(l),[MethodDecl(Id(Constructor),Instance,[param(Id(a),ArrayType(6,FloatType)),param(Id(M),ArrayType(6,FloatType)),param(Id(_),ArrayType(6,FloatType)),param(Id(__),ArrayType(5,ArrayType(23,ArrayType(71,IntType)))),param(Id(x),ArrayType(5,ArrayType(23,ArrayType(71,IntType)))),param(Id(T4DV__),ArrayType(5,ArrayType(23,ArrayType(71,IntType)))),param(Id(_),ClassType(Id(_5_))),param(Id(_),ClassType(Id(_5_))),param(Id(UN),ClassType(Id(_5_)))],Block([Break,VarDecl(Id(V),ClassType(Id(W)),NullLiteral()),VarDecl(Id(L),ClassType(Id(W)),NullLiteral()),VarDecl(Id(_8),ClassType(Id(W)),NullLiteral()),Break,Block([]),Block([])]))]),ClassDecl(Id(_),[]),ClassDecl(Id(n),[]),ClassDecl(Id(k4),Id(__7),[])])'''
        self.assertTrue(TestAST.test(line, expect, 477))

    def test_478(self):
        line = '''Class _:_{$4(_8,C3oi:Array [Float ,0116]){Return ;}Val ___6,$8U,_6,_,$5,$dJ,Z,$C:Array [Array [Array [Array [Array [Array [Array [Boolean ,17],04],02],1],56_4],0B10],0x59];}Class o_6:Df_8_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id($4),Static,[param(Id(_8),ArrayType(78,FloatType)),param(Id(C3oi),ArrayType(78,FloatType))],Block([Return()])),AttributeDecl(Instance,ConstDecl(Id(___6),ArrayType(89,ArrayType(2,ArrayType(564,ArrayType(1,ArrayType(2,ArrayType(4,ArrayType(17,BoolType))))))),None)),AttributeDecl(Static,ConstDecl(Id($8U),ArrayType(89,ArrayType(2,ArrayType(564,ArrayType(1,ArrayType(2,ArrayType(4,ArrayType(17,BoolType))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_6),ArrayType(89,ArrayType(2,ArrayType(564,ArrayType(1,ArrayType(2,ArrayType(4,ArrayType(17,BoolType))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(89,ArrayType(2,ArrayType(564,ArrayType(1,ArrayType(2,ArrayType(4,ArrayType(17,BoolType))))))),None)),AttributeDecl(Static,ConstDecl(Id($5),ArrayType(89,ArrayType(2,ArrayType(564,ArrayType(1,ArrayType(2,ArrayType(4,ArrayType(17,BoolType))))))),None)),AttributeDecl(Static,ConstDecl(Id($dJ),ArrayType(89,ArrayType(2,ArrayType(564,ArrayType(1,ArrayType(2,ArrayType(4,ArrayType(17,BoolType))))))),None)),AttributeDecl(Instance,ConstDecl(Id(Z),ArrayType(89,ArrayType(2,ArrayType(564,ArrayType(1,ArrayType(2,ArrayType(4,ArrayType(17,BoolType))))))),None)),AttributeDecl(Static,ConstDecl(Id($C),ArrayType(89,ArrayType(2,ArrayType(564,ArrayType(1,ArrayType(2,ArrayType(4,ArrayType(17,BoolType))))))),None))]),ClassDecl(Id(o_6),Id(Df_8_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 478))

    def test_479(self):
        line = '''Class t3:_{Var D:E_;Val $M,_9:Array [Array [Array [Array [Array [Array [Float ,0B11101],0b1_01],30],0b1],0XF_C],0B1];Constructor (){}Constructor (){C_6::$t().VIR3();}_00(_5_,_,_,__ED,s:Array [Array [String ,4_1_3],07];_:Array [Float ,43_3_5]){} }'''
        expect = '''Program([ClassDecl(Id(t3),Id(_),[AttributeDecl(Instance,VarDecl(Id(D),ClassType(Id(E_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($M),ArrayType(1,ArrayType(252,ArrayType(1,ArrayType(30,ArrayType(5,ArrayType(29,FloatType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(_9),ArrayType(1,ArrayType(252,ArrayType(1,ArrayType(30,ArrayType(5,ArrayType(29,FloatType)))))),None)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Call(CallExpr(Id(C_6),Id($t),[]),Id(VIR3),[])])),MethodDecl(Id(_00),Instance,[param(Id(_5_),ArrayType(7,ArrayType(413,StringType))),param(Id(_),ArrayType(7,ArrayType(413,StringType))),param(Id(_),ArrayType(7,ArrayType(413,StringType))),param(Id(__ED),ArrayType(7,ArrayType(413,StringType))),param(Id(s),ArrayType(7,ArrayType(413,StringType))),param(Id(_),ArrayType(4335,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 479))

    def test_480(self):
        line = '''Class r{Var $Y1,$__:Float ;Val T:Array [Array [Array [Array [Array [Array [String ,01],886],0X54],0x4357_E],01_5],0B1];Val _2,$73_Y,zh:Array [Array [Array [String ,0X9],0B1011000],0x4B];Val k,_:String ;}Class _6{}'''
        expect = '''Program([ClassDecl(Id(r),[AttributeDecl(Static,VarDecl(Id($Y1),FloatType)),AttributeDecl(Static,VarDecl(Id($__),FloatType)),AttributeDecl(Instance,ConstDecl(Id(T),ArrayType(1,ArrayType(13,ArrayType(275838,ArrayType(84,ArrayType(886,ArrayType(1,StringType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(_2),ArrayType(75,ArrayType(88,ArrayType(9,StringType))),None)),AttributeDecl(Static,ConstDecl(Id($73_Y),ArrayType(75,ArrayType(88,ArrayType(9,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(zh),ArrayType(75,ArrayType(88,ArrayType(9,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(k),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None))]),ClassDecl(Id(_6),[])])'''
        self.assertTrue(TestAST.test(line, expect, 480))

    def test_481(self):
        line = '''Class _:_{Constructor (){} }Class Hn_:K0{}Class _N{Constructor (__6:Array [Array [Float ,0X2E],0b11101]){} }Class T{Constructor (c_,_Ev,J,_,_s1:_0_){Var _Oc:Array [Array [Float ,0x1F],05];} }Class R_p:_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(Hn_),Id(K0),[]),ClassDecl(Id(_N),[MethodDecl(Id(Constructor),Instance,[param(Id(__6),ArrayType(29,ArrayType(46,FloatType)))],Block([]))]),ClassDecl(Id(T),[MethodDecl(Id(Constructor),Instance,[param(Id(c_),ClassType(Id(_0_))),param(Id(_Ev),ClassType(Id(_0_))),param(Id(J),ClassType(Id(_0_))),param(Id(_),ClassType(Id(_0_))),param(Id(_s1),ClassType(Id(_0_)))],Block([VarDecl(Id(_Oc),ArrayType(5,ArrayType(31,FloatType)))]))]),ClassDecl(Id(R_p),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 481))

    def test_482(self):
        line = '''Class __64_4{}Class hP__E{}Class _:m7{____7a_4(){Continue ;}$j0(DE:Lj;W_W3:Array [Array [Float ,0xB],32];YL:String ;u:Float ;_:Array [Array [Array [Array [Array [Array [Boolean ,6],32],0X4D],0b110001],07_6],06];R,M:Float ;_:Array [Boolean ,0B1_11]){} }'''
        expect = '''Program([ClassDecl(Id(__64_4),[]),ClassDecl(Id(hP__E),[]),ClassDecl(Id(_),Id(m7),[MethodDecl(Id(____7a_4),Instance,[],Block([Continue])),MethodDecl(Id($j0),Static,[param(Id(DE),ClassType(Id(Lj))),param(Id(W_W3),ArrayType(32,ArrayType(11,FloatType))),param(Id(YL),StringType),param(Id(u),FloatType),param(Id(_),ArrayType(6,ArrayType(62,ArrayType(49,ArrayType(77,ArrayType(32,ArrayType(6,BoolType))))))),param(Id(R),FloatType),param(Id(M),FloatType),param(Id(_),ArrayType(7,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 482))

    def test_483(self):
        line = '''Class hTsJ:M{$6(){B::$9_();} }Class __D{}Class _:C_{$_(_,Vd8C7,_,__,A:Int ;v,w_:Array [Array [Array [Boolean ,1],9],03];e5:V9;_,_8b_:_){Break ;}Val f:Array [Int ,0x4C];}Class _{Val A,$8c,_1_:N;}'''
        expect = '''Program([ClassDecl(Id(hTsJ),Id(M),[MethodDecl(Id($6),Static,[],Block([Call(Id(B),Id($9_),[])]))]),ClassDecl(Id(__D),[]),ClassDecl(Id(_),Id(C_),[MethodDecl(Id($_),Static,[param(Id(_),IntType),param(Id(Vd8C7),IntType),param(Id(_),IntType),param(Id(__),IntType),param(Id(A),IntType),param(Id(v),ArrayType(3,ArrayType(9,ArrayType(1,BoolType)))),param(Id(w_),ArrayType(3,ArrayType(9,ArrayType(1,BoolType)))),param(Id(e5),ClassType(Id(V9))),param(Id(_),ClassType(Id(_))),param(Id(_8b_),ClassType(Id(_)))],Block([Break])),AttributeDecl(Instance,ConstDecl(Id(f),ArrayType(76,IntType),None))]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(A),ClassType(Id(N)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($8c),ClassType(Id(N)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_1_),ClassType(Id(N)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 483))

    def test_484(self):
        line = '''Class __L1{}Class _GV{}Class w1{Var $5:_;Var qA:Float ;J2_(_,b,b,J9:yY;u31,_l_,t,_7S,Jb2,A6_3,__:Array [Array [Array [String ,0112],0b1],5]){Break ;}Var $c,_k_:String ;}'''
        expect = '''Program([ClassDecl(Id(__L1),[]),ClassDecl(Id(_GV),[]),ClassDecl(Id(w1),[AttributeDecl(Static,VarDecl(Id($5),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(qA),FloatType)),MethodDecl(Id(J2_),Instance,[param(Id(_),ClassType(Id(yY))),param(Id(b),ClassType(Id(yY))),param(Id(b),ClassType(Id(yY))),param(Id(J9),ClassType(Id(yY))),param(Id(u31),ArrayType(5,ArrayType(1,ArrayType(74,StringType)))),param(Id(_l_),ArrayType(5,ArrayType(1,ArrayType(74,StringType)))),param(Id(t),ArrayType(5,ArrayType(1,ArrayType(74,StringType)))),param(Id(_7S),ArrayType(5,ArrayType(1,ArrayType(74,StringType)))),param(Id(Jb2),ArrayType(5,ArrayType(1,ArrayType(74,StringType)))),param(Id(A6_3),ArrayType(5,ArrayType(1,ArrayType(74,StringType)))),param(Id(__),ArrayType(5,ArrayType(1,ArrayType(74,StringType))))],Block([Break])),AttributeDecl(Static,VarDecl(Id($c),StringType)),AttributeDecl(Instance,VarDecl(Id(_k_),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 484))

    def test_485(self):
        line = '''Class F:_{}Class c_L_:V{}Class _{Constructor (_,a:Array [Array [Array [Array [Array [String ,56_3],0X27],0b110100],0143],06_1];_3T:Float ){}Constructor (_7,_0AI8F0,y,rd:Array [Array [String ,76],060];_Y:String ;jY1k,N1:Array [Float ,76];_:eU_H;hb,V_:__5e){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(F),Id(_),[]),ClassDecl(Id(c_L_),Id(V),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(49,ArrayType(99,ArrayType(52,ArrayType(39,ArrayType(563,StringType)))))),param(Id(a),ArrayType(49,ArrayType(99,ArrayType(52,ArrayType(39,ArrayType(563,StringType)))))),param(Id(_3T),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_7),ArrayType(48,ArrayType(76,StringType))),param(Id(_0AI8F0),ArrayType(48,ArrayType(76,StringType))),param(Id(y),ArrayType(48,ArrayType(76,StringType))),param(Id(rd),ArrayType(48,ArrayType(76,StringType))),param(Id(_Y),StringType),param(Id(jY1k),ArrayType(76,FloatType)),param(Id(N1),ArrayType(76,FloatType)),param(Id(_),ClassType(Id(eU_H))),param(Id(hb),ClassType(Id(__5e))),param(Id(V_),ClassType(Id(__5e)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 485))

    def test_486(self):
        line = '''Class g__{Destructor (){Continue ;Val B:m;Break ;Return ;}Destructor (){} }Class __5_s:__4{}Class o:KU{}Class __:_{Constructor (x__2,_3,m4:k;_u,l:_j_r_3;_:__Xb_;_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(g__),[MethodDecl(Id(Destructor),Instance,[],Block([Continue,ConstDecl(Id(B),ClassType(Id(m)),NullLiteral()),Break,Return()])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__5_s),Id(__4),[]),ClassDecl(Id(o),Id(KU),[]),ClassDecl(Id(__),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(x__2),ClassType(Id(k))),param(Id(_3),ClassType(Id(k))),param(Id(m4),ClassType(Id(k))),param(Id(_u),ClassType(Id(_j_r_3))),param(Id(l),ClassType(Id(_j_r_3))),param(Id(_),ClassType(Id(__Xb_))),param(Id(_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 486))

    def test_487(self):
        line = '''Class _U:x{}Class Z_0{Val m_,$_:_5t___;Var __:Array [Array [Array [Int ,0XB2],0xEA7BD],1];Var _2,H:String ;Constructor (_:Array [Float ,050];_6,_n52sB1:Array [Array [Array [Array [Boolean ,052],04_33],0xA],0xF_7]){Return ;} }'''
        expect = '''Program([ClassDecl(Id(_U),Id(x),[]),ClassDecl(Id(Z_0),[AttributeDecl(Instance,ConstDecl(Id(m_),ClassType(Id(_5t___)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_5t___)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(1,ArrayType(960445,ArrayType(178,IntType))))),AttributeDecl(Instance,VarDecl(Id(_2),StringType)),AttributeDecl(Instance,VarDecl(Id(H),StringType)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(40,FloatType)),param(Id(_6),ArrayType(247,ArrayType(10,ArrayType(283,ArrayType(42,BoolType))))),param(Id(_n52sB1),ArrayType(247,ArrayType(10,ArrayType(283,ArrayType(42,BoolType)))))],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 487))

    def test_488(self):
        line = '''Class L{Constructor (B:Array [Array [Array [Array [Float ,0X5D],0140],0B1001111],02];D_:Array [Array [Array [Array [Float ,0b1011000],0x22],0X6],0B100_1_0_0_0];V:Array [String ,8];__r,kI1,_,C,y:t){}Val $w1:Array [Array [Int ,0x22],0140];}'''
        expect = '''Program([ClassDecl(Id(L),[MethodDecl(Id(Constructor),Instance,[param(Id(B),ArrayType(2,ArrayType(79,ArrayType(96,ArrayType(93,FloatType))))),param(Id(D_),ArrayType(72,ArrayType(6,ArrayType(34,ArrayType(88,FloatType))))),param(Id(V),ArrayType(8,StringType)),param(Id(__r),ClassType(Id(t))),param(Id(kI1),ClassType(Id(t))),param(Id(_),ClassType(Id(t))),param(Id(C),ClassType(Id(t))),param(Id(y),ClassType(Id(t)))],Block([])),AttributeDecl(Static,ConstDecl(Id($w1),ArrayType(96,ArrayType(34,IntType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 488))

    def test_489(self):
        line = '''Class s{}Class gB9:_4{Val _,$4:K_9k_727;Constructor (){}$__(C:Array [Array [Float ,053],18];_:Array [Array [Float ,0B1001111],0b111101];__:VK;_:Array [Array [Float ,053],0x8_8]){}Val $1_T6_:__E;_(L_:Array [Array [Array [Boolean ,0X5B],0x7],053]){} }'''
        expect = '''Program([ClassDecl(Id(s),[]),ClassDecl(Id(gB9),Id(_4),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(K_9k_727)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($4),ClassType(Id(K_9k_727)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($__),Static,[param(Id(C),ArrayType(18,ArrayType(43,FloatType))),param(Id(_),ArrayType(61,ArrayType(79,FloatType))),param(Id(__),ClassType(Id(VK))),param(Id(_),ArrayType(136,ArrayType(43,FloatType)))],Block([])),AttributeDecl(Static,ConstDecl(Id($1_T6_),ClassType(Id(__E)),NullLiteral())),MethodDecl(Id(_),Instance,[param(Id(L_),ArrayType(43,ArrayType(7,ArrayType(91,BoolType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 489))

    def test_490(self):
        line = '''Class V{Destructor (){} }Class _:e6_{$6(_:Array [Boolean ,03];L:Array [Array [Array [Float ,026],31],031];M:R;_,_,n_,Uk6,N_,J__,_:Array [Float ,0b1];_:Array [Float ,031]){} }'''
        expect = '''Program([ClassDecl(Id(V),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(e6_),[MethodDecl(Id($6),Static,[param(Id(_),ArrayType(3,BoolType)),param(Id(L),ArrayType(25,ArrayType(31,ArrayType(22,FloatType)))),param(Id(M),ClassType(Id(R))),param(Id(_),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType)),param(Id(n_),ArrayType(1,FloatType)),param(Id(Uk6),ArrayType(1,FloatType)),param(Id(N_),ArrayType(1,FloatType)),param(Id(J__),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType)),param(Id(_),ArrayType(25,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 490))

    def test_491(self):
        line = '''Class __rV:g{Constructor (Z_,_,_9_:_;G,s:Array [Int ,0x5_E_B];_N:Float ;_,I_26:String ;_5,W:Int ){}$d(){Continue ;}Constructor (_:Array [Boolean ,5]){Break ;Val _:Array [Float ,63];} }'''
        expect = '''Program([ClassDecl(Id(__rV),Id(g),[MethodDecl(Id(Constructor),Instance,[param(Id(Z_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_9_),ClassType(Id(_))),param(Id(G),ArrayType(1515,IntType)),param(Id(s),ArrayType(1515,IntType)),param(Id(_N),FloatType),param(Id(_),StringType),param(Id(I_26),StringType),param(Id(_5),IntType),param(Id(W),IntType)],Block([])),MethodDecl(Id($d),Static,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(5,BoolType))],Block([Break,ConstDecl(Id(_),ArrayType(63,FloatType),None)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 491))

    def test_492(self):
        line = '''Class BwU:C{}Class ___:_hUR{Var $03,_,_,_,Q,$9g8,___S,$_w72_4,_,$i_,$Q_,_,M:Array [Float ,97];}Class _{Constructor (F:Array [Int ,0B1];__,_:Float ;_,e:_9;m96,_:Float ){Break ;}Var ___,h8,$p:pc_;}'''
        expect = '''Program([ClassDecl(Id(BwU),Id(C),[]),ClassDecl(Id(___),Id(_hUR),[AttributeDecl(Static,VarDecl(Id($03),ArrayType(97,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(97,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(97,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(97,FloatType))),AttributeDecl(Instance,VarDecl(Id(Q),ArrayType(97,FloatType))),AttributeDecl(Static,VarDecl(Id($9g8),ArrayType(97,FloatType))),AttributeDecl(Instance,VarDecl(Id(___S),ArrayType(97,FloatType))),AttributeDecl(Static,VarDecl(Id($_w72_4),ArrayType(97,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(97,FloatType))),AttributeDecl(Static,VarDecl(Id($i_),ArrayType(97,FloatType))),AttributeDecl(Static,VarDecl(Id($Q_),ArrayType(97,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(97,FloatType))),AttributeDecl(Instance,VarDecl(Id(M),ArrayType(97,FloatType)))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(F),ArrayType(1,IntType)),param(Id(__),FloatType),param(Id(_),FloatType),param(Id(_),ClassType(Id(_9))),param(Id(e),ClassType(Id(_9))),param(Id(m96),FloatType),param(Id(_),FloatType)],Block([Break])),AttributeDecl(Instance,VarDecl(Id(___),ClassType(Id(pc_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(h8),ClassType(Id(pc_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($p),ClassType(Id(pc_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 492))

    def test_493(self):
        line = '''Class _:_8{V08(v1,_,m4:O;_:String ;_:_5X;z:J;bN,_,Z,_____:Array [Array [Array [Array [Array [Array [Array [Float ,05],0b1100011],54],05],0b1],05_1_75_1_3_34],1_6];s:v_vo_9_5_7y;D4,Z3:Int ){}Var s,h,$__,$52_9v38U4R,m:y_;Val $3,a:String ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_8),[MethodDecl(Id(V08),Instance,[param(Id(v1),ClassType(Id(O))),param(Id(_),ClassType(Id(O))),param(Id(m4),ClassType(Id(O))),param(Id(_),StringType),param(Id(_),ClassType(Id(_5X))),param(Id(z),ClassType(Id(J))),param(Id(bN),ArrayType(16,ArrayType(10998492,ArrayType(1,ArrayType(5,ArrayType(54,ArrayType(99,ArrayType(5,FloatType)))))))),param(Id(_),ArrayType(16,ArrayType(10998492,ArrayType(1,ArrayType(5,ArrayType(54,ArrayType(99,ArrayType(5,FloatType)))))))),param(Id(Z),ArrayType(16,ArrayType(10998492,ArrayType(1,ArrayType(5,ArrayType(54,ArrayType(99,ArrayType(5,FloatType)))))))),param(Id(_____),ArrayType(16,ArrayType(10998492,ArrayType(1,ArrayType(5,ArrayType(54,ArrayType(99,ArrayType(5,FloatType)))))))),param(Id(s),ClassType(Id(v_vo_9_5_7y))),param(Id(D4),IntType),param(Id(Z3),IntType)],Block([])),AttributeDecl(Instance,VarDecl(Id(s),ClassType(Id(y_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(h),ClassType(Id(y_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(y_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($52_9v38U4R),ClassType(Id(y_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(m),ClassType(Id(y_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($3),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(a),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 493))

    def test_494(self):
        line = '''Class _{Destructor (){} }Class _:_{}Class g{Destructor (){} }Class _:_{Var k,c7t5:Array [Array [Array [Array [Float ,0X9],496],78],0B101];}Class W__:A{Var $_7:Array [Float ,0b1];}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(g),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(k),ArrayType(5,ArrayType(78,ArrayType(496,ArrayType(9,FloatType)))))),AttributeDecl(Instance,VarDecl(Id(c7t5),ArrayType(5,ArrayType(78,ArrayType(496,ArrayType(9,FloatType))))))]),ClassDecl(Id(W__),Id(A),[AttributeDecl(Static,VarDecl(Id($_7),ArrayType(1,FloatType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 494))

    def test_495(self):
        line = '''Class F:_a_{Val _:Array [Int ,06];Constructor (){ {} }}Class _8_{Val l,$_,$7c8:Array [Array [String ,0x7],017];Constructor (F:__;_,_,E,W:_){} }Class L_{}Class __:_X{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(F),Id(_a_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(6,IntType),None)),MethodDecl(Id(Constructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(_8_),[AttributeDecl(Instance,ConstDecl(Id(l),ArrayType(15,ArrayType(7,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(15,ArrayType(7,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($7c8),ArrayType(15,ArrayType(7,StringType)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(F),ClassType(Id(__))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(E),ClassType(Id(_))),param(Id(W),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(L_),[]),ClassDecl(Id(__),Id(_X),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 495))

    def test_496(self):
        line = '''Class _:l_{Constructor (_:String ;_:Array [Array [Array [Array [Array [Array [Array [String ,0b11110],4_9],0b1],0b11110],0x38],35],070]){} }Class ns{}Class s{Destructor (){Return ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(l_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(_),ArrayType(56,ArrayType(35,ArrayType(56,ArrayType(30,ArrayType(1,ArrayType(49,ArrayType(30,StringType))))))))],Block([]))]),ClassDecl(Id(ns),[]),ClassDecl(Id(s),[MethodDecl(Id(Destructor),Instance,[],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 496))

    def test_497(self):
        line = '''Class _E{}Class _47r:_{_(){}Destructor (){Break ;}$r__(a:Array [Array [Array [Array [String ,077],0x1C],01_53_3],0B1000000];_3,a_:g;_:Array [Array [Array [Float ,06],0x1C],0X2]){} }'''
        expect = '''Program([ClassDecl(Id(_E),[]),ClassDecl(Id(_47r),Id(_),[MethodDecl(Id(_),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Break])),MethodDecl(Id($r__),Static,[param(Id(a),ArrayType(64,ArrayType(859,ArrayType(28,ArrayType(63,StringType))))),param(Id(_3),ClassType(Id(g))),param(Id(a_),ClassType(Id(g))),param(Id(_),ArrayType(2,ArrayType(28,ArrayType(6,FloatType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 497))

    def test_498(self):
        line = '''Class _{Constructor (_5C,_:Float ;_,i,C:_;_,S_3,_M6:Array [Array [Array [Array [Array [Array [String ,4],3],4],0B1001],0B1001],013];z5:Array [Array [Array [Array [Int ,0x50],0XDE],0B1001],04_3]){Break ;}Val $3:_;Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_5C),FloatType),param(Id(_),FloatType),param(Id(_),ClassType(Id(_))),param(Id(i),ClassType(Id(_))),param(Id(C),ClassType(Id(_))),param(Id(_),ArrayType(11,ArrayType(9,ArrayType(9,ArrayType(4,ArrayType(3,ArrayType(4,StringType))))))),param(Id(S_3),ArrayType(11,ArrayType(9,ArrayType(9,ArrayType(4,ArrayType(3,ArrayType(4,StringType))))))),param(Id(_M6),ArrayType(11,ArrayType(9,ArrayType(9,ArrayType(4,ArrayType(3,ArrayType(4,StringType))))))),param(Id(z5),ArrayType(35,ArrayType(9,ArrayType(222,ArrayType(80,IntType)))))],Block([Break])),AttributeDecl(Static,ConstDecl(Id($3),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 498))

    def test_499(self):
        line = '''Class M{$8(_f,_1_4s_,c,ckS,YY:Array [Int ,10];_t:_;__1:SM6;On,Ob_,_,U,hZR825:Int ;_:Array [Array [Array [Float ,056_4],0X1E],4];I,_T_f,__,W_4_,_,_6,f:String ){}Var $2:Boolean ;Var $0:U;}Class _a{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(M),[MethodDecl(Id($8),Static,[param(Id(_f),ArrayType(10,IntType)),param(Id(_1_4s_),ArrayType(10,IntType)),param(Id(c),ArrayType(10,IntType)),param(Id(ckS),ArrayType(10,IntType)),param(Id(YY),ArrayType(10,IntType)),param(Id(_t),ClassType(Id(_))),param(Id(__1),ClassType(Id(SM6))),param(Id(On),IntType),param(Id(Ob_),IntType),param(Id(_),IntType),param(Id(U),IntType),param(Id(hZR825),IntType),param(Id(_),ArrayType(4,ArrayType(30,ArrayType(372,FloatType)))),param(Id(I),StringType),param(Id(_T_f),StringType),param(Id(__),StringType),param(Id(W_4_),StringType),param(Id(_),StringType),param(Id(_6),StringType),param(Id(f),StringType)],Block([])),AttributeDecl(Static,VarDecl(Id($2),BoolType)),AttributeDecl(Static,VarDecl(Id($0),ClassType(Id(U)),NullLiteral()))]),ClassDecl(Id(_a),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 499))

    def test_500(self):
        line = '''Class _K:S_S{Constructor (_gB:e;_,_2,G:Array [Array [Array [String ,02_3],0141],28]){} }Class __:_{Val x,_,c:Boolean ;Destructor (){}Val $r__ZC:Array [Array [Float ,0X5_C],0B1];}'''
        expect = '''Program([ClassDecl(Id(_K),Id(S_S),[MethodDecl(Id(Constructor),Instance,[param(Id(_gB),ClassType(Id(e))),param(Id(_),ArrayType(28,ArrayType(97,ArrayType(19,StringType)))),param(Id(_2),ArrayType(28,ArrayType(97,ArrayType(19,StringType)))),param(Id(G),ArrayType(28,ArrayType(97,ArrayType(19,StringType))))],Block([]))]),ClassDecl(Id(__),Id(_),[AttributeDecl(Instance,ConstDecl(Id(x),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(c),BoolType,None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($r__ZC),ArrayType(1,ArrayType(92,FloatType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 500))

    def test_501(self):
        line = '''Class Wf:i_o{Constructor (p,O_:Boolean ){}Constructor (_:l;s,__4r:Int ;v,T9,_:Array [Array [Array [Float ,0B1],0X32C],2];L,_503N,J,_:Boolean ;_,g:Y___YvBW___U;uv,z8:_;r:_w){} }Class _c:x{Y(__3:Array [Float ,0x2E];B_:_Sj;_,__a9d_,___0:Array [Array [Array [Int ,7_7],01125],0B1]){} }'''
        expect = '''Program([ClassDecl(Id(Wf),Id(i_o),[MethodDecl(Id(Constructor),Instance,[param(Id(p),BoolType),param(Id(O_),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(l))),param(Id(s),IntType),param(Id(__4r),IntType),param(Id(v),ArrayType(2,ArrayType(812,ArrayType(1,FloatType)))),param(Id(T9),ArrayType(2,ArrayType(812,ArrayType(1,FloatType)))),param(Id(_),ArrayType(2,ArrayType(812,ArrayType(1,FloatType)))),param(Id(L),BoolType),param(Id(_503N),BoolType),param(Id(J),BoolType),param(Id(_),BoolType),param(Id(_),ClassType(Id(Y___YvBW___U))),param(Id(g),ClassType(Id(Y___YvBW___U))),param(Id(uv),ClassType(Id(_))),param(Id(z8),ClassType(Id(_))),param(Id(r),ClassType(Id(_w)))],Block([]))]),ClassDecl(Id(_c),Id(x),[MethodDecl(Id(Y),Instance,[param(Id(__3),ArrayType(46,FloatType)),param(Id(B_),ClassType(Id(_Sj))),param(Id(_),ArrayType(1,ArrayType(597,ArrayType(77,IntType)))),param(Id(__a9d_),ArrayType(1,ArrayType(597,ArrayType(77,IntType)))),param(Id(___0),ArrayType(1,ArrayType(597,ArrayType(77,IntType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 501))

    def test_502(self):
        line = '''Class Y:__8{}Class _g:__v{Val iH:Array [Boolean ,30];}Class U{Constructor (){} }Class _:n___K{Var $Y0Mb_:_;}Class e{Val $g,sL:Array [String ,0B10];}Class u:_{Val $_:_h_;$W_(_o:R){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(Y),Id(__8),[]),ClassDecl(Id(_g),Id(__v),[AttributeDecl(Instance,ConstDecl(Id(iH),ArrayType(30,BoolType),None))]),ClassDecl(Id(U),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(n___K),[AttributeDecl(Static,VarDecl(Id($Y0Mb_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(e),[AttributeDecl(Static,ConstDecl(Id($g),ArrayType(2,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(sL),ArrayType(2,StringType),None))]),ClassDecl(Id(u),Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_h_)),NullLiteral())),MethodDecl(Id($W_),Static,[param(Id(_o),ClassType(Id(R)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 502))

    def test_503(self):
        line = '''Class Na:_{Val $_,__1H0v_,_:Array [Boolean ,0B11111];}Class P:___{Val $9S5,_,p3:Array [Array [Array [Array [Array [Array [Array [Float ,40],0B11111],40],062],0XA],0B11111],0b1];Var __2_:Array [Array [Boolean ,40],8];}Class _:e{Val $5,$7_,e_3B_9:j;}'''
        expect = '''Program([ClassDecl(Id(Na),Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(31,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(__1H0v_),ArrayType(31,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(31,BoolType),None))]),ClassDecl(Id(P),Id(___),[AttributeDecl(Static,ConstDecl(Id($9S5),ArrayType(1,ArrayType(31,ArrayType(10,ArrayType(50,ArrayType(40,ArrayType(31,ArrayType(40,FloatType))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(31,ArrayType(10,ArrayType(50,ArrayType(40,ArrayType(31,ArrayType(40,FloatType))))))),None)),AttributeDecl(Instance,ConstDecl(Id(p3),ArrayType(1,ArrayType(31,ArrayType(10,ArrayType(50,ArrayType(40,ArrayType(31,ArrayType(40,FloatType))))))),None)),AttributeDecl(Instance,VarDecl(Id(__2_),ArrayType(8,ArrayType(40,BoolType))))]),ClassDecl(Id(_),Id(e),[AttributeDecl(Static,ConstDecl(Id($5),ClassType(Id(j)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($7_),ClassType(Id(j)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(e_3B_9),ClassType(Id(j)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 503))

    def test_504(self):
        line = '''Class _J:_3P7_{}Class d{$t_(_:Array [Array [Array [Float ,0B1001000],0xC_5_7D7328_A34],01];p:Array [Int ,0b1]){}Val $38,__:Array [Array [Array [Array [String ,06],0b1_01],4_6],0B1001000];}'''
        expect = '''Program([ClassDecl(Id(_J),Id(_3P7_),[]),ClassDecl(Id(d),[MethodDecl(Id($t_),Static,[param(Id(_),ArrayType(1,ArrayType(13571412101684,ArrayType(72,FloatType)))),param(Id(p),ArrayType(1,IntType))],Block([])),AttributeDecl(Static,ConstDecl(Id($38),ArrayType(72,ArrayType(46,ArrayType(5,ArrayType(6,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(72,ArrayType(46,ArrayType(5,ArrayType(6,StringType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 504))

    def test_505(self):
        line = '''Class M5:_{Constructor (){}Val V:n9;}Class f6{Val i_:Float ;Val _:Boolean ;Val U_,W,$_9oX:Array [Array [Boolean ,01],26];$8_R(_7_,_,_h_,k,_D:__03;_,_:String ){Return ;} }Class g_:U__{Constructor (S__8x_:String ){} }'''
        expect = '''Program([ClassDecl(Id(M5),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(V),ClassType(Id(n9)),NullLiteral()))]),ClassDecl(Id(f6),[AttributeDecl(Instance,ConstDecl(Id(i_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(U_),ArrayType(26,ArrayType(1,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(W),ArrayType(26,ArrayType(1,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($_9oX),ArrayType(26,ArrayType(1,BoolType)),None)),MethodDecl(Id($8_R),Static,[param(Id(_7_),ClassType(Id(__03))),param(Id(_),ClassType(Id(__03))),param(Id(_h_),ClassType(Id(__03))),param(Id(k),ClassType(Id(__03))),param(Id(_D),ClassType(Id(__03))),param(Id(_),StringType),param(Id(_),StringType)],Block([Return()]))]),ClassDecl(Id(g_),Id(U__),[MethodDecl(Id(Constructor),Instance,[param(Id(S__8x_),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 505))

    def test_506(self):
        line = '''Class a{}Class _{J(_z:Array [Array [Int ,0B1010],0B1];_h_64,k0_MH:Boolean ;_gL:Array [Boolean ,78]){Break ;Continue ;Break ;}W(){} }Class Du{Val $e__Y__:Array [Float ,0142];Var _,$K:CQW;}Class e:_{Destructor (){} }Class w{Val _:Float ;}'''
        expect = '''Program([ClassDecl(Id(a),[]),ClassDecl(Id(_),[MethodDecl(Id(J),Instance,[param(Id(_z),ArrayType(1,ArrayType(10,IntType))),param(Id(_h_64),BoolType),param(Id(k0_MH),BoolType),param(Id(_gL),ArrayType(78,BoolType))],Block([Break,Continue,Break])),MethodDecl(Id(W),Instance,[],Block([]))]),ClassDecl(Id(Du),[AttributeDecl(Static,ConstDecl(Id($e__Y__),ArrayType(98,FloatType),None)),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(CQW)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($K),ClassType(Id(CQW)),NullLiteral()))]),ClassDecl(Id(e),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(w),[AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 506))

    def test_507(self):
        line = '''Class tb_61___9_e_K:Y_{_5(a,t_V:Array [Float ,0x9C];r_:Array [Array [Array [Float ,4],011],0b10];z6:Array [Float ,0x7];__PQ:String ;_,_9_:Array [Int ,0b10];n:_9mI7283b145_){Continue ;}$_(L_s,lO89vX,W,c,y,u,_D,u,Y_:K){} }'''
        expect = '''Program([ClassDecl(Id(tb_61___9_e_K),Id(Y_),[MethodDecl(Id(_5),Instance,[param(Id(a),ArrayType(156,FloatType)),param(Id(t_V),ArrayType(156,FloatType)),param(Id(r_),ArrayType(2,ArrayType(9,ArrayType(4,FloatType)))),param(Id(z6),ArrayType(7,FloatType)),param(Id(__PQ),StringType),param(Id(_),ArrayType(2,IntType)),param(Id(_9_),ArrayType(2,IntType)),param(Id(n),ClassType(Id(_9mI7283b145_)))],Block([Continue])),MethodDecl(Id($_),Static,[param(Id(L_s),ClassType(Id(K))),param(Id(lO89vX),ClassType(Id(K))),param(Id(W),ClassType(Id(K))),param(Id(c),ClassType(Id(K))),param(Id(y),ClassType(Id(K))),param(Id(u),ClassType(Id(K))),param(Id(_D),ClassType(Id(K))),param(Id(u),ClassType(Id(K))),param(Id(Y_),ClassType(Id(K)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 507))

    def test_508(self):
        line = '''Class __:r_v{Val __:Float ;}Class _3{Var _Dl_,$_,_,$3,fNE:String ;Val $2_:Array [String ,053];}Class _{Var r3m_,m,$1:Array [Array [Int ,5],0B1];Var c9u43,$3:Boolean ;Destructor (){Break ;}Val $_,$Dq,cP7:String ;}'''
        expect = '''Program([ClassDecl(Id(__),Id(r_v),[AttributeDecl(Instance,ConstDecl(Id(__),FloatType,None))]),ClassDecl(Id(_3),[AttributeDecl(Instance,VarDecl(Id(_Dl_),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Static,VarDecl(Id($3),StringType)),AttributeDecl(Instance,VarDecl(Id(fNE),StringType)),AttributeDecl(Static,ConstDecl(Id($2_),ArrayType(43,StringType),None))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(r3m_),ArrayType(1,ArrayType(5,IntType)))),AttributeDecl(Instance,VarDecl(Id(m),ArrayType(1,ArrayType(5,IntType)))),AttributeDecl(Static,VarDecl(Id($1),ArrayType(1,ArrayType(5,IntType)))),AttributeDecl(Instance,VarDecl(Id(c9u43),BoolType)),AttributeDecl(Static,VarDecl(Id($3),BoolType)),MethodDecl(Id(Destructor),Instance,[],Block([Break])),AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($Dq),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(cP7),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 508))

    def test_509(self):
        line = '''Class _V_5:_4{Var _,_,_2:String ;Constructor (w_:Int ){}Var N,e,$8_9,__z,$_:Array [Array [Array [Array [Array [Float ,0x4B],0XE],0322_7],0X9],0x4B];Val j,_:Array [Boolean ,0B1001011];Var _5H:Boolean ;$2_E(){}Val $1_t:Float ;}'''
        expect = '''Program([ClassDecl(Id(_V_5),Id(_4),[AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Instance,VarDecl(Id(_2),StringType)),MethodDecl(Id(Constructor),Instance,[param(Id(w_),IntType)],Block([])),AttributeDecl(Instance,VarDecl(Id(N),ArrayType(75,ArrayType(9,ArrayType(1687,ArrayType(14,ArrayType(75,FloatType))))))),AttributeDecl(Instance,VarDecl(Id(e),ArrayType(75,ArrayType(9,ArrayType(1687,ArrayType(14,ArrayType(75,FloatType))))))),AttributeDecl(Static,VarDecl(Id($8_9),ArrayType(75,ArrayType(9,ArrayType(1687,ArrayType(14,ArrayType(75,FloatType))))))),AttributeDecl(Instance,VarDecl(Id(__z),ArrayType(75,ArrayType(9,ArrayType(1687,ArrayType(14,ArrayType(75,FloatType))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(75,ArrayType(9,ArrayType(1687,ArrayType(14,ArrayType(75,FloatType))))))),AttributeDecl(Instance,ConstDecl(Id(j),ArrayType(75,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(75,BoolType),None)),AttributeDecl(Instance,VarDecl(Id(_5H),BoolType)),MethodDecl(Id($2_E),Static,[],Block([])),AttributeDecl(Static,ConstDecl(Id($1_t),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 509))

    def test_510(self):
        line = '''Class e{Val _:Boolean ;}Class l__:_{Constructor (J,j,e_,u,a:Array [Array [Int ,052],052];J:Array [Int ,0x9];o:o;N:Array [Float ,052];__,L,_,___:Array [Int ,0x3_E];M:_){} }'''
        expect = '''Program([ClassDecl(Id(e),[AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None))]),ClassDecl(Id(l__),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(J),ArrayType(42,ArrayType(42,IntType))),param(Id(j),ArrayType(42,ArrayType(42,IntType))),param(Id(e_),ArrayType(42,ArrayType(42,IntType))),param(Id(u),ArrayType(42,ArrayType(42,IntType))),param(Id(a),ArrayType(42,ArrayType(42,IntType))),param(Id(J),ArrayType(9,IntType)),param(Id(o),ClassType(Id(o))),param(Id(N),ArrayType(42,FloatType)),param(Id(__),ArrayType(62,IntType)),param(Id(L),ArrayType(62,IntType)),param(Id(_),ArrayType(62,IntType)),param(Id(___),ArrayType(62,IntType)),param(Id(M),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 510))

    def test_511(self):
        line = '''Class __E8:_1_{}Class _Y_:K{Constructor (Z,F:Array [Array [Array [Array [Array [Float ,0137],0X2],0B1_00_1],96],0X1]){}Val _7,_,_,$7,e:Array [String ,37_03];}Class yI2:_{}Class l4{}'''
        expect = '''Program([ClassDecl(Id(__E8),Id(_1_),[]),ClassDecl(Id(_Y_),Id(K),[MethodDecl(Id(Constructor),Instance,[param(Id(Z),ArrayType(1,ArrayType(96,ArrayType(9,ArrayType(2,ArrayType(95,FloatType)))))),param(Id(F),ArrayType(1,ArrayType(96,ArrayType(9,ArrayType(2,ArrayType(95,FloatType))))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_7),ArrayType(3703,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(3703,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(3703,StringType),None)),AttributeDecl(Static,ConstDecl(Id($7),ArrayType(3703,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(e),ArrayType(3703,StringType),None))]),ClassDecl(Id(yI2),Id(_),[]),ClassDecl(Id(l4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 511))

    def test_512(self):
        line = '''Class _:_i{Val _,$1:Float ;$xw7(_3c_,__:Array [Float ,0xA9_8_C_D];ck8_:Float ;_7,R:Int ;i,__,d,_,_:Array [Array [Array [Boolean ,0b1001110],57],0X6];K_,_97j,_:mp5){} }Class u_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_i),[AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($1),FloatType,None)),MethodDecl(Id($xw7),Static,[param(Id(_3c_),ArrayType(694477,FloatType)),param(Id(__),ArrayType(694477,FloatType)),param(Id(ck8_),FloatType),param(Id(_7),IntType),param(Id(R),IntType),param(Id(i),ArrayType(6,ArrayType(57,ArrayType(78,BoolType)))),param(Id(__),ArrayType(6,ArrayType(57,ArrayType(78,BoolType)))),param(Id(d),ArrayType(6,ArrayType(57,ArrayType(78,BoolType)))),param(Id(_),ArrayType(6,ArrayType(57,ArrayType(78,BoolType)))),param(Id(_),ArrayType(6,ArrayType(57,ArrayType(78,BoolType)))),param(Id(K_),ClassType(Id(mp5))),param(Id(_97j),ClassType(Id(mp5))),param(Id(_),ClassType(Id(mp5)))],Block([]))]),ClassDecl(Id(u_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 512))

    def test_513(self):
        line = '''Class _:_1_bxP{Constructor (O_,_:_6){} }Class f:_1{}Class _{}Class _{Var H425,W:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0B1001010],0b10101],02],80],041],80],0x64],0X6_3];}Class z{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_1_bxP),[MethodDecl(Id(Constructor),Instance,[param(Id(O_),ClassType(Id(_6))),param(Id(_),ClassType(Id(_6)))],Block([]))]),ClassDecl(Id(f),Id(_1),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(H425),ArrayType(99,ArrayType(100,ArrayType(80,ArrayType(33,ArrayType(80,ArrayType(2,ArrayType(21,ArrayType(74,BoolType)))))))))),AttributeDecl(Instance,VarDecl(Id(W),ArrayType(99,ArrayType(100,ArrayType(80,ArrayType(33,ArrayType(80,ArrayType(2,ArrayType(21,ArrayType(74,BoolType))))))))))]),ClassDecl(Id(z),[])])'''
        self.assertTrue(TestAST.test(line, expect, 513))

    def test_514(self):
        line = '''Class E7X{Constructor (_,_,s3_,_,__,___3lo,x4:String ;_:String ){}Constructor (){}Constructor (_:String ){}$26k0(_:Array [Array [Boolean ,0x15],0b10_1];_:Array [Boolean ,0x15]){Return ;} }'''
        expect = '''Program([ClassDecl(Id(E7X),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(_),StringType),param(Id(s3_),StringType),param(Id(_),StringType),param(Id(__),StringType),param(Id(___3lo),StringType),param(Id(x4),StringType),param(Id(_),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType)],Block([])),MethodDecl(Id($26k0),Static,[param(Id(_),ArrayType(5,ArrayType(21,BoolType))),param(Id(_),ArrayType(21,BoolType))],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 514))

    def test_515(self):
        line = '''Class s{Var _:String ;Constructor (__r:Array [Boolean ,0B111010];u_:_;_2:Array [Array [Int ,02],8];_s:Array [Float ,0b1001110];_,_2_,n,_:Array [Boolean ,0b1001110];n_:Array [Int ,0b1001110]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(s),[AttributeDecl(Instance,VarDecl(Id(_),StringType)),MethodDecl(Id(Constructor),Instance,[param(Id(__r),ArrayType(58,BoolType)),param(Id(u_),ClassType(Id(_))),param(Id(_2),ArrayType(8,ArrayType(2,IntType))),param(Id(_s),ArrayType(78,FloatType)),param(Id(_),ArrayType(78,BoolType)),param(Id(_2_),ArrayType(78,BoolType)),param(Id(n),ArrayType(78,BoolType)),param(Id(_),ArrayType(78,BoolType)),param(Id(n_),ArrayType(78,IntType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 515))

    def test_516(self):
        line = '''Class _ms{Constructor (_,c,W,N_,__:Array [Boolean ,99]){} }Class _____{Val $5:Int ;Var $f:Array [Array [Array [Array [Array [Array [String ,04],0b1010],0XA78B_0],0b11],12],0120];}'''
        expect = '''Program([ClassDecl(Id(_ms),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(99,BoolType)),param(Id(c),ArrayType(99,BoolType)),param(Id(W),ArrayType(99,BoolType)),param(Id(N_),ArrayType(99,BoolType)),param(Id(__),ArrayType(99,BoolType))],Block([]))]),ClassDecl(Id(_____),[AttributeDecl(Static,ConstDecl(Id($5),IntType,None)),AttributeDecl(Static,VarDecl(Id($f),ArrayType(80,ArrayType(12,ArrayType(3,ArrayType(686256,ArrayType(10,ArrayType(4,StringType))))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 516))

    def test_517(self):
        line = '''Class u{Constructor (){Break ;}Constructor (_,___6__m,Pk:Float ;_Z:Int ;_,_A:Array [Array [Int ,076],0b1];k1:J_ey23;S,_,F:Array [String ,0XC];_F_,_:Int ;sS6_9L_:H){} }'''
        expect = '''Program([ClassDecl(Id(u),[MethodDecl(Id(Constructor),Instance,[],Block([Break])),MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(___6__m),FloatType),param(Id(Pk),FloatType),param(Id(_Z),IntType),param(Id(_),ArrayType(1,ArrayType(62,IntType))),param(Id(_A),ArrayType(1,ArrayType(62,IntType))),param(Id(k1),ClassType(Id(J_ey23))),param(Id(S),ArrayType(12,StringType)),param(Id(_),ArrayType(12,StringType)),param(Id(F),ArrayType(12,StringType)),param(Id(_F_),IntType),param(Id(_),IntType),param(Id(sS6_9L_),ClassType(Id(H)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 517))

    def test_518(self):
        line = '''Class ___v:_m__{u_13(_:Array [String ,03]){} }Class u{Var $i,A_:Array [Int ,0b110000];Constructor (AuZ,i7,_,_H,T_3_,_5,P8:Array [Array [Array [Array [String ,0X27],47],0b110000],0b11];___,__,u,_,b:_wv;CA_:Array [Int ,01_5_6]){}Constructor (___,JA:Boolean ){Continue ;Break ;} }Class _3{}'''
        expect = '''Program([ClassDecl(Id(___v),Id(_m__),[MethodDecl(Id(u_13),Instance,[param(Id(_),ArrayType(3,StringType))],Block([]))]),ClassDecl(Id(u),[AttributeDecl(Static,VarDecl(Id($i),ArrayType(48,IntType))),AttributeDecl(Instance,VarDecl(Id(A_),ArrayType(48,IntType))),MethodDecl(Id(Constructor),Instance,[param(Id(AuZ),ArrayType(3,ArrayType(48,ArrayType(47,ArrayType(39,StringType))))),param(Id(i7),ArrayType(3,ArrayType(48,ArrayType(47,ArrayType(39,StringType))))),param(Id(_),ArrayType(3,ArrayType(48,ArrayType(47,ArrayType(39,StringType))))),param(Id(_H),ArrayType(3,ArrayType(48,ArrayType(47,ArrayType(39,StringType))))),param(Id(T_3_),ArrayType(3,ArrayType(48,ArrayType(47,ArrayType(39,StringType))))),param(Id(_5),ArrayType(3,ArrayType(48,ArrayType(47,ArrayType(39,StringType))))),param(Id(P8),ArrayType(3,ArrayType(48,ArrayType(47,ArrayType(39,StringType))))),param(Id(___),ClassType(Id(_wv))),param(Id(__),ClassType(Id(_wv))),param(Id(u),ClassType(Id(_wv))),param(Id(_),ClassType(Id(_wv))),param(Id(b),ClassType(Id(_wv))),param(Id(CA_),ArrayType(110,IntType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(___),BoolType),param(Id(JA),BoolType)],Block([Continue,Break]))]),ClassDecl(Id(_3),[])])'''
        self.assertTrue(TestAST.test(line, expect, 518))

    def test_519(self):
        line = '''Class C{Var $m0,$_:Array [Array [Boolean ,07],84];Constructor (_7as08,D,_:Array [Array [Array [Float ,0B1010111],84],0b1]){Var y6,r0_,F,_X:Array [Array [Array [Float ,0X2_7_57_D_5_F_6],0x37],0x37];Break ;Val __:Float ;}Val $__0:Array [Boolean ,84];Val $a_,ot_:Float ;Val $E,d:Array [Boolean ,0x37];}Class I6_:A{Constructor (){Break ;}Val $_dB:String ;}'''
        expect = '''Program([ClassDecl(Id(C),[AttributeDecl(Static,VarDecl(Id($m0),ArrayType(84,ArrayType(7,BoolType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(84,ArrayType(7,BoolType)))),MethodDecl(Id(Constructor),Instance,[param(Id(_7as08),ArrayType(1,ArrayType(84,ArrayType(87,FloatType)))),param(Id(D),ArrayType(1,ArrayType(84,ArrayType(87,FloatType)))),param(Id(_),ArrayType(1,ArrayType(84,ArrayType(87,FloatType))))],Block([VarDecl(Id(y6),ArrayType(55,ArrayType(55,ArrayType(660067830,FloatType)))),VarDecl(Id(r0_),ArrayType(55,ArrayType(55,ArrayType(660067830,FloatType)))),VarDecl(Id(F),ArrayType(55,ArrayType(55,ArrayType(660067830,FloatType)))),VarDecl(Id(_X),ArrayType(55,ArrayType(55,ArrayType(660067830,FloatType)))),Break,ConstDecl(Id(__),FloatType,None)])),AttributeDecl(Static,ConstDecl(Id($__0),ArrayType(84,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($a_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(ot_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($E),ArrayType(55,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(d),ArrayType(55,BoolType),None))]),ClassDecl(Id(I6_),Id(A),[MethodDecl(Id(Constructor),Instance,[],Block([Break])),AttributeDecl(Static,ConstDecl(Id($_dB),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 519))

    def test_520(self):
        line = '''Class F:_U_{Destructor (){} }Class _{Val __,$7:Array [Array [Float ,22],34_2];}Class _08:_P1{Constructor (X:Array [Int ,042];t,d:Boolean ;_:String ;_b:_;__aT:Boolean ;D:b){Return ;} }Class _4{}'''
        expect = '''Program([ClassDecl(Id(F),Id(_U_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(342,ArrayType(22,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($7),ArrayType(342,ArrayType(22,FloatType)),None))]),ClassDecl(Id(_08),Id(_P1),[MethodDecl(Id(Constructor),Instance,[param(Id(X),ArrayType(34,IntType)),param(Id(t),BoolType),param(Id(d),BoolType),param(Id(_),StringType),param(Id(_b),ClassType(Id(_))),param(Id(__aT),BoolType),param(Id(D),ClassType(Id(b)))],Block([Return()]))]),ClassDecl(Id(_4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 520))

    def test_521(self):
        line = '''Class M{}Class ___y:_{Destructor (){}t(){}Var $Q8,$j,b,k9_5_:Int ;}Class _:_{Constructor (K,p7G7m,t,___9:_){Continue ;}Constructor (m66:Float ;dK2,Rr:Array [String ,06_4_2]){} }'''
        expect = '''Program([ClassDecl(Id(M),[]),ClassDecl(Id(___y),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(t),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($Q8),IntType)),AttributeDecl(Static,VarDecl(Id($j),IntType)),AttributeDecl(Instance,VarDecl(Id(b),IntType)),AttributeDecl(Instance,VarDecl(Id(k9_5_),IntType))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(K),ClassType(Id(_))),param(Id(p7G7m),ClassType(Id(_))),param(Id(t),ClassType(Id(_))),param(Id(___9),ClassType(Id(_)))],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(m66),FloatType),param(Id(dK2),ArrayType(418,StringType)),param(Id(Rr),ArrayType(418,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 521))

    def test_522(self):
        line = '''Class _{Constructor (){}Var __gB_,$VK,O,___:R_;Var $O6,z,D:_;Constructor (){}Val t:Float ;}Class Q:X7{}Class g:y{Val $j,$_28:Float ;Val b:Z;}Class O{U(_4_r_,_:_3;_,_:Array [Boolean ,0b1]){} }Class _4{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(__gB_),ClassType(Id(R_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($VK),ClassType(Id(R_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(O),ClassType(Id(R_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(___),ClassType(Id(R_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($O6),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(z),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(D),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(t),FloatType,None))]),ClassDecl(Id(Q),Id(X7),[]),ClassDecl(Id(g),Id(y),[AttributeDecl(Static,ConstDecl(Id($j),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_28),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(b),ClassType(Id(Z)),NullLiteral()))]),ClassDecl(Id(O),[MethodDecl(Id(U),Instance,[param(Id(_4_r_),ClassType(Id(_3))),param(Id(_),ClassType(Id(_3))),param(Id(_),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType))],Block([]))]),ClassDecl(Id(_4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 522))

    def test_523(self):
        line = '''Class vO{$3(_08:S;_:Array [Array [Float ,043],0b11];_95:Array [Array [Float ,043],1_7]){}Var _S2I:__;Var q,$__,_,$q,$_:_;__j4(_:String ;t,p5,_A6_Bg:_;m,_28:Array [Array [Array [Array [Array [Int ,0b1010100],0B10011],0B10011],84],692];_,_:Int ){}Val $7:_p;Constructor (_4,_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(vO),[MethodDecl(Id($3),Static,[param(Id(_08),ClassType(Id(S))),param(Id(_),ArrayType(3,ArrayType(35,FloatType))),param(Id(_95),ArrayType(17,ArrayType(35,FloatType)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_S2I),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(q),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($q),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(__j4),Instance,[param(Id(_),StringType),param(Id(t),ClassType(Id(_))),param(Id(p5),ClassType(Id(_))),param(Id(_A6_Bg),ClassType(Id(_))),param(Id(m),ArrayType(692,ArrayType(84,ArrayType(19,ArrayType(19,ArrayType(84,IntType)))))),param(Id(_28),ArrayType(692,ArrayType(84,ArrayType(19,ArrayType(19,ArrayType(84,IntType)))))),param(Id(_),IntType),param(Id(_),IntType)],Block([])),AttributeDecl(Static,ConstDecl(Id($7),ClassType(Id(_p)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_4),BoolType),param(Id(_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 523))

    def test_524(self):
        line = '''Class _{Constructor (_,__:m;C,_9,I:Int ;_:Array [Array [Array [Boolean ,0B111011],0B111011],0X98_0_A];_l__,__,fV0,ng,___5L:_M7){}Var $8ZK,$L,$a49:Array [Array [Float ,0B111011],0x3D];Constructor (){}_(__,A:Array [Array [Float ,34],0B111011];F,s:Array [Array [Array [Array [Array [Array [Array [Float ,0B111011],0x2],0b11_0],34],0b1001110],0b1001110],017]){}Val $1_0,_N8,vB_v_:String ;Destructor (){} }Class x:_{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(m))),param(Id(__),ClassType(Id(m))),param(Id(C),IntType),param(Id(_9),IntType),param(Id(I),IntType),param(Id(_),ArrayType(38922,ArrayType(59,ArrayType(59,BoolType)))),param(Id(_l__),ClassType(Id(_M7))),param(Id(__),ClassType(Id(_M7))),param(Id(fV0),ClassType(Id(_M7))),param(Id(ng),ClassType(Id(_M7))),param(Id(___5L),ClassType(Id(_M7)))],Block([])),AttributeDecl(Static,VarDecl(Id($8ZK),ArrayType(61,ArrayType(59,FloatType)))),AttributeDecl(Static,VarDecl(Id($L),ArrayType(61,ArrayType(59,FloatType)))),AttributeDecl(Static,VarDecl(Id($a49),ArrayType(61,ArrayType(59,FloatType)))),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(__),ArrayType(59,ArrayType(34,FloatType))),param(Id(A),ArrayType(59,ArrayType(34,FloatType))),param(Id(F),ArrayType(15,ArrayType(78,ArrayType(78,ArrayType(34,ArrayType(6,ArrayType(2,ArrayType(59,FloatType)))))))),param(Id(s),ArrayType(15,ArrayType(78,ArrayType(78,ArrayType(34,ArrayType(6,ArrayType(2,ArrayType(59,FloatType))))))))],Block([])),AttributeDecl(Static,ConstDecl(Id($1_0),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_N8),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(vB_v_),StringType,None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(x),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 524))

    def test_525(self):
        line = '''Class X_{}Class P{Var $__6,$7_,_3:Float ;}Class _:__0{Val $0B,S,$O_ZY_qY2k:Boolean ;Val _:Boolean ;}Class g{Val pMF,a_,_I_,$_1_4_,k5,$_Y_5,$98_,$__:Array [String ,0b1000000];}'''
        expect = '''Program([ClassDecl(Id(X_),[]),ClassDecl(Id(P),[AttributeDecl(Static,VarDecl(Id($__6),FloatType)),AttributeDecl(Static,VarDecl(Id($7_),FloatType)),AttributeDecl(Instance,VarDecl(Id(_3),FloatType))]),ClassDecl(Id(_),Id(__0),[AttributeDecl(Static,ConstDecl(Id($0B),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(S),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($O_ZY_qY2k),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None))]),ClassDecl(Id(g),[AttributeDecl(Instance,ConstDecl(Id(pMF),ArrayType(64,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(a_),ArrayType(64,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_I_),ArrayType(64,StringType),None)),AttributeDecl(Static,ConstDecl(Id($_1_4_),ArrayType(64,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(k5),ArrayType(64,StringType),None)),AttributeDecl(Static,ConstDecl(Id($_Y_5),ArrayType(64,StringType),None)),AttributeDecl(Static,ConstDecl(Id($98_),ArrayType(64,StringType),None)),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(64,StringType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 525))

    def test_526(self):
        line = '''Class p_r{Constructor (__G:__x7wb){}Destructor (){Continue ;} }Class l_{}Class _:tz{Destructor (){}Val $H,_,$_,$_6_,$8,$_N,$_YnB,$fW:Float ;}Class __U__:m{$X(){} }'''
        expect = '''Program([ClassDecl(Id(p_r),[MethodDecl(Id(Constructor),Instance,[param(Id(__G),ClassType(Id(__x7wb)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))]),ClassDecl(Id(l_),[]),ClassDecl(Id(_),Id(tz),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($H),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_6_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($8),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_N),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_YnB),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($fW),FloatType,None))]),ClassDecl(Id(__U__),Id(m),[MethodDecl(Id($X),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 526))

    def test_527(self):
        line = '''Class F:u__N{Val $_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,02],0B1_1_01_0],07_7],03],02_7],0XE3],0X3_2],0X4],01],021];}Class FI:__2{_(wi_,_1:Array [Array [Array [Array [Float ,0X72_D_4],53],0B10],0b10]){_::$6();} }Class _{}'''
        expect = '''Program([ClassDecl(Id(F),Id(u__N),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(17,ArrayType(1,ArrayType(4,ArrayType(50,ArrayType(227,ArrayType(23,ArrayType(3,ArrayType(63,ArrayType(26,ArrayType(2,BoolType)))))))))),None))]),ClassDecl(Id(FI),Id(__2),[MethodDecl(Id(_),Instance,[param(Id(wi_),ArrayType(2,ArrayType(2,ArrayType(53,ArrayType(29396,FloatType))))),param(Id(_1),ArrayType(2,ArrayType(2,ArrayType(53,ArrayType(29396,FloatType)))))],Block([Call(Id(_),Id($6),[])]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 527))

    def test_528(self):
        line = '''Class __7{Constructor (_:Array [String ,0b1001111]){Continue ;}Var $_,$9_,$__,FB,e1,$x,$8,q_,K:Array [Boolean ,0xA];Constructor (b_V,k:_2;__,iF_,_:Array [String ,03]){} }'''
        expect = '''Program([ClassDecl(Id(__7),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(79,StringType))],Block([Continue])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(10,BoolType))),AttributeDecl(Static,VarDecl(Id($9_),ArrayType(10,BoolType))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(10,BoolType))),AttributeDecl(Instance,VarDecl(Id(FB),ArrayType(10,BoolType))),AttributeDecl(Instance,VarDecl(Id(e1),ArrayType(10,BoolType))),AttributeDecl(Static,VarDecl(Id($x),ArrayType(10,BoolType))),AttributeDecl(Static,VarDecl(Id($8),ArrayType(10,BoolType))),AttributeDecl(Instance,VarDecl(Id(q_),ArrayType(10,BoolType))),AttributeDecl(Instance,VarDecl(Id(K),ArrayType(10,BoolType))),MethodDecl(Id(Constructor),Instance,[param(Id(b_V),ClassType(Id(_2))),param(Id(k),ClassType(Id(_2))),param(Id(__),ArrayType(3,StringType)),param(Id(iF_),ArrayType(3,StringType)),param(Id(_),ArrayType(3,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 528))

    def test_529(self):
        line = '''Class _{Val x,I:Array [String ,07];K2__(__,_:Array [Float ,072]){}Var $7_,_,l_,__:Array [Array [String ,04],0B1];}Class hO8u:N7{Var $8__,c,$V_Q,$Q:n;}Class __:_{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(x),ArrayType(7,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(I),ArrayType(7,StringType),None)),MethodDecl(Id(K2__),Instance,[param(Id(__),ArrayType(58,FloatType)),param(Id(_),ArrayType(58,FloatType))],Block([])),AttributeDecl(Static,VarDecl(Id($7_),ArrayType(1,ArrayType(4,StringType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,ArrayType(4,StringType)))),AttributeDecl(Instance,VarDecl(Id(l_),ArrayType(1,ArrayType(4,StringType)))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(1,ArrayType(4,StringType))))]),ClassDecl(Id(hO8u),Id(N7),[AttributeDecl(Static,VarDecl(Id($8__),ClassType(Id(n)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(c),ClassType(Id(n)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($V_Q),ClassType(Id(n)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($Q),ClassType(Id(n)),NullLiteral()))]),ClassDecl(Id(__),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 529))

    def test_530(self):
        line = '''Class s:M{Constructor (_:q;____X:Array [Array [Array [Array [Array [Boolean ,2_6],0x37],0x37],0124],06_1];D:Int ){ {}Continue ;Continue ;} }Class X{Val z1b:Int ;}Class x:_{Val $_:_;}'''
        expect = '''Program([ClassDecl(Id(s),Id(M),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(q))),param(Id(____X),ArrayType(49,ArrayType(84,ArrayType(55,ArrayType(55,ArrayType(26,BoolType)))))),param(Id(D),IntType)],Block([Block([]),Continue,Continue]))]),ClassDecl(Id(X),[AttributeDecl(Instance,ConstDecl(Id(z1b),IntType,None))]),ClassDecl(Id(x),Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 530))

    def test_531(self):
        line = '''Class _:_R8{}Class ig_{Val $I9:Boolean ;$_(){} }Class __F:B{}Class L3L{Val f:Array [Float ,0115];B1(_:_Nd;w76,_:Boolean ;_5_:Array [Array [Array [Array [Array [Boolean ,0b1100],0115],18],0115],0X7]){}Destructor (){} }Class __{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_R8),[]),ClassDecl(Id(ig_),[AttributeDecl(Static,ConstDecl(Id($I9),BoolType,None)),MethodDecl(Id($_),Static,[],Block([]))]),ClassDecl(Id(__F),Id(B),[]),ClassDecl(Id(L3L),[AttributeDecl(Instance,ConstDecl(Id(f),ArrayType(77,FloatType),None)),MethodDecl(Id(B1),Instance,[param(Id(_),ClassType(Id(_Nd))),param(Id(w76),BoolType),param(Id(_),BoolType),param(Id(_5_),ArrayType(7,ArrayType(77,ArrayType(18,ArrayType(77,ArrayType(12,BoolType))))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 531))

    def test_532(self):
        line = '''Class o_f{Constructor (qW:Int ;___oji_,d:_8;_8,j,ox:Float ;v7:Array [Array [Array [Array [Array [Array [Array [Array [String ,0b11_0_11],0x61],06],0B1],0b1],05],023],0B10]){} }'''
        expect = '''Program([ClassDecl(Id(o_f),[MethodDecl(Id(Constructor),Instance,[param(Id(qW),IntType),param(Id(___oji_),ClassType(Id(_8))),param(Id(d),ClassType(Id(_8))),param(Id(_8),FloatType),param(Id(j),FloatType),param(Id(ox),FloatType),param(Id(v7),ArrayType(2,ArrayType(19,ArrayType(5,ArrayType(1,ArrayType(1,ArrayType(6,ArrayType(97,ArrayType(27,StringType)))))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 532))

    def test_533(self):
        line = '''Class E:_{}Class __:_{}Class _t{Var _6:Array [Array [Array [Array [Array [Array [Int ,0B111100],07],0X2],0B1],0XF_C_E_A],0B1];}Class o{}Class _4C{}Class _{Destructor (){ {} }}'''
        expect = '''Program([ClassDecl(Id(E),Id(_),[]),ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(_t),[AttributeDecl(Instance,VarDecl(Id(_6),ArrayType(1,ArrayType(64746,ArrayType(1,ArrayType(2,ArrayType(7,ArrayType(60,IntType))))))))]),ClassDecl(Id(o),[]),ClassDecl(Id(_4C),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 533))

    def test_534(self):
        line = '''Class j{Constructor (){}Var S6,dT_8,h,i2:Array [Float ,29];Constructor (uo,_:Array [Float ,0X2C];C,_:_;Q8:_;_u:Array [Array [Int ,8],0B1];r:T5){}$S_(){}Var X_,$8,$_5,N,_:_6N;Var v:Boolean ;}Class W{Destructor (){} }Class Xt{}Class C1q60:MZ{}Class _l:_6i5c{Val ob,_:Array [Array [String ,29],016_0_4_2_5_2_4_0];}Class kM_:__{}Class _{}'''
        expect = '''Program([ClassDecl(Id(j),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(S6),ArrayType(29,FloatType))),AttributeDecl(Instance,VarDecl(Id(dT_8),ArrayType(29,FloatType))),AttributeDecl(Instance,VarDecl(Id(h),ArrayType(29,FloatType))),AttributeDecl(Instance,VarDecl(Id(i2),ArrayType(29,FloatType))),MethodDecl(Id(Constructor),Instance,[param(Id(uo),ArrayType(44,FloatType)),param(Id(_),ArrayType(44,FloatType)),param(Id(C),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(Q8),ClassType(Id(_))),param(Id(_u),ArrayType(1,ArrayType(8,IntType))),param(Id(r),ClassType(Id(T5)))],Block([])),MethodDecl(Id($S_),Static,[],Block([])),AttributeDecl(Instance,VarDecl(Id(X_),ClassType(Id(_6N)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($8),ClassType(Id(_6N)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_5),ClassType(Id(_6N)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(N),ClassType(Id(_6N)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_6N)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(v),BoolType))]),ClassDecl(Id(W),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(Xt),[]),ClassDecl(Id(C1q60),Id(MZ),[]),ClassDecl(Id(_l),Id(_6i5c),[AttributeDecl(Instance,ConstDecl(Id(ob),ArrayType(29502112,ArrayType(29,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(29502112,ArrayType(29,StringType)),None))]),ClassDecl(Id(kM_),Id(__),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 534))

    def test_535(self):
        line = '''Class t{Destructor (){}Var e:Z;Constructor (qv,_,_,kI42Yt,_8:Int ;V,L_KgD:_;n:_;i:_0;d:Array [String ,0x8_7];p0,X6:Array [Array [Array [Float ,0B10001],0B10001],0b1_1]){Var _:Array [Array [Int ,0X5E],04];} }'''
        expect = '''Program([ClassDecl(Id(t),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(e),ClassType(Id(Z)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(qv),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(kI42Yt),IntType),param(Id(_8),IntType),param(Id(V),ClassType(Id(_))),param(Id(L_KgD),ClassType(Id(_))),param(Id(n),ClassType(Id(_))),param(Id(i),ClassType(Id(_0))),param(Id(d),ArrayType(135,StringType)),param(Id(p0),ArrayType(3,ArrayType(17,ArrayType(17,FloatType)))),param(Id(X6),ArrayType(3,ArrayType(17,ArrayType(17,FloatType))))],Block([VarDecl(Id(_),ArrayType(4,ArrayType(94,IntType)))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 535))

    def test_536(self):
        line = '''Class hj{$A(_U,_4,L:Int ;_9V_,Kt:Array [Float ,90]){} }Class EQ_{Constructor (Q07:Array [Array [Int ,05_4_4],0b10_1]){} }Class O_{Destructor (){Continue ;Continue ;R::$7_d();Return ;} }Class __xM{Val b_0_2_X3e_:Y3;}Class D{Var _,$V,_:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(hj),[MethodDecl(Id($A),Static,[param(Id(_U),IntType),param(Id(_4),IntType),param(Id(L),IntType),param(Id(_9V_),ArrayType(90,FloatType)),param(Id(Kt),ArrayType(90,FloatType))],Block([]))]),ClassDecl(Id(EQ_),[MethodDecl(Id(Constructor),Instance,[param(Id(Q07),ArrayType(5,ArrayType(356,IntType)))],Block([]))]),ClassDecl(Id(O_),[MethodDecl(Id(Destructor),Instance,[],Block([Continue,Continue,Call(Id(R),Id($7_d),[]),Return()]))]),ClassDecl(Id(__xM),[AttributeDecl(Instance,ConstDecl(Id(b_0_2_X3e_),ClassType(Id(Y3)),NullLiteral()))]),ClassDecl(Id(D),[AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Static,VarDecl(Id($V),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 536))

    def test_537(self):
        line = '''Class _3di{}Class p:__{Destructor (){} }Class X:I{Var _,$_V:Array [Boolean ,016_7_0];Constructor (_c,f:M;r2_:Array [Array [Int ,9],0b11011];__O:h_;o__2:Array [Array [Int ,75],0b11011]){} }'''
        expect = '''Program([ClassDecl(Id(_3di),[]),ClassDecl(Id(p),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(X),Id(I),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(952,BoolType))),AttributeDecl(Static,VarDecl(Id($_V),ArrayType(952,BoolType))),MethodDecl(Id(Constructor),Instance,[param(Id(_c),ClassType(Id(M))),param(Id(f),ClassType(Id(M))),param(Id(r2_),ArrayType(27,ArrayType(9,IntType))),param(Id(__O),ClassType(Id(h_))),param(Id(o__2),ArrayType(27,ArrayType(75,IntType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 537))

    def test_538(self):
        line = '''Class q{}Class Y:E{Destructor (){}Val _:Array [Float ,0x6_D_A];Var _,s,K_:Float ;Constructor (_4_:String ;_:Array [Array [Array [Float ,0b1001101],0X7],12]){} }Class j_{$2X(f5:Array [Array [Int ,0b1],03]){}Var _,_:d;Constructor (h_5:Array [Boolean ,0B111010]){}Val $__9f_,$2JzW,$_,$_:Boolean ;Constructor (i:Array [Boolean ,0x5];D,_,n:Int ){} }'''
        expect = '''Program([ClassDecl(Id(q),[]),ClassDecl(Id(Y),Id(E),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1754,FloatType),None)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Instance,VarDecl(Id(s),FloatType)),AttributeDecl(Instance,VarDecl(Id(K_),FloatType)),MethodDecl(Id(Constructor),Instance,[param(Id(_4_),StringType),param(Id(_),ArrayType(12,ArrayType(7,ArrayType(77,FloatType))))],Block([]))]),ClassDecl(Id(j_),[MethodDecl(Id($2X),Static,[param(Id(f5),ArrayType(3,ArrayType(1,IntType)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(d)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(d)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(h_5),ArrayType(58,BoolType))],Block([])),AttributeDecl(Static,ConstDecl(Id($__9f_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($2JzW),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(i),ArrayType(5,BoolType)),param(Id(D),IntType),param(Id(_),IntType),param(Id(n),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 538))

    def test_539(self):
        line = '''Class __:z{Val _:Boolean ;_(){} }Class c__{Constructor (){Break ;Val E,d,_:_4;}Val _,_:String ;Var S,Q,_7_,$__,$G0:String ;Constructor (Kr___,b,_:Array [Array [Array [Array [String ,07],0XF],03],89]){}Destructor (){}Var __,$J_,$_:_Ms;}'''
        expect = '''Program([ClassDecl(Id(__),Id(z),[AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(c__),[MethodDecl(Id(Constructor),Instance,[],Block([Break,ConstDecl(Id(E),ClassType(Id(_4)),NullLiteral()),ConstDecl(Id(d),ClassType(Id(_4)),NullLiteral()),ConstDecl(Id(_),ClassType(Id(_4)),NullLiteral())])),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Instance,VarDecl(Id(S),StringType)),AttributeDecl(Instance,VarDecl(Id(Q),StringType)),AttributeDecl(Instance,VarDecl(Id(_7_),StringType)),AttributeDecl(Static,VarDecl(Id($__),StringType)),AttributeDecl(Static,VarDecl(Id($G0),StringType)),MethodDecl(Id(Constructor),Instance,[param(Id(Kr___),ArrayType(89,ArrayType(3,ArrayType(15,ArrayType(7,StringType))))),param(Id(b),ArrayType(89,ArrayType(3,ArrayType(15,ArrayType(7,StringType))))),param(Id(_),ArrayType(89,ArrayType(3,ArrayType(15,ArrayType(7,StringType)))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(_Ms)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($J_),ClassType(Id(_Ms)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_Ms)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 539))

    def test_540(self):
        line = '''Class _{}Class L:__0N_2{}Class g:_{Constructor (_:Array [Array [Boolean ,87],0XA]){} }Class __u{Constructor (z_E,_,V:_9_;__z,E1Z8,P_,l,t,_s,_2:G;x9,T__,_:Array [Array [Array [Boolean ,0b100111],024],87]){Continue ;Continue ;}n7(k,X6:Array [String ,87]){} }Class _0_05:U{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(L),Id(__0N_2),[]),ClassDecl(Id(g),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(10,ArrayType(87,BoolType)))],Block([]))]),ClassDecl(Id(__u),[MethodDecl(Id(Constructor),Instance,[param(Id(z_E),ClassType(Id(_9_))),param(Id(_),ClassType(Id(_9_))),param(Id(V),ClassType(Id(_9_))),param(Id(__z),ClassType(Id(G))),param(Id(E1Z8),ClassType(Id(G))),param(Id(P_),ClassType(Id(G))),param(Id(l),ClassType(Id(G))),param(Id(t),ClassType(Id(G))),param(Id(_s),ClassType(Id(G))),param(Id(_2),ClassType(Id(G))),param(Id(x9),ArrayType(87,ArrayType(20,ArrayType(39,BoolType)))),param(Id(T__),ArrayType(87,ArrayType(20,ArrayType(39,BoolType)))),param(Id(_),ArrayType(87,ArrayType(20,ArrayType(39,BoolType))))],Block([Continue,Continue])),MethodDecl(Id(n7),Instance,[param(Id(k),ArrayType(87,StringType)),param(Id(X6),ArrayType(87,StringType))],Block([]))]),ClassDecl(Id(_0_05),Id(U),[])])'''
        self.assertTrue(TestAST.test(line, expect, 540))

    def test_541(self):
        line = '''Class B:Ie{$_U_c(wt:Array [Array [Float ,034],67]){}Constructor (X17,_5_22_4:_;M,L:Float ;__,c2A:Array [Array [Array [Boolean ,0B1000011],0B1_0],0x22];_:_5_h_1;O,__9:Int ;_,_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(B),Id(Ie),[MethodDecl(Id($_U_c),Static,[param(Id(wt),ArrayType(67,ArrayType(28,FloatType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(X17),ClassType(Id(_))),param(Id(_5_22_4),ClassType(Id(_))),param(Id(M),FloatType),param(Id(L),FloatType),param(Id(__),ArrayType(34,ArrayType(2,ArrayType(67,BoolType)))),param(Id(c2A),ArrayType(34,ArrayType(2,ArrayType(67,BoolType)))),param(Id(_),ClassType(Id(_5_h_1))),param(Id(O),IntType),param(Id(__9),IntType),param(Id(_),BoolType),param(Id(_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 541))

    def test_542(self):
        line = '''Class _ENI:y__3{Var _s6:Array [Array [Array [Array [Array [Int ,02_25],060],0b1010110],15],02_4_5];}Class _:W1{}Class _2:_{Destructor (){} }Class _{Constructor (Xi,t,Y0,U4,__:Array [Array [Array [Float ,0x6],378_70],060];F__:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_ENI),Id(y__3),[AttributeDecl(Instance,VarDecl(Id(_s6),ArrayType(165,ArrayType(15,ArrayType(86,ArrayType(48,ArrayType(149,IntType)))))))]),ClassDecl(Id(_),Id(W1),[]),ClassDecl(Id(_2),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(Xi),ArrayType(48,ArrayType(37870,ArrayType(6,FloatType)))),param(Id(t),ArrayType(48,ArrayType(37870,ArrayType(6,FloatType)))),param(Id(Y0),ArrayType(48,ArrayType(37870,ArrayType(6,FloatType)))),param(Id(U4),ArrayType(48,ArrayType(37870,ArrayType(6,FloatType)))),param(Id(__),ArrayType(48,ArrayType(37870,ArrayType(6,FloatType)))),param(Id(F__),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 542))

    def test_543(self):
        line = '''Class _h{Val $A8f_,$_,_,$_,k7_,$_B:Array [String ,1_6];Val L0:String ;}Class _6{}Class _{w(F,_:Array [Array [Array [String ,26],0110],0110];_h:Array [Array [Array [Float ,042_2],0110],0b100];U:Array [Float ,26]){} }'''
        expect = '''Program([ClassDecl(Id(_h),[AttributeDecl(Static,ConstDecl(Id($A8f_),ArrayType(16,StringType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(16,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(16,StringType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(16,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(k7_),ArrayType(16,StringType),None)),AttributeDecl(Static,ConstDecl(Id($_B),ArrayType(16,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(L0),StringType,None))]),ClassDecl(Id(_6),[]),ClassDecl(Id(_),[MethodDecl(Id(w),Instance,[param(Id(F),ArrayType(72,ArrayType(72,ArrayType(26,StringType)))),param(Id(_),ArrayType(72,ArrayType(72,ArrayType(26,StringType)))),param(Id(_h),ArrayType(4,ArrayType(72,ArrayType(274,FloatType)))),param(Id(U),ArrayType(26,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 543))

    def test_544(self):
        line = '''Class _25{}Class _{$51(M:Boolean ;_:Array [Float ,0x59];_,_,P,T,U:Array [Array [Boolean ,066],38];R___,u,X17,_9:String ){Return ;} }Class M:_{}Class _{}Class E__E_{}Class tZ:M9_{}'''
        expect = '''Program([ClassDecl(Id(_25),[]),ClassDecl(Id(_),[MethodDecl(Id($51),Static,[param(Id(M),BoolType),param(Id(_),ArrayType(89,FloatType)),param(Id(_),ArrayType(38,ArrayType(54,BoolType))),param(Id(_),ArrayType(38,ArrayType(54,BoolType))),param(Id(P),ArrayType(38,ArrayType(54,BoolType))),param(Id(T),ArrayType(38,ArrayType(54,BoolType))),param(Id(U),ArrayType(38,ArrayType(54,BoolType))),param(Id(R___),StringType),param(Id(u),StringType),param(Id(X17),StringType),param(Id(_9),StringType)],Block([Return()]))]),ClassDecl(Id(M),Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(E__E_),[]),ClassDecl(Id(tZ),Id(M9_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 544))

    def test_545(self):
        line = '''Class p{Val $_,$_71_4:Array [Array [Array [Array [String ,40],0X7_1],0b1],40];Destructor (){}Destructor (){Val _M:u;Continue ;}$7a(_:Float ;v,_u:p;__:Int ;_85,_5:C;S_:Float ){ {} }Val $9:Array [Float ,0XC];}'''
        expect = '''Program([ClassDecl(Id(p),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(40,ArrayType(1,ArrayType(113,ArrayType(40,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($_71_4),ArrayType(40,ArrayType(1,ArrayType(113,ArrayType(40,StringType)))),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_M),ClassType(Id(u)),NullLiteral()),Continue])),MethodDecl(Id($7a),Static,[param(Id(_),FloatType),param(Id(v),ClassType(Id(p))),param(Id(_u),ClassType(Id(p))),param(Id(__),IntType),param(Id(_85),ClassType(Id(C))),param(Id(_5),ClassType(Id(C))),param(Id(S_),FloatType)],Block([Block([])])),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(12,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 545))

    def test_546(self):
        line = '''Class pA{Destructor (){} }Class _:G_9{Constructor (Wb5:String ;_:_;E_,v9:Array [Float ,31];_,X:Array [Array [Array [Array [Float ,0100],0100],0x14],0100];Eee,I042:Array [Array [Array [String ,0100],34],067];__,_d,v_37:Array [String ,0100]){} }Class y{Val h,_:Boolean ;Var $u:Z_k_;_76(){} }Class _{_0_7(){} }Class s{}'''
        expect = '''Program([ClassDecl(Id(pA),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(G_9),[MethodDecl(Id(Constructor),Instance,[param(Id(Wb5),StringType),param(Id(_),ClassType(Id(_))),param(Id(E_),ArrayType(31,FloatType)),param(Id(v9),ArrayType(31,FloatType)),param(Id(_),ArrayType(64,ArrayType(20,ArrayType(64,ArrayType(64,FloatType))))),param(Id(X),ArrayType(64,ArrayType(20,ArrayType(64,ArrayType(64,FloatType))))),param(Id(Eee),ArrayType(55,ArrayType(34,ArrayType(64,StringType)))),param(Id(I042),ArrayType(55,ArrayType(34,ArrayType(64,StringType)))),param(Id(__),ArrayType(64,StringType)),param(Id(_d),ArrayType(64,StringType)),param(Id(v_37),ArrayType(64,StringType))],Block([]))]),ClassDecl(Id(y),[AttributeDecl(Instance,ConstDecl(Id(h),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Static,VarDecl(Id($u),ClassType(Id(Z_k_)),NullLiteral())),MethodDecl(Id(_76),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(_0_7),Instance,[],Block([]))]),ClassDecl(Id(s),[])])'''
        self.assertTrue(TestAST.test(line, expect, 546))

    def test_547(self):
        line = '''Class __{}Class Q9{}Class zO_:m_{}Class _bqQ_:N{Val $R,_7:Int ;Constructor (_,P_0_,_:Array [Float ,57]){}Val $_:Array [Array [String ,0x26],2_62_0];__(__,f,f:Array [Boolean ,3_3]){} }'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(Q9),[]),ClassDecl(Id(zO_),Id(m_),[]),ClassDecl(Id(_bqQ_),Id(N),[AttributeDecl(Static,ConstDecl(Id($R),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_7),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(57,FloatType)),param(Id(P_0_),ArrayType(57,FloatType)),param(Id(_),ArrayType(57,FloatType))],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(2620,ArrayType(38,StringType)),None)),MethodDecl(Id(__),Instance,[param(Id(__),ArrayType(33,BoolType)),param(Id(f),ArrayType(33,BoolType)),param(Id(f),ArrayType(33,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 547))

    def test_548(self):
        line = '''Class i{Val $r_8,_,_:Array [String ,074];Constructor (B:String ;_D:_c4){}Var $o:Float ;Val $5,$_V7,qU_0:c0;Constructor (_,or7:Boolean ;_CmW,_:String ;_:Int ;RT4,_:Array [Array [Int ,03],074];_,P42,Rl,_:_;_:_f){ {Break ;} }}'''
        expect = '''Program([ClassDecl(Id(i),[AttributeDecl(Static,ConstDecl(Id($r_8),ArrayType(60,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(60,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(60,StringType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(B),StringType),param(Id(_D),ClassType(Id(_c4)))],Block([])),AttributeDecl(Static,VarDecl(Id($o),FloatType)),AttributeDecl(Static,ConstDecl(Id($5),ClassType(Id(c0)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_V7),ClassType(Id(c0)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(qU_0),ClassType(Id(c0)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(or7),BoolType),param(Id(_CmW),StringType),param(Id(_),StringType),param(Id(_),IntType),param(Id(RT4),ArrayType(60,ArrayType(3,IntType))),param(Id(_),ArrayType(60,ArrayType(3,IntType))),param(Id(_),ClassType(Id(_))),param(Id(P42),ClassType(Id(_))),param(Id(Rl),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_f)))],Block([Block([Break])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 548))

    def test_549(self):
        line = '''Class _:_{}Class z:X{Destructor (){}Var _5:Array [Float ,0X46];__(z0:Array [Int ,0X4];T_i,w,_:Array [Array [Array [Array [Array [Array [Int ,0X46],0x3F],22],051],0x5],0b1]){}Destructor (){ {} }}Class p:r{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(z),Id(X),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_5),ArrayType(70,FloatType))),MethodDecl(Id(__),Instance,[param(Id(z0),ArrayType(4,IntType)),param(Id(T_i),ArrayType(1,ArrayType(5,ArrayType(41,ArrayType(22,ArrayType(63,ArrayType(70,IntType))))))),param(Id(w),ArrayType(1,ArrayType(5,ArrayType(41,ArrayType(22,ArrayType(63,ArrayType(70,IntType))))))),param(Id(_),ArrayType(1,ArrayType(5,ArrayType(41,ArrayType(22,ArrayType(63,ArrayType(70,IntType)))))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(p),Id(r),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 549))

    def test_550(self):
        line = '''Class U_{}Class _F1Z{Constructor (o__:Array [Array [Float ,5],0b1011001]){}Constructor (k_,i,e:Array [Array [Array [Boolean ,0B10011],0X1E],20]){Break ;} }Class d6:_2M{Destructor (){Return ;} }'''
        expect = '''Program([ClassDecl(Id(U_),[]),ClassDecl(Id(_F1Z),[MethodDecl(Id(Constructor),Instance,[param(Id(o__),ArrayType(89,ArrayType(5,FloatType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(k_),ArrayType(20,ArrayType(30,ArrayType(19,BoolType)))),param(Id(i),ArrayType(20,ArrayType(30,ArrayType(19,BoolType)))),param(Id(e),ArrayType(20,ArrayType(30,ArrayType(19,BoolType))))],Block([Break]))]),ClassDecl(Id(d6),Id(_2M),[MethodDecl(Id(Destructor),Instance,[],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 550))

    def test_551(self):
        line = '''Class t_Y{Constructor (_T:Array [String ,06]){}Destructor (){}Constructor (){}Var $7,$y:Array [Boolean ,0xD];Constructor (PQ_1A:Array [Boolean ,03];Du,_y58:Array [String ,045_3];_:Array [String ,0XE];Y:_AAg;_,___0:Boolean ;_:Array [Array [Float ,017],013_46_650];__:Boolean ){} }Class x:O{}'''
        expect = '''Program([ClassDecl(Id(t_Y),[MethodDecl(Id(Constructor),Instance,[param(Id(_T),ArrayType(6,StringType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($7),ArrayType(13,BoolType))),AttributeDecl(Static,VarDecl(Id($y),ArrayType(13,BoolType))),MethodDecl(Id(Constructor),Instance,[param(Id(PQ_1A),ArrayType(3,BoolType)),param(Id(Du),ArrayType(299,StringType)),param(Id(_y58),ArrayType(299,StringType)),param(Id(_),ArrayType(14,StringType)),param(Id(Y),ClassType(Id(_AAg))),param(Id(_),BoolType),param(Id(___0),BoolType),param(Id(_),ArrayType(380328,ArrayType(15,FloatType))),param(Id(__),BoolType)],Block([]))]),ClassDecl(Id(x),Id(O),[])])'''
        self.assertTrue(TestAST.test(line, expect, 551))

    def test_552(self):
        line = '''Class oz{}Class M71:h{}Class _{Destructor (){}Destructor (){Val T,Y,_q,_I,ZT,_C__,_,_q5,g,_4_:Array [Array [String ,045],0XD2E];{} }$__6b(_3,_,_:Float ;_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(oz),[]),ClassDecl(Id(M71),Id(h),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(T),ArrayType(3374,ArrayType(37,StringType)),None),ConstDecl(Id(Y),ArrayType(3374,ArrayType(37,StringType)),None),ConstDecl(Id(_q),ArrayType(3374,ArrayType(37,StringType)),None),ConstDecl(Id(_I),ArrayType(3374,ArrayType(37,StringType)),None),ConstDecl(Id(ZT),ArrayType(3374,ArrayType(37,StringType)),None),ConstDecl(Id(_C__),ArrayType(3374,ArrayType(37,StringType)),None),ConstDecl(Id(_),ArrayType(3374,ArrayType(37,StringType)),None),ConstDecl(Id(_q5),ArrayType(3374,ArrayType(37,StringType)),None),ConstDecl(Id(g),ArrayType(3374,ArrayType(37,StringType)),None),ConstDecl(Id(_4_),ArrayType(3374,ArrayType(37,StringType)),None),Block([])])),MethodDecl(Id($__6b),Static,[param(Id(_3),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 552))

    def test_553(self):
        line = '''Class _{Val __x,$9:w;Val _Vm8K,$_A,$9,$T:Array [Array [Array [Array [Array [Float ,0X3F],0b10001],0625],0B1_11],0b1_00_1];Val C_QD:Array [Int ,0B1010010];Val $R:_;Val P6P,a:_;}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(__x),ClassType(Id(w)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($9),ClassType(Id(w)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_Vm8K),ArrayType(9,ArrayType(7,ArrayType(405,ArrayType(17,ArrayType(63,FloatType))))),None)),AttributeDecl(Static,ConstDecl(Id($_A),ArrayType(9,ArrayType(7,ArrayType(405,ArrayType(17,ArrayType(63,FloatType))))),None)),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(9,ArrayType(7,ArrayType(405,ArrayType(17,ArrayType(63,FloatType))))),None)),AttributeDecl(Static,ConstDecl(Id($T),ArrayType(9,ArrayType(7,ArrayType(405,ArrayType(17,ArrayType(63,FloatType))))),None)),AttributeDecl(Instance,ConstDecl(Id(C_QD),ArrayType(82,IntType),None)),AttributeDecl(Static,ConstDecl(Id($R),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(P6P),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(a),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 553))

    def test_554(self):
        line = '''Class I5{}Class D{_0__(){Continue ;}Constructor (_,J__:Float ;c_:String ;_,y:_;_S_,__:Array [Array [Array [Array [Array [Array [Array [String ,0B1000],064],07],0b100110],0x6_4_4_D],04],3]){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(I5),[]),ClassDecl(Id(D),[MethodDecl(Id(_0__),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(J__),FloatType),param(Id(c_),StringType),param(Id(_),ClassType(Id(_))),param(Id(y),ClassType(Id(_))),param(Id(_S_),ArrayType(3,ArrayType(4,ArrayType(25677,ArrayType(38,ArrayType(7,ArrayType(52,ArrayType(8,StringType)))))))),param(Id(__),ArrayType(3,ArrayType(4,ArrayType(25677,ArrayType(38,ArrayType(7,ArrayType(52,ArrayType(8,StringType))))))))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 554))

    def test_555(self):
        line = '''Class f:Kp_h{}Class h_{Var IR0_,$FS,_:Float ;$___(_a,_,D02:_;_,__0,_:Array [Boolean ,0x8];_:Array [Boolean ,0B1]){}Constructor (TL15_7xD3_,_,_:E8pp){} }Class j__H{}'''
        expect = '''Program([ClassDecl(Id(f),Id(Kp_h),[]),ClassDecl(Id(h_),[AttributeDecl(Instance,VarDecl(Id(IR0_),FloatType)),AttributeDecl(Static,VarDecl(Id($FS),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),MethodDecl(Id($___),Static,[param(Id(_a),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(D02),ClassType(Id(_))),param(Id(_),ArrayType(8,BoolType)),param(Id(__0),ArrayType(8,BoolType)),param(Id(_),ArrayType(8,BoolType)),param(Id(_),ArrayType(1,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(TL15_7xD3_),ClassType(Id(E8pp))),param(Id(_),ClassType(Id(E8pp))),param(Id(_),ClassType(Id(E8pp)))],Block([]))]),ClassDecl(Id(j__H),[])])'''
        self.assertTrue(TestAST.test(line, expect, 555))

    def test_556(self):
        line = '''Class __8{Constructor (){ {} }m(_:M6){} }Class _{U(_Y_,_,E:Array [String ,0x6]){}Var w24_Y_:Array [Array [Array [Array [Int ,05],0x6],0X2F4_E_A_44E_F_4],6];}Class _8:_7_{}Class p4{}'''
        expect = '''Program([ClassDecl(Id(__8),[MethodDecl(Id(Constructor),Instance,[],Block([Block([])])),MethodDecl(Id(m),Instance,[param(Id(_),ClassType(Id(M6)))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(U),Instance,[param(Id(_Y_),ArrayType(6,StringType)),param(Id(_),ArrayType(6,StringType)),param(Id(E),ArrayType(6,StringType))],Block([])),AttributeDecl(Instance,VarDecl(Id(w24_Y_),ArrayType(6,ArrayType(203182853876,ArrayType(6,ArrayType(5,IntType))))))]),ClassDecl(Id(_8),Id(_7_),[]),ClassDecl(Id(p4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 556))

    def test_557(self):
        line = '''Class _:QCD{Constructor (){O::$1__.P();}$4(){}$_(_6X:Float ;G:Boolean ;_8:F_3;_6i:Boolean ;_3,_S,y:Int ;_:O;g_,k,_3,_65,_,_,_:A;z_46,_4,a_j_,__8,_8,o:Array [Array [Boolean ,04],9_23]){ {}Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(QCD),[MethodDecl(Id(Constructor),Instance,[],Block([Call(FieldAccess(Id(O),Id($1__)),Id(P),[])])),MethodDecl(Id($4),Static,[],Block([])),MethodDecl(Id($_),Static,[param(Id(_6X),FloatType),param(Id(G),BoolType),param(Id(_8),ClassType(Id(F_3))),param(Id(_6i),BoolType),param(Id(_3),IntType),param(Id(_S),IntType),param(Id(y),IntType),param(Id(_),ClassType(Id(O))),param(Id(g_),ClassType(Id(A))),param(Id(k),ClassType(Id(A))),param(Id(_3),ClassType(Id(A))),param(Id(_65),ClassType(Id(A))),param(Id(_),ClassType(Id(A))),param(Id(_),ClassType(Id(A))),param(Id(_),ClassType(Id(A))),param(Id(z_46),ArrayType(923,ArrayType(4,BoolType))),param(Id(_4),ArrayType(923,ArrayType(4,BoolType))),param(Id(a_j_),ArrayType(923,ArrayType(4,BoolType))),param(Id(__8),ArrayType(923,ArrayType(4,BoolType))),param(Id(_8),ArrayType(923,ArrayType(4,BoolType))),param(Id(o),ArrayType(923,ArrayType(4,BoolType)))],Block([Block([]),Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 557))

    def test_558(self):
        line = '''Class _9{Var _,q:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,037],0x57],020],05_5],0X4],0B1],0B11111],6],0B11111];Var $h_:Int ;}Class _:_c{}Class _{}Class _NOj:_Lqrl{}'''
        expect = '''Program([ClassDecl(Id(_9),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(31,ArrayType(6,ArrayType(31,ArrayType(1,ArrayType(4,ArrayType(45,ArrayType(16,ArrayType(87,ArrayType(31,StringType))))))))))),AttributeDecl(Instance,VarDecl(Id(q),ArrayType(31,ArrayType(6,ArrayType(31,ArrayType(1,ArrayType(4,ArrayType(45,ArrayType(16,ArrayType(87,ArrayType(31,StringType))))))))))),AttributeDecl(Static,VarDecl(Id($h_),IntType))]),ClassDecl(Id(_),Id(_c),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_NOj),Id(_Lqrl),[])])'''
        self.assertTrue(TestAST.test(line, expect, 558))

    def test_559(self):
        line = '''Class _:_{Constructor (){}B(_,S,S,_,v_v:X;__e:Float ;L_v:Int ;o:Array [Array [Array [Float ,0XB_8],0B10],01];Z,ZU,e:_;a9:Array [Array [Array [Array [Array [Float ,01],82],82],0B1_0],82];R51:i8){}Destructor (){}Val $2:j_;Constructor (_I94:Array [Int ,8_0]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(B),Instance,[param(Id(_),ClassType(Id(X))),param(Id(S),ClassType(Id(X))),param(Id(S),ClassType(Id(X))),param(Id(_),ClassType(Id(X))),param(Id(v_v),ClassType(Id(X))),param(Id(__e),FloatType),param(Id(L_v),IntType),param(Id(o),ArrayType(1,ArrayType(2,ArrayType(184,FloatType)))),param(Id(Z),ClassType(Id(_))),param(Id(ZU),ClassType(Id(_))),param(Id(e),ClassType(Id(_))),param(Id(a9),ArrayType(82,ArrayType(2,ArrayType(82,ArrayType(82,ArrayType(1,FloatType)))))),param(Id(R51),ClassType(Id(i8)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($2),ClassType(Id(j_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_I94),ArrayType(80,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 559))

    def test_560(self):
        line = '''Class _48:_{}Class Q:__{Constructor (Wx8__0,_:Int ;W2F:Array [Array [Float ,06],026];j_:Array [Array [Array [Float ,0xF],0X5A],0B1_0_00];__N:_;_Fw,h64,_K:Float ;_:Y_Q_BE2_;_V__,_4:__){} }'''
        expect = '''Program([ClassDecl(Id(_48),Id(_),[]),ClassDecl(Id(Q),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(Wx8__0),IntType),param(Id(_),IntType),param(Id(W2F),ArrayType(22,ArrayType(6,FloatType))),param(Id(j_),ArrayType(8,ArrayType(90,ArrayType(15,FloatType)))),param(Id(__N),ClassType(Id(_))),param(Id(_Fw),FloatType),param(Id(h64),FloatType),param(Id(_K),FloatType),param(Id(_),ClassType(Id(Y_Q_BE2_))),param(Id(_V__),ClassType(Id(__))),param(Id(_4),ClassType(Id(__)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 560))

    def test_561(self):
        line = '''Class _H_:_{}Class _xF7{Destructor (){Continue ;Val _:Array [Array [Array [Array [String ,79],0XC],0632],0xE];} }Class UY9{Val X,$gD,$__61:__;Destructor (){Var ___,ZA_04__:Int ;} }'''
        expect = '''Program([ClassDecl(Id(_H_),Id(_),[]),ClassDecl(Id(_xF7),[MethodDecl(Id(Destructor),Instance,[],Block([Continue,ConstDecl(Id(_),ArrayType(14,ArrayType(410,ArrayType(12,ArrayType(79,StringType)))),None)]))]),ClassDecl(Id(UY9),[AttributeDecl(Instance,ConstDecl(Id(X),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($gD),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($__61),ClassType(Id(__)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(___),IntType),VarDecl(Id(ZA_04__),IntType)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 561))

    def test_562(self):
        line = '''Class u_:_{$s(N,_:Array [Float ,94];P,K_01,z_Bc8_,_K,_:Float ;_,_:Int ){Continue ;}$__(){} }Class w{}Class q{}Class LY_c_62:_{Destructor (){} }Class u:y{}Class G_3_gt_:_{}Class _0:t{}'''
        expect = '''Program([ClassDecl(Id(u_),Id(_),[MethodDecl(Id($s),Static,[param(Id(N),ArrayType(94,FloatType)),param(Id(_),ArrayType(94,FloatType)),param(Id(P),FloatType),param(Id(K_01),FloatType),param(Id(z_Bc8_),FloatType),param(Id(_K),FloatType),param(Id(_),FloatType),param(Id(_),IntType),param(Id(_),IntType)],Block([Continue])),MethodDecl(Id($__),Static,[],Block([]))]),ClassDecl(Id(w),[]),ClassDecl(Id(q),[]),ClassDecl(Id(LY_c_62),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(u),Id(y),[]),ClassDecl(Id(G_3_gt_),Id(_),[]),ClassDecl(Id(_0),Id(t),[])])'''
        self.assertTrue(TestAST.test(line, expect, 562))

    def test_563(self):
        line = '''Class __SO_{Val $M38B,R44,X:B;Val _U:F;Constructor (_:t;f_,g,B,_3a_,t1__,X__:_;w,_:Array [Array [Boolean ,8],0x61];_y39xFq3,_:U;_:Boolean ;_,_:Array [Int ,0b1]){} }'''
        expect = '''Program([ClassDecl(Id(__SO_),[AttributeDecl(Static,ConstDecl(Id($M38B),ClassType(Id(B)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(R44),ClassType(Id(B)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(X),ClassType(Id(B)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_U),ClassType(Id(F)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(t))),param(Id(f_),ClassType(Id(_))),param(Id(g),ClassType(Id(_))),param(Id(B),ClassType(Id(_))),param(Id(_3a_),ClassType(Id(_))),param(Id(t1__),ClassType(Id(_))),param(Id(X__),ClassType(Id(_))),param(Id(w),ArrayType(97,ArrayType(8,BoolType))),param(Id(_),ArrayType(97,ArrayType(8,BoolType))),param(Id(_y39xFq3),ClassType(Id(U))),param(Id(_),ClassType(Id(U))),param(Id(_),BoolType),param(Id(_),ArrayType(1,IntType)),param(Id(_),ArrayType(1,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 563))

    def test_564(self):
        line = '''Class _7{$_(__q_,_:U7j){}Constructor (T,A,_4:Array [Array [Array [Array [Array [Int ,0xA],0XC80_9_5_D8],0X3_E3],0xB],0B10001];_3,_:Int ;_4_:Array [Boolean ,10_4_4];e__9,_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_7),[MethodDecl(Id($_),Static,[param(Id(__q_),ClassType(Id(U7j))),param(Id(_),ClassType(Id(U7j)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(T),ArrayType(17,ArrayType(11,ArrayType(995,ArrayType(209753560,ArrayType(10,IntType)))))),param(Id(A),ArrayType(17,ArrayType(11,ArrayType(995,ArrayType(209753560,ArrayType(10,IntType)))))),param(Id(_4),ArrayType(17,ArrayType(11,ArrayType(995,ArrayType(209753560,ArrayType(10,IntType)))))),param(Id(_3),IntType),param(Id(_),IntType),param(Id(_4_),ArrayType(1044,BoolType)),param(Id(e__9),IntType),param(Id(_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 564))

    def test_565(self):
        line = '''Class SjOc:P6{}Class C{_(L,_,L6o,I1:Array [Array [Array [Boolean ,0XC_7],36],0b1000110];s,G,Re29:__435;p___,_N:String ){}Val $U_,_H,_2:Float ;Constructor (k,_:Int ){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(SjOc),Id(P6),[]),ClassDecl(Id(C),[MethodDecl(Id(_),Instance,[param(Id(L),ArrayType(70,ArrayType(36,ArrayType(199,BoolType)))),param(Id(_),ArrayType(70,ArrayType(36,ArrayType(199,BoolType)))),param(Id(L6o),ArrayType(70,ArrayType(36,ArrayType(199,BoolType)))),param(Id(I1),ArrayType(70,ArrayType(36,ArrayType(199,BoolType)))),param(Id(s),ClassType(Id(__435))),param(Id(G),ClassType(Id(__435))),param(Id(Re29),ClassType(Id(__435))),param(Id(p___),StringType),param(Id(_N),StringType)],Block([])),AttributeDecl(Static,ConstDecl(Id($U_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_H),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_2),FloatType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(k),IntType),param(Id(_),IntType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 565))

    def test_566(self):
        line = '''Class _{}Class d__7{}Class _{$_(I:Array [Array [Array [Array [Boolean ,0X3_C],0125],0B1],0b11];_,_:M__1i){}Constructor (YX__,_DG:Array [Float ,0B1_0];ZC__85_,_,_:P1){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(d__7),[]),ClassDecl(Id(_),[MethodDecl(Id($_),Static,[param(Id(I),ArrayType(3,ArrayType(1,ArrayType(85,ArrayType(60,BoolType))))),param(Id(_),ClassType(Id(M__1i))),param(Id(_),ClassType(Id(M__1i)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(YX__),ArrayType(2,FloatType)),param(Id(_DG),ArrayType(2,FloatType)),param(Id(ZC__85_),ClassType(Id(P1))),param(Id(_),ClassType(Id(P1))),param(Id(_),ClassType(Id(P1)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 566))

    def test_567(self):
        line = '''Class H{}Class cE:W{}Class q5g_9{Val $_:Float ;}Class _G31T_{Var _X,$G,$_,__:Array [Array [Array [Array [Array [String ,0xF_8_075],0b1],0B1],0317_4_703_4_5_3_6],0B1_1];}'''
        expect = '''Program([ClassDecl(Id(H),[]),ClassDecl(Id(cE),Id(W),[]),ClassDecl(Id(q5g_9),[AttributeDecl(Static,ConstDecl(Id($_),FloatType,None))]),ClassDecl(Id(_G31T_),[AttributeDecl(Instance,VarDecl(Id(_X),ArrayType(3,ArrayType(3483122014,ArrayType(1,ArrayType(1,ArrayType(1015925,StringType))))))),AttributeDecl(Static,VarDecl(Id($G),ArrayType(3,ArrayType(3483122014,ArrayType(1,ArrayType(1,ArrayType(1015925,StringType))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(3,ArrayType(3483122014,ArrayType(1,ArrayType(1,ArrayType(1015925,StringType))))))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(3,ArrayType(3483122014,ArrayType(1,ArrayType(1,ArrayType(1015925,StringType)))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 567))

    def test_568(self):
        line = '''Class B:_{}Class _{}Class _:z{}Class _e{Val $d:Array [String ,0xF];Constructor (_,_,Gz,_5_,__,Qo,_M,T:Array [Array [Boolean ,1],0x7_D]){Var __:Array [Array [Array [Array [Float ,36],06_0],0x7],02_7];} }'''
        expect = '''Program([ClassDecl(Id(B),Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(z),[]),ClassDecl(Id(_e),[AttributeDecl(Static,ConstDecl(Id($d),ArrayType(15,StringType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(125,ArrayType(1,BoolType))),param(Id(_),ArrayType(125,ArrayType(1,BoolType))),param(Id(Gz),ArrayType(125,ArrayType(1,BoolType))),param(Id(_5_),ArrayType(125,ArrayType(1,BoolType))),param(Id(__),ArrayType(125,ArrayType(1,BoolType))),param(Id(Qo),ArrayType(125,ArrayType(1,BoolType))),param(Id(_M),ArrayType(125,ArrayType(1,BoolType))),param(Id(T),ArrayType(125,ArrayType(1,BoolType)))],Block([VarDecl(Id(__),ArrayType(23,ArrayType(7,ArrayType(48,ArrayType(36,FloatType)))))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 568))

    def test_569(self):
        line = '''Class _{$q(_:Array [Int ,0B1_1_0_0];R,LH:Array [String ,06_6_6_73];__,_O__,__:Array [Int ,50];U,_:Boolean ;M,_,_:Array [Boolean ,0b11000];A:String ){} }Class _{}Class Z8{Constructor (){} }Class _t2_{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($q),Static,[param(Id(_),ArrayType(12,IntType)),param(Id(R),ArrayType(28091,StringType)),param(Id(LH),ArrayType(28091,StringType)),param(Id(__),ArrayType(50,IntType)),param(Id(_O__),ArrayType(50,IntType)),param(Id(__),ArrayType(50,IntType)),param(Id(U),BoolType),param(Id(_),BoolType),param(Id(M),ArrayType(24,BoolType)),param(Id(_),ArrayType(24,BoolType)),param(Id(_),ArrayType(24,BoolType)),param(Id(A),StringType)],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(Z8),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_t2_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 569))

    def test_570(self):
        line = '''Class x{Var _:Array [String ,02];Constructor (j_:Float ;Av:C;_1:Array [Array [Boolean ,66],01];_,_9,f,h:Float ;_:Boolean ;kHF3_V,h0,_,c:Float ;N:Array [String ,84]){}$_2D(u:Array [Array [Array [Int ,0B1],7_4],0B10]){} }'''
        expect = '''Program([ClassDecl(Id(x),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(2,StringType))),MethodDecl(Id(Constructor),Instance,[param(Id(j_),FloatType),param(Id(Av),ClassType(Id(C))),param(Id(_1),ArrayType(1,ArrayType(66,BoolType))),param(Id(_),FloatType),param(Id(_9),FloatType),param(Id(f),FloatType),param(Id(h),FloatType),param(Id(_),BoolType),param(Id(kHF3_V),FloatType),param(Id(h0),FloatType),param(Id(_),FloatType),param(Id(c),FloatType),param(Id(N),ArrayType(84,StringType))],Block([])),MethodDecl(Id($_2D),Static,[param(Id(u),ArrayType(2,ArrayType(74,ArrayType(1,IntType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 570))

    def test_571(self):
        line = '''Class i_:_LX1_{}Class __I:l_{Var $7:Array [Float ,0b11_00];}Class _:DE{}Class _:qj{Val $90,_94_:_;}Class _{}Class _{}Class _:s{Val _,$cb:Float ;Val $3:Float ;}Class PW_{}'''
        expect = '''Program([ClassDecl(Id(i_),Id(_LX1_),[]),ClassDecl(Id(__I),Id(l_),[AttributeDecl(Static,VarDecl(Id($7),ArrayType(12,FloatType)))]),ClassDecl(Id(_),Id(DE),[]),ClassDecl(Id(_),Id(qj),[AttributeDecl(Static,ConstDecl(Id($90),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_94_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(s),[AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($cb),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($3),FloatType,None))]),ClassDecl(Id(PW_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 571))

    def test_572(self):
        line = '''Class o_:_{C_(G:_;U5_,f:Array [Array [Array [Boolean ,0B1],0x4],014];i,W:Array [Float ,07];_:Int ;_N,_Zb_8,a,_:Array [Int ,014]){Break ;}Constructor (){} }Class K2_:_1{$5(){}Destructor (){Return ;} }'''
        expect = '''Program([ClassDecl(Id(o_),Id(_),[MethodDecl(Id(C_),Instance,[param(Id(G),ClassType(Id(_))),param(Id(U5_),ArrayType(12,ArrayType(4,ArrayType(1,BoolType)))),param(Id(f),ArrayType(12,ArrayType(4,ArrayType(1,BoolType)))),param(Id(i),ArrayType(7,FloatType)),param(Id(W),ArrayType(7,FloatType)),param(Id(_),IntType),param(Id(_N),ArrayType(12,IntType)),param(Id(_Zb_8),ArrayType(12,IntType)),param(Id(a),ArrayType(12,IntType)),param(Id(_),ArrayType(12,IntType))],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(K2_),Id(_1),[MethodDecl(Id($5),Static,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 572))

    def test_573(self):
        line = '''Class G_7:N{Var _NPf,$_a,_y:Array [Float ,03];Constructor (_8,_:Float ;M_P,_v_nV:Boolean ){}Constructor (_mB7:_;_,_:i82;_:Array [Array [Boolean ,07],0B100101]){}Var $w8o7_7o,$8c7_,b:Array [String ,0X35];}'''
        expect = '''Program([ClassDecl(Id(G_7),Id(N),[AttributeDecl(Instance,VarDecl(Id(_NPf),ArrayType(3,FloatType))),AttributeDecl(Static,VarDecl(Id($_a),ArrayType(3,FloatType))),AttributeDecl(Instance,VarDecl(Id(_y),ArrayType(3,FloatType))),MethodDecl(Id(Constructor),Instance,[param(Id(_8),FloatType),param(Id(_),FloatType),param(Id(M_P),BoolType),param(Id(_v_nV),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_mB7),ClassType(Id(_))),param(Id(_),ClassType(Id(i82))),param(Id(_),ClassType(Id(i82))),param(Id(_),ArrayType(37,ArrayType(7,BoolType)))],Block([])),AttributeDecl(Static,VarDecl(Id($w8o7_7o),ArrayType(53,StringType))),AttributeDecl(Static,VarDecl(Id($8c7_),ArrayType(53,StringType))),AttributeDecl(Instance,VarDecl(Id(b),ArrayType(53,StringType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 573))

    def test_574(self):
        line = '''Class _:jJzW4{Constructor (P:Array [String ,03_5_3_6];S,_:Float ;__sx9:x0;_1,__5,GW_H_:Boolean ;Zh,X:Float ;B,O9c_,_,FH1_8:Array [Float ,41];_,K2_4,_5_,_:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(jJzW4),[MethodDecl(Id(Constructor),Instance,[param(Id(P),ArrayType(1886,StringType)),param(Id(S),FloatType),param(Id(_),FloatType),param(Id(__sx9),ClassType(Id(x0))),param(Id(_1),BoolType),param(Id(__5),BoolType),param(Id(GW_H_),BoolType),param(Id(Zh),FloatType),param(Id(X),FloatType),param(Id(B),ArrayType(41,FloatType)),param(Id(O9c_),ArrayType(41,FloatType)),param(Id(_),ArrayType(41,FloatType)),param(Id(FH1_8),ArrayType(41,FloatType)),param(Id(_),FloatType),param(Id(K2_4),FloatType),param(Id(_5_),FloatType),param(Id(_),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 574))

    def test_575(self):
        line = '''Class _:_f{Val _c:A;$_(_,_r776M:Array [Array [Array [Array [Array [String ,0226_5],07],7],054],0b100010];_,_:Boolean ;_,c:Float ;__:Array [Boolean ,84];_,_f_,W,v_,o,s_,_2E,_:Array [String ,054]){} }Class _{$9S0Z_(_5,g__3,_:_){} }Class _5{Val $D:Array [Array [Float ,0X5D],0B110110];Var $3D_2:Float ;Constructor (G:String ){Return ;} }Class e{Var $V:Array [Float ,0B110110];}'''
        expect = '''Program([ClassDecl(Id(_),Id(_f),[AttributeDecl(Instance,ConstDecl(Id(_c),ClassType(Id(A)),NullLiteral())),MethodDecl(Id($_),Static,[param(Id(_),ArrayType(34,ArrayType(44,ArrayType(7,ArrayType(7,ArrayType(1205,StringType)))))),param(Id(_r776M),ArrayType(34,ArrayType(44,ArrayType(7,ArrayType(7,ArrayType(1205,StringType)))))),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(_),FloatType),param(Id(c),FloatType),param(Id(__),ArrayType(84,BoolType)),param(Id(_),ArrayType(44,StringType)),param(Id(_f_),ArrayType(44,StringType)),param(Id(W),ArrayType(44,StringType)),param(Id(v_),ArrayType(44,StringType)),param(Id(o),ArrayType(44,StringType)),param(Id(s_),ArrayType(44,StringType)),param(Id(_2E),ArrayType(44,StringType)),param(Id(_),ArrayType(44,StringType))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id($9S0Z_),Static,[param(Id(_5),ClassType(Id(_))),param(Id(g__3),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_5),[AttributeDecl(Static,ConstDecl(Id($D),ArrayType(54,ArrayType(93,FloatType)),None)),AttributeDecl(Static,VarDecl(Id($3D_2),FloatType)),MethodDecl(Id(Constructor),Instance,[param(Id(G),StringType)],Block([Return()]))]),ClassDecl(Id(e),[AttributeDecl(Static,VarDecl(Id($V),ArrayType(54,FloatType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 575))

    def test_576(self):
        line = '''Class F_:T45{Destructor (){}Val _w,_:_;Constructor (_3,_:Array [Array [Array [Array [Array [Array [String ,0b1_0],13],0113],03_4],0B100100],0B1]){Var _X:Array [String ,0B1_1];}Var $L2,$U:Array [Array [Array [String ,0113],0x3_F],0xD_0D];}Class w_T{}'''
        expect = '''Program([ClassDecl(Id(F_),Id(T45),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_w),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_3),ArrayType(1,ArrayType(36,ArrayType(28,ArrayType(75,ArrayType(13,ArrayType(2,StringType))))))),param(Id(_),ArrayType(1,ArrayType(36,ArrayType(28,ArrayType(75,ArrayType(13,ArrayType(2,StringType)))))))],Block([VarDecl(Id(_X),ArrayType(3,StringType))])),AttributeDecl(Static,VarDecl(Id($L2),ArrayType(3341,ArrayType(63,ArrayType(75,StringType))))),AttributeDecl(Static,VarDecl(Id($U),ArrayType(3341,ArrayType(63,ArrayType(75,StringType)))))]),ClassDecl(Id(w_T),[])])'''
        self.assertTrue(TestAST.test(line, expect, 576))

    def test_577(self):
        line = '''Class m:_7{Var $0,_Y:Boolean ;Constructor (jCj,F5:gZb;_6_m,_:Int ){ {Continue ;} }W(_,_:Boolean ){Return ;}$_(_D0,_2,_,g:String ;_1g_,_1:Array [Boolean ,0B10]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(m),Id(_7),[AttributeDecl(Static,VarDecl(Id($0),BoolType)),AttributeDecl(Instance,VarDecl(Id(_Y),BoolType)),MethodDecl(Id(Constructor),Instance,[param(Id(jCj),ClassType(Id(gZb))),param(Id(F5),ClassType(Id(gZb))),param(Id(_6_m),IntType),param(Id(_),IntType)],Block([Block([Continue])])),MethodDecl(Id(W),Instance,[param(Id(_),BoolType),param(Id(_),BoolType)],Block([Return()])),MethodDecl(Id($_),Static,[param(Id(_D0),StringType),param(Id(_2),StringType),param(Id(_),StringType),param(Id(g),StringType),param(Id(_1g_),ArrayType(2,BoolType)),param(Id(_1),ArrayType(2,BoolType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 577))

    def test_578(self):
        line = '''Class _3_{Constructor (n:Array [Array [Int ,67],0xB_C_B_64F];_:Array [Array [Float ,0b1_1],0x5];W,Hft_6,t1:u;_xk:Array [Int ,2_0];_v4,_:Array [Boolean ,3]){Continue ;Var _2S:_;} }'''
        expect = '''Program([ClassDecl(Id(_3_),[MethodDecl(Id(Constructor),Instance,[param(Id(n),ArrayType(12367439,ArrayType(67,IntType))),param(Id(_),ArrayType(5,ArrayType(3,FloatType))),param(Id(W),ClassType(Id(u))),param(Id(Hft_6),ClassType(Id(u))),param(Id(t1),ClassType(Id(u))),param(Id(_xk),ArrayType(20,IntType)),param(Id(_v4),ArrayType(3,BoolType)),param(Id(_),ArrayType(3,BoolType))],Block([Continue,VarDecl(Id(_2S),ClassType(Id(_)),NullLiteral())]))])])'''
        self.assertTrue(TestAST.test(line, expect, 578))

    def test_579(self):
        line = '''Class l74_E:_{__(_ts_t:String ;Z:String ;C_2__,_:Array [Int ,0B1000000];fuL_:Array [Boolean ,03_2_4];X___:Array [Boolean ,0x3F];a,_c,_,D3V__,M:Array [Array [Array [Float ,0X4C],0b1100000],0127]){ {} }}'''
        expect = '''Program([ClassDecl(Id(l74_E),Id(_),[MethodDecl(Id(__),Instance,[param(Id(_ts_t),StringType),param(Id(Z),StringType),param(Id(C_2__),ArrayType(64,IntType)),param(Id(_),ArrayType(64,IntType)),param(Id(fuL_),ArrayType(212,BoolType)),param(Id(X___),ArrayType(63,BoolType)),param(Id(a),ArrayType(87,ArrayType(96,ArrayType(76,FloatType)))),param(Id(_c),ArrayType(87,ArrayType(96,ArrayType(76,FloatType)))),param(Id(_),ArrayType(87,ArrayType(96,ArrayType(76,FloatType)))),param(Id(D3V__),ArrayType(87,ArrayType(96,ArrayType(76,FloatType)))),param(Id(M),ArrayType(87,ArrayType(96,ArrayType(76,FloatType))))],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 579))

    def test_580(self):
        line = '''Class D:n{Var $3c8_8:Float ;}Class _s{}Class _4:E{$6(w_M,__:Array [Array [Float ,0X7_F_53_75_793],83];oE,_w:Array [Float ,0b10_1]){} }Class Z:_{Var $2,$S_,Q8,$8:Array [Array [Array [Float ,0x4C_8],0b1],5_1];Var BM____:Array [Float ,83];}Class _:L{}'''
        expect = '''Program([ClassDecl(Id(D),Id(n),[AttributeDecl(Static,VarDecl(Id($3c8_8),FloatType))]),ClassDecl(Id(_s),[]),ClassDecl(Id(_4),Id(E),[MethodDecl(Id($6),Static,[param(Id(w_M),ArrayType(83,ArrayType(34178815891,FloatType))),param(Id(__),ArrayType(83,ArrayType(34178815891,FloatType))),param(Id(oE),ArrayType(5,FloatType)),param(Id(_w),ArrayType(5,FloatType))],Block([]))]),ClassDecl(Id(Z),Id(_),[AttributeDecl(Static,VarDecl(Id($2),ArrayType(51,ArrayType(1,ArrayType(1224,FloatType))))),AttributeDecl(Static,VarDecl(Id($S_),ArrayType(51,ArrayType(1,ArrayType(1224,FloatType))))),AttributeDecl(Instance,VarDecl(Id(Q8),ArrayType(51,ArrayType(1,ArrayType(1224,FloatType))))),AttributeDecl(Static,VarDecl(Id($8),ArrayType(51,ArrayType(1,ArrayType(1224,FloatType))))),AttributeDecl(Instance,VarDecl(Id(BM____),ArrayType(83,FloatType)))]),ClassDecl(Id(_),Id(L),[])])'''
        self.assertTrue(TestAST.test(line, expect, 580))

    def test_581(self):
        line = '''Class _:_A{__or_7X(_:String ){}b(__yT,S1_,_N,_11,_L_:Array [Array [Array [Array [Float ,0b1],0b1_1],0b10111],03_0_2];c,p,P,h,__:Array [Array [Array [Array [Float ,0B11000],01],051],0b10]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_A),[MethodDecl(Id(__or_7X),Instance,[param(Id(_),StringType)],Block([])),MethodDecl(Id(b),Instance,[param(Id(__yT),ArrayType(194,ArrayType(23,ArrayType(3,ArrayType(1,FloatType))))),param(Id(S1_),ArrayType(194,ArrayType(23,ArrayType(3,ArrayType(1,FloatType))))),param(Id(_N),ArrayType(194,ArrayType(23,ArrayType(3,ArrayType(1,FloatType))))),param(Id(_11),ArrayType(194,ArrayType(23,ArrayType(3,ArrayType(1,FloatType))))),param(Id(_L_),ArrayType(194,ArrayType(23,ArrayType(3,ArrayType(1,FloatType))))),param(Id(c),ArrayType(2,ArrayType(41,ArrayType(1,ArrayType(24,FloatType))))),param(Id(p),ArrayType(2,ArrayType(41,ArrayType(1,ArrayType(24,FloatType))))),param(Id(P),ArrayType(2,ArrayType(41,ArrayType(1,ArrayType(24,FloatType))))),param(Id(h),ArrayType(2,ArrayType(41,ArrayType(1,ArrayType(24,FloatType))))),param(Id(__),ArrayType(2,ArrayType(41,ArrayType(1,ArrayType(24,FloatType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 581))

    def test_582(self):
        line = '''Class _1{}Class gu:_v4{Var $g2,$1:Array [Array [Array [String ,0B1_0_0],013],072_0];Var __:Array [Array [Array [String ,0B1011101],2],06_1261];Destructor (){}Var $_9R:Array [Float ,013];}'''
        expect = '''Program([ClassDecl(Id(_1),[]),ClassDecl(Id(gu),Id(_v4),[AttributeDecl(Static,VarDecl(Id($g2),ArrayType(464,ArrayType(11,ArrayType(4,StringType))))),AttributeDecl(Static,VarDecl(Id($1),ArrayType(464,ArrayType(11,ArrayType(4,StringType))))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(25265,ArrayType(2,ArrayType(93,StringType))))),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_9R),ArrayType(11,FloatType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 582))

    def test_583(self):
        line = '''Class V{$3_(){Break ;}Constructor (H,_2IBe,_:Boolean ;t_:Int ){}Constructor (yV__,b:Array [Array [Float ,0xC2435],0X34];cx,U3_:i){}$99(V_,j__,r,_3:_){Var _,_,U_:_;} }Class g{}'''
        expect = '''Program([ClassDecl(Id(V),[MethodDecl(Id($3_),Static,[],Block([Break])),MethodDecl(Id(Constructor),Instance,[param(Id(H),BoolType),param(Id(_2IBe),BoolType),param(Id(_),BoolType),param(Id(t_),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(yV__),ArrayType(52,ArrayType(795701,FloatType))),param(Id(b),ArrayType(52,ArrayType(795701,FloatType))),param(Id(cx),ClassType(Id(i))),param(Id(U3_),ClassType(Id(i)))],Block([])),MethodDecl(Id($99),Static,[param(Id(V_),ClassType(Id(_))),param(Id(j__),ClassType(Id(_))),param(Id(r),ClassType(Id(_))),param(Id(_3),ClassType(Id(_)))],Block([VarDecl(Id(_),ClassType(Id(_)),NullLiteral()),VarDecl(Id(_),ClassType(Id(_)),NullLiteral()),VarDecl(Id(U_),ClassType(Id(_)),NullLiteral())]))]),ClassDecl(Id(g),[])])'''
        self.assertTrue(TestAST.test(line, expect, 583))

    def test_584(self):
        line = '''Class j_7:__o_{}Class _{Constructor (_u2,F4Gc:Array [Array [Array [Array [Array [Array [Boolean ,0B1101],0B1],0xF_3],0x7],0X47],0B1_00_0];_,_7tu,q4N5m_5:String ){} }Class __:_{}Class _WM0:___G{Var $83w:Array [Array [Array [Array [Array [Array [Int ,0B1101],0B1_0],0B1101],0333],0124],76];Var $8_:_F;}'''
        expect = '''Program([ClassDecl(Id(j_7),Id(__o_),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_u2),ArrayType(8,ArrayType(71,ArrayType(7,ArrayType(243,ArrayType(1,ArrayType(13,BoolType))))))),param(Id(F4Gc),ArrayType(8,ArrayType(71,ArrayType(7,ArrayType(243,ArrayType(1,ArrayType(13,BoolType))))))),param(Id(_),StringType),param(Id(_7tu),StringType),param(Id(q4N5m_5),StringType)],Block([]))]),ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(_WM0),Id(___G),[AttributeDecl(Static,VarDecl(Id($83w),ArrayType(76,ArrayType(84,ArrayType(219,ArrayType(13,ArrayType(2,ArrayType(13,IntType)))))))),AttributeDecl(Static,VarDecl(Id($8_),ClassType(Id(_F)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 584))

    def test_585(self):
        line = '''Class a:_{}Class x_n_:b{_(_,v0,P5_:_d;_I,mJM:Array [Array [Array [Array [Int ,4],0b1],86],0B100100]){}Val _,_:String ;Constructor (__:Boolean ){}$4(){}Val $_T__h:Float ;}Class _:_{}Class d:_L9{}Class nX5{Constructor (v_,R_:Array [Array [Int ,071],26]){Continue ;}Val _,$_0,_:_H;Var LC,$qQ,$1,Jt,$8b___,_8,$9__s,_,_gz,_,_5s,$1,$43:Array [Array [Array [Int ,0b11],0X24],86];Var $_,$_y__,_,z,$_7M,$_P_:Int ;Val M,$M,_,_:Array [Array [Array [Boolean ,5],0B100100],07];D(___9_:_){} }'''
        expect = '''Program([ClassDecl(Id(a),Id(_),[]),ClassDecl(Id(x_n_),Id(b),[MethodDecl(Id(_),Instance,[param(Id(_),ClassType(Id(_d))),param(Id(v0),ClassType(Id(_d))),param(Id(P5_),ClassType(Id(_d))),param(Id(_I),ArrayType(36,ArrayType(86,ArrayType(1,ArrayType(4,IntType))))),param(Id(mJM),ArrayType(36,ArrayType(86,ArrayType(1,ArrayType(4,IntType)))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(__),BoolType)],Block([])),MethodDecl(Id($4),Static,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_T__h),FloatType,None))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(d),Id(_L9),[]),ClassDecl(Id(nX5),[MethodDecl(Id(Constructor),Instance,[param(Id(v_),ArrayType(26,ArrayType(57,IntType))),param(Id(R_),ArrayType(26,ArrayType(57,IntType)))],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_H)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_0),ClassType(Id(_H)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_H)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(LC),ArrayType(86,ArrayType(36,ArrayType(3,IntType))))),AttributeDecl(Static,VarDecl(Id($qQ),ArrayType(86,ArrayType(36,ArrayType(3,IntType))))),AttributeDecl(Static,VarDecl(Id($1),ArrayType(86,ArrayType(36,ArrayType(3,IntType))))),AttributeDecl(Instance,VarDecl(Id(Jt),ArrayType(86,ArrayType(36,ArrayType(3,IntType))))),AttributeDecl(Static,VarDecl(Id($8b___),ArrayType(86,ArrayType(36,ArrayType(3,IntType))))),AttributeDecl(Instance,VarDecl(Id(_8),ArrayType(86,ArrayType(36,ArrayType(3,IntType))))),AttributeDecl(Static,VarDecl(Id($9__s),ArrayType(86,ArrayType(36,ArrayType(3,IntType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(86,ArrayType(36,ArrayType(3,IntType))))),AttributeDecl(Instance,VarDecl(Id(_gz),ArrayType(86,ArrayType(36,ArrayType(3,IntType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(86,ArrayType(36,ArrayType(3,IntType))))),AttributeDecl(Instance,VarDecl(Id(_5s),ArrayType(86,ArrayType(36,ArrayType(3,IntType))))),AttributeDecl(Static,VarDecl(Id($1),ArrayType(86,ArrayType(36,ArrayType(3,IntType))))),AttributeDecl(Static,VarDecl(Id($43),ArrayType(86,ArrayType(36,ArrayType(3,IntType))))),AttributeDecl(Static,VarDecl(Id($_),IntType)),AttributeDecl(Static,VarDecl(Id($_y__),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType)),AttributeDecl(Instance,VarDecl(Id(z),IntType)),AttributeDecl(Static,VarDecl(Id($_7M),IntType)),AttributeDecl(Static,VarDecl(Id($_P_),IntType)),AttributeDecl(Instance,ConstDecl(Id(M),ArrayType(7,ArrayType(36,ArrayType(5,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($M),ArrayType(7,ArrayType(36,ArrayType(5,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(7,ArrayType(36,ArrayType(5,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(7,ArrayType(36,ArrayType(5,BoolType))),None)),MethodDecl(Id(D),Instance,[param(Id(___9_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 585))

    def test_586(self):
        line = '''Class _{}Class _c{}Class _{_(_0:Array [Boolean ,036_2_4_0_6_5];Kz,_1Z_,b,d:Array [Int ,0B11];C:Array [Array [Float ,0b10010],0X54]){} }Class ___:oO{}Class _:P7{}Class e:s{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_c),[]),ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[param(Id(_0),ArrayType(993333,BoolType)),param(Id(Kz),ArrayType(3,IntType)),param(Id(_1Z_),ArrayType(3,IntType)),param(Id(b),ArrayType(3,IntType)),param(Id(d),ArrayType(3,IntType)),param(Id(C),ArrayType(84,ArrayType(18,FloatType)))],Block([]))]),ClassDecl(Id(___),Id(oO),[]),ClassDecl(Id(_),Id(P7),[]),ClassDecl(Id(e),Id(s),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 586))

    def test_587(self):
        line = '''Class a:_{Constructor (T:Boolean ){}Val $_,_,I_4:Array [Array [Float ,0X35],31];Val s5_,k:Array [Array [Array [Array [Array [Array [Boolean ,0B11000],31],0b11011],064],06_36_7_60],0B11000];Val $08,R:_;}'''
        expect = '''Program([ClassDecl(Id(a),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(T),BoolType)],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(31,ArrayType(53,FloatType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(31,ArrayType(53,FloatType)),None)),AttributeDecl(Instance,ConstDecl(Id(I_4),ArrayType(31,ArrayType(53,FloatType)),None)),AttributeDecl(Instance,ConstDecl(Id(s5_),ArrayType(24,ArrayType(212464,ArrayType(52,ArrayType(27,ArrayType(31,ArrayType(24,BoolType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(k),ArrayType(24,ArrayType(212464,ArrayType(52,ArrayType(27,ArrayType(31,ArrayType(24,BoolType)))))),None)),AttributeDecl(Static,ConstDecl(Id($08),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(R),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 587))

    def test_588(self):
        line = '''Class z{Constructor (_28M:Array [Boolean ,0b1]){}Val GR__,O_:Array [Float ,5];}Class h9Q:G_{$0(){Continue ;}Val $D,$81__F95__y:Array [Array [Int ,012],0B1010010];Val $0_:Array [Array [Array [Array [Float ,0x4],9],0B1010010],74];Var $9_H,$iA:Int ;}'''
        expect = '''Program([ClassDecl(Id(z),[MethodDecl(Id(Constructor),Instance,[param(Id(_28M),ArrayType(1,BoolType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(GR__),ArrayType(5,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(O_),ArrayType(5,FloatType),None))]),ClassDecl(Id(h9Q),Id(G_),[MethodDecl(Id($0),Static,[],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($D),ArrayType(82,ArrayType(10,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($81__F95__y),ArrayType(82,ArrayType(10,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($0_),ArrayType(74,ArrayType(82,ArrayType(9,ArrayType(4,FloatType)))),None)),AttributeDecl(Static,VarDecl(Id($9_H),IntType)),AttributeDecl(Static,VarDecl(Id($iA),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 588))

    def test_589(self):
        line = '''Class _n{}Class z{}Class _:N_M{Val v,$jt_,$_,$X,__31:Array [Array [Array [Array [Int ,0B1010101],0115],0115],10];}Class _{_b_8m(Y_0,_yK8,MT,U1,h,YD_7Q,_,___,_:Array [Float ,7_0];_,w:String ;M,c:_;g22:Array [Float ,5];d_Rxi:Float ;_,_,__,u:_){} }'''
        expect = '''Program([ClassDecl(Id(_n),[]),ClassDecl(Id(z),[]),ClassDecl(Id(_),Id(N_M),[AttributeDecl(Instance,ConstDecl(Id(v),ArrayType(10,ArrayType(77,ArrayType(77,ArrayType(85,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($jt_),ArrayType(10,ArrayType(77,ArrayType(77,ArrayType(85,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(10,ArrayType(77,ArrayType(77,ArrayType(85,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($X),ArrayType(10,ArrayType(77,ArrayType(77,ArrayType(85,IntType)))),None)),AttributeDecl(Instance,ConstDecl(Id(__31),ArrayType(10,ArrayType(77,ArrayType(77,ArrayType(85,IntType)))),None))]),ClassDecl(Id(_),[MethodDecl(Id(_b_8m),Instance,[param(Id(Y_0),ArrayType(70,FloatType)),param(Id(_yK8),ArrayType(70,FloatType)),param(Id(MT),ArrayType(70,FloatType)),param(Id(U1),ArrayType(70,FloatType)),param(Id(h),ArrayType(70,FloatType)),param(Id(YD_7Q),ArrayType(70,FloatType)),param(Id(_),ArrayType(70,FloatType)),param(Id(___),ArrayType(70,FloatType)),param(Id(_),ArrayType(70,FloatType)),param(Id(_),StringType),param(Id(w),StringType),param(Id(M),ClassType(Id(_))),param(Id(c),ClassType(Id(_))),param(Id(g22),ArrayType(5,FloatType)),param(Id(d_Rxi),FloatType),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(u),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 589))

    def test_590(self):
        line = '''Class gZk:w{$79N(D:Float ;_z:M;_c,_,J:Int ){}Var $_,$1:Float ;Destructor (){}Constructor (){}Destructor (){} }Class b:Ym_{}Class j:_{Var $3,$8,_9,$_G,Bal,$0,_,$X9_j,__:_G;}Class aF{}'''
        expect = '''Program([ClassDecl(Id(gZk),Id(w),[MethodDecl(Id($79N),Static,[param(Id(D),FloatType),param(Id(_z),ClassType(Id(M))),param(Id(_c),IntType),param(Id(_),IntType),param(Id(J),IntType)],Block([])),AttributeDecl(Static,VarDecl(Id($_),FloatType)),AttributeDecl(Static,VarDecl(Id($1),FloatType)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(b),Id(Ym_),[]),ClassDecl(Id(j),Id(_),[AttributeDecl(Static,VarDecl(Id($3),ClassType(Id(_G)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($8),ClassType(Id(_G)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_9),ClassType(Id(_G)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_G),ClassType(Id(_G)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Bal),ClassType(Id(_G)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($0),ClassType(Id(_G)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_G)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($X9_j),ClassType(Id(_G)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(_G)),NullLiteral()))]),ClassDecl(Id(aF),[])])'''
        self.assertTrue(TestAST.test(line, expect, 590))

    def test_591(self):
        line = '''Class w{}Class __:vZ{}Class _4{$Z_(){}Constructor (v:Array [Array [Array [Boolean ,5],57],030]){Break ;} }Class _:_14{}Class q{Val $4W:String ;Constructor (s,_6,q:Float ){} }'''
        expect = '''Program([ClassDecl(Id(w),[]),ClassDecl(Id(__),Id(vZ),[]),ClassDecl(Id(_4),[MethodDecl(Id($Z_),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(v),ArrayType(24,ArrayType(57,ArrayType(5,BoolType))))],Block([Break]))]),ClassDecl(Id(_),Id(_14),[]),ClassDecl(Id(q),[AttributeDecl(Static,ConstDecl(Id($4W),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(s),FloatType),param(Id(_6),FloatType),param(Id(q),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 591))

    def test_592(self):
        line = '''Class _01:__{}Class _{Destructor (){}Constructor (V:__M;S,_:Array [Array [Array [Boolean ,0B1],33],0x4_A9_600_9E90]){}$R(_,_88,__,V,_____C_1:_35;E_,g_1Q__:Boolean ;d:v;d:Int ){} }Class _5:_{}'''
        expect = '''Program([ClassDecl(Id(_01),Id(__),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(V),ClassType(Id(__M))),param(Id(S),ArrayType(320344202896,ArrayType(33,ArrayType(1,BoolType)))),param(Id(_),ArrayType(320344202896,ArrayType(33,ArrayType(1,BoolType))))],Block([])),MethodDecl(Id($R),Static,[param(Id(_),ClassType(Id(_35))),param(Id(_88),ClassType(Id(_35))),param(Id(__),ClassType(Id(_35))),param(Id(V),ClassType(Id(_35))),param(Id(_____C_1),ClassType(Id(_35))),param(Id(E_),BoolType),param(Id(g_1Q__),BoolType),param(Id(d),ClassType(Id(v))),param(Id(d),IntType)],Block([]))]),ClassDecl(Id(_5),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 592))

    def test_593(self):
        line = '''Class n:E{}Class __:_y{Constructor (_T7_,_:Array [Array [Array [Int ,03_77_61],0b1],592];D,o,_2:Boolean ;Hy,d,j,_g:Array [Array [Array [Boolean ,3478],0X45],0B1];_,_5:Array [Array [Array [Array [Int ,0B1_0_0_00],0X45],0B1],04];_,Q,_,js,_:_){}_A(){} }Class __i{}'''
        expect = '''Program([ClassDecl(Id(n),Id(E),[]),ClassDecl(Id(__),Id(_y),[MethodDecl(Id(Constructor),Instance,[param(Id(_T7_),ArrayType(592,ArrayType(1,ArrayType(16369,IntType)))),param(Id(_),ArrayType(592,ArrayType(1,ArrayType(16369,IntType)))),param(Id(D),BoolType),param(Id(o),BoolType),param(Id(_2),BoolType),param(Id(Hy),ArrayType(1,ArrayType(69,ArrayType(3478,BoolType)))),param(Id(d),ArrayType(1,ArrayType(69,ArrayType(3478,BoolType)))),param(Id(j),ArrayType(1,ArrayType(69,ArrayType(3478,BoolType)))),param(Id(_g),ArrayType(1,ArrayType(69,ArrayType(3478,BoolType)))),param(Id(_),ArrayType(4,ArrayType(1,ArrayType(69,ArrayType(16,IntType))))),param(Id(_5),ArrayType(4,ArrayType(1,ArrayType(69,ArrayType(16,IntType))))),param(Id(_),ClassType(Id(_))),param(Id(Q),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(js),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([])),MethodDecl(Id(_A),Instance,[],Block([]))]),ClassDecl(Id(__i),[])])'''
        self.assertTrue(TestAST.test(line, expect, 593))

    def test_594(self):
        line = '''Class W{Val _,$R,so:Array [Float ,05];Val $V:Array [Array [Array [String ,0B110110],06],062];Val $z_K,o:Array [Array [String ,0b10],8];}Class s:d_16{Var $_k3:Array [Float ,3_3];Destructor (){Continue ;i_::$F();} }Class P_{}Class Lo6:__{}Class Deb:_5{}Class _:G{}'''
        expect = '''Program([ClassDecl(Id(W),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(5,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($R),ArrayType(5,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(so),ArrayType(5,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($V),ArrayType(50,ArrayType(6,ArrayType(54,StringType))),None)),AttributeDecl(Static,ConstDecl(Id($z_K),ArrayType(8,ArrayType(2,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(o),ArrayType(8,ArrayType(2,StringType)),None))]),ClassDecl(Id(s),Id(d_16),[AttributeDecl(Static,VarDecl(Id($_k3),ArrayType(33,FloatType))),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Call(Id(i_),Id($F),[])]))]),ClassDecl(Id(P_),[]),ClassDecl(Id(Lo6),Id(__),[]),ClassDecl(Id(Deb),Id(_5),[]),ClassDecl(Id(_),Id(G),[])])'''
        self.assertTrue(TestAST.test(line, expect, 594))

    def test_595(self):
        line = '''Class G{}Class s961r3:_{__(___9,_F,p_:Array [Array [Array [Array [String ,02],0b1_10_0_10],0B1],83];___2:Float ){}Destructor (){} }Class J_{Destructor (){}N(_u:_Bf;__Rn:String ){}Destructor (){} }Class k{}'''
        expect = '''Program([ClassDecl(Id(G),[]),ClassDecl(Id(s961r3),Id(_),[MethodDecl(Id(__),Instance,[param(Id(___9),ArrayType(83,ArrayType(1,ArrayType(50,ArrayType(2,StringType))))),param(Id(_F),ArrayType(83,ArrayType(1,ArrayType(50,ArrayType(2,StringType))))),param(Id(p_),ArrayType(83,ArrayType(1,ArrayType(50,ArrayType(2,StringType))))),param(Id(___2),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(J_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(N),Instance,[param(Id(_u),ClassType(Id(_Bf))),param(Id(__Rn),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(k),[])])'''
        self.assertTrue(TestAST.test(line, expect, 595))

    def test_596(self):
        line = '''Class __:_{Constructor (){} }Class X__G{Destructor (){}Var $38_:Array [Array [Array [Array [Array [Array [Array [Float ,0x3],3_6],0XA_0],4],49],56],7];}Class _{Var $_8:String ;}'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(X__G),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($38_),ArrayType(7,ArrayType(56,ArrayType(49,ArrayType(4,ArrayType(160,ArrayType(36,ArrayType(3,FloatType)))))))))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($_8),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 596))

    def test_597(self):
        line = '''Class _Btzs:_V{Val $9_1:__7_q;}Class _{Val $H,__30:m;}Class z{}Class __{Destructor (){}Destructor (){}Val ___:Array [String ,0140];Val $8,$4,_Y8,_F,$_,$Vh:_;}Class __6Y2:_{}'''
        expect = '''Program([ClassDecl(Id(_Btzs),Id(_V),[AttributeDecl(Static,ConstDecl(Id($9_1),ClassType(Id(__7_q)),NullLiteral()))]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($H),ClassType(Id(m)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__30),ClassType(Id(m)),NullLiteral()))]),ClassDecl(Id(z),[]),ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(___),ArrayType(96,StringType),None)),AttributeDecl(Static,ConstDecl(Id($8),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($4),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_Y8),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_F),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($Vh),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(__6Y2),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 597))

    def test_598(self):
        line = '''Class a{Val _G_,$_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0134],07_45],4],0x9],29_45],45],0X2],45],0B1],0b110001];}Class _5{}Class g{Destructor (){}Var $_,_13:Int ;}'''
        expect = '''Program([ClassDecl(Id(a),[AttributeDecl(Instance,ConstDecl(Id(_G_),ArrayType(49,ArrayType(1,ArrayType(45,ArrayType(2,ArrayType(45,ArrayType(2945,ArrayType(9,ArrayType(4,ArrayType(485,ArrayType(92,StringType)))))))))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(49,ArrayType(1,ArrayType(45,ArrayType(2,ArrayType(45,ArrayType(2945,ArrayType(9,ArrayType(4,ArrayType(485,ArrayType(92,StringType)))))))))),None))]),ClassDecl(Id(_5),[]),ClassDecl(Id(g),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_),IntType)),AttributeDecl(Instance,VarDecl(Id(_13),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 598))

    def test_599(self):
        line = '''Class k6:o{Val $5,_C,D:Array [Array [Array [Array [Array [Int ,050],0126],26],0b100011],0X9_A];Var _V3:I;Destructor (){}Val $L,$D6,I,$e:Array [Array [Array [Array [String ,0x3],0B1],0x63],05_13];Val AP2,__:String ;}'''
        expect = '''Program([ClassDecl(Id(k6),Id(o),[AttributeDecl(Static,ConstDecl(Id($5),ArrayType(154,ArrayType(35,ArrayType(26,ArrayType(86,ArrayType(40,IntType))))),None)),AttributeDecl(Instance,ConstDecl(Id(_C),ArrayType(154,ArrayType(35,ArrayType(26,ArrayType(86,ArrayType(40,IntType))))),None)),AttributeDecl(Instance,ConstDecl(Id(D),ArrayType(154,ArrayType(35,ArrayType(26,ArrayType(86,ArrayType(40,IntType))))),None)),AttributeDecl(Instance,VarDecl(Id(_V3),ClassType(Id(I)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($L),ArrayType(331,ArrayType(99,ArrayType(1,ArrayType(3,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($D6),ArrayType(331,ArrayType(99,ArrayType(1,ArrayType(3,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(I),ArrayType(331,ArrayType(99,ArrayType(1,ArrayType(3,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($e),ArrayType(331,ArrayType(99,ArrayType(1,ArrayType(3,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(AP2),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(__),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 599))

    def test_600(self):
        line = '''Class _:_9_{Constructor (_,_3_5:Array [Int ,1_0];T:Array [Boolean ,0XF_91];P:Array [Array [Array [Array [Array [Int ,070],0B1_1],070],0b100101],0b100101];_,v:Array [Int ,0B1001100]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_9_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(10,IntType)),param(Id(_3_5),ArrayType(10,IntType)),param(Id(T),ArrayType(3985,BoolType)),param(Id(P),ArrayType(37,ArrayType(37,ArrayType(56,ArrayType(3,ArrayType(56,IntType)))))),param(Id(_),ArrayType(76,IntType)),param(Id(v),ArrayType(76,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 600))

    def test_601(self):
        line = '''Class _3{Var _9u_P,t:Boolean ;Val $E:Array [Array [Array [Array [Array [Array [String ,0B1],0X1_40_6],66],66],0X4_9],0B10001];ni(_1,Xl_I___,_,J:f;L:Array [Int ,7_8_7_85]){} }'''
        expect = '''Program([ClassDecl(Id(_3),[AttributeDecl(Instance,VarDecl(Id(_9u_P),BoolType)),AttributeDecl(Instance,VarDecl(Id(t),BoolType)),AttributeDecl(Static,ConstDecl(Id($E),ArrayType(17,ArrayType(73,ArrayType(66,ArrayType(66,ArrayType(5126,ArrayType(1,StringType)))))),None)),MethodDecl(Id(ni),Instance,[param(Id(_1),ClassType(Id(f))),param(Id(Xl_I___),ClassType(Id(f))),param(Id(_),ClassType(Id(f))),param(Id(J),ClassType(Id(f))),param(Id(L),ArrayType(78785,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 601))

    def test_602(self):
        line = '''Class _:o{Val _1w,_:Array [Boolean ,0133];Constructor (_tK:Float ;_5d:Boolean ;p__,L_:String ;k:String ;_,H_:Array [Boolean ,0133]){Var L7:_;} }Class _:S4{}Class ___5{Val $_5,t,$4_:Array [Array [Array [String ,0x3E],0x3E],99];}'''
        expect = '''Program([ClassDecl(Id(_),Id(o),[AttributeDecl(Instance,ConstDecl(Id(_1w),ArrayType(91,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(91,BoolType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_tK),FloatType),param(Id(_5d),BoolType),param(Id(p__),StringType),param(Id(L_),StringType),param(Id(k),StringType),param(Id(_),ArrayType(91,BoolType)),param(Id(H_),ArrayType(91,BoolType))],Block([VarDecl(Id(L7),ClassType(Id(_)),NullLiteral())]))]),ClassDecl(Id(_),Id(S4),[]),ClassDecl(Id(___5),[AttributeDecl(Static,ConstDecl(Id($_5),ArrayType(99,ArrayType(62,ArrayType(62,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(t),ArrayType(99,ArrayType(62,ArrayType(62,StringType))),None)),AttributeDecl(Static,ConstDecl(Id($4_),ArrayType(99,ArrayType(62,ArrayType(62,StringType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 602))

    def test_603(self):
        line = '''Class _V_{$_(f:Array [Array [Array [Array [Float ,03],0x34],052_7_7],0b111011];c,_:Array [Array [String ,0xF2B],06];_N,_:Array [Array [Boolean ,050_7],0337];fG_,_:Boolean ;_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_V_),[MethodDecl(Id($_),Static,[param(Id(f),ArrayType(59,ArrayType(2751,ArrayType(52,ArrayType(3,FloatType))))),param(Id(c),ArrayType(6,ArrayType(3883,StringType))),param(Id(_),ArrayType(6,ArrayType(3883,StringType))),param(Id(_N),ArrayType(223,ArrayType(327,BoolType))),param(Id(_),ArrayType(223,ArrayType(327,BoolType))),param(Id(fG_),BoolType),param(Id(_),BoolType),param(Id(_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 603))

    def test_604(self):
        line = '''Class __:_{Constructor (_:String ){Continue ;}Constructor (x:Array [Array [Int ,0b110],0b1_0_00];_6:r8;_6:String ){Return ;Var x,_,L,_,_3:Int ;}Var $_,$2,$_:String ;}'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType)],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(x),ArrayType(8,ArrayType(6,IntType))),param(Id(_6),ClassType(Id(r8))),param(Id(_6),StringType)],Block([Return(),VarDecl(Id(x),IntType),VarDecl(Id(_),IntType),VarDecl(Id(L),IntType),VarDecl(Id(_),IntType),VarDecl(Id(_3),IntType)])),AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Static,VarDecl(Id($2),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 604))

    def test_605(self):
        line = '''Class __2{}Class zK_:j{Val __,_N1,$_:Array [Array [Array [Int ,06_6],7],97];oS(R,O,E:Array [Array [Array [Array [Boolean ,0115],2_40_0],0x38],0xFC_E1];_,_8NZ9_,_:Boolean ){Break ;} }'''
        expect = '''Program([ClassDecl(Id(__2),[]),ClassDecl(Id(zK_),Id(j),[AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(97,ArrayType(7,ArrayType(54,IntType))),None)),AttributeDecl(Instance,ConstDecl(Id(_N1),ArrayType(97,ArrayType(7,ArrayType(54,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(97,ArrayType(7,ArrayType(54,IntType))),None)),MethodDecl(Id(oS),Instance,[param(Id(R),ArrayType(64737,ArrayType(56,ArrayType(2400,ArrayType(77,BoolType))))),param(Id(O),ArrayType(64737,ArrayType(56,ArrayType(2400,ArrayType(77,BoolType))))),param(Id(E),ArrayType(64737,ArrayType(56,ArrayType(2400,ArrayType(77,BoolType))))),param(Id(_),BoolType),param(Id(_8NZ9_),BoolType),param(Id(_),BoolType)],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 605))

    def test_606(self):
        line = '''Class _95q{Destructor (){} }Class _:u_t_8_0{Constructor (_D_,N5_B2a,N,__15G_M:Array [Array [Array [Boolean ,50],0b1],0xB6A];t_u8F:Array [Array [Array [Array [Array [Array [Boolean ,50],50],50],0X43],076],99];I:Array [Array [Array [Int ,076],031],3]){ {} }Val _:H_I;Var $0:Int ;}'''
        expect = '''Program([ClassDecl(Id(_95q),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(u_t_8_0),[MethodDecl(Id(Constructor),Instance,[param(Id(_D_),ArrayType(2922,ArrayType(1,ArrayType(50,BoolType)))),param(Id(N5_B2a),ArrayType(2922,ArrayType(1,ArrayType(50,BoolType)))),param(Id(N),ArrayType(2922,ArrayType(1,ArrayType(50,BoolType)))),param(Id(__15G_M),ArrayType(2922,ArrayType(1,ArrayType(50,BoolType)))),param(Id(t_u8F),ArrayType(99,ArrayType(62,ArrayType(67,ArrayType(50,ArrayType(50,ArrayType(50,BoolType))))))),param(Id(I),ArrayType(3,ArrayType(25,ArrayType(62,IntType))))],Block([Block([])])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(H_I)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($0),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 606))

    def test_607(self):
        line = '''Class n{$9(){} }Class J:C{}Class _{Val k:Array [Int ,0xA];Val $5:Array [Int ,0B11];$_J(_q:String ;t57:Array [Array [Array [Array [String ,54],0B1_00_00],0130],0b110011];__0:Array [Boolean ,0X23]){}Var a_w,$8,$_:Array [Int ,0b110011];}Class _iR{Constructor (Q__,R,H0_46:Array [Array [String ,0X23],0130];u,s,y5:I;_9V,_,_,c,_,Vy:L8){} }'''
        expect = '''Program([ClassDecl(Id(n),[MethodDecl(Id($9),Static,[],Block([]))]),ClassDecl(Id(J),Id(C),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(k),ArrayType(10,IntType),None)),AttributeDecl(Static,ConstDecl(Id($5),ArrayType(3,IntType),None)),MethodDecl(Id($_J),Static,[param(Id(_q),StringType),param(Id(t57),ArrayType(51,ArrayType(88,ArrayType(16,ArrayType(54,StringType))))),param(Id(__0),ArrayType(35,BoolType))],Block([])),AttributeDecl(Instance,VarDecl(Id(a_w),ArrayType(51,IntType))),AttributeDecl(Static,VarDecl(Id($8),ArrayType(51,IntType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(51,IntType)))]),ClassDecl(Id(_iR),[MethodDecl(Id(Constructor),Instance,[param(Id(Q__),ArrayType(88,ArrayType(35,StringType))),param(Id(R),ArrayType(88,ArrayType(35,StringType))),param(Id(H0_46),ArrayType(88,ArrayType(35,StringType))),param(Id(u),ClassType(Id(I))),param(Id(s),ClassType(Id(I))),param(Id(y5),ClassType(Id(I))),param(Id(_9V),ClassType(Id(L8))),param(Id(_),ClassType(Id(L8))),param(Id(_),ClassType(Id(L8))),param(Id(c),ClassType(Id(L8))),param(Id(_),ClassType(Id(L8))),param(Id(Vy),ClassType(Id(L8)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 607))

    def test_608(self):
        line = '''Class __:C{}Class R{_MN_J(B:rM;n_,w,k,A,r:Float ;Y537_In_,I_,_7:Boolean ;VZ,b6:Array [String ,0B1000100];y2:_8;_,_,_,D:Array [Int ,7];__F_,_z:Array [Array [Int ,03],0x5E]){}_(){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(C),[]),ClassDecl(Id(R),[MethodDecl(Id(_MN_J),Instance,[param(Id(B),ClassType(Id(rM))),param(Id(n_),FloatType),param(Id(w),FloatType),param(Id(k),FloatType),param(Id(A),FloatType),param(Id(r),FloatType),param(Id(Y537_In_),BoolType),param(Id(I_),BoolType),param(Id(_7),BoolType),param(Id(VZ),ArrayType(68,StringType)),param(Id(b6),ArrayType(68,StringType)),param(Id(y2),ClassType(Id(_8))),param(Id(_),ArrayType(7,IntType)),param(Id(_),ArrayType(7,IntType)),param(Id(_),ArrayType(7,IntType)),param(Id(D),ArrayType(7,IntType)),param(Id(__F_),ArrayType(94,ArrayType(3,IntType))),param(Id(_z),ArrayType(94,ArrayType(3,IntType)))],Block([])),MethodDecl(Id(_),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 608))

    def test_609(self):
        line = '''Class qUQ{Var $_G:String ;Constructor (P:Int ;_0:Array [Array [Array [Array [Array [Boolean ,0414],0x2A],0B1_10_1],0b1],047];Q:_;A:_7Z){}Var $m_:u1h;}Class _sr{$NN_(){} }'''
        expect = '''Program([ClassDecl(Id(qUQ),[AttributeDecl(Static,VarDecl(Id($_G),StringType)),MethodDecl(Id(Constructor),Instance,[param(Id(P),IntType),param(Id(_0),ArrayType(39,ArrayType(1,ArrayType(13,ArrayType(42,ArrayType(268,BoolType)))))),param(Id(Q),ClassType(Id(_))),param(Id(A),ClassType(Id(_7Z)))],Block([])),AttributeDecl(Static,VarDecl(Id($m_),ClassType(Id(u1h)),NullLiteral()))]),ClassDecl(Id(_sr),[MethodDecl(Id($NN_),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 609))

    def test_610(self):
        line = '''Class I:_8__4{Destructor (){} }Class F_dX:__{Var $n_7_,$u8:Array [Array [String ,0b1011111],50];Var ___,J,lz,$T23:Array [Float ,05_0];Constructor (){}Val t181JW_:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(I),Id(_8__4),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(F_dX),Id(__),[AttributeDecl(Static,VarDecl(Id($n_7_),ArrayType(50,ArrayType(95,StringType)))),AttributeDecl(Static,VarDecl(Id($u8),ArrayType(50,ArrayType(95,StringType)))),AttributeDecl(Instance,VarDecl(Id(___),ArrayType(40,FloatType))),AttributeDecl(Instance,VarDecl(Id(J),ArrayType(40,FloatType))),AttributeDecl(Instance,VarDecl(Id(lz),ArrayType(40,FloatType))),AttributeDecl(Static,VarDecl(Id($T23),ArrayType(40,FloatType))),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(t181JW_),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 610))

    def test_611(self):
        line = '''Class __:S{}Class h_j4{}Class _1{Constructor (u:Boolean ;_,o:Array [Array [Array [Array [Array [Array [String ,9],0B10111],02_2_36_6],16],0131],0B10111];O:Array [Array [String ,0x1D],0xF_74];I0___2,_G_:_){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(S),[]),ClassDecl(Id(h_j4),[]),ClassDecl(Id(_1),[MethodDecl(Id(Constructor),Instance,[param(Id(u),BoolType),param(Id(_),ArrayType(23,ArrayType(89,ArrayType(16,ArrayType(9462,ArrayType(23,ArrayType(9,StringType))))))),param(Id(o),ArrayType(23,ArrayType(89,ArrayType(16,ArrayType(9462,ArrayType(23,ArrayType(9,StringType))))))),param(Id(O),ArrayType(3956,ArrayType(29,StringType))),param(Id(I0___2),ClassType(Id(_))),param(Id(_G_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 611))

    def test_612(self):
        line = '''Class _123of1:_{Destructor (){}Constructor (hY6,oUC,Lb:Boolean ;_,_,P6:g;jz:Array [Array [Array [Array [Array [Array [Array [Float ,0xC_B],07],07],88],023],0X23],03]){}Constructor (_,O:Array [Array [Array [Array [Array [Array [Array [String ,0x23],04],0X8_0],0B110001],8_7_6_9_0],0B110001],0B110001];_n:Array [Int ,0b1001010]){} }'''
        expect = '''Program([ClassDecl(Id(_123of1),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(hY6),BoolType),param(Id(oUC),BoolType),param(Id(Lb),BoolType),param(Id(_),ClassType(Id(g))),param(Id(_),ClassType(Id(g))),param(Id(P6),ClassType(Id(g))),param(Id(jz),ArrayType(3,ArrayType(35,ArrayType(19,ArrayType(88,ArrayType(7,ArrayType(7,ArrayType(203,FloatType))))))))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(49,ArrayType(49,ArrayType(87690,ArrayType(49,ArrayType(128,ArrayType(4,ArrayType(35,StringType)))))))),param(Id(O),ArrayType(49,ArrayType(49,ArrayType(87690,ArrayType(49,ArrayType(128,ArrayType(4,ArrayType(35,StringType)))))))),param(Id(_n),ArrayType(74,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 612))

    def test_613(self):
        line = '''Class _:A6{}Class D__34:_0{__(Uh,u:_5_6;_:F;m_,___:Array [Array [Array [Array [Array [Array [Boolean ,0X49],0b1],0X49],77],07_3_7],6];__:String ;_,_0,w:Array [Array [Array [Int ,77],02],0b1010000];_1:Float ;_,F4,_b,F:Float ){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(A6),[]),ClassDecl(Id(D__34),Id(_0),[MethodDecl(Id(__),Instance,[param(Id(Uh),ClassType(Id(_5_6))),param(Id(u),ClassType(Id(_5_6))),param(Id(_),ClassType(Id(F))),param(Id(m_),ArrayType(6,ArrayType(479,ArrayType(77,ArrayType(73,ArrayType(1,ArrayType(73,BoolType))))))),param(Id(___),ArrayType(6,ArrayType(479,ArrayType(77,ArrayType(73,ArrayType(1,ArrayType(73,BoolType))))))),param(Id(__),StringType),param(Id(_),ArrayType(80,ArrayType(2,ArrayType(77,IntType)))),param(Id(_0),ArrayType(80,ArrayType(2,ArrayType(77,IntType)))),param(Id(w),ArrayType(80,ArrayType(2,ArrayType(77,IntType)))),param(Id(_1),FloatType),param(Id(_),FloatType),param(Id(F4),FloatType),param(Id(_b),FloatType),param(Id(F),FloatType)],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 613))

    def test_614(self):
        line = '''Class _{_(K5,_3__,Ox4A4Qn,r__N,I_9,_7fnN:Boolean ;___,_R60:Array [Float ,61];E2,J,_:Array [Array [Array [Float ,0X50_67_5C],0x3C],03];qa3__,G,_:Boolean ;M,C_:_){} }Class h_:q{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[param(Id(K5),BoolType),param(Id(_3__),BoolType),param(Id(Ox4A4Qn),BoolType),param(Id(r__N),BoolType),param(Id(I_9),BoolType),param(Id(_7fnN),BoolType),param(Id(___),ArrayType(61,FloatType)),param(Id(_R60),ArrayType(61,FloatType)),param(Id(E2),ArrayType(3,ArrayType(60,ArrayType(5269340,FloatType)))),param(Id(J),ArrayType(3,ArrayType(60,ArrayType(5269340,FloatType)))),param(Id(_),ArrayType(3,ArrayType(60,ArrayType(5269340,FloatType)))),param(Id(qa3__),BoolType),param(Id(G),BoolType),param(Id(_),BoolType),param(Id(M),ClassType(Id(_))),param(Id(C_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(h_),Id(q),[])])'''
        self.assertTrue(TestAST.test(line, expect, 614))

    def test_615(self):
        line = '''Class __:s{$_(n:Array [Array [Int ,0B11],0X37];_X,W:_32;_:Array [Array [Array [Array [Array [Array [Array [Float ,6_4],017],0x7],017],0B1100011],3],0X9E9];B:z){}Val _4:Array [Array [Int ,0x5],0B1100011];Constructor (N:_Z){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(s),[MethodDecl(Id($_),Static,[param(Id(n),ArrayType(55,ArrayType(3,IntType))),param(Id(_X),ClassType(Id(_32))),param(Id(W),ClassType(Id(_32))),param(Id(_),ArrayType(2537,ArrayType(3,ArrayType(99,ArrayType(15,ArrayType(7,ArrayType(15,ArrayType(64,FloatType)))))))),param(Id(B),ClassType(Id(z)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_4),ArrayType(99,ArrayType(5,IntType)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(N),ClassType(Id(_Z)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 615))

    def test_616(self):
        line = '''Class _b:n{Var $___5oW,$4n,$__0P,_,_k7,_,T,_8,_N,__,$t__:Array [Array [Array [Float ,06],0134],45];}Class Z:h{$6_(){New _()._F.q().__().i().g_().xX4_().U();}Var s,_,$8:___;Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_b),Id(n),[AttributeDecl(Static,VarDecl(Id($___5oW),ArrayType(45,ArrayType(92,ArrayType(6,FloatType))))),AttributeDecl(Static,VarDecl(Id($4n),ArrayType(45,ArrayType(92,ArrayType(6,FloatType))))),AttributeDecl(Static,VarDecl(Id($__0P),ArrayType(45,ArrayType(92,ArrayType(6,FloatType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(45,ArrayType(92,ArrayType(6,FloatType))))),AttributeDecl(Instance,VarDecl(Id(_k7),ArrayType(45,ArrayType(92,ArrayType(6,FloatType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(45,ArrayType(92,ArrayType(6,FloatType))))),AttributeDecl(Instance,VarDecl(Id(T),ArrayType(45,ArrayType(92,ArrayType(6,FloatType))))),AttributeDecl(Instance,VarDecl(Id(_8),ArrayType(45,ArrayType(92,ArrayType(6,FloatType))))),AttributeDecl(Instance,VarDecl(Id(_N),ArrayType(45,ArrayType(92,ArrayType(6,FloatType))))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(45,ArrayType(92,ArrayType(6,FloatType))))),AttributeDecl(Static,VarDecl(Id($t__),ArrayType(45,ArrayType(92,ArrayType(6,FloatType)))))]),ClassDecl(Id(Z),Id(h),[MethodDecl(Id($6_),Static,[],Block([Call(CallExpr(CallExpr(CallExpr(CallExpr(CallExpr(FieldAccess(NewExpr(Id(_),[]),Id(_F)),Id(q),[]),Id(__),[]),Id(i),[]),Id(g_),[]),Id(xX4_),[]),Id(U),[])])),AttributeDecl(Instance,VarDecl(Id(s),ClassType(Id(___)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(___)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($8),ClassType(Id(___)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 616))

    def test_617(self):
        line = '''Class _{}Class Z:b0{$T(){}$x(){} }Class I{}Class SV3{}Class P{}Class w{Constructor (IwS,_G,Wf9,Iy7d,_:_1_8;GF_,o3,_,__o,_:Array [String ,04_14]){Continue ;}Constructor (R,Q,_,q0:_c4;_p_e1:Array [Array [Boolean ,0B1_00],0XF];j,K:Array [Boolean ,06];_:Array [Float ,0b1011010];r,x,_,_A,c:Array [Array [Float ,0B11],84];t,j,_7:Gh){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(Z),Id(b0),[MethodDecl(Id($T),Static,[],Block([])),MethodDecl(Id($x),Static,[],Block([]))]),ClassDecl(Id(I),[]),ClassDecl(Id(SV3),[]),ClassDecl(Id(P),[]),ClassDecl(Id(w),[MethodDecl(Id(Constructor),Instance,[param(Id(IwS),ClassType(Id(_1_8))),param(Id(_G),ClassType(Id(_1_8))),param(Id(Wf9),ClassType(Id(_1_8))),param(Id(Iy7d),ClassType(Id(_1_8))),param(Id(_),ClassType(Id(_1_8))),param(Id(GF_),ArrayType(268,StringType)),param(Id(o3),ArrayType(268,StringType)),param(Id(_),ArrayType(268,StringType)),param(Id(__o),ArrayType(268,StringType)),param(Id(_),ArrayType(268,StringType))],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(R),ClassType(Id(_c4))),param(Id(Q),ClassType(Id(_c4))),param(Id(_),ClassType(Id(_c4))),param(Id(q0),ClassType(Id(_c4))),param(Id(_p_e1),ArrayType(15,ArrayType(4,BoolType))),param(Id(j),ArrayType(6,BoolType)),param(Id(K),ArrayType(6,BoolType)),param(Id(_),ArrayType(90,FloatType)),param(Id(r),ArrayType(84,ArrayType(3,FloatType))),param(Id(x),ArrayType(84,ArrayType(3,FloatType))),param(Id(_),ArrayType(84,ArrayType(3,FloatType))),param(Id(_A),ArrayType(84,ArrayType(3,FloatType))),param(Id(c),ArrayType(84,ArrayType(3,FloatType))),param(Id(t),ClassType(Id(Gh))),param(Id(j),ClassType(Id(Gh))),param(Id(_7),ClassType(Id(Gh)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 617))

    def test_618(self):
        line = '''Class x:_{Constructor (Ul:String ){Return ;}Val w,_8,FKv:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0B1011],0B11],0x41],061],92],0B1011],0x41],0244_6],0b1_0];}'''
        expect = '''Program([ClassDecl(Id(x),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(Ul),StringType)],Block([Return()])),AttributeDecl(Instance,ConstDecl(Id(w),ArrayType(2,ArrayType(1318,ArrayType(65,ArrayType(11,ArrayType(92,ArrayType(49,ArrayType(65,ArrayType(3,ArrayType(11,BoolType))))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_8),ArrayType(2,ArrayType(1318,ArrayType(65,ArrayType(11,ArrayType(92,ArrayType(49,ArrayType(65,ArrayType(3,ArrayType(11,BoolType))))))))),None)),AttributeDecl(Instance,ConstDecl(Id(FKv),ArrayType(2,ArrayType(1318,ArrayType(65,ArrayType(11,ArrayType(92,ArrayType(49,ArrayType(65,ArrayType(3,ArrayType(11,BoolType))))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 618))

    def test_619(self):
        line = '''Class O:j{}Class l:j9{}Class k4{Var $b,$_,i:Array [String ,0x5C];Val _:Array [Array [Array [Array [Array [Array [Array [String ,17_58],024],0B111111],0xE_4],0X6_9_A],0x6_2],2];}'''
        expect = '''Program([ClassDecl(Id(O),Id(j),[]),ClassDecl(Id(l),Id(j9),[]),ClassDecl(Id(k4),[AttributeDecl(Static,VarDecl(Id($b),ArrayType(92,StringType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(92,StringType))),AttributeDecl(Instance,VarDecl(Id(i),ArrayType(92,StringType))),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,ArrayType(98,ArrayType(1690,ArrayType(228,ArrayType(63,ArrayType(20,ArrayType(1758,StringType))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 619))

    def test_620(self):
        line = '''Class Ei_{Constructor (_,u_O,T5K__,_8_:Float ;Gw:Array [Int ,0b1101];T:Boolean ){ {}Break ;} }Class u4{$o3(H_:Boolean ;_5WuN:Array [Array [Boolean ,0B1],52]){}Val $1,LE191,b__,$d,$8:__;}'''
        expect = '''Program([ClassDecl(Id(Ei_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(u_O),FloatType),param(Id(T5K__),FloatType),param(Id(_8_),FloatType),param(Id(Gw),ArrayType(13,IntType)),param(Id(T),BoolType)],Block([Block([]),Break]))]),ClassDecl(Id(u4),[MethodDecl(Id($o3),Static,[param(Id(H_),BoolType),param(Id(_5WuN),ArrayType(52,ArrayType(1,BoolType)))],Block([])),AttributeDecl(Static,ConstDecl(Id($1),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(LE191),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(b__),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($d),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($8),ClassType(Id(__)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 620))

    def test_621(self):
        line = '''Class _:sl393{}Class _A_:o__{Constructor (q6,h_09:Array [Boolean ,0B1_1];_6l_A,l54d:l5;_A_,_0:Boolean ;O:_6;_r,N,l1,G_J,_:Array [Array [Array [String ,013],0B1_11],0b10010]){} }Class bb:__{}'''
        expect = '''Program([ClassDecl(Id(_),Id(sl393),[]),ClassDecl(Id(_A_),Id(o__),[MethodDecl(Id(Constructor),Instance,[param(Id(q6),ArrayType(3,BoolType)),param(Id(h_09),ArrayType(3,BoolType)),param(Id(_6l_A),ClassType(Id(l5))),param(Id(l54d),ClassType(Id(l5))),param(Id(_A_),BoolType),param(Id(_0),BoolType),param(Id(O),ClassType(Id(_6))),param(Id(_r),ArrayType(18,ArrayType(7,ArrayType(11,StringType)))),param(Id(N),ArrayType(18,ArrayType(7,ArrayType(11,StringType)))),param(Id(l1),ArrayType(18,ArrayType(7,ArrayType(11,StringType)))),param(Id(G_J),ArrayType(18,ArrayType(7,ArrayType(11,StringType)))),param(Id(_),ArrayType(18,ArrayType(7,ArrayType(11,StringType))))],Block([]))]),ClassDecl(Id(bb),Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 621))

    def test_622(self):
        line = '''Class N{K_(){} }Class N_:__{Destructor (){} }Class _49:i{}Class I:_{Constructor (_:Array [Array [Int ,0117],0B1_1]){Continue ;}Var $204,$44,$_Z,$_,L:Int ;}Class _P{}Class __{}Class P:p{}Class _N:PbM1{___(){} }'''
        expect = '''Program([ClassDecl(Id(N),[MethodDecl(Id(K_),Instance,[],Block([]))]),ClassDecl(Id(N_),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_49),Id(i),[]),ClassDecl(Id(I),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(3,ArrayType(79,IntType)))],Block([Continue])),AttributeDecl(Static,VarDecl(Id($204),IntType)),AttributeDecl(Static,VarDecl(Id($44),IntType)),AttributeDecl(Static,VarDecl(Id($_Z),IntType)),AttributeDecl(Static,VarDecl(Id($_),IntType)),AttributeDecl(Instance,VarDecl(Id(L),IntType))]),ClassDecl(Id(_P),[]),ClassDecl(Id(__),[]),ClassDecl(Id(P),Id(p),[]),ClassDecl(Id(_N),Id(PbM1),[MethodDecl(Id(___),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 622))

    def test_623(self):
        line = '''Class c_:z_{}Class f{Destructor (){}Constructor (C,_:Array [Array [Array [Array [Array [Float ,05],0b110101],38],0b1],38];_,_BT_,n:Array [Array [Array [Array [Array [Int ,0633],0x33],01_20],0B1],0X14]){} }Class OM1_:_3{}Class J_:aC{Constructor (Q8_:Array [Array [Float ,0x33],03]){} }'''
        expect = '''Program([ClassDecl(Id(c_),Id(z_),[]),ClassDecl(Id(f),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(C),ArrayType(38,ArrayType(1,ArrayType(38,ArrayType(53,ArrayType(5,FloatType)))))),param(Id(_),ArrayType(38,ArrayType(1,ArrayType(38,ArrayType(53,ArrayType(5,FloatType)))))),param(Id(_),ArrayType(20,ArrayType(1,ArrayType(80,ArrayType(51,ArrayType(411,IntType)))))),param(Id(_BT_),ArrayType(20,ArrayType(1,ArrayType(80,ArrayType(51,ArrayType(411,IntType)))))),param(Id(n),ArrayType(20,ArrayType(1,ArrayType(80,ArrayType(51,ArrayType(411,IntType))))))],Block([]))]),ClassDecl(Id(OM1_),Id(_3),[]),ClassDecl(Id(J_),Id(aC),[MethodDecl(Id(Constructor),Instance,[param(Id(Q8_),ArrayType(3,ArrayType(51,FloatType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 623))

    def test_624(self):
        line = '''Class _409:Ap{}Class F{Val $77,y_te,$2,$I_H:Array [Array [Array [Array [Array [Array [Int ,0b1],07],4],9],05660],0B100010];Var $p:Array [Array [String ,07],0X9];Var SO:_46_;Var l_:String ;_8(S30_:_9){} }'''
        expect = '''Program([ClassDecl(Id(_409),Id(Ap),[]),ClassDecl(Id(F),[AttributeDecl(Static,ConstDecl(Id($77),ArrayType(34,ArrayType(2992,ArrayType(9,ArrayType(4,ArrayType(7,ArrayType(1,IntType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(y_te),ArrayType(34,ArrayType(2992,ArrayType(9,ArrayType(4,ArrayType(7,ArrayType(1,IntType)))))),None)),AttributeDecl(Static,ConstDecl(Id($2),ArrayType(34,ArrayType(2992,ArrayType(9,ArrayType(4,ArrayType(7,ArrayType(1,IntType)))))),None)),AttributeDecl(Static,ConstDecl(Id($I_H),ArrayType(34,ArrayType(2992,ArrayType(9,ArrayType(4,ArrayType(7,ArrayType(1,IntType)))))),None)),AttributeDecl(Static,VarDecl(Id($p),ArrayType(9,ArrayType(7,StringType)))),AttributeDecl(Instance,VarDecl(Id(SO),ClassType(Id(_46_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(l_),StringType)),MethodDecl(Id(_8),Instance,[param(Id(S30_),ClassType(Id(_9)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 624))

    def test_625(self):
        line = '''Class _0T:Q5{}Class A{Constructor (x,q,o_9_7q3M:Array [Array [Boolean ,020],0X2D];Vyk_pm,_:Array [Array [Float ,5_8_55],020];_2:Array [Array [Array [String ,0XC],20],0b101100];aS:W7Q;NE,_:_;__,_Z1:String ){} }'''
        expect = '''Program([ClassDecl(Id(_0T),Id(Q5),[]),ClassDecl(Id(A),[MethodDecl(Id(Constructor),Instance,[param(Id(x),ArrayType(45,ArrayType(16,BoolType))),param(Id(q),ArrayType(45,ArrayType(16,BoolType))),param(Id(o_9_7q3M),ArrayType(45,ArrayType(16,BoolType))),param(Id(Vyk_pm),ArrayType(16,ArrayType(5855,FloatType))),param(Id(_),ArrayType(16,ArrayType(5855,FloatType))),param(Id(_2),ArrayType(44,ArrayType(20,ArrayType(12,StringType)))),param(Id(aS),ClassType(Id(W7Q))),param(Id(NE),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(__),StringType),param(Id(_Z1),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 625))

    def test_626(self):
        line = '''Class z:H{}Class _:_I{Constructor (v,B5K:Array [String ,0x2];_,r_,D:Float ;_9:Boolean ;l:_){} }Class Q{Val $Z:__;Val $1_9:p_;Constructor (){}Var _49,$I:Array [Array [Boolean ,0B11],8_58_0_9];}'''
        expect = '''Program([ClassDecl(Id(z),Id(H),[]),ClassDecl(Id(_),Id(_I),[MethodDecl(Id(Constructor),Instance,[param(Id(v),ArrayType(2,StringType)),param(Id(B5K),ArrayType(2,StringType)),param(Id(_),FloatType),param(Id(r_),FloatType),param(Id(D),FloatType),param(Id(_9),BoolType),param(Id(l),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(Q),[AttributeDecl(Static,ConstDecl(Id($Z),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($1_9),ClassType(Id(p_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_49),ArrayType(85809,ArrayType(3,BoolType)))),AttributeDecl(Static,VarDecl(Id($I),ArrayType(85809,ArrayType(3,BoolType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 626))

    def test_627(self):
        line = '''Class Tg{$5r1(Yo_e3:Array [Array [Float ,6],83];ND,d,_:Array [Array [Array [Boolean ,0b1],0b1_01_1],83]){}Var $xyc,$_K72_:g1v;}Class X0_G{}Class _:_cgo4I__{}Class _7:UZ{Destructor (){} }Class __:Ie{}'''
        expect = '''Program([ClassDecl(Id(Tg),[MethodDecl(Id($5r1),Static,[param(Id(Yo_e3),ArrayType(83,ArrayType(6,FloatType))),param(Id(ND),ArrayType(83,ArrayType(11,ArrayType(1,BoolType)))),param(Id(d),ArrayType(83,ArrayType(11,ArrayType(1,BoolType)))),param(Id(_),ArrayType(83,ArrayType(11,ArrayType(1,BoolType))))],Block([])),AttributeDecl(Static,VarDecl(Id($xyc),ClassType(Id(g1v)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_K72_),ClassType(Id(g1v)),NullLiteral()))]),ClassDecl(Id(X0_G),[]),ClassDecl(Id(_),Id(_cgo4I__),[]),ClassDecl(Id(_7),Id(UZ),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),Id(Ie),[])])'''
        self.assertTrue(TestAST.test(line, expect, 627))

    def test_628(self):
        line = '''Class _{Constructor (){Var _:Array [Array [Boolean ,0X53],07];}Constructor (k,_y,_,q,_:Array [Array [Array [Array [Array [String ,84_6],06],0X53],03_73],6]){} }Class T:d{}Class h3_:_{}Class I:_F{}Class __:d{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([VarDecl(Id(_),ArrayType(7,ArrayType(83,BoolType)))])),MethodDecl(Id(Constructor),Instance,[param(Id(k),ArrayType(6,ArrayType(251,ArrayType(83,ArrayType(6,ArrayType(846,StringType)))))),param(Id(_y),ArrayType(6,ArrayType(251,ArrayType(83,ArrayType(6,ArrayType(846,StringType)))))),param(Id(_),ArrayType(6,ArrayType(251,ArrayType(83,ArrayType(6,ArrayType(846,StringType)))))),param(Id(q),ArrayType(6,ArrayType(251,ArrayType(83,ArrayType(6,ArrayType(846,StringType)))))),param(Id(_),ArrayType(6,ArrayType(251,ArrayType(83,ArrayType(6,ArrayType(846,StringType))))))],Block([]))]),ClassDecl(Id(T),Id(d),[]),ClassDecl(Id(h3_),Id(_),[]),ClassDecl(Id(I),Id(_F),[]),ClassDecl(Id(__),Id(d),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 628))

    def test_629(self):
        line = '''Class OK_:_{Var $b6,$_RM:_;$2(_,m,_3:Float ;_s_,_5088:U9){Val C_s_s:Array [Array [Array [Int ,0131],0b1],03_7];} }Class E6{Destructor (){}Val _:Array [Boolean ,0x52];}Class _wi:n{}Class F:_{}'''
        expect = '''Program([ClassDecl(Id(OK_),Id(_),[AttributeDecl(Static,VarDecl(Id($b6),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_RM),ClassType(Id(_)),NullLiteral())),MethodDecl(Id($2),Static,[param(Id(_),FloatType),param(Id(m),FloatType),param(Id(_3),FloatType),param(Id(_s_),ClassType(Id(U9))),param(Id(_5088),ClassType(Id(U9)))],Block([ConstDecl(Id(C_s_s),ArrayType(31,ArrayType(1,ArrayType(89,IntType))),None)]))]),ClassDecl(Id(E6),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(82,BoolType),None))]),ClassDecl(Id(_wi),Id(n),[]),ClassDecl(Id(F),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 629))

    def test_630(self):
        line = '''Class b:Kd{Destructor (){} }Class ul{Destructor (){} }Class _:J___{}Class _{$N(vJmP,_:Array [Array [Float ,10],0b1_0]){}Var $0,t1mO90,$H:Array [Array [Array [Array [Int ,0b100001],0b100001],4],076];}'''
        expect = '''Program([ClassDecl(Id(b),Id(Kd),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(ul),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(J___),[]),ClassDecl(Id(_),[MethodDecl(Id($N),Static,[param(Id(vJmP),ArrayType(2,ArrayType(10,FloatType))),param(Id(_),ArrayType(2,ArrayType(10,FloatType)))],Block([])),AttributeDecl(Static,VarDecl(Id($0),ArrayType(62,ArrayType(4,ArrayType(33,ArrayType(33,IntType)))))),AttributeDecl(Instance,VarDecl(Id(t1mO90),ArrayType(62,ArrayType(4,ArrayType(33,ArrayType(33,IntType)))))),AttributeDecl(Static,VarDecl(Id($H),ArrayType(62,ArrayType(4,ArrayType(33,ArrayType(33,IntType))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 630))

    def test_631(self):
        line = '''Class o_:n{Val R,p:Array [Array [Array [Boolean ,63],0B110000],0X8];$_9(_,i,I_,g:Boolean ;P9:Array [String ,05405]){}Val $___,$_2_:Array [Boolean ,06];Var $r:p;}Class _:_3__5{$__(b,_rnn__:_){} }'''
        expect = '''Program([ClassDecl(Id(o_),Id(n),[AttributeDecl(Instance,ConstDecl(Id(R),ArrayType(8,ArrayType(48,ArrayType(63,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(p),ArrayType(8,ArrayType(48,ArrayType(63,BoolType))),None)),MethodDecl(Id($_9),Static,[param(Id(_),BoolType),param(Id(i),BoolType),param(Id(I_),BoolType),param(Id(g),BoolType),param(Id(P9),ArrayType(2821,StringType))],Block([])),AttributeDecl(Static,ConstDecl(Id($___),ArrayType(6,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_2_),ArrayType(6,BoolType),None)),AttributeDecl(Static,VarDecl(Id($r),ClassType(Id(p)),NullLiteral()))]),ClassDecl(Id(_),Id(_3__5),[MethodDecl(Id($__),Static,[param(Id(b),ClassType(Id(_))),param(Id(_rnn__),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 631))

    def test_632(self):
        line = '''Class k_288N{Val _y,$0,__,_nA:Array [Array [Array [Boolean ,0113],0B1100101_11],05];_5(vN__,D:Int ;k:Array [Float ,0X1A];_25:_6t__;_,__,J:Array [String ,0b1];_:Array [Int ,0X1A];Y__2_:T){} }'''
        expect = '''Program([ClassDecl(Id(k_288N),[AttributeDecl(Instance,ConstDecl(Id(_y),ArrayType(5,ArrayType(407,ArrayType(75,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($0),ArrayType(5,ArrayType(407,ArrayType(75,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(5,ArrayType(407,ArrayType(75,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(_nA),ArrayType(5,ArrayType(407,ArrayType(75,BoolType))),None)),MethodDecl(Id(_5),Instance,[param(Id(vN__),IntType),param(Id(D),IntType),param(Id(k),ArrayType(26,FloatType)),param(Id(_25),ClassType(Id(_6t__))),param(Id(_),ArrayType(1,StringType)),param(Id(__),ArrayType(1,StringType)),param(Id(J),ArrayType(1,StringType)),param(Id(_),ArrayType(26,IntType)),param(Id(Y__2_),ClassType(Id(T)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 632))

    def test_633(self):
        line = '''Class _:_{Constructor (_J:Array [Array [Array [Float ,0x3D],12],0XA];B79,kkO:_;A,q:_KRT;a1n:Array [Int ,01_0];U3,I4,B,l,QP9UPf,x,_j:Array [Array [String ,062_33_3],9];_,_,C_dp,k5Am:Float ;E,__:String ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_J),ArrayType(10,ArrayType(12,ArrayType(61,FloatType)))),param(Id(B79),ClassType(Id(_))),param(Id(kkO),ClassType(Id(_))),param(Id(A),ClassType(Id(_KRT))),param(Id(q),ClassType(Id(_KRT))),param(Id(a1n),ArrayType(8,IntType)),param(Id(U3),ArrayType(9,ArrayType(25819,StringType))),param(Id(I4),ArrayType(9,ArrayType(25819,StringType))),param(Id(B),ArrayType(9,ArrayType(25819,StringType))),param(Id(l),ArrayType(9,ArrayType(25819,StringType))),param(Id(QP9UPf),ArrayType(9,ArrayType(25819,StringType))),param(Id(x),ArrayType(9,ArrayType(25819,StringType))),param(Id(_j),ArrayType(9,ArrayType(25819,StringType))),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(C_dp),FloatType),param(Id(k5Am),FloatType),param(Id(E),StringType),param(Id(__),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 633))

    def test_634(self):
        line = '''Class _5:x{Constructor (__,w_,_7_5_7I,i:_5M){}Constructor (T,_:g3){ {} }Val g,$4:Boolean ;$b(){Var _5_,p,t,K7,k:Array [String ,0X53];}Constructor (lx:Array [Array [Float ,0X7],41]){} }Class _{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_5),Id(x),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(_5M))),param(Id(w_),ClassType(Id(_5M))),param(Id(_7_5_7I),ClassType(Id(_5M))),param(Id(i),ClassType(Id(_5M)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(T),ClassType(Id(g3))),param(Id(_),ClassType(Id(g3)))],Block([Block([])])),AttributeDecl(Instance,ConstDecl(Id(g),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($4),BoolType,None)),MethodDecl(Id($b),Static,[],Block([VarDecl(Id(_5_),ArrayType(83,StringType)),VarDecl(Id(p),ArrayType(83,StringType)),VarDecl(Id(t),ArrayType(83,StringType)),VarDecl(Id(K7),ArrayType(83,StringType)),VarDecl(Id(k),ArrayType(83,StringType))])),MethodDecl(Id(Constructor),Instance,[param(Id(lx),ArrayType(41,ArrayType(7,FloatType)))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 634))

    def test_635(self):
        line = '''Class T3{Var $_i:_;_(r:w){Continue ;}Constructor (a:Int ;_W41,_6_:Array [Array [String ,025],0b1];_W9,_0,br_0L_3,_:Int ;s:Boolean ;_,_DJ,_3:__){} }Class B8_1{}Class I2:__{Constructor (b:W_6){} }'''
        expect = '''Program([ClassDecl(Id(T3),[AttributeDecl(Static,VarDecl(Id($_i),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(_),Instance,[param(Id(r),ClassType(Id(w)))],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(a),IntType),param(Id(_W41),ArrayType(1,ArrayType(21,StringType))),param(Id(_6_),ArrayType(1,ArrayType(21,StringType))),param(Id(_W9),IntType),param(Id(_0),IntType),param(Id(br_0L_3),IntType),param(Id(_),IntType),param(Id(s),BoolType),param(Id(_),ClassType(Id(__))),param(Id(_DJ),ClassType(Id(__))),param(Id(_3),ClassType(Id(__)))],Block([]))]),ClassDecl(Id(B8_1),[]),ClassDecl(Id(I2),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(b),ClassType(Id(W_6)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 635))

    def test_636(self):
        line = '''Class L:g{Val m,__0_:R;}Class V__:v{$_Z6_wis16(Z_:vq;_52:Array [Array [Array [Array [Array [String ,035],3],0B100],035],0b1]){} }Class __9:b{Destructor (){g9::$Q_();} }'''
        expect = '''Program([ClassDecl(Id(L),Id(g),[AttributeDecl(Instance,ConstDecl(Id(m),ClassType(Id(R)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__0_),ClassType(Id(R)),NullLiteral()))]),ClassDecl(Id(V__),Id(v),[MethodDecl(Id($_Z6_wis16),Static,[param(Id(Z_),ClassType(Id(vq))),param(Id(_52),ArrayType(1,ArrayType(29,ArrayType(4,ArrayType(3,ArrayType(29,StringType))))))],Block([]))]),ClassDecl(Id(__9),Id(b),[MethodDecl(Id(Destructor),Instance,[],Block([Call(Id(g9),Id($Q_),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 636))

    def test_637(self):
        line = '''Class _N_3_:_{o3(i,s,_,_:Int ){}$86Wy(_:Array [Float ,0B1100];_V_0,i:Array [Array [Float ,8],0X56_2];Y0f,R,fU:Array [Int ,29];F_:Array [Int ,0xC];_:Boolean ;Uf,_,n_6,Q,O_:Array [Float ,0X4C];_:Boolean ){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_N_3_),Id(_),[MethodDecl(Id(o3),Instance,[param(Id(i),IntType),param(Id(s),IntType),param(Id(_),IntType),param(Id(_),IntType)],Block([])),MethodDecl(Id($86Wy),Static,[param(Id(_),ArrayType(12,FloatType)),param(Id(_V_0),ArrayType(1378,ArrayType(8,FloatType))),param(Id(i),ArrayType(1378,ArrayType(8,FloatType))),param(Id(Y0f),ArrayType(29,IntType)),param(Id(R),ArrayType(29,IntType)),param(Id(fU),ArrayType(29,IntType)),param(Id(F_),ArrayType(12,IntType)),param(Id(_),BoolType),param(Id(Uf),ArrayType(76,FloatType)),param(Id(_),ArrayType(76,FloatType)),param(Id(n_6),ArrayType(76,FloatType)),param(Id(Q),ArrayType(76,FloatType)),param(Id(O_),ArrayType(76,FloatType)),param(Id(_),BoolType)],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 637))

    def test_638(self):
        line = '''Class Q:EW0_7{Constructor (){} }Class U47A:nO{}Class __:_{Constructor (){}Destructor (){}Var $_:Array [Array [Array [Float ,66],48],0XE];Constructor (uR:Array [Int ,0x4A_B_78_DF];__:Float ){} }Class w:H{}'''
        expect = '''Program([ClassDecl(Id(Q),Id(EW0_7),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(U47A),Id(nO),[]),ClassDecl(Id(__),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(14,ArrayType(48,ArrayType(66,FloatType))))),MethodDecl(Id(Constructor),Instance,[param(Id(uR),ArrayType(78346463,IntType)),param(Id(__),FloatType)],Block([]))]),ClassDecl(Id(w),Id(H),[])])'''
        self.assertTrue(TestAST.test(line, expect, 638))

    def test_639(self):
        line = '''Class z{_7(i50:Array [Array [Array [Int ,0X5],075],0B1_1_1_0];_:Array [Boolean ,0X5C];_8,_53_2y:Array [String ,0x1C];kB9,C_,_:Array [Boolean ,0xA];e_,_,wx,_:Array [Array [Int ,83],0X5C]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(z),[MethodDecl(Id(_7),Instance,[param(Id(i50),ArrayType(14,ArrayType(61,ArrayType(5,IntType)))),param(Id(_),ArrayType(92,BoolType)),param(Id(_8),ArrayType(28,StringType)),param(Id(_53_2y),ArrayType(28,StringType)),param(Id(kB9),ArrayType(10,BoolType)),param(Id(C_),ArrayType(10,BoolType)),param(Id(_),ArrayType(10,BoolType)),param(Id(e_),ArrayType(92,ArrayType(83,IntType))),param(Id(_),ArrayType(92,ArrayType(83,IntType))),param(Id(wx),ArrayType(92,ArrayType(83,IntType))),param(Id(_),ArrayType(92,ArrayType(83,IntType)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 639))

    def test_640(self):
        line = '''Class m{Var s_,_:Array [Array [Array [Array [Array [Array [Int ,9],0X8],067],067],0B1110],067];Destructor (){}Val w:Int ;}Class _{}Class G:_V{Constructor (){} }Class F5N{}Class __:wG{Destructor (){} }Class _{}Class _{}'''
        expect = '''Program([ClassDecl(Id(m),[AttributeDecl(Instance,VarDecl(Id(s_),ArrayType(55,ArrayType(14,ArrayType(55,ArrayType(55,ArrayType(8,ArrayType(9,IntType)))))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(55,ArrayType(14,ArrayType(55,ArrayType(55,ArrayType(8,ArrayType(9,IntType)))))))),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(w),IntType,None))]),ClassDecl(Id(_),[]),ClassDecl(Id(G),Id(_V),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(F5N),[]),ClassDecl(Id(__),Id(wG),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 640))

    def test_641(self):
        line = '''Class e_5w{}Class _:S{Constructor (_,i__4_5,_k:String ;_5Z6:String ;a,_Rg:Int ){}Val y,$_l:Array [Array [Int ,0x3_7_D],01];Var G:s;}Class __:L_{Var tJ,__,___0:Array [Boolean ,0X28];}Class __7h3pj1K_:__4B{}'''
        expect = '''Program([ClassDecl(Id(e_5w),[]),ClassDecl(Id(_),Id(S),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(i__4_5),StringType),param(Id(_k),StringType),param(Id(_5Z6),StringType),param(Id(a),IntType),param(Id(_Rg),IntType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(y),ArrayType(1,ArrayType(893,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($_l),ArrayType(1,ArrayType(893,IntType)),None)),AttributeDecl(Instance,VarDecl(Id(G),ClassType(Id(s)),NullLiteral()))]),ClassDecl(Id(__),Id(L_),[AttributeDecl(Instance,VarDecl(Id(tJ),ArrayType(40,BoolType))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(40,BoolType))),AttributeDecl(Instance,VarDecl(Id(___0),ArrayType(40,BoolType)))]),ClassDecl(Id(__7h3pj1K_),Id(__4B),[])])'''
        self.assertTrue(TestAST.test(line, expect, 641))

    def test_642(self):
        line = '''Class m{}Class A1_SV:G_{Destructor (){} }Class _2{Constructor (L,Te13_:Float ;_030X,_W2,__,___R5:Boolean ){} }Class uV{}Class __:d_09_k{Val $_cF_:Float ;}Class _:_{}'''
        expect = '''Program([ClassDecl(Id(m),[]),ClassDecl(Id(A1_SV),Id(G_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_2),[MethodDecl(Id(Constructor),Instance,[param(Id(L),FloatType),param(Id(Te13_),FloatType),param(Id(_030X),BoolType),param(Id(_W2),BoolType),param(Id(__),BoolType),param(Id(___R5),BoolType)],Block([]))]),ClassDecl(Id(uV),[]),ClassDecl(Id(__),Id(d_09_k),[AttributeDecl(Static,ConstDecl(Id($_cF_),FloatType,None))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 642))

    def test_643(self):
        line = '''Class _H{tg_(){}Var w7,$0_6:_;Val j75,$K:Array [Array [Array [Array [Boolean ,0B1001110],0b101000],05],013];Constructor (U:Array [Array [Float ,45],0x44_D_2];V:Array [Array [Array [String ,013],0x7],0B1001110]){} }Class I:_{}'''
        expect = '''Program([ClassDecl(Id(_H),[MethodDecl(Id(tg_),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(w7),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($0_6),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(j75),ArrayType(11,ArrayType(5,ArrayType(40,ArrayType(78,BoolType)))),None)),AttributeDecl(Static,ConstDecl(Id($K),ArrayType(11,ArrayType(5,ArrayType(40,ArrayType(78,BoolType)))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(U),ArrayType(17618,ArrayType(45,FloatType))),param(Id(V),ArrayType(78,ArrayType(7,ArrayType(11,StringType))))],Block([]))]),ClassDecl(Id(I),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 643))

    def test_644(self):
        line = '''Class _:__7{Constructor (__,O6,_,s,_370N:Array [Float ,0x1C]){}Constructor (_,_:q){}Val $Q,_o_,$_,$_:Array [Array [Array [Float ,0X41],01_0_6],0XA405];}Class _:_{$_7(q,t,_,_:P59_83){}Var _0_0P,_a,sQ_37:Float ;Destructor (){}Var JN,$q,$_,$1,_:Array [Boolean ,0xE];}'''
        expect = '''Program([ClassDecl(Id(_),Id(__7),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(28,FloatType)),param(Id(O6),ArrayType(28,FloatType)),param(Id(_),ArrayType(28,FloatType)),param(Id(s),ArrayType(28,FloatType)),param(Id(_370N),ArrayType(28,FloatType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(q))),param(Id(_),ClassType(Id(q)))],Block([])),AttributeDecl(Static,ConstDecl(Id($Q),ArrayType(41989,ArrayType(70,ArrayType(65,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(_o_),ArrayType(41989,ArrayType(70,ArrayType(65,FloatType))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(41989,ArrayType(70,ArrayType(65,FloatType))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(41989,ArrayType(70,ArrayType(65,FloatType))),None))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id($_7),Static,[param(Id(q),ClassType(Id(P59_83))),param(Id(t),ClassType(Id(P59_83))),param(Id(_),ClassType(Id(P59_83))),param(Id(_),ClassType(Id(P59_83)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_0_0P),FloatType)),AttributeDecl(Instance,VarDecl(Id(_a),FloatType)),AttributeDecl(Instance,VarDecl(Id(sQ_37),FloatType)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(JN),ArrayType(14,BoolType))),AttributeDecl(Static,VarDecl(Id($q),ArrayType(14,BoolType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(14,BoolType))),AttributeDecl(Static,VarDecl(Id($1),ArrayType(14,BoolType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(14,BoolType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 644))

    def test_645(self):
        line = '''Class A:C0{Destructor (){}L(Z,_,_,_:Array [Array [Boolean ,20],0XE];e,pm,_,_,bF:Array [String ,0xF];_E,t,_9:Array [Array [String ,0130],0130]){Break ;} }Class _D6:_9_{_(lEc:Array [Int ,20]){} }'''
        expect = '''Program([ClassDecl(Id(A),Id(C0),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(L),Instance,[param(Id(Z),ArrayType(14,ArrayType(20,BoolType))),param(Id(_),ArrayType(14,ArrayType(20,BoolType))),param(Id(_),ArrayType(14,ArrayType(20,BoolType))),param(Id(_),ArrayType(14,ArrayType(20,BoolType))),param(Id(e),ArrayType(15,StringType)),param(Id(pm),ArrayType(15,StringType)),param(Id(_),ArrayType(15,StringType)),param(Id(_),ArrayType(15,StringType)),param(Id(bF),ArrayType(15,StringType)),param(Id(_E),ArrayType(88,ArrayType(88,StringType))),param(Id(t),ArrayType(88,ArrayType(88,StringType))),param(Id(_9),ArrayType(88,ArrayType(88,StringType)))],Block([Break]))]),ClassDecl(Id(_D6),Id(_9_),[MethodDecl(Id(_),Instance,[param(Id(lEc),ArrayType(20,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 645))

    def test_646(self):
        line = '''Class ___:O{Var $87_,Y__:Array [Array [Array [Array [Array [Boolean ,0X5],0X79],0b1],031],5];Val _,$b84,M9,$9c_D5,$_,$_7i,$D_r:Boolean ;Var i_5:r;Constructor (_7,S:_sD;_9Q_6:Int ;K:Array [Array [Array [Int ,4],0XF],07];_,M6,_,_,_:Z){ {} }Val $k,_,_2GH,_7,$_,_:Array [Int ,0b10000];}Class _G09:_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(___),Id(O),[AttributeDecl(Static,VarDecl(Id($87_),ArrayType(5,ArrayType(25,ArrayType(1,ArrayType(121,ArrayType(5,BoolType))))))),AttributeDecl(Instance,VarDecl(Id(Y__),ArrayType(5,ArrayType(25,ArrayType(1,ArrayType(121,ArrayType(5,BoolType))))))),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($b84),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(M9),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($9c_D5),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_7i),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($D_r),BoolType,None)),AttributeDecl(Instance,VarDecl(Id(i_5),ClassType(Id(r)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_7),ClassType(Id(_sD))),param(Id(S),ClassType(Id(_sD))),param(Id(_9Q_6),IntType),param(Id(K),ArrayType(7,ArrayType(15,ArrayType(4,IntType)))),param(Id(_),ClassType(Id(Z))),param(Id(M6),ClassType(Id(Z))),param(Id(_),ClassType(Id(Z))),param(Id(_),ClassType(Id(Z))),param(Id(_),ClassType(Id(Z)))],Block([Block([])])),AttributeDecl(Static,ConstDecl(Id($k),ArrayType(16,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(16,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_2GH),ArrayType(16,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_7),ArrayType(16,IntType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(16,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(16,IntType),None))]),ClassDecl(Id(_G09),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 646))

    def test_647(self):
        line = '''Class _:p{Var cA_:String ;}Class __w_:_9{_(R_:Array [Array [Array [Boolean ,0B1],02],0137];_,_S:_){}Constructor (){}Destructor (){}Destructor (){Continue ;} }Class f{Val _H1:Float ;Val _,$_,_3i:String ;Destructor (){}Destructor (){}Var _:_R3r;Constructor (H_l:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(p),[AttributeDecl(Instance,VarDecl(Id(cA_),StringType))]),ClassDecl(Id(__w_),Id(_9),[MethodDecl(Id(_),Instance,[param(Id(R_),ArrayType(95,ArrayType(2,ArrayType(1,BoolType)))),param(Id(_),ClassType(Id(_))),param(Id(_S),ClassType(Id(_)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))]),ClassDecl(Id(f),[AttributeDecl(Instance,ConstDecl(Id(_H1),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_3i),StringType,None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_R3r)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(H_l),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 647))

    def test_648(self):
        line = '''Class Q:_G{Destructor (){Continue ;}Constructor (){}Var _,$6,$1,C:_;U4A(yn,A4_z,_:Array [Array [String ,0122],04];_,__:Array [Array [Array [Array [Array [Array [String ,0x4F],0x9F],0b1011111],0XA],0X19],04];p,_:Array [Array [Array [Boolean ,0122],3_7],92]){} }'''
        expect = '''Program([ClassDecl(Id(Q),Id(_G),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($6),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($1),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(C),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(U4A),Instance,[param(Id(yn),ArrayType(4,ArrayType(82,StringType))),param(Id(A4_z),ArrayType(4,ArrayType(82,StringType))),param(Id(_),ArrayType(4,ArrayType(82,StringType))),param(Id(_),ArrayType(4,ArrayType(25,ArrayType(10,ArrayType(95,ArrayType(159,ArrayType(79,StringType))))))),param(Id(__),ArrayType(4,ArrayType(25,ArrayType(10,ArrayType(95,ArrayType(159,ArrayType(79,StringType))))))),param(Id(p),ArrayType(92,ArrayType(37,ArrayType(82,BoolType)))),param(Id(_),ArrayType(92,ArrayType(37,ArrayType(82,BoolType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 648))

    def test_649(self):
        line = '''Class _c:S{Constructor (){}$D_N_(_:_2;_:String ;gS_82:Array [Int ,67];_,x2:Int ;_V:_N04){}Var $m1_1:String ;Var $_A,Q,$_:Array [Array [Array [Array [Array [Boolean ,1],0B1010010],0B1],0b11],0b1];$_w(){} }'''
        expect = '''Program([ClassDecl(Id(_c),Id(S),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($D_N_),Static,[param(Id(_),ClassType(Id(_2))),param(Id(_),StringType),param(Id(gS_82),ArrayType(67,IntType)),param(Id(_),IntType),param(Id(x2),IntType),param(Id(_V),ClassType(Id(_N04)))],Block([])),AttributeDecl(Static,VarDecl(Id($m1_1),StringType)),AttributeDecl(Static,VarDecl(Id($_A),ArrayType(1,ArrayType(3,ArrayType(1,ArrayType(82,ArrayType(1,BoolType))))))),AttributeDecl(Instance,VarDecl(Id(Q),ArrayType(1,ArrayType(3,ArrayType(1,ArrayType(82,ArrayType(1,BoolType))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(1,ArrayType(3,ArrayType(1,ArrayType(82,ArrayType(1,BoolType))))))),MethodDecl(Id($_w),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 649))

    def test_650(self):
        line = '''Class c{}Class Mr_q:_Q653{$_(__,L:Array [Float ,052];D:b;_,Y:Int ;x9Q0,c:Array [Array [Array [Array [Array [Array [Int ,0B1100010],1_8_2_0_4],0B1],84_78_4],0X91],0b1];_:Array [Float ,14];_,Y,I__3,_,_0_,m_CC_g7:Array [Array [Array [Array [Float ,20],20],066],954_8];_7,_:S5){} }'''
        expect = '''Program([ClassDecl(Id(c),[]),ClassDecl(Id(Mr_q),Id(_Q653),[MethodDecl(Id($_),Static,[param(Id(__),ArrayType(42,FloatType)),param(Id(L),ArrayType(42,FloatType)),param(Id(D),ClassType(Id(b))),param(Id(_),IntType),param(Id(Y),IntType),param(Id(x9Q0),ArrayType(1,ArrayType(145,ArrayType(84784,ArrayType(1,ArrayType(18204,ArrayType(98,IntType))))))),param(Id(c),ArrayType(1,ArrayType(145,ArrayType(84784,ArrayType(1,ArrayType(18204,ArrayType(98,IntType))))))),param(Id(_),ArrayType(14,FloatType)),param(Id(_),ArrayType(9548,ArrayType(54,ArrayType(20,ArrayType(20,FloatType))))),param(Id(Y),ArrayType(9548,ArrayType(54,ArrayType(20,ArrayType(20,FloatType))))),param(Id(I__3),ArrayType(9548,ArrayType(54,ArrayType(20,ArrayType(20,FloatType))))),param(Id(_),ArrayType(9548,ArrayType(54,ArrayType(20,ArrayType(20,FloatType))))),param(Id(_0_),ArrayType(9548,ArrayType(54,ArrayType(20,ArrayType(20,FloatType))))),param(Id(m_CC_g7),ArrayType(9548,ArrayType(54,ArrayType(20,ArrayType(20,FloatType))))),param(Id(_7),ClassType(Id(S5))),param(Id(_),ClassType(Id(S5)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 650))

    def test_651(self):
        line = '''Class _:__{Destructor (){} }Class J{Destructor (){}Constructor (Nk,__7_:Array [Array [Array [Boolean ,0b1],047],0B1]){} }Class _{}Class _1{Destructor (){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(J),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(Nk),ArrayType(1,ArrayType(39,ArrayType(1,BoolType)))),param(Id(__7_),ArrayType(1,ArrayType(39,ArrayType(1,BoolType))))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_1),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 651))

    def test_652(self):
        line = '''Class f{}Class _:_{$_12F5(){} }Class __cl{Var $_B_0b,_t,$h0,$_,_6H_:f;}Class __6:_64{}Class ti8{Var P2c:Array [Array [Array [Boolean ,04_3_2],0x48],36];}Class _5K5{Constructor (){} }Class _A:M___{}'''
        expect = '''Program([ClassDecl(Id(f),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id($_12F5),Static,[],Block([]))]),ClassDecl(Id(__cl),[AttributeDecl(Static,VarDecl(Id($_B_0b),ClassType(Id(f)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_t),ClassType(Id(f)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($h0),ClassType(Id(f)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(f)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_6H_),ClassType(Id(f)),NullLiteral()))]),ClassDecl(Id(__6),Id(_64),[]),ClassDecl(Id(ti8),[AttributeDecl(Instance,VarDecl(Id(P2c),ArrayType(36,ArrayType(72,ArrayType(282,BoolType)))))]),ClassDecl(Id(_5K5),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_A),Id(M___),[])])'''
        self.assertTrue(TestAST.test(line, expect, 652))

    def test_653(self):
        line = '''Class _:_{}Class J_:O{Destructor (){}__(_:String ;_x__,_:Float ;_:Array [Array [Array [Float ,0x1],0b1_1_1],0x47];U:Array [Array [Float ,06_6],0B111110];_:_){}$__(V:v;_N_:N){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(J_),Id(O),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(__),Instance,[param(Id(_),StringType),param(Id(_x__),FloatType),param(Id(_),FloatType),param(Id(_),ArrayType(71,ArrayType(7,ArrayType(1,FloatType)))),param(Id(U),ArrayType(62,ArrayType(54,FloatType))),param(Id(_),ClassType(Id(_)))],Block([])),MethodDecl(Id($__),Static,[param(Id(V),ClassType(Id(v))),param(Id(_N_),ClassType(Id(N)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 653))

    def test_654(self):
        line = '''Class _51W_:a{$4(l:Int ;_5:String ;__,_:Array [String ,0X48];_,e,_9n,g_:Array [Boolean ,86];_,K:Array [String ,0b101111];B__D4_,Rr4,W:String ;m,n_,_,_:Boolean ;p,i:Array [Boolean ,0xD]){} }'''
        expect = '''Program([ClassDecl(Id(_51W_),Id(a),[MethodDecl(Id($4),Static,[param(Id(l),IntType),param(Id(_5),StringType),param(Id(__),ArrayType(72,StringType)),param(Id(_),ArrayType(72,StringType)),param(Id(_),ArrayType(86,BoolType)),param(Id(e),ArrayType(86,BoolType)),param(Id(_9n),ArrayType(86,BoolType)),param(Id(g_),ArrayType(86,BoolType)),param(Id(_),ArrayType(47,StringType)),param(Id(K),ArrayType(47,StringType)),param(Id(B__D4_),StringType),param(Id(Rr4),StringType),param(Id(W),StringType),param(Id(m),BoolType),param(Id(n_),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(p),ArrayType(13,BoolType)),param(Id(i),ArrayType(13,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 654))

    def test_655(self):
        line = '''Class k7:_1{}Class X{Val $__E3,NH,L,_,$o_5,e242:Array [Array [Array [Array [Boolean ,03],0xA],0X4B_49],1];}Class R517673__o__:_{}Class T:_TE_{}Class jra{}Class _:d{}'''
        expect = '''Program([ClassDecl(Id(k7),Id(_1),[]),ClassDecl(Id(X),[AttributeDecl(Static,ConstDecl(Id($__E3),ArrayType(1,ArrayType(19273,ArrayType(10,ArrayType(3,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(NH),ArrayType(1,ArrayType(19273,ArrayType(10,ArrayType(3,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(L),ArrayType(1,ArrayType(19273,ArrayType(10,ArrayType(3,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(19273,ArrayType(10,ArrayType(3,BoolType)))),None)),AttributeDecl(Static,ConstDecl(Id($o_5),ArrayType(1,ArrayType(19273,ArrayType(10,ArrayType(3,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(e242),ArrayType(1,ArrayType(19273,ArrayType(10,ArrayType(3,BoolType)))),None))]),ClassDecl(Id(R517673__o__),Id(_),[]),ClassDecl(Id(T),Id(_TE_),[]),ClassDecl(Id(jra),[]),ClassDecl(Id(_),Id(d),[])])'''
        self.assertTrue(TestAST.test(line, expect, 655))

    def test_656(self):
        line = '''Class _L{}Class _:__7{G(E77,_46,J:J;j,b,g,_:H7G){Break ;} }Class _:_8{o11A(fc,a_:Array [Array [Float ,92],92];_0_:W;_:Array [Boolean ,042];_4_:Array [Array [Boolean ,0B10101],0X26]){} }'''
        expect = '''Program([ClassDecl(Id(_L),[]),ClassDecl(Id(_),Id(__7),[MethodDecl(Id(G),Instance,[param(Id(E77),ClassType(Id(J))),param(Id(_46),ClassType(Id(J))),param(Id(J),ClassType(Id(J))),param(Id(j),ClassType(Id(H7G))),param(Id(b),ClassType(Id(H7G))),param(Id(g),ClassType(Id(H7G))),param(Id(_),ClassType(Id(H7G)))],Block([Break]))]),ClassDecl(Id(_),Id(_8),[MethodDecl(Id(o11A),Instance,[param(Id(fc),ArrayType(92,ArrayType(92,FloatType))),param(Id(a_),ArrayType(92,ArrayType(92,FloatType))),param(Id(_0_),ClassType(Id(W))),param(Id(_),ArrayType(34,BoolType)),param(Id(_4_),ArrayType(38,ArrayType(21,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 656))

    def test_657(self):
        line = '''Class W{}Class J58:S3{Constructor (_:___;__,_1,V,G,QO,F__7__i:Array [Boolean ,0X34];_s,_5_c_:Array [Array [Array [Array [Array [Boolean ,0x18],0X34],0b1],0x18],3]){} }'''
        expect = '''Program([ClassDecl(Id(W),[]),ClassDecl(Id(J58),Id(S3),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(___))),param(Id(__),ArrayType(52,BoolType)),param(Id(_1),ArrayType(52,BoolType)),param(Id(V),ArrayType(52,BoolType)),param(Id(G),ArrayType(52,BoolType)),param(Id(QO),ArrayType(52,BoolType)),param(Id(F__7__i),ArrayType(52,BoolType)),param(Id(_s),ArrayType(3,ArrayType(24,ArrayType(1,ArrayType(52,ArrayType(24,BoolType)))))),param(Id(_5_c_),ArrayType(3,ArrayType(24,ArrayType(1,ArrayType(52,ArrayType(24,BoolType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 657))

    def test_658(self):
        line = '''Class T0{$72DF(_,_y:qP;_3_:Int ;F4:Float ;J:Float ;l:Array [String ,0x4];_,YZg,P:Array [String ,0103]){}Var $38,_,__A,_p,B:Array [Array [Boolean ,80],0b1000000];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(T0),[MethodDecl(Id($72DF),Static,[param(Id(_),ClassType(Id(qP))),param(Id(_y),ClassType(Id(qP))),param(Id(_3_),IntType),param(Id(F4),FloatType),param(Id(J),FloatType),param(Id(l),ArrayType(4,StringType)),param(Id(_),ArrayType(67,StringType)),param(Id(YZg),ArrayType(67,StringType)),param(Id(P),ArrayType(67,StringType))],Block([])),AttributeDecl(Static,VarDecl(Id($38),ArrayType(64,ArrayType(80,BoolType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(64,ArrayType(80,BoolType)))),AttributeDecl(Instance,VarDecl(Id(__A),ArrayType(64,ArrayType(80,BoolType)))),AttributeDecl(Instance,VarDecl(Id(_p),ArrayType(64,ArrayType(80,BoolType)))),AttributeDecl(Instance,VarDecl(Id(B),ArrayType(64,ArrayType(80,BoolType)))),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 658))

    def test_659(self):
        line = '''Class A:B4_28{Constructor (o_:Array [Array [Float ,61],0B1];L__:_v;l:Array [String ,0x3A];C:Array [Array [Array [Array [Int ,06_10],0b10110],556],05_214_5]){} }Class B__:V{Constructor (){Break ;} }Class d:_3__{}Class y{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(A),Id(B4_28),[MethodDecl(Id(Constructor),Instance,[param(Id(o_),ArrayType(1,ArrayType(61,FloatType))),param(Id(L__),ClassType(Id(_v))),param(Id(l),ArrayType(58,StringType)),param(Id(C),ArrayType(21605,ArrayType(556,ArrayType(22,ArrayType(392,IntType)))))],Block([]))]),ClassDecl(Id(B__),Id(V),[MethodDecl(Id(Constructor),Instance,[],Block([Break]))]),ClassDecl(Id(d),Id(_3__),[]),ClassDecl(Id(y),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 659))

    def test_660(self):
        line = '''Class p_:_71{_(){} }Class _{Constructor (_:A2y_;f,s:__){Z__o::$z_._.Y_.C_()._._4().O_.Y();}Constructor (){} }Class __{$_(){}Constructor (__16:Array [Array [Array [String ,0130],04],0130]){} }Class u_x{}'''
        expect = '''Program([ClassDecl(Id(p_),Id(_71),[MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(A2y_))),param(Id(f),ClassType(Id(__))),param(Id(s),ClassType(Id(__)))],Block([Call(FieldAccess(CallExpr(FieldAccess(CallExpr(FieldAccess(FieldAccess(FieldAccess(Id(Z__o),Id($z_)),Id(_)),Id(Y_)),Id(C_),[]),Id(_)),Id(_4),[]),Id(O_)),Id(Y),[])])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(__),[MethodDecl(Id($_),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__16),ArrayType(88,ArrayType(4,ArrayType(88,StringType))))],Block([]))]),ClassDecl(Id(u_x),[])])'''
        self.assertTrue(TestAST.test(line, expect, 660))

    def test_661(self):
        line = '''Class _Z4{}Class oR_{$fW(){}Destructor (){Var Z,c:Array [Array [Array [Array [Array [Array [Array [String ,074_64],02],49],0X46],0XE],0133],03];Continue ;}$3(X0_8:String ;_u2_,y6_,_,N46PH:String ){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_Z4),[]),ClassDecl(Id(oR_),[MethodDecl(Id($fW),Static,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(Z),ArrayType(3,ArrayType(91,ArrayType(14,ArrayType(70,ArrayType(49,ArrayType(2,ArrayType(3892,StringType)))))))),VarDecl(Id(c),ArrayType(3,ArrayType(91,ArrayType(14,ArrayType(70,ArrayType(49,ArrayType(2,ArrayType(3892,StringType)))))))),Continue])),MethodDecl(Id($3),Static,[param(Id(X0_8),StringType),param(Id(_u2_),StringType),param(Id(y6_),StringType),param(Id(_),StringType),param(Id(N46PH),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 661))

    def test_662(self):
        line = '''Class _J{f(_,G5:Array [Array [Array [String ,0x34],040],27];sP:Array [Array [Array [String ,27],0X81_D],0B101011];S,__h9:Array [Array [Int ,0B1],0x34];c__o,_mBN:f){ {} }}Class __{}'''
        expect = '''Program([ClassDecl(Id(_J),[MethodDecl(Id(f),Instance,[param(Id(_),ArrayType(27,ArrayType(32,ArrayType(52,StringType)))),param(Id(G5),ArrayType(27,ArrayType(32,ArrayType(52,StringType)))),param(Id(sP),ArrayType(43,ArrayType(2077,ArrayType(27,StringType)))),param(Id(S),ArrayType(52,ArrayType(1,IntType))),param(Id(__h9),ArrayType(52,ArrayType(1,IntType))),param(Id(c__o),ClassType(Id(f))),param(Id(_mBN),ClassType(Id(f)))],Block([Block([])]))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 662))

    def test_663(self):
        line = '''Class Hg{Constructor (_:Array [Array [Array [Array [Array [Array [Boolean ,0X35],17],8],0x3],0X35],0X35];w:i){Continue ;} }Class _:__{}Class K:___{}Class C{Var N1,$_,$_,E:_42;Destructor (){} }Class _Yw__1H:_{}'''
        expect = '''Program([ClassDecl(Id(Hg),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(53,ArrayType(53,ArrayType(3,ArrayType(8,ArrayType(17,ArrayType(53,BoolType))))))),param(Id(w),ClassType(Id(i)))],Block([Continue]))]),ClassDecl(Id(_),Id(__),[]),ClassDecl(Id(K),Id(___),[]),ClassDecl(Id(C),[AttributeDecl(Instance,VarDecl(Id(N1),ClassType(Id(_42)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_42)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_42)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(E),ClassType(Id(_42)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_Yw__1H),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 663))

    def test_664(self):
        line = '''Class KAc:Rr8Z{}Class T_{}Class _D_5:_0_P{Constructor (j,_I,q0_:Array [Array [Boolean ,026],04];b0_:String ){} }Class o{$T(){}Constructor (){}Var _:Array [String ,0b1010000];}'''
        expect = '''Program([ClassDecl(Id(KAc),Id(Rr8Z),[]),ClassDecl(Id(T_),[]),ClassDecl(Id(_D_5),Id(_0_P),[MethodDecl(Id(Constructor),Instance,[param(Id(j),ArrayType(4,ArrayType(22,BoolType))),param(Id(_I),ArrayType(4,ArrayType(22,BoolType))),param(Id(q0_),ArrayType(4,ArrayType(22,BoolType))),param(Id(b0_),StringType)],Block([]))]),ClassDecl(Id(o),[MethodDecl(Id($T),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(80,StringType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 664))

    def test_665(self):
        line = '''Class _p_:_m{}Class Y{Constructor (o,K:Array [Array [Array [Array [Array [Boolean ,7_3],38_8_21],3_8_5_1_645_1],8],9];_:r;z,_71,_,_:Array [Array [Float ,19],0b101001];b_3f5,m,BS74:Array [Array [Array [Boolean ,046],0X30],046];_ZF8,_2:D1;o:Float ){} }Class Hv{}Class e__:Lz88{}'''
        expect = '''Program([ClassDecl(Id(_p_),Id(_m),[]),ClassDecl(Id(Y),[MethodDecl(Id(Constructor),Instance,[param(Id(o),ArrayType(9,ArrayType(8,ArrayType(38516451,ArrayType(38821,ArrayType(73,BoolType)))))),param(Id(K),ArrayType(9,ArrayType(8,ArrayType(38516451,ArrayType(38821,ArrayType(73,BoolType)))))),param(Id(_),ClassType(Id(r))),param(Id(z),ArrayType(41,ArrayType(19,FloatType))),param(Id(_71),ArrayType(41,ArrayType(19,FloatType))),param(Id(_),ArrayType(41,ArrayType(19,FloatType))),param(Id(_),ArrayType(41,ArrayType(19,FloatType))),param(Id(b_3f5),ArrayType(38,ArrayType(48,ArrayType(38,BoolType)))),param(Id(m),ArrayType(38,ArrayType(48,ArrayType(38,BoolType)))),param(Id(BS74),ArrayType(38,ArrayType(48,ArrayType(38,BoolType)))),param(Id(_ZF8),ClassType(Id(D1))),param(Id(_2),ClassType(Id(D1))),param(Id(o),FloatType)],Block([]))]),ClassDecl(Id(Hv),[]),ClassDecl(Id(e__),Id(Lz88),[])])'''
        self.assertTrue(TestAST.test(line, expect, 665))

    def test_666(self):
        line = '''Class rB_:_6{$2a(_6:Array [Array [Array [Array [Array [String ,06],0x5_1],057],0B1001011],69_12_9];F44_5,_,A,Ia:Array [Array [Array [Array [String ,32],0X30],0X1_2],0x7_7_6]){} }Class c_i:__{}'''
        expect = '''Program([ClassDecl(Id(rB_),Id(_6),[MethodDecl(Id($2a),Static,[param(Id(_6),ArrayType(69129,ArrayType(75,ArrayType(47,ArrayType(81,ArrayType(6,StringType)))))),param(Id(F44_5),ArrayType(1910,ArrayType(18,ArrayType(48,ArrayType(32,StringType))))),param(Id(_),ArrayType(1910,ArrayType(18,ArrayType(48,ArrayType(32,StringType))))),param(Id(A),ArrayType(1910,ArrayType(18,ArrayType(48,ArrayType(32,StringType))))),param(Id(Ia),ArrayType(1910,ArrayType(18,ArrayType(48,ArrayType(32,StringType)))))],Block([]))]),ClassDecl(Id(c_i),Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 666))

    def test_667(self):
        line = '''Class _{Val _,$30,_,y:Array [Array [Array [Float ,0753_7],0X42],109];$_d3__S(_0,_,N_,k:Array [Int ,0B1000101]){}Destructor (){}Val $R7_,_:Boolean ;Var W1:_;Val $_93,$_4,_,$_3,$6_:_;}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(109,ArrayType(66,ArrayType(3935,FloatType))),None)),AttributeDecl(Static,ConstDecl(Id($30),ArrayType(109,ArrayType(66,ArrayType(3935,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(109,ArrayType(66,ArrayType(3935,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(y),ArrayType(109,ArrayType(66,ArrayType(3935,FloatType))),None)),MethodDecl(Id($_d3__S),Static,[param(Id(_0),ArrayType(69,IntType)),param(Id(_),ArrayType(69,IntType)),param(Id(N_),ArrayType(69,IntType)),param(Id(k),ArrayType(69,IntType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($R7_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,VarDecl(Id(W1),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_93),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_4),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_3),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($6_),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 667))

    def test_668(self):
        line = '''Class R{}Class Q{Var $_M1_:Array [Int ,0xE];Val $YH,_9:Array [Array [Array [String ,0b1],03],0x8];}Class _o4{Val $5f_:String ;Val $69:Boolean ;}Class _{}Class h_{}Class _l{}'''
        expect = '''Program([ClassDecl(Id(R),[]),ClassDecl(Id(Q),[AttributeDecl(Static,VarDecl(Id($_M1_),ArrayType(14,IntType))),AttributeDecl(Static,ConstDecl(Id($YH),ArrayType(8,ArrayType(3,ArrayType(1,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(_9),ArrayType(8,ArrayType(3,ArrayType(1,StringType))),None))]),ClassDecl(Id(_o4),[AttributeDecl(Static,ConstDecl(Id($5f_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($69),BoolType,None))]),ClassDecl(Id(_),[]),ClassDecl(Id(h_),[]),ClassDecl(Id(_l),[])])'''
        self.assertTrue(TestAST.test(line, expect, 668))

    def test_669(self):
        line = '''Class __n{}Class _23{Constructor (s1J,_86,H__5:Array [Array [Array [Boolean ,9],05],50];r___,_I:_;_HQ_b,G7,oA8:Boolean ;d71_:String ;_:String ;Tr,x,X:Array [Array [Float ,2_200],052];X,_:Array [Array [Array [Array [Array [Array [Boolean ,0b110001],0101],0X56],50],0x61],04];Y:g){ {} }Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(__n),[]),ClassDecl(Id(_23),[MethodDecl(Id(Constructor),Instance,[param(Id(s1J),ArrayType(50,ArrayType(5,ArrayType(9,BoolType)))),param(Id(_86),ArrayType(50,ArrayType(5,ArrayType(9,BoolType)))),param(Id(H__5),ArrayType(50,ArrayType(5,ArrayType(9,BoolType)))),param(Id(r___),ClassType(Id(_))),param(Id(_I),ClassType(Id(_))),param(Id(_HQ_b),BoolType),param(Id(G7),BoolType),param(Id(oA8),BoolType),param(Id(d71_),StringType),param(Id(_),StringType),param(Id(Tr),ArrayType(42,ArrayType(2200,FloatType))),param(Id(x),ArrayType(42,ArrayType(2200,FloatType))),param(Id(X),ArrayType(42,ArrayType(2200,FloatType))),param(Id(X),ArrayType(4,ArrayType(97,ArrayType(50,ArrayType(86,ArrayType(65,ArrayType(49,BoolType))))))),param(Id(_),ArrayType(4,ArrayType(97,ArrayType(50,ArrayType(86,ArrayType(65,ArrayType(49,BoolType))))))),param(Id(Y),ClassType(Id(g)))],Block([Block([])])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 669))

    def test_670(self):
        line = '''Class __{Var _:Array [Float ,0B101010];}Class _:_{Var $3_,__9O,$_8:mE_5D;}Class h:w51{}Class _6Fd{$s57(_4:_;_,_E,__2P_m2,_,uf_,W:Boolean ){}Val _,$2S,$L:Array [String ,0X21];}'''
        expect = '''Program([ClassDecl(Id(__),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(42,FloatType)))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($3_),ClassType(Id(mE_5D)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__9O),ClassType(Id(mE_5D)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_8),ClassType(Id(mE_5D)),NullLiteral()))]),ClassDecl(Id(h),Id(w51),[]),ClassDecl(Id(_6Fd),[MethodDecl(Id($s57),Static,[param(Id(_4),ClassType(Id(_))),param(Id(_),BoolType),param(Id(_E),BoolType),param(Id(__2P_m2),BoolType),param(Id(_),BoolType),param(Id(uf_),BoolType),param(Id(W),BoolType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(33,StringType),None)),AttributeDecl(Static,ConstDecl(Id($2S),ArrayType(33,StringType),None)),AttributeDecl(Static,ConstDecl(Id($L),ArrayType(33,StringType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 670))

    def test_671(self):
        line = '''Class _{Var $O,_G,$_,$0,$__:Array [Array [Array [Int ,5],0XE],01];Var W7:Array [Boolean ,0B1_0_1_1];Constructor (Ez9:Array [Array [Array [Boolean ,5],0b11110],0b11110];_:Int ;c,K,w____X:Array [Array [Array [Float ,2],021],021];_xvO:String ){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($O),ArrayType(1,ArrayType(14,ArrayType(5,IntType))))),AttributeDecl(Instance,VarDecl(Id(_G),ArrayType(1,ArrayType(14,ArrayType(5,IntType))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(1,ArrayType(14,ArrayType(5,IntType))))),AttributeDecl(Static,VarDecl(Id($0),ArrayType(1,ArrayType(14,ArrayType(5,IntType))))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(1,ArrayType(14,ArrayType(5,IntType))))),AttributeDecl(Instance,VarDecl(Id(W7),ArrayType(11,BoolType))),MethodDecl(Id(Constructor),Instance,[param(Id(Ez9),ArrayType(30,ArrayType(30,ArrayType(5,BoolType)))),param(Id(_),IntType),param(Id(c),ArrayType(17,ArrayType(17,ArrayType(2,FloatType)))),param(Id(K),ArrayType(17,ArrayType(17,ArrayType(2,FloatType)))),param(Id(w____X),ArrayType(17,ArrayType(17,ArrayType(2,FloatType)))),param(Id(_xvO),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 671))

    def test_672(self):
        line = '''Class N_{$_(W2,i_:Array [Float ,0x20];Y:_0;_04,Z50Ho7__61,_,_:Array [Array [Int ,073],0x20];_:_){}Var $_,$S:V0_;}Class ___2W_4_57:P{}Class Os{}Class _{Val $4,$_5:Float ;Var $5,$A5:_2_t;Var _40:Array [String ,06_37];Destructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(N_),[MethodDecl(Id($_),Static,[param(Id(W2),ArrayType(32,FloatType)),param(Id(i_),ArrayType(32,FloatType)),param(Id(Y),ClassType(Id(_0))),param(Id(_04),ArrayType(32,ArrayType(59,IntType))),param(Id(Z50Ho7__61),ArrayType(32,ArrayType(59,IntType))),param(Id(_),ArrayType(32,ArrayType(59,IntType))),param(Id(_),ArrayType(32,ArrayType(59,IntType))),param(Id(_),ClassType(Id(_)))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(V0_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($S),ClassType(Id(V0_)),NullLiteral()))]),ClassDecl(Id(___2W_4_57),Id(P),[]),ClassDecl(Id(Os),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($4),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_5),FloatType,None)),AttributeDecl(Static,VarDecl(Id($5),ClassType(Id(_2_t)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($A5),ClassType(Id(_2_t)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_40),ArrayType(415,StringType))),MethodDecl(Id(Destructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 672))

    def test_673(self):
        line = '''Class Zbp:B{_4_(){}Constructor (x,j,q0a1:Array [Array [Array [Float ,95],06654],95];z7N,Y,n:String ){}Var $6:Array [Array [Array [Boolean ,353_6_4],011_1],0B10];}Class h85:Iy_{Var _,$_b3,__8:Array [Float ,0b1011111];}'''
        expect = '''Program([ClassDecl(Id(Zbp),Id(B),[MethodDecl(Id(_4_),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(x),ArrayType(95,ArrayType(3500,ArrayType(95,FloatType)))),param(Id(j),ArrayType(95,ArrayType(3500,ArrayType(95,FloatType)))),param(Id(q0a1),ArrayType(95,ArrayType(3500,ArrayType(95,FloatType)))),param(Id(z7N),StringType),param(Id(Y),StringType),param(Id(n),StringType)],Block([])),AttributeDecl(Static,VarDecl(Id($6),ArrayType(2,ArrayType(73,ArrayType(35364,BoolType)))))]),ClassDecl(Id(h85),Id(Iy_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(95,FloatType))),AttributeDecl(Static,VarDecl(Id($_b3),ArrayType(95,FloatType))),AttributeDecl(Instance,VarDecl(Id(__8),ArrayType(95,FloatType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 673))

    def test_674(self):
        line = '''Class jF_:_NS{Constructor (_N,_:Array [Int ,063];_,V,Nt_1:Array [Array [Array [Array [String ,0x5F],063],063],0b1_1];z_:String ){}Constructor (__:_){Val _,_,ZS:String ;}Var $__,_,$A_V_:Int ;}Class _:_7{Constructor (v:a;_6q_l:Array [Boolean ,0x96]){} }Class _B:Hc_{}'''
        expect = '''Program([ClassDecl(Id(jF_),Id(_NS),[MethodDecl(Id(Constructor),Instance,[param(Id(_N),ArrayType(51,IntType)),param(Id(_),ArrayType(51,IntType)),param(Id(_),ArrayType(3,ArrayType(51,ArrayType(51,ArrayType(95,StringType))))),param(Id(V),ArrayType(3,ArrayType(51,ArrayType(51,ArrayType(95,StringType))))),param(Id(Nt_1),ArrayType(3,ArrayType(51,ArrayType(51,ArrayType(95,StringType))))),param(Id(z_),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(_)))],Block([ConstDecl(Id(_),StringType,None),ConstDecl(Id(_),StringType,None),ConstDecl(Id(ZS),StringType,None)])),AttributeDecl(Static,VarDecl(Id($__),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType)),AttributeDecl(Static,VarDecl(Id($A_V_),IntType))]),ClassDecl(Id(_),Id(_7),[MethodDecl(Id(Constructor),Instance,[param(Id(v),ClassType(Id(a))),param(Id(_6q_l),ArrayType(150,BoolType))],Block([]))]),ClassDecl(Id(_B),Id(Hc_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 674))

    def test_675(self):
        line = '''Class XkGu{}Class _{}Class W{}Class e:N{f(_:Float ){} }Class pyq{Var P_:_09;Constructor (_:C;_,_56,A:Int ;___,_w:Float ;_r1w_,_,_:__;N,wl,_8,y7G:_;m4_:Boolean ){Return ;{} }}Class _:_{}'''
        expect = '''Program([ClassDecl(Id(XkGu),[]),ClassDecl(Id(_),[]),ClassDecl(Id(W),[]),ClassDecl(Id(e),Id(N),[MethodDecl(Id(f),Instance,[param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(pyq),[AttributeDecl(Instance,VarDecl(Id(P_),ClassType(Id(_09)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(C))),param(Id(_),IntType),param(Id(_56),IntType),param(Id(A),IntType),param(Id(___),FloatType),param(Id(_w),FloatType),param(Id(_r1w_),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(N),ClassType(Id(_))),param(Id(wl),ClassType(Id(_))),param(Id(_8),ClassType(Id(_))),param(Id(y7G),ClassType(Id(_))),param(Id(m4_),BoolType)],Block([Return(),Block([])]))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 675))

    def test_676(self):
        line = '''Class EKM:__7{Constructor (z1,x:Jg0_;_51_:Array [Array [Array [String ,0b1_0],0B10100_1_1],0X7C_0_77];T_:Array [Array [Array [Array [Boolean ,0b111100],0xE],0B1010011],12_9]){} }'''
        expect = '''Program([ClassDecl(Id(EKM),Id(__7),[MethodDecl(Id(Constructor),Instance,[param(Id(z1),ClassType(Id(Jg0_))),param(Id(x),ClassType(Id(Jg0_))),param(Id(_51_),ArrayType(508023,ArrayType(83,ArrayType(2,StringType)))),param(Id(T_),ArrayType(129,ArrayType(83,ArrayType(14,ArrayType(60,BoolType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 676))

    def test_677(self):
        line = '''Class d{}Class B{$2(c_:__;_:Array [Array [String ,0xD],053_4_5_4]){} }Class z2lC:B3L{Var _l,$7a:S_;Constructor (y,_1_40_2_,__P:K_78){}Var $4:J;Val _,$q3_:Array [Array [Array [Array [Boolean ,046],0x8],046],5_2];}Class _7:_{Var v:G_J;}'''
        expect = '''Program([ClassDecl(Id(d),[]),ClassDecl(Id(B),[MethodDecl(Id($2),Static,[param(Id(c_),ClassType(Id(__))),param(Id(_),ArrayType(22316,ArrayType(13,StringType)))],Block([]))]),ClassDecl(Id(z2lC),Id(B3L),[AttributeDecl(Instance,VarDecl(Id(_l),ClassType(Id(S_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($7a),ClassType(Id(S_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(y),ClassType(Id(K_78))),param(Id(_1_40_2_),ClassType(Id(K_78))),param(Id(__P),ClassType(Id(K_78)))],Block([])),AttributeDecl(Static,VarDecl(Id($4),ClassType(Id(J)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(52,ArrayType(38,ArrayType(8,ArrayType(38,BoolType)))),None)),AttributeDecl(Static,ConstDecl(Id($q3_),ArrayType(52,ArrayType(38,ArrayType(8,ArrayType(38,BoolType)))),None))]),ClassDecl(Id(_7),Id(_),[AttributeDecl(Instance,VarDecl(Id(v),ClassType(Id(G_J)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 677))

    def test_678(self):
        line = '''Class _e7{_3(){} }Class g:kIn {Constructor (_,_L9_ka,T,f0,y,_3:_){Var m1,v,H:Array [Array [Array [String ,073],073],0B1];} }Class d:J{Val $8_21,$__,p8u_:_;Var Th_9X339I,_e,_:String ;}Class _{}'''
        expect = '''Program([ClassDecl(Id(_e7),[MethodDecl(Id(_3),Instance,[],Block([]))]),ClassDecl(Id(g),Id(kIn),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(_L9_ka),ClassType(Id(_))),param(Id(T),ClassType(Id(_))),param(Id(f0),ClassType(Id(_))),param(Id(y),ClassType(Id(_))),param(Id(_3),ClassType(Id(_)))],Block([VarDecl(Id(m1),ArrayType(1,ArrayType(59,ArrayType(59,StringType)))),VarDecl(Id(v),ArrayType(1,ArrayType(59,ArrayType(59,StringType)))),VarDecl(Id(H),ArrayType(1,ArrayType(59,ArrayType(59,StringType))))]))]),ClassDecl(Id(d),Id(J),[AttributeDecl(Static,ConstDecl(Id($8_21),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(p8u_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Th_9X339I),StringType)),AttributeDecl(Instance,VarDecl(Id(_e),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 678))

    def test_679(self):
        line = '''Class W{}Class _9:J2{Destructor (){}Constructor (L:Array [Int ,28];G,__:J;TD:_3;C52__:_my__;_9v,_764,z_7,_:Array [Array [Array [Array [Array [Array [String ,0b1001100],07_4_765],7],015],047],047];__h_j:Array [Array [Array [Float ,0X5E],0X37_2],9]){} }Class _{}Class i4:_{_5(){Break ;} }'''
        expect = '''Program([ClassDecl(Id(W),[]),ClassDecl(Id(_9),Id(J2),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(L),ArrayType(28,IntType)),param(Id(G),ClassType(Id(J))),param(Id(__),ClassType(Id(J))),param(Id(TD),ClassType(Id(_3))),param(Id(C52__),ClassType(Id(_my__))),param(Id(_9v),ArrayType(39,ArrayType(39,ArrayType(13,ArrayType(7,ArrayType(31221,ArrayType(76,StringType))))))),param(Id(_764),ArrayType(39,ArrayType(39,ArrayType(13,ArrayType(7,ArrayType(31221,ArrayType(76,StringType))))))),param(Id(z_7),ArrayType(39,ArrayType(39,ArrayType(13,ArrayType(7,ArrayType(31221,ArrayType(76,StringType))))))),param(Id(_),ArrayType(39,ArrayType(39,ArrayType(13,ArrayType(7,ArrayType(31221,ArrayType(76,StringType))))))),param(Id(__h_j),ArrayType(9,ArrayType(882,ArrayType(94,FloatType))))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(i4),Id(_),[MethodDecl(Id(_5),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 679))

    def test_680(self):
        line = '''Class _:_{}Class _S_F39W9{}Class r{Constructor (){} }Class c0A:_{Val $5_,m6,$ld_:Boolean ;Destructor (){Break ;{} }$e(K__:Array [Array [String ,53],0123];_F36_:h){Val _1,_6,Iy:Array [Boolean ,0XB_A];} }Class _{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_S_F39W9),[]),ClassDecl(Id(r),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(c0A),Id(_),[AttributeDecl(Static,ConstDecl(Id($5_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(m6),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($ld_),BoolType,None)),MethodDecl(Id(Destructor),Instance,[],Block([Break,Block([])])),MethodDecl(Id($e),Static,[param(Id(K__),ArrayType(83,ArrayType(53,StringType))),param(Id(_F36_),ClassType(Id(h)))],Block([ConstDecl(Id(_1),ArrayType(186,BoolType),None),ConstDecl(Id(_6),ArrayType(186,BoolType),None),ConstDecl(Id(Iy),ArrayType(186,BoolType),None)]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 680))

    def test_681(self):
        line = '''Class g_0:_{Var SQYe0f44,$69v3:Array [Array [Array [Array [Array [Int ,15],15],6],3],0b1_10];Var $_,$__1,__7_,_:Array [Array [Array [Array [Array [Int ,56_9_0],07],0xA8],0b1],01];$_8(){} }'''
        expect = '''Program([ClassDecl(Id(g_0),Id(_),[AttributeDecl(Instance,VarDecl(Id(SQYe0f44),ArrayType(6,ArrayType(3,ArrayType(6,ArrayType(15,ArrayType(15,IntType))))))),AttributeDecl(Static,VarDecl(Id($69v3),ArrayType(6,ArrayType(3,ArrayType(6,ArrayType(15,ArrayType(15,IntType))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(1,ArrayType(1,ArrayType(168,ArrayType(7,ArrayType(5690,IntType))))))),AttributeDecl(Static,VarDecl(Id($__1),ArrayType(1,ArrayType(1,ArrayType(168,ArrayType(7,ArrayType(5690,IntType))))))),AttributeDecl(Instance,VarDecl(Id(__7_),ArrayType(1,ArrayType(1,ArrayType(168,ArrayType(7,ArrayType(5690,IntType))))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,ArrayType(1,ArrayType(168,ArrayType(7,ArrayType(5690,IntType))))))),MethodDecl(Id($_8),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 681))

    def test_682(self):
        line = '''Class _:Ef{Constructor (__9_,I:Array [Int ,0b1];w,_:Array [Array [Float ,0B1],0X34]){} }Class d8{Constructor (_,d_,S,tbS5s_:_1_){} }Class jR{}Class P8{}Class t:_{Constructor (_,_S:P;_,_,i1:String ;e_,Z_,w:V;_:Array [Float ,17];z:Array [Boolean ,0X9]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(Ef),[MethodDecl(Id(Constructor),Instance,[param(Id(__9_),ArrayType(1,IntType)),param(Id(I),ArrayType(1,IntType)),param(Id(w),ArrayType(52,ArrayType(1,FloatType))),param(Id(_),ArrayType(52,ArrayType(1,FloatType)))],Block([]))]),ClassDecl(Id(d8),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_1_))),param(Id(d_),ClassType(Id(_1_))),param(Id(S),ClassType(Id(_1_))),param(Id(tbS5s_),ClassType(Id(_1_)))],Block([]))]),ClassDecl(Id(jR),[]),ClassDecl(Id(P8),[]),ClassDecl(Id(t),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(P))),param(Id(_S),ClassType(Id(P))),param(Id(_),StringType),param(Id(_),StringType),param(Id(i1),StringType),param(Id(e_),ClassType(Id(V))),param(Id(Z_),ClassType(Id(V))),param(Id(w),ClassType(Id(V))),param(Id(_),ArrayType(17,FloatType)),param(Id(z),ArrayType(9,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 682))

    def test_683(self):
        line = '''Class k4:_2H2{Val $6,_,$1,__nT:Int ;Constructor (F4,q,_,_,__:K9;__,Sy7_6:Array [Float ,0XB];WU,_517,_lv466,s4,x,_c,E,G:Boolean ;_6o:String ;_:String ;dOD2Ttr:d1){} }Class s2{}'''
        expect = '''Program([ClassDecl(Id(k4),Id(_2H2),[AttributeDecl(Static,ConstDecl(Id($6),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($1),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(__nT),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(F4),ClassType(Id(K9))),param(Id(q),ClassType(Id(K9))),param(Id(_),ClassType(Id(K9))),param(Id(_),ClassType(Id(K9))),param(Id(__),ClassType(Id(K9))),param(Id(__),ArrayType(11,FloatType)),param(Id(Sy7_6),ArrayType(11,FloatType)),param(Id(WU),BoolType),param(Id(_517),BoolType),param(Id(_lv466),BoolType),param(Id(s4),BoolType),param(Id(x),BoolType),param(Id(_c),BoolType),param(Id(E),BoolType),param(Id(G),BoolType),param(Id(_6o),StringType),param(Id(_),StringType),param(Id(dOD2Ttr),ClassType(Id(d1)))],Block([]))]),ClassDecl(Id(s2),[])])'''
        self.assertTrue(TestAST.test(line, expect, 683))

    def test_684(self):
        line = '''Class __U6_Y:N_{$_(T8:Array [Array [String ,3],49];_s,_:String ){} }Class _3t5{}Class r{$__(){}Constructor (){ {} }Var $2_D:Array [Int ,91];Constructor (q_,_:Array [Array [Array [Float ,0b1011],0X3],0XC]){} }Class H:__{Val _9:n_;Destructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(__U6_Y),Id(N_),[MethodDecl(Id($_),Static,[param(Id(T8),ArrayType(49,ArrayType(3,StringType))),param(Id(_s),StringType),param(Id(_),StringType)],Block([]))]),ClassDecl(Id(_3t5),[]),ClassDecl(Id(r),[MethodDecl(Id($__),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Block([])])),AttributeDecl(Static,VarDecl(Id($2_D),ArrayType(91,IntType))),MethodDecl(Id(Constructor),Instance,[param(Id(q_),ArrayType(12,ArrayType(3,ArrayType(11,FloatType)))),param(Id(_),ArrayType(12,ArrayType(3,ArrayType(11,FloatType))))],Block([]))]),ClassDecl(Id(H),Id(__),[AttributeDecl(Instance,ConstDecl(Id(_9),ClassType(Id(n_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 684))

    def test_685(self):
        line = '''Class _:N_Eb{Constructor (_:Boolean ;_:Boolean ;BG,V,F,___8_:Array [String ,0B1_1];___z_:Array [Array [Array [Array [Array [Array [Boolean ,0XD_F_8],061_2],041],0x9],4],041]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(N_Eb),[MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(_),BoolType),param(Id(BG),ArrayType(3,StringType)),param(Id(V),ArrayType(3,StringType)),param(Id(F),ArrayType(3,StringType)),param(Id(___8_),ArrayType(3,StringType)),param(Id(___z_),ArrayType(33,ArrayType(4,ArrayType(9,ArrayType(33,ArrayType(394,ArrayType(3576,BoolType)))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 685))

    def test_686(self):
        line = '''Class _:_h{Val $9:Array [Int ,0x83D];}Class __{Destructor (){}s(){}_(f,a9,_:Array [Array [Array [Int ,0X48],0b11],2_3];Vc,S,__,z:Int ;T:_d){} }Class _:U{}Class T:G_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_h),[AttributeDecl(Static,ConstDecl(Id($9),ArrayType(2109,IntType),None))]),ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(s),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(f),ArrayType(23,ArrayType(3,ArrayType(72,IntType)))),param(Id(a9),ArrayType(23,ArrayType(3,ArrayType(72,IntType)))),param(Id(_),ArrayType(23,ArrayType(3,ArrayType(72,IntType)))),param(Id(Vc),IntType),param(Id(S),IntType),param(Id(__),IntType),param(Id(z),IntType),param(Id(T),ClassType(Id(_d)))],Block([]))]),ClassDecl(Id(_),Id(U),[]),ClassDecl(Id(T),Id(G_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 686))

    def test_687(self):
        line = '''Class _{}Class X{Var w,$P6M,PfSz:V_N;Constructor (m5:Array [Array [Float ,053],96];K,f7,Y_,__:Int ;_:Float ;_,y,u:BU8;k:Array [Float ,96];_,m_,_aC,d:Array [Int ,0B1];_:cz2){} }Class _{Var k8,$__:Int ;}Class e{}Class Uhi7_046:z7A{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(X),[AttributeDecl(Instance,VarDecl(Id(w),ClassType(Id(V_N)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($P6M),ClassType(Id(V_N)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(PfSz),ClassType(Id(V_N)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(m5),ArrayType(96,ArrayType(43,FloatType))),param(Id(K),IntType),param(Id(f7),IntType),param(Id(Y_),IntType),param(Id(__),IntType),param(Id(_),FloatType),param(Id(_),ClassType(Id(BU8))),param(Id(y),ClassType(Id(BU8))),param(Id(u),ClassType(Id(BU8))),param(Id(k),ArrayType(96,FloatType)),param(Id(_),ArrayType(1,IntType)),param(Id(m_),ArrayType(1,IntType)),param(Id(_aC),ArrayType(1,IntType)),param(Id(d),ArrayType(1,IntType)),param(Id(_),ClassType(Id(cz2)))],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(k8),IntType)),AttributeDecl(Static,VarDecl(Id($__),IntType))]),ClassDecl(Id(e),[]),ClassDecl(Id(Uhi7_046),Id(z7A),[])])'''
        self.assertTrue(TestAST.test(line, expect, 687))

    def test_688(self):
        line = '''Class __:O3{Constructor (__1:Array [Array [String ,0X7],0B1];_G_2:C){}Constructor (S__,_,__:Array [String ,7];_6AG_4:Array [Boolean ,036];____2_,I,_07_5:Boolean ;Z1FH7,_,_:String ;F,p:__){} }Class __h:_L_D_65{}'''
        expect = '''Program([ClassDecl(Id(__),Id(O3),[MethodDecl(Id(Constructor),Instance,[param(Id(__1),ArrayType(1,ArrayType(7,StringType))),param(Id(_G_2),ClassType(Id(C)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(S__),ArrayType(7,StringType)),param(Id(_),ArrayType(7,StringType)),param(Id(__),ArrayType(7,StringType)),param(Id(_6AG_4),ArrayType(30,BoolType)),param(Id(____2_),BoolType),param(Id(I),BoolType),param(Id(_07_5),BoolType),param(Id(Z1FH7),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(F),ClassType(Id(__))),param(Id(p),ClassType(Id(__)))],Block([]))]),ClassDecl(Id(__h),Id(_L_D_65),[])])'''
        self.assertTrue(TestAST.test(line, expect, 688))

    def test_689(self):
        line = '''Class _{}Class T:EV{Destructor (){Return ;}Destructor (){}Var E_w,$R0:Array [Array [Int ,18],3_86];}Class e8_o25{Val $8G,b:String ;Constructor (){}$G(){}$j286(){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(T),Id(EV),[MethodDecl(Id(Destructor),Instance,[],Block([Return()])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(E_w),ArrayType(386,ArrayType(18,IntType)))),AttributeDecl(Static,VarDecl(Id($R0),ArrayType(386,ArrayType(18,IntType))))]),ClassDecl(Id(e8_o25),[AttributeDecl(Static,ConstDecl(Id($8G),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(b),StringType,None)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($G),Static,[],Block([])),MethodDecl(Id($j286),Static,[],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 689))

    def test_690(self):
        line = '''Class m04:_{Constructor (J:Array [Array [Int ,016],47];_2LysC_044w,ud5:Array [Boolean ,9];x:Array [Array [Array [Array [Array [Array [Float ,0XE8],0x3_0],5_0],47],03],0xF]){Break ;Return ;}_(){}_(){}Val $_z,$Y:Float ;}'''
        expect = '''Program([ClassDecl(Id(m04),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(J),ArrayType(47,ArrayType(14,IntType))),param(Id(_2LysC_044w),ArrayType(9,BoolType)),param(Id(ud5),ArrayType(9,BoolType)),param(Id(x),ArrayType(15,ArrayType(3,ArrayType(47,ArrayType(50,ArrayType(48,ArrayType(232,FloatType)))))))],Block([Break,Return()])),MethodDecl(Id(_),Instance,[],Block([])),MethodDecl(Id(_),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_z),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($Y),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 690))

    def test_691(self):
        line = '''Class _{Constructor (_S:Array [Int ,0x25]){}Destructor (){}Constructor (){}Val $c,x,$T:Array [Array [Boolean ,071],061_2];Var $23:x;Var $5_,_q,U8_,$_J,$9_:Boolean ;}Class m{}Class N:O8{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_S),ArrayType(37,IntType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($c),ArrayType(394,ArrayType(57,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(x),ArrayType(394,ArrayType(57,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($T),ArrayType(394,ArrayType(57,BoolType)),None)),AttributeDecl(Static,VarDecl(Id($23),ClassType(Id(x)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($5_),BoolType)),AttributeDecl(Instance,VarDecl(Id(_q),BoolType)),AttributeDecl(Instance,VarDecl(Id(U8_),BoolType)),AttributeDecl(Static,VarDecl(Id($_J),BoolType)),AttributeDecl(Static,VarDecl(Id($9_),BoolType))]),ClassDecl(Id(m),[]),ClassDecl(Id(N),Id(O8),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 691))

    def test_692(self):
        line = '''Class _7R:u_{Val $H:g;}Class _:V{Var $_,$k,__mC:Array [Boolean ,0x68_AE_1];Destructor (){New n()._.c(Z::$R4M2X-!_::$Y5());} }Class _z:_{Constructor (im4_:Boolean ){}p(){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_7R),Id(u_),[AttributeDecl(Static,ConstDecl(Id($H),ClassType(Id(g)),NullLiteral()))]),ClassDecl(Id(_),Id(V),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(428769,BoolType))),AttributeDecl(Static,VarDecl(Id($k),ArrayType(428769,BoolType))),AttributeDecl(Instance,VarDecl(Id(__mC),ArrayType(428769,BoolType))),MethodDecl(Id(Destructor),Instance,[],Block([Call(FieldAccess(NewExpr(Id(n),[]),Id(_)),Id(c),[BinaryOp(-,FieldAccess(Id(Z),Id($R4M2X)),UnaryOp(!,CallExpr(Id(_),Id($Y5),[])))])]))]),ClassDecl(Id(_z),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(im4_),BoolType)],Block([])),MethodDecl(Id(p),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 692))

    def test_693(self):
        line = '''Class _2:_0{Constructor (_4u_:h_;_:H;r,x:Float ;_,V5,E6,f:Array [Array [Array [Array [Array [Boolean ,0101],0101],0x11],31],0x11];qH,u:ej;v,N,_fj7_fb:Array [Int ,0B101010]){} }Class _9_:i{}'''
        expect = '''Program([ClassDecl(Id(_2),Id(_0),[MethodDecl(Id(Constructor),Instance,[param(Id(_4u_),ClassType(Id(h_))),param(Id(_),ClassType(Id(H))),param(Id(r),FloatType),param(Id(x),FloatType),param(Id(_),ArrayType(17,ArrayType(31,ArrayType(17,ArrayType(65,ArrayType(65,BoolType)))))),param(Id(V5),ArrayType(17,ArrayType(31,ArrayType(17,ArrayType(65,ArrayType(65,BoolType)))))),param(Id(E6),ArrayType(17,ArrayType(31,ArrayType(17,ArrayType(65,ArrayType(65,BoolType)))))),param(Id(f),ArrayType(17,ArrayType(31,ArrayType(17,ArrayType(65,ArrayType(65,BoolType)))))),param(Id(qH),ClassType(Id(ej))),param(Id(u),ClassType(Id(ej))),param(Id(v),ArrayType(42,IntType)),param(Id(N),ArrayType(42,IntType)),param(Id(_fj7_fb),ArrayType(42,IntType))],Block([]))]),ClassDecl(Id(_9_),Id(i),[])])'''
        self.assertTrue(TestAST.test(line, expect, 693))

    def test_694(self):
        line = '''Class __:BJ{Constructor (_,R:String ;id:_3;_:Array [String ,0xA];xF,_Y,eiXi:String ;___,_01:_W;i_7:Array [Int ,0B1];h,_,_35D,Y6:Array [Array [Float ,9_8_3_3_62],0143];iCwdE_,_,_7_7,qq:Array [Array [String ,76],0B1011]){}Val $H,$1,_T_j:Array [Array [Array [Float ,0B1011],76],0x4];}Class _N{$_(__:N4_E_){}Var _H,____:Int ;}'''
        expect = '''Program([ClassDecl(Id(__),Id(BJ),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(R),StringType),param(Id(id),ClassType(Id(_3))),param(Id(_),ArrayType(10,StringType)),param(Id(xF),StringType),param(Id(_Y),StringType),param(Id(eiXi),StringType),param(Id(___),ClassType(Id(_W))),param(Id(_01),ClassType(Id(_W))),param(Id(i_7),ArrayType(1,IntType)),param(Id(h),ArrayType(99,ArrayType(983362,FloatType))),param(Id(_),ArrayType(99,ArrayType(983362,FloatType))),param(Id(_35D),ArrayType(99,ArrayType(983362,FloatType))),param(Id(Y6),ArrayType(99,ArrayType(983362,FloatType))),param(Id(iCwdE_),ArrayType(11,ArrayType(76,StringType))),param(Id(_),ArrayType(11,ArrayType(76,StringType))),param(Id(_7_7),ArrayType(11,ArrayType(76,StringType))),param(Id(qq),ArrayType(11,ArrayType(76,StringType)))],Block([])),AttributeDecl(Static,ConstDecl(Id($H),ArrayType(4,ArrayType(76,ArrayType(11,FloatType))),None)),AttributeDecl(Static,ConstDecl(Id($1),ArrayType(4,ArrayType(76,ArrayType(11,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(_T_j),ArrayType(4,ArrayType(76,ArrayType(11,FloatType))),None))]),ClassDecl(Id(_N),[MethodDecl(Id($_),Static,[param(Id(__),ClassType(Id(N4_E_)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_H),IntType)),AttributeDecl(Instance,VarDecl(Id(____),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 694))

    def test_695(self):
        line = '''Class _:kN2_4{Constructor (m:Array [Array [String ,14],0X4A];_903:Array [Array [Int ,9],0B1110];E,XU,o:Boolean ;b:Int ;_3_,l:Boolean ;__,_8:xZ_){Return ;Continue ;Var _:Boolean ;}Var _y,_rF:Int ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(kN2_4),[MethodDecl(Id(Constructor),Instance,[param(Id(m),ArrayType(74,ArrayType(14,StringType))),param(Id(_903),ArrayType(14,ArrayType(9,IntType))),param(Id(E),BoolType),param(Id(XU),BoolType),param(Id(o),BoolType),param(Id(b),IntType),param(Id(_3_),BoolType),param(Id(l),BoolType),param(Id(__),ClassType(Id(xZ_))),param(Id(_8),ClassType(Id(xZ_)))],Block([Return(),Continue,VarDecl(Id(_),BoolType)])),AttributeDecl(Instance,VarDecl(Id(_y),IntType)),AttributeDecl(Instance,VarDecl(Id(_rF),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 695))

    def test_696(self):
        line = '''Class _1:___{Var $_,$0z8,$___c,__759,_U:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0b1],06],0b1000101],0XE3],16],066],8_4_8_2_3],0X29],066],0XA];Destructor (){} }Class S:R5{}'''
        expect = '''Program([ClassDecl(Id(_1),Id(___),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(10,ArrayType(54,ArrayType(41,ArrayType(84823,ArrayType(54,ArrayType(16,ArrayType(227,ArrayType(69,ArrayType(6,ArrayType(1,StringType)))))))))))),AttributeDecl(Static,VarDecl(Id($0z8),ArrayType(10,ArrayType(54,ArrayType(41,ArrayType(84823,ArrayType(54,ArrayType(16,ArrayType(227,ArrayType(69,ArrayType(6,ArrayType(1,StringType)))))))))))),AttributeDecl(Static,VarDecl(Id($___c),ArrayType(10,ArrayType(54,ArrayType(41,ArrayType(84823,ArrayType(54,ArrayType(16,ArrayType(227,ArrayType(69,ArrayType(6,ArrayType(1,StringType)))))))))))),AttributeDecl(Instance,VarDecl(Id(__759),ArrayType(10,ArrayType(54,ArrayType(41,ArrayType(84823,ArrayType(54,ArrayType(16,ArrayType(227,ArrayType(69,ArrayType(6,ArrayType(1,StringType)))))))))))),AttributeDecl(Instance,VarDecl(Id(_U),ArrayType(10,ArrayType(54,ArrayType(41,ArrayType(84823,ArrayType(54,ArrayType(16,ArrayType(227,ArrayType(69,ArrayType(6,ArrayType(1,StringType)))))))))))),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(S),Id(R5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 696))

    def test_697(self):
        line = '''Class e:i{Val $9_,_,_,___,_,$7:Boolean ;Constructor (_7:Boolean ;___,B:_0;Nk,C_:a_;eI:_;__:Array [Array [Array [Array [Array [Array [Boolean ,5],65],074],0b1],0B1011010],0B1]){Continue ;{} }}'''
        expect = '''Program([ClassDecl(Id(e),Id(i),[AttributeDecl(Static,ConstDecl(Id($9_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(___),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($7),BoolType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_7),BoolType),param(Id(___),ClassType(Id(_0))),param(Id(B),ClassType(Id(_0))),param(Id(Nk),ClassType(Id(a_))),param(Id(C_),ClassType(Id(a_))),param(Id(eI),ClassType(Id(_))),param(Id(__),ArrayType(1,ArrayType(90,ArrayType(1,ArrayType(60,ArrayType(65,ArrayType(5,BoolType)))))))],Block([Continue,Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 697))

    def test_698(self):
        line = '''Class K3:W{Destructor (){} }Class kR{Val _,$_,$xhG:Boolean ;}Class _Be_{__(___a:_;_1:Array [Boolean ,0B1_000];Opz,_:_U;P,N:String ;_x,D8:__G3_l;_:__37;__u,A6,L:String ){} }'''
        expect = '''Program([ClassDecl(Id(K3),Id(W),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(kR),[AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($xhG),BoolType,None))]),ClassDecl(Id(_Be_),[MethodDecl(Id(__),Instance,[param(Id(___a),ClassType(Id(_))),param(Id(_1),ArrayType(8,BoolType)),param(Id(Opz),ClassType(Id(_U))),param(Id(_),ClassType(Id(_U))),param(Id(P),StringType),param(Id(N),StringType),param(Id(_x),ClassType(Id(__G3_l))),param(Id(D8),ClassType(Id(__G3_l))),param(Id(_),ClassType(Id(__37))),param(Id(__u),StringType),param(Id(A6),StringType),param(Id(L),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 698))

    def test_699(self):
        line = '''Class K{}Class _:_{Var t___,$_:Array [Float ,07];Constructor (_4_5:Array [Boolean ,07];u:Array [Boolean ,0X4];_:Array [Array [Array [Array [Float ,07],0b1000],0B1_0],07]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(K),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(t___),ArrayType(7,FloatType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(7,FloatType))),MethodDecl(Id(Constructor),Instance,[param(Id(_4_5),ArrayType(7,BoolType)),param(Id(u),ArrayType(4,BoolType)),param(Id(_),ArrayType(7,ArrayType(2,ArrayType(8,ArrayType(7,FloatType)))))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 699))

    def test_700(self):
        line = '''Class MIT:N{_(W,T_O:sBf_;f_:O_;___55_48:V;_3T:Array [Int ,0b1];U_0,P_C,_:_;_t:t_){} }Class H:_0{Constructor (_6,W,_5,_,_1xD,b,_8:Array [Array [Array [Boolean ,0B1001000],10],0x18_F_B];k,_2j:Array [Array [Array [Array [Array [Array [Array [Boolean ,8],0b1_00],10],0B1],0105],0b1],0X53];N:Int ){}Var $y,$qv4I_,v:guk;}Class d{}'''
        expect = '''Program([ClassDecl(Id(MIT),Id(N),[MethodDecl(Id(_),Instance,[param(Id(W),ClassType(Id(sBf_))),param(Id(T_O),ClassType(Id(sBf_))),param(Id(f_),ClassType(Id(O_))),param(Id(___55_48),ClassType(Id(V))),param(Id(_3T),ArrayType(1,IntType)),param(Id(U_0),ClassType(Id(_))),param(Id(P_C),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_t),ClassType(Id(t_)))],Block([]))]),ClassDecl(Id(H),Id(_0),[MethodDecl(Id(Constructor),Instance,[param(Id(_6),ArrayType(6395,ArrayType(10,ArrayType(72,BoolType)))),param(Id(W),ArrayType(6395,ArrayType(10,ArrayType(72,BoolType)))),param(Id(_5),ArrayType(6395,ArrayType(10,ArrayType(72,BoolType)))),param(Id(_),ArrayType(6395,ArrayType(10,ArrayType(72,BoolType)))),param(Id(_1xD),ArrayType(6395,ArrayType(10,ArrayType(72,BoolType)))),param(Id(b),ArrayType(6395,ArrayType(10,ArrayType(72,BoolType)))),param(Id(_8),ArrayType(6395,ArrayType(10,ArrayType(72,BoolType)))),param(Id(k),ArrayType(83,ArrayType(1,ArrayType(69,ArrayType(1,ArrayType(10,ArrayType(4,ArrayType(8,BoolType)))))))),param(Id(_2j),ArrayType(83,ArrayType(1,ArrayType(69,ArrayType(1,ArrayType(10,ArrayType(4,ArrayType(8,BoolType)))))))),param(Id(N),IntType)],Block([])),AttributeDecl(Static,VarDecl(Id($y),ClassType(Id(guk)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($qv4I_),ClassType(Id(guk)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(v),ClassType(Id(guk)),NullLiteral()))]),ClassDecl(Id(d),[])])'''
        self.assertTrue(TestAST.test(line, expect, 700))

    def test_701(self):
        line = '''Class _:_8{Constructor (Z,A:Array [Boolean ,0X4];S:Float ){Continue ;{F::$0._.G();} }$8(S_:Int ){}Val _92_:String ;Destructor (){Var _,_,O:String ;} }Class q{}Class _{Var _28p,_Af5,U:Array [Int ,0x6_5];}'''
        expect = '''Program([ClassDecl(Id(_),Id(_8),[MethodDecl(Id(Constructor),Instance,[param(Id(Z),ArrayType(4,BoolType)),param(Id(A),ArrayType(4,BoolType)),param(Id(S),FloatType)],Block([Continue,Block([Call(FieldAccess(FieldAccess(Id(F),Id($0)),Id(_)),Id(G),[])])])),MethodDecl(Id($8),Static,[param(Id(S_),IntType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(_92_),StringType,None)),MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(_),StringType),VarDecl(Id(_),StringType),VarDecl(Id(O),StringType)]))]),ClassDecl(Id(q),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_28p),ArrayType(101,IntType))),AttributeDecl(Instance,VarDecl(Id(_Af5),ArrayType(101,IntType))),AttributeDecl(Instance,VarDecl(Id(U),ArrayType(101,IntType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 701))

    def test_702(self):
        line = '''Class _N{Val F,V,pG_en,_:Array [Array [Array [Array [Array [Float ,0x4A5],0X25],0B1_1],0B1],2];Constructor (z9,_:Array [Float ,0B1]){}Constructor (N9:Array [Int ,4_9_9_9]){}__(){}Var $_:Array [String ,0B1_1_1];}'''
        expect = '''Program([ClassDecl(Id(_N),[AttributeDecl(Instance,ConstDecl(Id(F),ArrayType(2,ArrayType(1,ArrayType(3,ArrayType(37,ArrayType(1189,FloatType))))),None)),AttributeDecl(Instance,ConstDecl(Id(V),ArrayType(2,ArrayType(1,ArrayType(3,ArrayType(37,ArrayType(1189,FloatType))))),None)),AttributeDecl(Instance,ConstDecl(Id(pG_en),ArrayType(2,ArrayType(1,ArrayType(3,ArrayType(37,ArrayType(1189,FloatType))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,ArrayType(1,ArrayType(3,ArrayType(37,ArrayType(1189,FloatType))))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(z9),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(N9),ArrayType(4999,IntType))],Block([])),MethodDecl(Id(__),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(7,StringType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 702))

    def test_703(self):
        line = '''Class _{jr(g,__n_EC,Z_,_:String ;_L,_,_,_:String ;_:String ;R,_:Array [Int ,0103]){Return ;Break ;}Var $66_47_:Array [Array [Array [Array [Array [Float ,0103],02],0B101],0b1_1_11],0103];Val _,U:_01;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(jr),Instance,[param(Id(g),StringType),param(Id(__n_EC),StringType),param(Id(Z_),StringType),param(Id(_),StringType),param(Id(_L),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(R),ArrayType(67,IntType)),param(Id(_),ArrayType(67,IntType))],Block([Return(),Break])),AttributeDecl(Static,VarDecl(Id($66_47_),ArrayType(67,ArrayType(15,ArrayType(5,ArrayType(2,ArrayType(67,FloatType))))))),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_01)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(U),ClassType(Id(_01)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 703))

    def test_704(self):
        line = '''Class x{}Class _{}Class P{}Class NR19{Val $w:Array [Int ,84];Val $_:Array [Array [Array [Array [Array [Boolean ,0b10011],0B11],0X4_A],0142],96];Val $p:Array [Array [Int ,0B10],01_0];}'''
        expect = '''Program([ClassDecl(Id(x),[]),ClassDecl(Id(_),[]),ClassDecl(Id(P),[]),ClassDecl(Id(NR19),[AttributeDecl(Static,ConstDecl(Id($w),ArrayType(84,IntType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(96,ArrayType(98,ArrayType(74,ArrayType(3,ArrayType(19,BoolType))))),None)),AttributeDecl(Static,ConstDecl(Id($p),ArrayType(8,ArrayType(2,IntType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 704))

    def test_705(self):
        line = '''Class _Fw2{Var H_,O:Array [Array [Float ,7],7];Val $7,_A03AP_:String ;Destructor (){}Val k,_,s:Array [Boolean ,0XF_E];Constructor (_4:Array [Array [Int ,5],7];_91e2_6,_,h:String ;Z,f:_S;a_,Z94,_,T_,o1Ts0:Array [Array [Int ,050_7],0XB0]){} }Class __W_qO_R3:_{__7(){ {}Var Il:Int ;} }'''
        expect = '''Program([ClassDecl(Id(_Fw2),[AttributeDecl(Instance,VarDecl(Id(H_),ArrayType(7,ArrayType(7,FloatType)))),AttributeDecl(Instance,VarDecl(Id(O),ArrayType(7,ArrayType(7,FloatType)))),AttributeDecl(Static,ConstDecl(Id($7),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_A03AP_),StringType,None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(k),ArrayType(254,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(254,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(s),ArrayType(254,BoolType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_4),ArrayType(7,ArrayType(5,IntType))),param(Id(_91e2_6),StringType),param(Id(_),StringType),param(Id(h),StringType),param(Id(Z),ClassType(Id(_S))),param(Id(f),ClassType(Id(_S))),param(Id(a_),ArrayType(176,ArrayType(327,IntType))),param(Id(Z94),ArrayType(176,ArrayType(327,IntType))),param(Id(_),ArrayType(176,ArrayType(327,IntType))),param(Id(T_),ArrayType(176,ArrayType(327,IntType))),param(Id(o1Ts0),ArrayType(176,ArrayType(327,IntType)))],Block([]))]),ClassDecl(Id(__W_qO_R3),Id(_),[MethodDecl(Id(__7),Instance,[],Block([Block([]),VarDecl(Id(Il),IntType)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 705))

    def test_706(self):
        line = '''Class _4__s_x_{Destructor (){} }Class _:c_{}Class _3__:R{Val $_Qi_,__L,$9R,l:Array [Float ,060];}Class _:L{}Class _:__ZiV___{}Class M4:D2n{}Class _f_:b{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_4__s_x_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(c_),[]),ClassDecl(Id(_3__),Id(R),[AttributeDecl(Static,ConstDecl(Id($_Qi_),ArrayType(48,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(__L),ArrayType(48,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($9R),ArrayType(48,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(l),ArrayType(48,FloatType),None))]),ClassDecl(Id(_),Id(L),[]),ClassDecl(Id(_),Id(__ZiV___),[]),ClassDecl(Id(M4),Id(D2n),[]),ClassDecl(Id(_f_),Id(b),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 706))

    def test_707(self):
        line = '''Class T__:__{}Class x{b9O5O0(P,_3,__,Y,t:_3__;x:Array [Array [Boolean ,0B101],53];___,pQ,_5,_4:Array [Array [Array [Array [String ,0135],24_6_7],0x4E],0B101];H3:Array [Int ,06]){} }'''
        expect = '''Program([ClassDecl(Id(T__),Id(__),[]),ClassDecl(Id(x),[MethodDecl(Id(b9O5O0),Instance,[param(Id(P),ClassType(Id(_3__))),param(Id(_3),ClassType(Id(_3__))),param(Id(__),ClassType(Id(_3__))),param(Id(Y),ClassType(Id(_3__))),param(Id(t),ClassType(Id(_3__))),param(Id(x),ArrayType(53,ArrayType(5,BoolType))),param(Id(___),ArrayType(5,ArrayType(78,ArrayType(2467,ArrayType(93,StringType))))),param(Id(pQ),ArrayType(5,ArrayType(78,ArrayType(2467,ArrayType(93,StringType))))),param(Id(_5),ArrayType(5,ArrayType(78,ArrayType(2467,ArrayType(93,StringType))))),param(Id(_4),ArrayType(5,ArrayType(78,ArrayType(2467,ArrayType(93,StringType))))),param(Id(H3),ArrayType(6,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 707))

    def test_708(self):
        line = '''Class _:__{Constructor (){}u(){}_71_v_(_:p_5;h,_U:Array [String ,2];__:Int ){}Constructor (sfe,z,_:Boolean ;_,H_,m_,Q_:_){Break ;} }Class _o:c{Val $_S:f80;}Class I8{}Class g_{}Class _:_{Constructor (_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(__),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(u),Instance,[],Block([])),MethodDecl(Id(_71_v_),Instance,[param(Id(_),ClassType(Id(p_5))),param(Id(h),ArrayType(2,StringType)),param(Id(_U),ArrayType(2,StringType)),param(Id(__),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(sfe),BoolType),param(Id(z),BoolType),param(Id(_),BoolType),param(Id(_),ClassType(Id(_))),param(Id(H_),ClassType(Id(_))),param(Id(m_),ClassType(Id(_))),param(Id(Q_),ClassType(Id(_)))],Block([Break]))]),ClassDecl(Id(_o),Id(c),[AttributeDecl(Static,ConstDecl(Id($_S),ClassType(Id(f80)),NullLiteral()))]),ClassDecl(Id(I8),[]),ClassDecl(Id(g_),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 708))

    def test_709(self):
        line = '''Class q_{}Class __{Var $3m76N1:_;Var $3F,$O:_;Var o:Array [Float ,0X56];Var $_,$_8C5M10_Z7:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0B1001010],0b1],0b1_1_0],20],254],0112],0XE],0b1010101],0112],20];}'''
        expect = '''Program([ClassDecl(Id(q_),[]),ClassDecl(Id(__),[AttributeDecl(Static,VarDecl(Id($3m76N1),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($3F),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($O),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(o),ArrayType(86,FloatType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(20,ArrayType(74,ArrayType(85,ArrayType(14,ArrayType(74,ArrayType(254,ArrayType(20,ArrayType(6,ArrayType(1,ArrayType(74,IntType)))))))))))),AttributeDecl(Static,VarDecl(Id($_8C5M10_Z7),ArrayType(20,ArrayType(74,ArrayType(85,ArrayType(14,ArrayType(74,ArrayType(254,ArrayType(20,ArrayType(6,ArrayType(1,ArrayType(74,IntType))))))))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 709))

    def test_710(self):
        line = '''Class _{}Class _:DB4{_(P,G_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,54],0X3],54],56],0b11101],065_0_7],0b1_0],0b10],0xD_9];_3,U,W0,M_:Array [Array [Int ,04],0x48]){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(DB4),[MethodDecl(Id(_),Instance,[param(Id(P),ArrayType(217,ArrayType(2,ArrayType(2,ArrayType(3399,ArrayType(29,ArrayType(56,ArrayType(54,ArrayType(3,ArrayType(54,BoolType)))))))))),param(Id(G_),ArrayType(217,ArrayType(2,ArrayType(2,ArrayType(3399,ArrayType(29,ArrayType(56,ArrayType(54,ArrayType(3,ArrayType(54,BoolType)))))))))),param(Id(_3),ArrayType(72,ArrayType(4,IntType))),param(Id(U),ArrayType(72,ArrayType(4,IntType))),param(Id(W0),ArrayType(72,ArrayType(4,IntType))),param(Id(M_),ArrayType(72,ArrayType(4,IntType)))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 710))

    def test_711(self):
        line = '''Class s3ECir25Xz:_9{Constructor (E:Array [Int ,0b1000100];_,_2,y,_,__,_4:Float ;Q,E9_,_,_:Boolean ;_,_8___,_,J_34_:Array [Array [Array [Array [Array [Int ,2],8],0B1001001],01],8]){} }'''
        expect = '''Program([ClassDecl(Id(s3ECir25Xz),Id(_9),[MethodDecl(Id(Constructor),Instance,[param(Id(E),ArrayType(68,IntType)),param(Id(_),FloatType),param(Id(_2),FloatType),param(Id(y),FloatType),param(Id(_),FloatType),param(Id(__),FloatType),param(Id(_4),FloatType),param(Id(Q),BoolType),param(Id(E9_),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(_),ArrayType(8,ArrayType(1,ArrayType(73,ArrayType(8,ArrayType(2,IntType)))))),param(Id(_8___),ArrayType(8,ArrayType(1,ArrayType(73,ArrayType(8,ArrayType(2,IntType)))))),param(Id(_),ArrayType(8,ArrayType(1,ArrayType(73,ArrayType(8,ArrayType(2,IntType)))))),param(Id(J_34_),ArrayType(8,ArrayType(1,ArrayType(73,ArrayType(8,ArrayType(2,IntType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 711))

    def test_712(self):
        line = '''Class J{_(_6:_k){} }Class _66:__{Constructor (n3_Q09_,m:_;B_6J:Array [Array [Array [Int ,0B11],0XD_7_84],72];A:String ){}Destructor (){} }Class __{$2_(_,__:Float ;b,g:Array [Int ,0b110110];C:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(J),[MethodDecl(Id(_),Instance,[param(Id(_6),ClassType(Id(_k)))],Block([]))]),ClassDecl(Id(_66),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(n3_Q09_),ClassType(Id(_))),param(Id(m),ClassType(Id(_))),param(Id(B_6J),ArrayType(72,ArrayType(55172,ArrayType(3,IntType)))),param(Id(A),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),[MethodDecl(Id($2_),Static,[param(Id(_),FloatType),param(Id(__),FloatType),param(Id(b),ArrayType(54,IntType)),param(Id(g),ArrayType(54,IntType)),param(Id(C),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 712))

    def test_713(self):
        line = '''Class _:L{}Class Dh:__0{Destructor (){Return ;Return ;}Var i:String ;}Class P{$5(){}Constructor (Z:Int ;_a7_:Array [Array [Array [Array [Array [Array [Float ,016],016],01],07],0b1],0XA_5]){}Val _,W9,$1_,__:Array [Array [Array [Array [Int ,0b1],0X4B],0b10],0xA];Destructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(L),[]),ClassDecl(Id(Dh),Id(__0),[MethodDecl(Id(Destructor),Instance,[],Block([Return(),Return()])),AttributeDecl(Instance,VarDecl(Id(i),StringType))]),ClassDecl(Id(P),[MethodDecl(Id($5),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(Z),IntType),param(Id(_a7_),ArrayType(165,ArrayType(1,ArrayType(7,ArrayType(1,ArrayType(14,ArrayType(14,FloatType)))))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(10,ArrayType(2,ArrayType(75,ArrayType(1,IntType)))),None)),AttributeDecl(Instance,ConstDecl(Id(W9),ArrayType(10,ArrayType(2,ArrayType(75,ArrayType(1,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($1_),ArrayType(10,ArrayType(2,ArrayType(75,ArrayType(1,IntType)))),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(10,ArrayType(2,ArrayType(75,ArrayType(1,IntType)))),None)),MethodDecl(Id(Destructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 713))

    def test_714(self):
        line = '''Class _{Constructor (wV_,_:Float ;ot6T,F_8:Array [Array [Array [Array [Array [String ,0b111110],18],0b1_0_0],18],0140];m,Z:Float ;F:Float ;__7_,_4L__9_:_;_5D:Int ;j7G:Boolean ;R:_;_l:R;___,K:Array [Boolean ,01]){} }Class _n_{Val w__:Int ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(wV_),FloatType),param(Id(_),FloatType),param(Id(ot6T),ArrayType(96,ArrayType(18,ArrayType(4,ArrayType(18,ArrayType(62,StringType)))))),param(Id(F_8),ArrayType(96,ArrayType(18,ArrayType(4,ArrayType(18,ArrayType(62,StringType)))))),param(Id(m),FloatType),param(Id(Z),FloatType),param(Id(F),FloatType),param(Id(__7_),ClassType(Id(_))),param(Id(_4L__9_),ClassType(Id(_))),param(Id(_5D),IntType),param(Id(j7G),BoolType),param(Id(R),ClassType(Id(_))),param(Id(_l),ClassType(Id(R))),param(Id(___),ArrayType(1,BoolType)),param(Id(K),ArrayType(1,BoolType))],Block([]))]),ClassDecl(Id(_n_),[AttributeDecl(Instance,ConstDecl(Id(w__),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 714))

    def test_715(self):
        line = '''Class y{Val $_:Array [Array [String ,5_4],48];Destructor (){}$Z(_l:Array [Array [Boolean ,0XE_8_8_2],0B1_1];g6fE,Q,G1U:Array [String ,06]){Break ;}$__(f:K57_82H1;f:N;__,c91__,_,v:Float ){} }'''
        expect = '''Program([ClassDecl(Id(y),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(48,ArrayType(54,StringType)),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($Z),Static,[param(Id(_l),ArrayType(3,ArrayType(59522,BoolType))),param(Id(g6fE),ArrayType(6,StringType)),param(Id(Q),ArrayType(6,StringType)),param(Id(G1U),ArrayType(6,StringType))],Block([Break])),MethodDecl(Id($__),Static,[param(Id(f),ClassType(Id(K57_82H1))),param(Id(f),ClassType(Id(N))),param(Id(__),FloatType),param(Id(c91__),FloatType),param(Id(_),FloatType),param(Id(v),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 715))

    def test_716(self):
        line = '''Class Q{Destructor (){} }Class Bd{Constructor (C5:Array [Array [Float ,67],0B1000010]){}Val $_,__,$3_I:Array [Array [Boolean ,8],014];Destructor (){}Var y1I:Array [Array [Array [String ,0X4F],0X1],0b1100];}'''
        expect = '''Program([ClassDecl(Id(Q),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(Bd),[MethodDecl(Id(Constructor),Instance,[param(Id(C5),ArrayType(66,ArrayType(67,FloatType)))],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(12,ArrayType(8,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(12,ArrayType(8,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($3_I),ArrayType(12,ArrayType(8,BoolType)),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(y1I),ArrayType(12,ArrayType(1,ArrayType(79,StringType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 716))

    def test_717(self):
        line = '''Class _:_{}Class ot:F__I_{Var Q,__F:Array [String ,0X20];}Class __{Constructor (_,C:z){} }Class x0g{Var _6_,n:Array [Array [Array [Boolean ,0B11_1],94],07];}Class p__:U3T{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(ot),Id(F__I_),[AttributeDecl(Instance,VarDecl(Id(Q),ArrayType(32,StringType))),AttributeDecl(Instance,VarDecl(Id(__F),ArrayType(32,StringType)))]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(z))),param(Id(C),ClassType(Id(z)))],Block([]))]),ClassDecl(Id(x0g),[AttributeDecl(Instance,VarDecl(Id(_6_),ArrayType(7,ArrayType(94,ArrayType(7,BoolType))))),AttributeDecl(Instance,VarDecl(Id(n),ArrayType(7,ArrayType(94,ArrayType(7,BoolType)))))]),ClassDecl(Id(p__),Id(U3T),[])])'''
        self.assertTrue(TestAST.test(line, expect, 717))

    def test_718(self):
        line = '''Class _6{}Class C:_{Constructor (){Break ;Break ;} }Class Q{Val $_92_3,N,_1_t_,$_,_i:Array [Array [Array [Int ,6],0115],0b10101];m9(j755O:Array [Array [Boolean ,0x48],0XA_66];H_,__I,c3:Array [Float ,0b1];L_r_w_:_){} }'''
        expect = '''Program([ClassDecl(Id(_6),[]),ClassDecl(Id(C),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([Break,Break]))]),ClassDecl(Id(Q),[AttributeDecl(Static,ConstDecl(Id($_92_3),ArrayType(21,ArrayType(77,ArrayType(6,IntType))),None)),AttributeDecl(Instance,ConstDecl(Id(N),ArrayType(21,ArrayType(77,ArrayType(6,IntType))),None)),AttributeDecl(Instance,ConstDecl(Id(_1_t_),ArrayType(21,ArrayType(77,ArrayType(6,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(21,ArrayType(77,ArrayType(6,IntType))),None)),AttributeDecl(Instance,ConstDecl(Id(_i),ArrayType(21,ArrayType(77,ArrayType(6,IntType))),None)),MethodDecl(Id(m9),Instance,[param(Id(j755O),ArrayType(2662,ArrayType(72,BoolType))),param(Id(H_),ArrayType(1,FloatType)),param(Id(__I),ArrayType(1,FloatType)),param(Id(c3),ArrayType(1,FloatType)),param(Id(L_r_w_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 718))

    def test_719(self):
        line = '''Class _2{Var _t65,QH_:__R;Destructor (){}$7_(ooK__m__Q:String ;p:String ){}Constructor (_,_:Array [Array [String ,0B1010011],0B1010011];_,d_,_:String ;p,_:Int ;_,B,X_8_36:Array [Int ,02]){} }Class eGz16_{Constructor (_1:Float ;h,u1__6Bd:String ){} }Class __{}'''
        expect = '''Program([ClassDecl(Id(_2),[AttributeDecl(Instance,VarDecl(Id(_t65),ClassType(Id(__R)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(QH_),ClassType(Id(__R)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($7_),Static,[param(Id(ooK__m__Q),StringType),param(Id(p),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(83,ArrayType(83,StringType))),param(Id(_),ArrayType(83,ArrayType(83,StringType))),param(Id(_),StringType),param(Id(d_),StringType),param(Id(_),StringType),param(Id(p),IntType),param(Id(_),IntType),param(Id(_),ArrayType(2,IntType)),param(Id(B),ArrayType(2,IntType)),param(Id(X_8_36),ArrayType(2,IntType))],Block([]))]),ClassDecl(Id(eGz16_),[MethodDecl(Id(Constructor),Instance,[param(Id(_1),FloatType),param(Id(h),StringType),param(Id(u1__6Bd),StringType)],Block([]))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 719))

    def test_720(self):
        line = '''Class _7g:_{Constructor (_5:String ){Return ;}Var $i:Array [Array [Boolean ,0b1001011],0b100];}Class _w__{}Class _OU{Var E,$_5:Array [Array [Array [Int ,0X51293],0X1E],0B1];A(_A,_:Float ;_,_:Boolean ;l:Float ){} }Class W_{}Class _{}Class _{}Class W4{}Class J:T{}'''
        expect = '''Program([ClassDecl(Id(_7g),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_5),StringType)],Block([Return()])),AttributeDecl(Static,VarDecl(Id($i),ArrayType(4,ArrayType(75,BoolType))))]),ClassDecl(Id(_w__),[]),ClassDecl(Id(_OU),[AttributeDecl(Instance,VarDecl(Id(E),ArrayType(1,ArrayType(30,ArrayType(332435,IntType))))),AttributeDecl(Static,VarDecl(Id($_5),ArrayType(1,ArrayType(30,ArrayType(332435,IntType))))),MethodDecl(Id(A),Instance,[param(Id(_A),FloatType),param(Id(_),FloatType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(l),FloatType)],Block([]))]),ClassDecl(Id(W_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(W4),[]),ClassDecl(Id(J),Id(T),[])])'''
        self.assertTrue(TestAST.test(line, expect, 720))

    def test_721(self):
        line = '''Class _{Constructor (){} }Class __:Z{}Class _S8:O{Var _:Array [Boolean ,04];Val _,q8,_,$2:Boolean ;Var $3:Array [Array [Array [Array [Array [Boolean ,0134],0134],3_0],0xE91],0b1100001];}Class e_:H{Val $h,$5:Boolean ;}Class O:y{}Class l{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(__),Id(Z),[]),ClassDecl(Id(_S8),Id(O),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(4,BoolType))),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(q8),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($2),BoolType,None)),AttributeDecl(Static,VarDecl(Id($3),ArrayType(97,ArrayType(3729,ArrayType(30,ArrayType(92,ArrayType(92,BoolType)))))))]),ClassDecl(Id(e_),Id(H),[AttributeDecl(Static,ConstDecl(Id($h),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($5),BoolType,None))]),ClassDecl(Id(O),Id(y),[]),ClassDecl(Id(l),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 721))

    def test_722(self):
        line = '''Class _{Constructor (A:String ;_f065_i:Float ){}Val $i,B1m:Array [Array [String ,0b1011100],9];}Class _{D4(fna,q:Ot){Var __u:Array [Array [Array [Array [Boolean ,7],0B1010110],01],0X48];} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(A),StringType),param(Id(_f065_i),FloatType)],Block([])),AttributeDecl(Static,ConstDecl(Id($i),ArrayType(9,ArrayType(92,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(B1m),ArrayType(9,ArrayType(92,StringType)),None))]),ClassDecl(Id(_),[MethodDecl(Id(D4),Instance,[param(Id(fna),ClassType(Id(Ot))),param(Id(q),ClassType(Id(Ot)))],Block([VarDecl(Id(__u),ArrayType(72,ArrayType(1,ArrayType(86,ArrayType(7,BoolType)))))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 722))

    def test_723(self):
        line = '''Class X:__1_S{}Class _:_{Constructor (__:Array [Float ,92];ZB:Array [Array [String ,01_17],0x45];_:Array [Array [Array [Array [String ,0X8_2B],8],0X16],06];_,_,_,_dp:_;_,n:h){} }'''
        expect = '''Program([ClassDecl(Id(X),Id(__1_S),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(92,FloatType)),param(Id(ZB),ArrayType(69,ArrayType(79,StringType))),param(Id(_),ArrayType(6,ArrayType(22,ArrayType(8,ArrayType(2091,StringType))))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_dp),ClassType(Id(_))),param(Id(_),ClassType(Id(h))),param(Id(n),ClassType(Id(h)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 723))

    def test_724(self):
        line = '''Class _:_{Destructor (){Break ;}Constructor (__:oT){} }Class A_{Destructor (){}Var b,_:Float ;}Class __:j{}Class KPPu__:_{}Class J{Val $_7_Iw,_:Array [Array [Array [Array [Array [String ,05],033],033],6_1_7_3_4],0560];}Class x:_8_{Constructor (_a89x0:Boolean ){}Var _8C6,$_,_,_:Array [Array [String ,0B1],8_17];}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Break])),MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(oT)))],Block([]))]),ClassDecl(Id(A_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(b),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType))]),ClassDecl(Id(__),Id(j),[]),ClassDecl(Id(KPPu__),Id(_),[]),ClassDecl(Id(J),[AttributeDecl(Static,ConstDecl(Id($_7_Iw),ArrayType(368,ArrayType(61734,ArrayType(27,ArrayType(27,ArrayType(5,StringType))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(368,ArrayType(61734,ArrayType(27,ArrayType(27,ArrayType(5,StringType))))),None))]),ClassDecl(Id(x),Id(_8_),[MethodDecl(Id(Constructor),Instance,[param(Id(_a89x0),BoolType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_8C6),ArrayType(817,ArrayType(1,StringType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(817,ArrayType(1,StringType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(817,ArrayType(1,StringType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(817,ArrayType(1,StringType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 724))

    def test_725(self):
        line = '''Class _0:_{Constructor (l:Array [Int ,0B11000]){}Var $8,$_,_,$D,$9V,P3,_:_1;Destructor (){Continue ;Return ;W::$6_.__();}$_U(_,Y8:Array [Array [Array [Array [Array [Int ,020],0B11000],020],2487],58];Hd8__,g__33i9:Array [Array [Array [Array [Float ,020],724_6],0X49],58];b,_5,_0:Array [Array [Int ,0B11000],58];_,o:Array [Array [Array [Array [Array [Array [Array [Int ,0B11000],0B11000],0b1],58],0b1010110],58],58]){} }'''
        expect = '''Program([ClassDecl(Id(_0),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(l),ArrayType(24,IntType))],Block([])),AttributeDecl(Static,VarDecl(Id($8),ClassType(Id(_1)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_1)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_1)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($D),ClassType(Id(_1)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($9V),ClassType(Id(_1)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(P3),ClassType(Id(_1)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_1)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Return(),Call(FieldAccess(Id(W),Id($6_)),Id(__),[])])),MethodDecl(Id($_U),Static,[param(Id(_),ArrayType(58,ArrayType(2487,ArrayType(16,ArrayType(24,ArrayType(16,IntType)))))),param(Id(Y8),ArrayType(58,ArrayType(2487,ArrayType(16,ArrayType(24,ArrayType(16,IntType)))))),param(Id(Hd8__),ArrayType(58,ArrayType(73,ArrayType(7246,ArrayType(16,FloatType))))),param(Id(g__33i9),ArrayType(58,ArrayType(73,ArrayType(7246,ArrayType(16,FloatType))))),param(Id(b),ArrayType(58,ArrayType(24,IntType))),param(Id(_5),ArrayType(58,ArrayType(24,IntType))),param(Id(_0),ArrayType(58,ArrayType(24,IntType))),param(Id(_),ArrayType(58,ArrayType(58,ArrayType(86,ArrayType(58,ArrayType(1,ArrayType(24,ArrayType(24,IntType)))))))),param(Id(o),ArrayType(58,ArrayType(58,ArrayType(86,ArrayType(58,ArrayType(1,ArrayType(24,ArrayType(24,IntType))))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 725))

    def test_726(self):
        line = '''Class l:P_2{}Class _:_{}Class x{Var _,d_o:M8;}Class I6v_:T{Destructor (){Var V4_:Array [Array [Int ,7_83],0b11];} }Class k:wo{Val $53,_:Array [Int ,0B110];}Class _d:N6{}Class __:_9{}Class __:Q{$5(){} }Class _:_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(l),Id(P_2),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(x),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(M8)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(d_o),ClassType(Id(M8)),NullLiteral()))]),ClassDecl(Id(I6v_),Id(T),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(V4_),ArrayType(3,ArrayType(783,IntType)))]))]),ClassDecl(Id(k),Id(wo),[AttributeDecl(Static,ConstDecl(Id($53),ArrayType(6,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(6,IntType),None))]),ClassDecl(Id(_d),Id(N6),[]),ClassDecl(Id(__),Id(_9),[]),ClassDecl(Id(__),Id(Q),[MethodDecl(Id($5),Static,[],Block([]))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 726))

    def test_727(self):
        line = '''Class c:_5SV{Constructor (){}Val a,$5U_0,$_,_:Array [Array [Float ,82],06];Constructor (){} }Class _:_t4{Val _,V:H_g;Var _:Boolean ;Destructor (){Break ;}Constructor (){} }Class _{}Class L{}Class _{}'''
        expect = '''Program([ClassDecl(Id(c),Id(_5SV),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(a),ArrayType(6,ArrayType(82,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($5U_0),ArrayType(6,ArrayType(82,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(6,ArrayType(82,FloatType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(6,ArrayType(82,FloatType)),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_t4),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(H_g)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(V),ClassType(Id(H_g)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),MethodDecl(Id(Destructor),Instance,[],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(L),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 727))

    def test_728(self):
        line = '''Class u3{}Class _:_{Constructor (_P_2,__9_:_;Eo,N,e20,_3,_:String ){} }Class f247:M{}Class _:_{Var Q_:Boolean ;Val $1:_;Constructor (_,E__4W_0:_9wmU;B,_,__:Int ){} }'''
        expect = '''Program([ClassDecl(Id(u3),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_P_2),ClassType(Id(_))),param(Id(__9_),ClassType(Id(_))),param(Id(Eo),StringType),param(Id(N),StringType),param(Id(e20),StringType),param(Id(_3),StringType),param(Id(_),StringType)],Block([]))]),ClassDecl(Id(f247),Id(M),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(Q_),BoolType)),AttributeDecl(Static,ConstDecl(Id($1),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_9wmU))),param(Id(E__4W_0),ClassType(Id(_9wmU))),param(Id(B),IntType),param(Id(_),IntType),param(Id(__),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 728))

    def test_729(self):
        line = '''Class T1f_:i{Constructor (__,_:Array [Float ,30];d6a:Int ;_:Array [Int ,0XE07];_,J25,fj,_6_,_N_18R11,_:Float ;l:Array [Array [Int ,0B101110],0X1B];_,_:LX6){} }Class _Q5_3:c{}'''
        expect = '''Program([ClassDecl(Id(T1f_),Id(i),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(30,FloatType)),param(Id(_),ArrayType(30,FloatType)),param(Id(d6a),IntType),param(Id(_),ArrayType(3591,IntType)),param(Id(_),FloatType),param(Id(J25),FloatType),param(Id(fj),FloatType),param(Id(_6_),FloatType),param(Id(_N_18R11),FloatType),param(Id(_),FloatType),param(Id(l),ArrayType(27,ArrayType(46,IntType))),param(Id(_),ClassType(Id(LX6))),param(Id(_),ClassType(Id(LX6)))],Block([]))]),ClassDecl(Id(_Q5_3),Id(c),[])])'''
        self.assertTrue(TestAST.test(line, expect, 729))

    def test_730(self):
        line = '''Class r:a{}Class I:v{}Class hz:_{Val $_7,$_:Boolean ;Constructor (){Continue ;}Constructor (){}_(_,_,M_4,Xc_:Boolean ;x1,__:Array [Array [Float ,04_6],57]){}$_(_S8_,d_,__:Array [Array [String ,045],01_22];Z,f:L){Return ;Break ;} }Class _63L{}'''
        expect = '''Program([ClassDecl(Id(r),Id(a),[]),ClassDecl(Id(I),Id(v),[]),ClassDecl(Id(hz),Id(_),[AttributeDecl(Static,ConstDecl(Id($_7),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),MethodDecl(Id(Constructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(_),BoolType),param(Id(_),BoolType),param(Id(M_4),BoolType),param(Id(Xc_),BoolType),param(Id(x1),ArrayType(57,ArrayType(38,FloatType))),param(Id(__),ArrayType(57,ArrayType(38,FloatType)))],Block([])),MethodDecl(Id($_),Static,[param(Id(_S8_),ArrayType(82,ArrayType(37,StringType))),param(Id(d_),ArrayType(82,ArrayType(37,StringType))),param(Id(__),ArrayType(82,ArrayType(37,StringType))),param(Id(Z),ClassType(Id(L))),param(Id(f),ClassType(Id(L)))],Block([Return(),Break]))]),ClassDecl(Id(_63L),[])])'''
        self.assertTrue(TestAST.test(line, expect, 730))

    def test_731(self):
        line = '''Class _:x{Destructor (){}Constructor (){} }Class Q{}Class _z9_{A28(){} }Class T3{}Class F{Val B_:Float ;}Class _{Var $_,R_A,_utl,$0:Array [Array [Int ,0X6A],0x2];}Class _{}'''
        expect = '''Program([ClassDecl(Id(_),Id(x),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(Q),[]),ClassDecl(Id(_z9_),[MethodDecl(Id(A28),Instance,[],Block([]))]),ClassDecl(Id(T3),[]),ClassDecl(Id(F),[AttributeDecl(Instance,ConstDecl(Id(B_),FloatType,None))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(2,ArrayType(106,IntType)))),AttributeDecl(Instance,VarDecl(Id(R_A),ArrayType(2,ArrayType(106,IntType)))),AttributeDecl(Instance,VarDecl(Id(_utl),ArrayType(2,ArrayType(106,IntType)))),AttributeDecl(Static,VarDecl(Id($0),ArrayType(2,ArrayType(106,IntType))))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 731))

    def test_732(self):
        line = '''Class B:Rf_{Var a0,w:_;}Class _13{Var a_:Array [String ,0b1_1];$b(_:String ;_,F,__,_2:I;_,_:String ){Val _,o_,_,_,a5:Boolean ;}Constructor (){} }Class _:fL{}Class _:e{}'''
        expect = '''Program([ClassDecl(Id(B),Id(Rf_),[AttributeDecl(Instance,VarDecl(Id(a0),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(w),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_13),[AttributeDecl(Instance,VarDecl(Id(a_),ArrayType(3,StringType))),MethodDecl(Id($b),Static,[param(Id(_),StringType),param(Id(_),ClassType(Id(I))),param(Id(F),ClassType(Id(I))),param(Id(__),ClassType(Id(I))),param(Id(_2),ClassType(Id(I))),param(Id(_),StringType),param(Id(_),StringType)],Block([ConstDecl(Id(_),BoolType,None),ConstDecl(Id(o_),BoolType,None),ConstDecl(Id(_),BoolType,None),ConstDecl(Id(_),BoolType,None),ConstDecl(Id(a5),BoolType,None)])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(fL),[]),ClassDecl(Id(_),Id(e),[])])'''
        self.assertTrue(TestAST.test(line, expect, 732))

    def test_733(self):
        line = '''Class __{__(p6,R5:_8;s:_;____,b:Boolean ;c,_:Array [Boolean ,0x4];QC,_X0,_:Array [Int ,010];_:D;M:Float ;_,_,p:Float ;_,L:w_;_5:n_3_81;_,_5:String ;_,__:Array [Array [Array [Array [Array [Boolean ,1],0x9],4],0b1],04_4_6722];D:sf;_T_688:Array [Array [Array [Array [Array [Float ,04],4],4],010],0b1_11]){Break ;{}Return ;} }Class _5{}'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(__),Instance,[param(Id(p6),ClassType(Id(_8))),param(Id(R5),ClassType(Id(_8))),param(Id(s),ClassType(Id(_))),param(Id(____),BoolType),param(Id(b),BoolType),param(Id(c),ArrayType(4,BoolType)),param(Id(_),ArrayType(4,BoolType)),param(Id(QC),ArrayType(8,IntType)),param(Id(_X0),ArrayType(8,IntType)),param(Id(_),ArrayType(8,IntType)),param(Id(_),ClassType(Id(D))),param(Id(M),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(p),FloatType),param(Id(_),ClassType(Id(w_))),param(Id(L),ClassType(Id(w_))),param(Id(_5),ClassType(Id(n_3_81))),param(Id(_),StringType),param(Id(_5),StringType),param(Id(_),ArrayType(150994,ArrayType(1,ArrayType(4,ArrayType(9,ArrayType(1,BoolType)))))),param(Id(__),ArrayType(150994,ArrayType(1,ArrayType(4,ArrayType(9,ArrayType(1,BoolType)))))),param(Id(D),ClassType(Id(sf))),param(Id(_T_688),ArrayType(7,ArrayType(8,ArrayType(4,ArrayType(4,ArrayType(4,FloatType))))))],Block([Break,Block([]),Return()]))]),ClassDecl(Id(_5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 733))

    def test_734(self):
        line = '''Class _XDV{Constructor (_,m,M59E:Boolean ;FG:Array [Array [Boolean ,27],0b1];C9:Array [Int ,1];f_:Array [Array [Boolean ,05_167_3],0x42];_:__;i_7,_,Q__:c___;i,S,I8___1,h:_;_:Int ;v,_6,vB__30,_:Boolean ;I:_;Q:Array [Float ,0b1]){} }'''
        expect = '''Program([ClassDecl(Id(_XDV),[MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(m),BoolType),param(Id(M59E),BoolType),param(Id(FG),ArrayType(1,ArrayType(27,BoolType))),param(Id(C9),ArrayType(1,IntType)),param(Id(f_),ArrayType(66,ArrayType(21435,BoolType))),param(Id(_),ClassType(Id(__))),param(Id(i_7),ClassType(Id(c___))),param(Id(_),ClassType(Id(c___))),param(Id(Q__),ClassType(Id(c___))),param(Id(i),ClassType(Id(_))),param(Id(S),ClassType(Id(_))),param(Id(I8___1),ClassType(Id(_))),param(Id(h),ClassType(Id(_))),param(Id(_),IntType),param(Id(v),BoolType),param(Id(_6),BoolType),param(Id(vB__30),BoolType),param(Id(_),BoolType),param(Id(I),ClassType(Id(_))),param(Id(Q),ArrayType(1,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 734))

    def test_735(self):
        line = '''Class _:K{Destructor (){}Val $_,$0t_,$_2,Z:Array [Array [Array [Array [Array [Array [Boolean ,07],0b1_11_01],05],0111],0111],03];}Class _0___9s{Destructor (){Break ;} }Class _:f{}'''
        expect = '''Program([ClassDecl(Id(_),Id(K),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(3,ArrayType(73,ArrayType(73,ArrayType(5,ArrayType(29,ArrayType(7,BoolType)))))),None)),AttributeDecl(Static,ConstDecl(Id($0t_),ArrayType(3,ArrayType(73,ArrayType(73,ArrayType(5,ArrayType(29,ArrayType(7,BoolType)))))),None)),AttributeDecl(Static,ConstDecl(Id($_2),ArrayType(3,ArrayType(73,ArrayType(73,ArrayType(5,ArrayType(29,ArrayType(7,BoolType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(Z),ArrayType(3,ArrayType(73,ArrayType(73,ArrayType(5,ArrayType(29,ArrayType(7,BoolType)))))),None))]),ClassDecl(Id(_0___9s),[MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(_),Id(f),[])])'''
        self.assertTrue(TestAST.test(line, expect, 735))

    def test_736(self):
        line = '''Class _I0:D{$4168_F(r:Array [Array [Array [Array [Array [Float ,89],02],03_5],02],15]){} }Class _{Val $21,$9,$J_8,$_,$1_:Float ;Constructor (){Continue ;Return ;}Constructor (__gH8_:h1_;l,_:Array [Int ,02]){} }'''
        expect = '''Program([ClassDecl(Id(_I0),Id(D),[MethodDecl(Id($4168_F),Static,[param(Id(r),ArrayType(15,ArrayType(2,ArrayType(29,ArrayType(2,ArrayType(89,FloatType))))))],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($21),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($9),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($J_8),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($1_),FloatType,None)),MethodDecl(Id(Constructor),Instance,[],Block([Continue,Return()])),MethodDecl(Id(Constructor),Instance,[param(Id(__gH8_),ClassType(Id(h1_))),param(Id(l),ArrayType(2,IntType)),param(Id(_),ArrayType(2,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 736))

    def test_737(self):
        line = '''Class _:_{__37_2(_t,_,U_:Float ;s,_,_90,R,f,__N_:_67__;w:Array [Float ,062_0_3_0_7_1];_:String ;_s:Int ;K_38_9:Array [String ,0XA]){}Destructor (){} }Class _g{_(RXE_,_797,f:Array [String ,0B1];_8_:Array [Boolean ,0X1_B];lEm,_:Array [Float ,03];G,__2_,l,o:Array [Float ,0b1]){}Var $_,_,_8,$3:Array [Int ,0136];}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(__37_2),Instance,[param(Id(_t),FloatType),param(Id(_),FloatType),param(Id(U_),FloatType),param(Id(s),ClassType(Id(_67__))),param(Id(_),ClassType(Id(_67__))),param(Id(_90),ClassType(Id(_67__))),param(Id(R),ClassType(Id(_67__))),param(Id(f),ClassType(Id(_67__))),param(Id(__N_),ClassType(Id(_67__))),param(Id(w),ArrayType(1639993,FloatType)),param(Id(_),StringType),param(Id(_s),IntType),param(Id(K_38_9),ArrayType(10,StringType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_g),[MethodDecl(Id(_),Instance,[param(Id(RXE_),ArrayType(1,StringType)),param(Id(_797),ArrayType(1,StringType)),param(Id(f),ArrayType(1,StringType)),param(Id(_8_),ArrayType(27,BoolType)),param(Id(lEm),ArrayType(3,FloatType)),param(Id(_),ArrayType(3,FloatType)),param(Id(G),ArrayType(1,FloatType)),param(Id(__2_),ArrayType(1,FloatType)),param(Id(l),ArrayType(1,FloatType)),param(Id(o),ArrayType(1,FloatType))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(94,IntType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(94,IntType))),AttributeDecl(Instance,VarDecl(Id(_8),ArrayType(94,IntType))),AttributeDecl(Static,VarDecl(Id($3),ArrayType(94,IntType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 737))

    def test_738(self):
        line = '''Class p_:_{}Class y:_{Constructor (_P:Array [Int ,06];w,_:_yJ9){}Destructor (){} }Class _5:w6r_5_{}Class _64:_{Var _40__,Q_69:Boolean ;Constructor (H:Float ){Continue ;}i(){} }'''
        expect = '''Program([ClassDecl(Id(p_),Id(_),[]),ClassDecl(Id(y),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_P),ArrayType(6,IntType)),param(Id(w),ClassType(Id(_yJ9))),param(Id(_),ClassType(Id(_yJ9)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_5),Id(w6r_5_),[]),ClassDecl(Id(_64),Id(_),[AttributeDecl(Instance,VarDecl(Id(_40__),BoolType)),AttributeDecl(Instance,VarDecl(Id(Q_69),BoolType)),MethodDecl(Id(Constructor),Instance,[param(Id(H),FloatType)],Block([Continue])),MethodDecl(Id(i),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 738))

    def test_739(self):
        line = '''Class _j9_{Var a0,_y:Array [Array [Array [Array [Array [Boolean ,0x4E],20],20],20],0B11_0_0_0];Constructor (_:_7;nt,Y:Array [Array [Array [Array [Int ,016],0x823],0XE_4_68],0XEF];f_:String ;d_m,S:Array [Int ,7782_4]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_j9_),[AttributeDecl(Instance,VarDecl(Id(a0),ArrayType(24,ArrayType(20,ArrayType(20,ArrayType(20,ArrayType(78,BoolType))))))),AttributeDecl(Instance,VarDecl(Id(_y),ArrayType(24,ArrayType(20,ArrayType(20,ArrayType(20,ArrayType(78,BoolType))))))),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_7))),param(Id(nt),ArrayType(239,ArrayType(58472,ArrayType(2083,ArrayType(14,IntType))))),param(Id(Y),ArrayType(239,ArrayType(58472,ArrayType(2083,ArrayType(14,IntType))))),param(Id(f_),StringType),param(Id(d_m),ArrayType(77824,IntType)),param(Id(S),ArrayType(77824,IntType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 739))

    def test_740(self):
        line = '''Class __:_9{Destructor (){} }Class __:_8{}Class _:_{Var $11_M:Array [Int ,1];Val we:M;Var $Yl,$0:S05;Constructor (_5:_d2;_,_:Array [Array [Int ,32],0B1_1];_3,_,St:Array [Array [String ,01],32]){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(_9),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),Id(_8),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($11_M),ArrayType(1,IntType))),AttributeDecl(Instance,ConstDecl(Id(we),ClassType(Id(M)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($Yl),ClassType(Id(S05)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($0),ClassType(Id(S05)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_5),ClassType(Id(_d2))),param(Id(_),ArrayType(3,ArrayType(32,IntType))),param(Id(_),ArrayType(3,ArrayType(32,IntType))),param(Id(_3),ArrayType(32,ArrayType(1,StringType))),param(Id(_),ArrayType(32,ArrayType(1,StringType))),param(Id(St),ArrayType(32,ArrayType(1,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 740))

    def test_741(self):
        line = '''Class e:nX{Constructor (_,H_T:Array [Array [Float ,037_7_0_7_15],0b111_1];__,z:String ;_36:Float ){}Val e:_kR_;}Class __{}Class _9_j{}Class a:___5_o{}Class __:_{Constructor (){} }Class HY{}Class __{}'''
        expect = '''Program([ClassDecl(Id(e),Id(nX),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(15,ArrayType(1044941,FloatType))),param(Id(H_T),ArrayType(15,ArrayType(1044941,FloatType))),param(Id(__),StringType),param(Id(z),StringType),param(Id(_36),FloatType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(e),ClassType(Id(_kR_)),NullLiteral()))]),ClassDecl(Id(__),[]),ClassDecl(Id(_9_j),[]),ClassDecl(Id(a),Id(___5_o),[]),ClassDecl(Id(__),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(HY),[]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 741))

    def test_742(self):
        line = '''Class _{}Class _:i5D{}Class _:_{Constructor (_:Boolean ;P_,W,t,Rk:Array [Array [Int ,017_7_5_1_4],0X31]){}_(W_,_,N,P,_7,_:Int ;E_,O,K:_;__:b8_6_;S__3:Float ){} }Class __:mi{Val $R_,l:String ;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(i5D),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(P_),ArrayType(49,ArrayType(65356,IntType))),param(Id(W),ArrayType(49,ArrayType(65356,IntType))),param(Id(t),ArrayType(49,ArrayType(65356,IntType))),param(Id(Rk),ArrayType(49,ArrayType(65356,IntType)))],Block([])),MethodDecl(Id(_),Instance,[param(Id(W_),IntType),param(Id(_),IntType),param(Id(N),IntType),param(Id(P),IntType),param(Id(_7),IntType),param(Id(_),IntType),param(Id(E_),ClassType(Id(_))),param(Id(O),ClassType(Id(_))),param(Id(K),ClassType(Id(_))),param(Id(__),ClassType(Id(b8_6_))),param(Id(S__3),FloatType)],Block([]))]),ClassDecl(Id(__),Id(mi),[AttributeDecl(Static,ConstDecl(Id($R_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(l),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 742))

    def test_743(self):
        line = '''Class Wl__K_:_{Var NB2_T,nZ5_:Boolean ;}Class cC_:F6{Val _U9dZ:String ;Var __,_,_,_:Array [Array [Array [Array [Boolean ,0x65_3],047_21],0b1001110],072];}Class h:_c{}Class WBBEu_{}'''
        expect = '''Program([ClassDecl(Id(Wl__K_),Id(_),[AttributeDecl(Instance,VarDecl(Id(NB2_T),BoolType)),AttributeDecl(Instance,VarDecl(Id(nZ5_),BoolType))]),ClassDecl(Id(cC_),Id(F6),[AttributeDecl(Instance,ConstDecl(Id(_U9dZ),StringType,None)),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(58,ArrayType(78,ArrayType(2513,ArrayType(1619,BoolType)))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(58,ArrayType(78,ArrayType(2513,ArrayType(1619,BoolType)))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(58,ArrayType(78,ArrayType(2513,ArrayType(1619,BoolType)))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(58,ArrayType(78,ArrayType(2513,ArrayType(1619,BoolType))))))]),ClassDecl(Id(h),Id(_c),[]),ClassDecl(Id(WBBEu_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 743))

    def test_744(self):
        line = '''Class o3qPc:t{Var _:Int ;Constructor (_,_:U;_,W:W;JJg,_AsD,k:Array [Boolean ,0x26]){ {} }}Class __0{}Class _PO:b95l_{}Class x:M20r_k{e(N:Float ;_:_;d,__2,Z_P:Array [String ,0b100110];B,b,fi:Float ;D:String ;E:_;_v:T){} }Class b:a{}'''
        expect = '''Program([ClassDecl(Id(o3qPc),Id(t),[AttributeDecl(Instance,VarDecl(Id(_),IntType)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(U))),param(Id(_),ClassType(Id(U))),param(Id(_),ClassType(Id(W))),param(Id(W),ClassType(Id(W))),param(Id(JJg),ArrayType(38,BoolType)),param(Id(_AsD),ArrayType(38,BoolType)),param(Id(k),ArrayType(38,BoolType))],Block([Block([])]))]),ClassDecl(Id(__0),[]),ClassDecl(Id(_PO),Id(b95l_),[]),ClassDecl(Id(x),Id(M20r_k),[MethodDecl(Id(e),Instance,[param(Id(N),FloatType),param(Id(_),ClassType(Id(_))),param(Id(d),ArrayType(38,StringType)),param(Id(__2),ArrayType(38,StringType)),param(Id(Z_P),ArrayType(38,StringType)),param(Id(B),FloatType),param(Id(b),FloatType),param(Id(fi),FloatType),param(Id(D),StringType),param(Id(E),ClassType(Id(_))),param(Id(_v),ClassType(Id(T)))],Block([]))]),ClassDecl(Id(b),Id(a),[])])'''
        self.assertTrue(TestAST.test(line, expect, 744))

    def test_745(self):
        line = '''Class _8_{Destructor (){Continue ;} }Class cS:_98__70{}Class _:Q{Destructor (){} }Class _3h:r8{Var _v_7,W6l_u,A_:Array [Array [Array [Array [Float ,01],0B111110],0B1],54];}'''
        expect = '''Program([ClassDecl(Id(_8_),[MethodDecl(Id(Destructor),Instance,[],Block([Continue]))]),ClassDecl(Id(cS),Id(_98__70),[]),ClassDecl(Id(_),Id(Q),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_3h),Id(r8),[AttributeDecl(Instance,VarDecl(Id(_v_7),ArrayType(54,ArrayType(1,ArrayType(62,ArrayType(1,FloatType)))))),AttributeDecl(Instance,VarDecl(Id(W6l_u),ArrayType(54,ArrayType(1,ArrayType(62,ArrayType(1,FloatType)))))),AttributeDecl(Instance,VarDecl(Id(A_),ArrayType(54,ArrayType(1,ArrayType(62,ArrayType(1,FloatType))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 745))

    def test_746(self):
        line = '''Class _:E_{Val $a,UQw,_:f;Var __8,_d00,$5:Array [Array [Array [Array [String ,0B1_1],05_1],36_1_2],04];Var $_:Array [Array [Array [Int ,04],0X59],77_9];Constructor (){} }Class l_:__8Ll_3v{}'''
        expect = '''Program([ClassDecl(Id(_),Id(E_),[AttributeDecl(Static,ConstDecl(Id($a),ClassType(Id(f)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(UQw),ClassType(Id(f)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(f)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__8),ArrayType(4,ArrayType(3612,ArrayType(41,ArrayType(3,StringType)))))),AttributeDecl(Instance,VarDecl(Id(_d00),ArrayType(4,ArrayType(3612,ArrayType(41,ArrayType(3,StringType)))))),AttributeDecl(Static,VarDecl(Id($5),ArrayType(4,ArrayType(3612,ArrayType(41,ArrayType(3,StringType)))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(779,ArrayType(89,ArrayType(4,IntType))))),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(l_),Id(__8Ll_3v),[])])'''
        self.assertTrue(TestAST.test(line, expect, 746))

    def test_747(self):
        line = '''Class L2:g{Var ___,_:Array [Boolean ,0X35];Var _:Array [Array [Array [String ,0x5D],06_1],0X35];Constructor (O,P_,_,l_:Float ;__,AE,e_,g,Z,vS4,_:String ;__2,_,_,T,l:q9;s,_4jF_0:Float ){} }'''
        expect = '''Program([ClassDecl(Id(L2),Id(g),[AttributeDecl(Instance,VarDecl(Id(___),ArrayType(53,BoolType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(53,BoolType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(53,ArrayType(49,ArrayType(93,StringType))))),MethodDecl(Id(Constructor),Instance,[param(Id(O),FloatType),param(Id(P_),FloatType),param(Id(_),FloatType),param(Id(l_),FloatType),param(Id(__),StringType),param(Id(AE),StringType),param(Id(e_),StringType),param(Id(g),StringType),param(Id(Z),StringType),param(Id(vS4),StringType),param(Id(_),StringType),param(Id(__2),ClassType(Id(q9))),param(Id(_),ClassType(Id(q9))),param(Id(_),ClassType(Id(q9))),param(Id(T),ClassType(Id(q9))),param(Id(l),ClassType(Id(q9))),param(Id(s),FloatType),param(Id(_4jF_0),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 747))

    def test_748(self):
        line = '''Class _{Var D_Ty1r,_,LI:j;Var $4_:KKz79_;Constructor (__:Array [Array [Array [Float ,027],0123],0123]){}Constructor (_,c__:Array [Array [Int ,0x30],0x30];_V:Boolean ;S:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(D_Ty1r),ClassType(Id(j)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(j)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(LI),ClassType(Id(j)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($4_),ClassType(Id(KKz79_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(83,ArrayType(83,ArrayType(23,FloatType))))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(48,ArrayType(48,IntType))),param(Id(c__),ArrayType(48,ArrayType(48,IntType))),param(Id(_V),BoolType),param(Id(S),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 748))

    def test_749(self):
        line = '''Class P_Y___H{Val $_:Array [Array [Float ,04_0],06_5];Val R:Boolean ;Var O:Array [String ,0x19];_0_(){}Destructor (){} }Class l5_z:_{Destructor (){} }Class _J{Var _:Int ;}'''
        expect = '''Program([ClassDecl(Id(P_Y___H),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(53,ArrayType(32,FloatType)),None)),AttributeDecl(Instance,ConstDecl(Id(R),BoolType,None)),AttributeDecl(Instance,VarDecl(Id(O),ArrayType(25,StringType))),MethodDecl(Id(_0_),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(l5_z),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_J),[AttributeDecl(Instance,VarDecl(Id(_),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 749))

    def test_750(self):
        line = '''Class _:T{}Class W:g6m1_2{$_s9(K:Array [Array [Array [String ,51],06],0x2]){}Var Jt07_2:Array [Float ,0XA_1];Destructor (){}$8(){Break ;}Var b,K_E_:Array [Float ,01_2];}'''
        expect = '''Program([ClassDecl(Id(_),Id(T),[]),ClassDecl(Id(W),Id(g6m1_2),[MethodDecl(Id($_s9),Static,[param(Id(K),ArrayType(2,ArrayType(6,ArrayType(51,StringType))))],Block([])),AttributeDecl(Instance,VarDecl(Id(Jt07_2),ArrayType(161,FloatType))),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($8),Static,[],Block([Break])),AttributeDecl(Instance,VarDecl(Id(b),ArrayType(10,FloatType))),AttributeDecl(Instance,VarDecl(Id(K_E_),ArrayType(10,FloatType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 750))

    def test_751(self):
        line = '''Class GD9:_K{Constructor (z_,T:String ;Z,_,oz:Array [Float ,0B100];F:Array [Int ,0X9_7];M,D,_f7:Array [Float ,0X2]){}Val $2:s3;G_3(_1,j__2:Array [Array [String ,6_1],668];B_,_:Array [Array [Float ,95],0b11110]){} }'''
        expect = '''Program([ClassDecl(Id(GD9),Id(_K),[MethodDecl(Id(Constructor),Instance,[param(Id(z_),StringType),param(Id(T),StringType),param(Id(Z),ArrayType(4,FloatType)),param(Id(_),ArrayType(4,FloatType)),param(Id(oz),ArrayType(4,FloatType)),param(Id(F),ArrayType(151,IntType)),param(Id(M),ArrayType(2,FloatType)),param(Id(D),ArrayType(2,FloatType)),param(Id(_f7),ArrayType(2,FloatType))],Block([])),AttributeDecl(Static,ConstDecl(Id($2),ClassType(Id(s3)),NullLiteral())),MethodDecl(Id(G_3),Instance,[param(Id(_1),ArrayType(668,ArrayType(61,StringType))),param(Id(j__2),ArrayType(668,ArrayType(61,StringType))),param(Id(B_),ArrayType(30,ArrayType(95,FloatType))),param(Id(_),ArrayType(30,ArrayType(95,FloatType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 751))

    def test_752(self):
        line = '''Class _j:_{}Class J{Destructor (){_U::$e_g9.U_.bff().j_9()._s0_();} }Class Ls__{Constructor (__0,g:Boolean ){}Constructor (I86,wn:H;_8_:Array [Int ,0106];P,__:Array [Int ,0b1011];__:Float ;G,_G,_a:Array [Array [Array [Array [Array [Float ,63],63],63],63],0b1];_gD__,U,__,_,a:Array [String ,0B11];__F:_U){}Destructor (){} }Class B4:A2_{}Class O_449_8xx:m{}'''
        expect = '''Program([ClassDecl(Id(_j),Id(_),[]),ClassDecl(Id(J),[MethodDecl(Id(Destructor),Instance,[],Block([Call(CallExpr(CallExpr(FieldAccess(FieldAccess(Id(_U),Id($e_g9)),Id(U_)),Id(bff),[]),Id(j_9),[]),Id(_s0_),[])]))]),ClassDecl(Id(Ls__),[MethodDecl(Id(Constructor),Instance,[param(Id(__0),BoolType),param(Id(g),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(I86),ClassType(Id(H))),param(Id(wn),ClassType(Id(H))),param(Id(_8_),ArrayType(70,IntType)),param(Id(P),ArrayType(11,IntType)),param(Id(__),ArrayType(11,IntType)),param(Id(__),FloatType),param(Id(G),ArrayType(1,ArrayType(63,ArrayType(63,ArrayType(63,ArrayType(63,FloatType)))))),param(Id(_G),ArrayType(1,ArrayType(63,ArrayType(63,ArrayType(63,ArrayType(63,FloatType)))))),param(Id(_a),ArrayType(1,ArrayType(63,ArrayType(63,ArrayType(63,ArrayType(63,FloatType)))))),param(Id(_gD__),ArrayType(3,StringType)),param(Id(U),ArrayType(3,StringType)),param(Id(__),ArrayType(3,StringType)),param(Id(_),ArrayType(3,StringType)),param(Id(a),ArrayType(3,StringType)),param(Id(__F),ClassType(Id(_U)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(B4),Id(A2_),[]),ClassDecl(Id(O_449_8xx),Id(m),[])])'''
        self.assertTrue(TestAST.test(line, expect, 752))

    def test_753(self):
        line = '''Class v7:P{}Class T_:_{Constructor (__,V:Array [Array [Array [Array [Array [Array [Array [String ,12],0X4F],0b100001],0X8B3],0x37],05],0B1_0];_:Float ;w_k1,_:T7_;rX:Array [Boolean ,0B110011];rXm:String ){}p(_,N:Array [Float ,0X4F]){} }Class A{}'''
        expect = '''Program([ClassDecl(Id(v7),Id(P),[]),ClassDecl(Id(T_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(2,ArrayType(5,ArrayType(55,ArrayType(2227,ArrayType(33,ArrayType(79,ArrayType(12,StringType)))))))),param(Id(V),ArrayType(2,ArrayType(5,ArrayType(55,ArrayType(2227,ArrayType(33,ArrayType(79,ArrayType(12,StringType)))))))),param(Id(_),FloatType),param(Id(w_k1),ClassType(Id(T7_))),param(Id(_),ClassType(Id(T7_))),param(Id(rX),ArrayType(51,BoolType)),param(Id(rXm),StringType)],Block([])),MethodDecl(Id(p),Instance,[param(Id(_),ArrayType(79,FloatType)),param(Id(N),ArrayType(79,FloatType))],Block([]))]),ClassDecl(Id(A),[])])'''
        self.assertTrue(TestAST.test(line, expect, 753))

    def test_754(self):
        line = '''Class _E:S{Val $_,z2:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0b11],0x46],20],03],20],0X22],20],0b1];Constructor (){Break ;} }Class _{}Class _:__Enu_5{}'''
        expect = '''Program([ClassDecl(Id(_E),Id(S),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(1,ArrayType(20,ArrayType(34,ArrayType(20,ArrayType(3,ArrayType(20,ArrayType(70,ArrayType(3,FloatType)))))))),None)),AttributeDecl(Instance,ConstDecl(Id(z2),ArrayType(1,ArrayType(20,ArrayType(34,ArrayType(20,ArrayType(3,ArrayType(20,ArrayType(70,ArrayType(3,FloatType)))))))),None)),MethodDecl(Id(Constructor),Instance,[],Block([Break]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(__Enu_5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 754))

    def test_755(self):
        line = '''Class _1OY_I_P_{Constructor (d5,_:Array [Int ,0x1B];z,__888:Array [Boolean ,6_3];aZ_:Array [Array [Float ,0x1],02]){} }Class Y5:V_{}Class J_2{}Class _:B{$87_(p,_05:Array [Int ,5]){} }'''
        expect = '''Program([ClassDecl(Id(_1OY_I_P_),[MethodDecl(Id(Constructor),Instance,[param(Id(d5),ArrayType(27,IntType)),param(Id(_),ArrayType(27,IntType)),param(Id(z),ArrayType(63,BoolType)),param(Id(__888),ArrayType(63,BoolType)),param(Id(aZ_),ArrayType(2,ArrayType(1,FloatType)))],Block([]))]),ClassDecl(Id(Y5),Id(V_),[]),ClassDecl(Id(J_2),[]),ClassDecl(Id(_),Id(B),[MethodDecl(Id($87_),Static,[param(Id(p),ArrayType(5,IntType)),param(Id(_05),ArrayType(5,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 755))

    def test_756(self):
        line = '''Class _{Constructor (_,_n:Array [Array [Array [Array [Array [Array [Array [Array [String ,0b1],7_1_006],87],0x2_0],8],0B1_1_0],9],0B1010101];__:_u_;_:Float ;Y:Array [Boolean ,05_5];_L_,s:Boolean ){}Var $m87:_;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(85,ArrayType(9,ArrayType(6,ArrayType(8,ArrayType(32,ArrayType(87,ArrayType(71006,ArrayType(1,StringType))))))))),param(Id(_n),ArrayType(85,ArrayType(9,ArrayType(6,ArrayType(8,ArrayType(32,ArrayType(87,ArrayType(71006,ArrayType(1,StringType))))))))),param(Id(__),ClassType(Id(_u_))),param(Id(_),FloatType),param(Id(Y),ArrayType(45,BoolType)),param(Id(_L_),BoolType),param(Id(s),BoolType)],Block([])),AttributeDecl(Static,VarDecl(Id($m87),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 756))

    def test_757(self):
        line = '''Class k{Var l:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0B1],0B1],21],070],21],0b1],073],0XA],0b111011],06],0b1],0B101001];Constructor (){}$KN9_kU(){}Destructor (){} }Class _bc1_{}Class H:_5__l2_r{}'''
        expect = '''Program([ClassDecl(Id(k),[AttributeDecl(Instance,VarDecl(Id(l),ArrayType(41,ArrayType(1,ArrayType(6,ArrayType(59,ArrayType(10,ArrayType(59,ArrayType(1,ArrayType(21,ArrayType(56,ArrayType(21,ArrayType(1,ArrayType(1,StringType)))))))))))))),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($KN9_kU),Static,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_bc1_),[]),ClassDecl(Id(H),Id(_5__l2_r),[])])'''
        self.assertTrue(TestAST.test(line, expect, 757))

    def test_758(self):
        line = '''Class __P_C3{Val $_:String ;}Class ___x9_EB{}Class _{Var _:Boolean ;Constructor (_:Array [Array [Float ,0B10011],17];h,g9:_;pZ9:Array [Array [Array [String ,0b11101],0b1],0B10011]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(__P_C3),[AttributeDecl(Static,ConstDecl(Id($_),StringType,None))]),ClassDecl(Id(___x9_EB),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_),BoolType)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(17,ArrayType(19,FloatType))),param(Id(h),ClassType(Id(_))),param(Id(g9),ClassType(Id(_))),param(Id(pZ9),ArrayType(19,ArrayType(1,ArrayType(29,StringType))))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 758))

    def test_759(self):
        line = '''Class _t{_(F849_2,J,Hy,__:Array [String ,0x21];_By :Array [Int ,0b1001010];U1:Array [String ,434];_,u6:Array [String ,0b1];D,C0:Array [Array [Array [Array [Float ,03_63],06_56],01],73_5];J,d7:Array [Array [Array [Float ,8],0B11011],01]){} }'''
        expect = '''Program([ClassDecl(Id(_t),[MethodDecl(Id(_),Instance,[param(Id(F849_2),ArrayType(33,StringType)),param(Id(J),ArrayType(33,StringType)),param(Id(Hy),ArrayType(33,StringType)),param(Id(__),ArrayType(33,StringType)),param(Id(_By),ArrayType(74,IntType)),param(Id(U1),ArrayType(434,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(u6),ArrayType(1,StringType)),param(Id(D),ArrayType(735,ArrayType(1,ArrayType(430,ArrayType(243,FloatType))))),param(Id(C0),ArrayType(735,ArrayType(1,ArrayType(430,ArrayType(243,FloatType))))),param(Id(J),ArrayType(1,ArrayType(27,ArrayType(8,FloatType)))),param(Id(d7),ArrayType(1,ArrayType(27,ArrayType(8,FloatType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 759))

    def test_760(self):
        line = '''Class _:_j2{_Y(_:Array [Int ,0X5EA_9];c_No:Float ;v:Array [Boolean ,0b111];__:Array [Array [Boolean ,70],0122];z_,J:Array [Array [String ,05_1],0xE_6];oT,v0,J:Array [Float ,0B1_0];_60T:Array [Array [Array [Boolean ,0122],0B110011],07_20];_:String ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_j2),[MethodDecl(Id(_Y),Instance,[param(Id(_),ArrayType(24233,IntType)),param(Id(c_No),FloatType),param(Id(v),ArrayType(7,BoolType)),param(Id(__),ArrayType(82,ArrayType(70,BoolType))),param(Id(z_),ArrayType(230,ArrayType(41,StringType))),param(Id(J),ArrayType(230,ArrayType(41,StringType))),param(Id(oT),ArrayType(2,FloatType)),param(Id(v0),ArrayType(2,FloatType)),param(Id(J),ArrayType(2,FloatType)),param(Id(_60T),ArrayType(464,ArrayType(51,ArrayType(82,BoolType)))),param(Id(_),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 760))

    def test_761(self):
        line = '''Class _:_G{$_(n,P00Ou:String ;_4__,__:Array [Array [String ,0B11],01_3411_5];W_,d:Array [Array [String ,0b1000011],0xFA];_w,v:_){} }Class n:B{Val _,$n29:Array [Int ,0x34];Var $xjP,$_D_,$8,$___O8_,$9,$_,_,$_:Float ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_G),[MethodDecl(Id($_),Static,[param(Id(n),StringType),param(Id(P00Ou),StringType),param(Id(_4__),ArrayType(47181,ArrayType(3,StringType))),param(Id(__),ArrayType(47181,ArrayType(3,StringType))),param(Id(W_),ArrayType(250,ArrayType(67,StringType))),param(Id(d),ArrayType(250,ArrayType(67,StringType))),param(Id(_w),ClassType(Id(_))),param(Id(v),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(n),Id(B),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(52,IntType),None)),AttributeDecl(Static,ConstDecl(Id($n29),ArrayType(52,IntType),None)),AttributeDecl(Static,VarDecl(Id($xjP),FloatType)),AttributeDecl(Static,VarDecl(Id($_D_),FloatType)),AttributeDecl(Static,VarDecl(Id($8),FloatType)),AttributeDecl(Static,VarDecl(Id($___O8_),FloatType)),AttributeDecl(Static,VarDecl(Id($9),FloatType)),AttributeDecl(Static,VarDecl(Id($_),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Static,VarDecl(Id($_),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 761))

    def test_762(self):
        line = '''Class f:_M{Val _,g_10,_:String ;}Class _5_{Val U,$_,_:Array [Int ,0b1_0_1_01];$7(_1A:_i_;D4k:s;XP,_,n,___a:Array [Array [Array [Array [Float ,0X39],061],0X39],061];_u_5:Array [Array [Array [Array [Boolean ,06_2_71_3_5],87],0x4_C],0b100]){} }Class C0v:_6M_{}'''
        expect = '''Program([ClassDecl(Id(f),Id(_M),[AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(g_10),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None))]),ClassDecl(Id(_5_),[AttributeDecl(Instance,ConstDecl(Id(U),ArrayType(21,IntType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(21,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(21,IntType),None)),MethodDecl(Id($7),Static,[param(Id(_1A),ClassType(Id(_i_))),param(Id(D4k),ClassType(Id(s))),param(Id(XP),ArrayType(49,ArrayType(57,ArrayType(49,ArrayType(57,FloatType))))),param(Id(_),ArrayType(49,ArrayType(57,ArrayType(49,ArrayType(57,FloatType))))),param(Id(n),ArrayType(49,ArrayType(57,ArrayType(49,ArrayType(57,FloatType))))),param(Id(___a),ArrayType(49,ArrayType(57,ArrayType(49,ArrayType(57,FloatType))))),param(Id(_u_5),ArrayType(4,ArrayType(76,ArrayType(87,ArrayType(208477,BoolType)))))],Block([]))]),ClassDecl(Id(C0v),Id(_6M_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 762))

    def test_763(self):
        line = '''Class e{Val $_,$_:Array [Float ,02];}Class M6x{}Class __{Var __04m:Boolean ;Constructor (T:Boolean ;t6,_x5,__,j2:Array [Array [Boolean ,0b1000010],0B1_0_0];_:Array [Array [Array [Int ,0734],7],0B1];_o:_){} }Class __v_:__{$_(w_,_,_,_:b){}$y_(){} }Class _:X{Destructor (){Return ;} }Class p{}Class _:_{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(e),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(2,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(2,FloatType),None))]),ClassDecl(Id(M6x),[]),ClassDecl(Id(__),[AttributeDecl(Instance,VarDecl(Id(__04m),BoolType)),MethodDecl(Id(Constructor),Instance,[param(Id(T),BoolType),param(Id(t6),ArrayType(4,ArrayType(66,BoolType))),param(Id(_x5),ArrayType(4,ArrayType(66,BoolType))),param(Id(__),ArrayType(4,ArrayType(66,BoolType))),param(Id(j2),ArrayType(4,ArrayType(66,BoolType))),param(Id(_),ArrayType(1,ArrayType(7,ArrayType(476,IntType)))),param(Id(_o),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(__v_),Id(__),[MethodDecl(Id($_),Static,[param(Id(w_),ClassType(Id(b))),param(Id(_),ClassType(Id(b))),param(Id(_),ClassType(Id(b))),param(Id(_),ClassType(Id(b)))],Block([])),MethodDecl(Id($y_),Static,[],Block([]))]),ClassDecl(Id(_),Id(X),[MethodDecl(Id(Destructor),Instance,[],Block([Return()]))]),ClassDecl(Id(p),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 763))

    def test_764(self):
        line = '''Class _:_3x06{}Class h:_{Constructor (_,w4:String ;A:Array [Float ,40];V2:d_;Rm5,E1_:a1YP1;__,D81:Array [Boolean ,0X60];j56:_v_X;_N,O:String ;f_,v_:__;_4_,g9:String ){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_3x06),[]),ClassDecl(Id(h),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(w4),StringType),param(Id(A),ArrayType(40,FloatType)),param(Id(V2),ClassType(Id(d_))),param(Id(Rm5),ClassType(Id(a1YP1))),param(Id(E1_),ClassType(Id(a1YP1))),param(Id(__),ArrayType(96,BoolType)),param(Id(D81),ArrayType(96,BoolType)),param(Id(j56),ClassType(Id(_v_X))),param(Id(_N),StringType),param(Id(O),StringType),param(Id(f_),ClassType(Id(__))),param(Id(v_),ClassType(Id(__))),param(Id(_4_),StringType),param(Id(g9),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 764))

    def test_765(self):
        line = '''Class ___j839{}Class _:H{Val $2_:Array [Array [String ,0B110010],06];Val $k:Array [String ,03];Constructor (){}Var $W:Array [String ,04134_1];Constructor (){} }Class _{}Class _{}'''
        expect = '''Program([ClassDecl(Id(___j839),[]),ClassDecl(Id(_),Id(H),[AttributeDecl(Static,ConstDecl(Id($2_),ArrayType(6,ArrayType(50,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($k),ArrayType(3,StringType),None)),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($W),ArrayType(17121,StringType))),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 765))

    def test_766(self):
        line = '''Class O:FE{}Class s:_{VGz0(_3,_w,j:Array [Float ,0112_42];_,_47,_Fg,_:K_0;a,o0:i;_:Boolean ;_7,_,_:Array [Array [Array [String ,0B1_1_1],065],07];s83:Array [Int ,0B101011];_27Q7,_0__J91R_,_,_4,_:Int ;n0_o,r:_;n:Array [Array [String ,07],0X4E]){} }'''
        expect = '''Program([ClassDecl(Id(O),Id(FE),[]),ClassDecl(Id(s),Id(_),[MethodDecl(Id(VGz0),Instance,[param(Id(_3),ArrayType(4770,FloatType)),param(Id(_w),ArrayType(4770,FloatType)),param(Id(j),ArrayType(4770,FloatType)),param(Id(_),ClassType(Id(K_0))),param(Id(_47),ClassType(Id(K_0))),param(Id(_Fg),ClassType(Id(K_0))),param(Id(_),ClassType(Id(K_0))),param(Id(a),ClassType(Id(i))),param(Id(o0),ClassType(Id(i))),param(Id(_),BoolType),param(Id(_7),ArrayType(7,ArrayType(53,ArrayType(7,StringType)))),param(Id(_),ArrayType(7,ArrayType(53,ArrayType(7,StringType)))),param(Id(_),ArrayType(7,ArrayType(53,ArrayType(7,StringType)))),param(Id(s83),ArrayType(43,IntType)),param(Id(_27Q7),IntType),param(Id(_0__J91R_),IntType),param(Id(_),IntType),param(Id(_4),IntType),param(Id(_),IntType),param(Id(n0_o),ClassType(Id(_))),param(Id(r),ClassType(Id(_))),param(Id(n),ArrayType(78,ArrayType(7,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 766))

    def test_767(self):
        line = '''Class _{Constructor (n:Boolean ;__792:String ){}_(b6,___:_;so9L5,n,y_:Array [Array [Array [Array [Array [Boolean ,0X3],2],8],0XD_D],0B11000];f,_,_,__:Array [Array [Float ,0X4],0131];zC,_:Float ){} }Class V{Destructor (){} }Class _07l__{Constructor (_:Array [Array [String ,07],28];I,_0:Boolean ;_32_g_:Array [String ,02]){Break ;}$05(){}Var $0,$I:Float ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(n),BoolType),param(Id(__792),StringType)],Block([])),MethodDecl(Id(_),Instance,[param(Id(b6),ClassType(Id(_))),param(Id(___),ClassType(Id(_))),param(Id(so9L5),ArrayType(24,ArrayType(221,ArrayType(8,ArrayType(2,ArrayType(3,BoolType)))))),param(Id(n),ArrayType(24,ArrayType(221,ArrayType(8,ArrayType(2,ArrayType(3,BoolType)))))),param(Id(y_),ArrayType(24,ArrayType(221,ArrayType(8,ArrayType(2,ArrayType(3,BoolType)))))),param(Id(f),ArrayType(89,ArrayType(4,FloatType))),param(Id(_),ArrayType(89,ArrayType(4,FloatType))),param(Id(_),ArrayType(89,ArrayType(4,FloatType))),param(Id(__),ArrayType(89,ArrayType(4,FloatType))),param(Id(zC),FloatType),param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(V),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_07l__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(28,ArrayType(7,StringType))),param(Id(I),BoolType),param(Id(_0),BoolType),param(Id(_32_g_),ArrayType(2,StringType))],Block([Break])),MethodDecl(Id($05),Static,[],Block([])),AttributeDecl(Static,VarDecl(Id($0),FloatType)),AttributeDecl(Static,VarDecl(Id($I),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 767))

    def test_768(self):
        line = '''Class _b:_72{}Class E__:l{Val $s5_Me,r:String ;w_r240(){Return ;Continue ;} }Class _3{Destructor (){}Var l1c_9V,ve3iN4:Array [Array [Float ,01],0104];Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_b),Id(_72),[]),ClassDecl(Id(E__),Id(l),[AttributeDecl(Static,ConstDecl(Id($s5_Me),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(r),StringType,None)),MethodDecl(Id(w_r240),Instance,[],Block([Return(),Continue]))]),ClassDecl(Id(_3),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(l1c_9V),ArrayType(68,ArrayType(1,FloatType)))),AttributeDecl(Instance,VarDecl(Id(ve3iN4),ArrayType(68,ArrayType(1,FloatType)))),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 768))

    def test_769(self):
        line = '''Class B{Constructor (f,_OQ:Array [Boolean ,0b1];Y_0,VF_:Array [Boolean ,0X2A];_,XW_:O_;p:l_;__U:Int ;_:Array [Int ,5];_Gh,Rr,A_b6,_,__,_:Array [Array [Int ,92],92];_TC,y,_,bjQ,L__T_:I_0;_0,XDW4q:s){} }'''
        expect = '''Program([ClassDecl(Id(B),[MethodDecl(Id(Constructor),Instance,[param(Id(f),ArrayType(1,BoolType)),param(Id(_OQ),ArrayType(1,BoolType)),param(Id(Y_0),ArrayType(42,BoolType)),param(Id(VF_),ArrayType(42,BoolType)),param(Id(_),ClassType(Id(O_))),param(Id(XW_),ClassType(Id(O_))),param(Id(p),ClassType(Id(l_))),param(Id(__U),IntType),param(Id(_),ArrayType(5,IntType)),param(Id(_Gh),ArrayType(92,ArrayType(92,IntType))),param(Id(Rr),ArrayType(92,ArrayType(92,IntType))),param(Id(A_b6),ArrayType(92,ArrayType(92,IntType))),param(Id(_),ArrayType(92,ArrayType(92,IntType))),param(Id(__),ArrayType(92,ArrayType(92,IntType))),param(Id(_),ArrayType(92,ArrayType(92,IntType))),param(Id(_TC),ClassType(Id(I_0))),param(Id(y),ClassType(Id(I_0))),param(Id(_),ClassType(Id(I_0))),param(Id(bjQ),ClassType(Id(I_0))),param(Id(L__T_),ClassType(Id(I_0))),param(Id(_0),ClassType(Id(s))),param(Id(XDW4q),ClassType(Id(s)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 769))

    def test_770(self):
        line = '''Class A_Y8A{}Class q{Destructor (){Continue ;}Constructor (_,_,B6h:Array [Array [Int ,0b1001001],0x1A];H:Array [String ,041];Ov,w,_:Array [Array [Int ,52],0x1A];K:String ){} }'''
        expect = '''Program([ClassDecl(Id(A_Y8A),[]),ClassDecl(Id(q),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(26,ArrayType(73,IntType))),param(Id(_),ArrayType(26,ArrayType(73,IntType))),param(Id(B6h),ArrayType(26,ArrayType(73,IntType))),param(Id(H),ArrayType(33,StringType)),param(Id(Ov),ArrayType(26,ArrayType(52,IntType))),param(Id(w),ArrayType(26,ArrayType(52,IntType))),param(Id(_),ArrayType(26,ArrayType(52,IntType))),param(Id(K),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 770))

    def test_771(self):
        line = '''Class h{Var V,U_,_49_,ZDl:Array [Array [Array [Array [Array [Int ,0B1],0B1011100],7],0b11],07];}Class _9u8__1:_6{}Class dS{Var J,$I__:Array [Array [Int ,0x190],0x3A_C5_DE_F_D];}'''
        expect = '''Program([ClassDecl(Id(h),[AttributeDecl(Instance,VarDecl(Id(V),ArrayType(7,ArrayType(3,ArrayType(7,ArrayType(92,ArrayType(1,IntType))))))),AttributeDecl(Instance,VarDecl(Id(U_),ArrayType(7,ArrayType(3,ArrayType(7,ArrayType(92,ArrayType(1,IntType))))))),AttributeDecl(Instance,VarDecl(Id(_49_),ArrayType(7,ArrayType(3,ArrayType(7,ArrayType(92,ArrayType(1,IntType))))))),AttributeDecl(Instance,VarDecl(Id(ZDl),ArrayType(7,ArrayType(3,ArrayType(7,ArrayType(92,ArrayType(1,IntType)))))))]),ClassDecl(Id(_9u8__1),Id(_6),[]),ClassDecl(Id(dS),[AttributeDecl(Instance,VarDecl(Id(J),ArrayType(986046205,ArrayType(400,IntType)))),AttributeDecl(Static,VarDecl(Id($I__),ArrayType(986046205,ArrayType(400,IntType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 771))

    def test_772(self):
        line = '''Class __419{Var $_X:_;$6(){}Destructor (){}Var $O:String ;Constructor (jVsG_,y_a_,_:RV1;y__,y3v7:Array [Array [String ,0b1101_0_10],0X2A_B_A];h_57R82_63,_:String ){ {} }}'''
        expect = '''Program([ClassDecl(Id(__419),[AttributeDecl(Static,VarDecl(Id($_X),ClassType(Id(_)),NullLiteral())),MethodDecl(Id($6),Static,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($O),StringType)),MethodDecl(Id(Constructor),Instance,[param(Id(jVsG_),ClassType(Id(RV1))),param(Id(y_a_),ClassType(Id(RV1))),param(Id(_),ClassType(Id(RV1))),param(Id(y__),ArrayType(10938,ArrayType(106,StringType))),param(Id(y3v7),ArrayType(10938,ArrayType(106,StringType))),param(Id(h_57R82_63),StringType),param(Id(_),StringType)],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 772))

    def test_773(self):
        line = '''Class aI{}Class u:F{Constructor (_,q7:Array [Boolean ,0xF_C7];_:Boolean ;_,c:_;f2:Array [Array [Array [Array [Array [Array [Int ,3_7],0130],0b1],0130],0X14],92];gJ,_8:k8;z_,_D4,T,iA_:Array [Int ,060]){}$W(S8E4,_8,j_,_,S,_,n_:h_K_;_:_){} }Class _{Var $_:String ;}'''
        expect = '''Program([ClassDecl(Id(aI),[]),ClassDecl(Id(u),Id(F),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(4039,BoolType)),param(Id(q7),ArrayType(4039,BoolType)),param(Id(_),BoolType),param(Id(_),ClassType(Id(_))),param(Id(c),ClassType(Id(_))),param(Id(f2),ArrayType(92,ArrayType(20,ArrayType(88,ArrayType(1,ArrayType(88,ArrayType(37,IntType))))))),param(Id(gJ),ClassType(Id(k8))),param(Id(_8),ClassType(Id(k8))),param(Id(z_),ArrayType(48,IntType)),param(Id(_D4),ArrayType(48,IntType)),param(Id(T),ArrayType(48,IntType)),param(Id(iA_),ArrayType(48,IntType))],Block([])),MethodDecl(Id($W),Static,[param(Id(S8E4),ClassType(Id(h_K_))),param(Id(_8),ClassType(Id(h_K_))),param(Id(j_),ClassType(Id(h_K_))),param(Id(_),ClassType(Id(h_K_))),param(Id(S),ClassType(Id(h_K_))),param(Id(_),ClassType(Id(h_K_))),param(Id(n_),ClassType(Id(h_K_))),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($_),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 773))

    def test_774(self):
        line = '''Class _n_{}Class _{Constructor (){ {}{} }Val $49_3m4,_UTSPP,$l,J,$k,U:Array [Boolean ,0B111001];Constructor (E:_m;E,k__:l){}Var $86__,_4p,_,y:Array [Boolean ,8_15];Val $_0,$0,A:Int ;}Class _{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_n_),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([Block([]),Block([])])),AttributeDecl(Static,ConstDecl(Id($49_3m4),ArrayType(57,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_UTSPP),ArrayType(57,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($l),ArrayType(57,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(J),ArrayType(57,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($k),ArrayType(57,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(U),ArrayType(57,BoolType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(E),ClassType(Id(_m))),param(Id(E),ClassType(Id(l))),param(Id(k__),ClassType(Id(l)))],Block([])),AttributeDecl(Static,VarDecl(Id($86__),ArrayType(815,BoolType))),AttributeDecl(Instance,VarDecl(Id(_4p),ArrayType(815,BoolType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(815,BoolType))),AttributeDecl(Instance,VarDecl(Id(y),ArrayType(815,BoolType))),AttributeDecl(Static,ConstDecl(Id($_0),IntType,None)),AttributeDecl(Static,ConstDecl(Id($0),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(A),IntType,None))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 774))

    def test_775(self):
        line = '''Class _{Destructor (){ {Var nj6:String ;} }Destructor (){} }Class _2{$_(){Continue ;}Constructor (pn:Array [Array [String ,0b1011101],013]){ {}{} }Val $9,_,_:Array [Float ,013];}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Block([VarDecl(Id(nj6),StringType)])])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_2),[MethodDecl(Id($_),Static,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(pn),ArrayType(11,ArrayType(93,StringType)))],Block([Block([]),Block([])])),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(11,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(11,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(11,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 775))

    def test_776(self):
        line = '''Class _:_{$_(_0dC,t,wa,E,_:Array [Array [Array [Array [String ,0b1],0x36],0B1],87];D5:Int ;A:Array [Array [Array [String ,0b11_01],024_77],0XD_4];_:Int ;_,__h,_6:Array [Array [String ,87],076]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id($_),Static,[param(Id(_0dC),ArrayType(87,ArrayType(1,ArrayType(54,ArrayType(1,StringType))))),param(Id(t),ArrayType(87,ArrayType(1,ArrayType(54,ArrayType(1,StringType))))),param(Id(wa),ArrayType(87,ArrayType(1,ArrayType(54,ArrayType(1,StringType))))),param(Id(E),ArrayType(87,ArrayType(1,ArrayType(54,ArrayType(1,StringType))))),param(Id(_),ArrayType(87,ArrayType(1,ArrayType(54,ArrayType(1,StringType))))),param(Id(D5),IntType),param(Id(A),ArrayType(212,ArrayType(1343,ArrayType(13,StringType)))),param(Id(_),IntType),param(Id(_),ArrayType(62,ArrayType(87,StringType))),param(Id(__h),ArrayType(62,ArrayType(87,StringType))),param(Id(_6),ArrayType(62,ArrayType(87,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 776))

    def test_777(self):
        line = '''Class G_D{$_H(Q9:Boolean ;_,__,__n,z:Boolean ;_:Boolean ;_,__7:Array [Array [Array [Array [String ,0B1000100],4],4],4];f:Array [Float ,4]){} }Class GK:g{Constructor (_,m,_,Ue,Rn,_:Array [Float ,0B1000100]){}zo(){Break ;} }'''
        expect = '''Program([ClassDecl(Id(G_D),[MethodDecl(Id($_H),Static,[param(Id(Q9),BoolType),param(Id(_),BoolType),param(Id(__),BoolType),param(Id(__n),BoolType),param(Id(z),BoolType),param(Id(_),BoolType),param(Id(_),ArrayType(4,ArrayType(4,ArrayType(4,ArrayType(68,StringType))))),param(Id(__7),ArrayType(4,ArrayType(4,ArrayType(4,ArrayType(68,StringType))))),param(Id(f),ArrayType(4,FloatType))],Block([]))]),ClassDecl(Id(GK),Id(g),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(68,FloatType)),param(Id(m),ArrayType(68,FloatType)),param(Id(_),ArrayType(68,FloatType)),param(Id(Ue),ArrayType(68,FloatType)),param(Id(Rn),ArrayType(68,FloatType)),param(Id(_),ArrayType(68,FloatType))],Block([])),MethodDecl(Id(zo),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 777))

    def test_778(self):
        line = '''Class N:P{Destructor (){ {} }Constructor (c,e4g,__6_6:Array [Array [Array [Array [Boolean ,033],5_9_9],0X92_3_B_5],0x2_2_29_D];aN__:String ;z_,_0,_:Float ;x1,Q:Array [Array [Int ,04],05]){}Var _,Dv_:Array [Array [Boolean ,0b10],0b1];}'''
        expect = '''Program([ClassDecl(Id(N),Id(P),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),MethodDecl(Id(Constructor),Instance,[param(Id(c),ArrayType(139933,ArrayType(598965,ArrayType(599,ArrayType(27,BoolType))))),param(Id(e4g),ArrayType(139933,ArrayType(598965,ArrayType(599,ArrayType(27,BoolType))))),param(Id(__6_6),ArrayType(139933,ArrayType(598965,ArrayType(599,ArrayType(27,BoolType))))),param(Id(aN__),StringType),param(Id(z_),FloatType),param(Id(_0),FloatType),param(Id(_),FloatType),param(Id(x1),ArrayType(5,ArrayType(4,IntType))),param(Id(Q),ArrayType(5,ArrayType(4,IntType)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,ArrayType(2,BoolType)))),AttributeDecl(Instance,VarDecl(Id(Dv_),ArrayType(1,ArrayType(2,BoolType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 778))

    def test_779(self):
        line = '''Class _{Var $Z,w:Int ;$Q_(rL:Array [Array [Float ,0x48],97];c4:P__;_Q639V:Float ;_,_3EuT,N:_V;_,_:Array [Array [Array [Array [Array [Array [Array [Boolean ,97],04],0X60],021],0X3],97],021]){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($Z),IntType)),AttributeDecl(Instance,VarDecl(Id(w),IntType)),MethodDecl(Id($Q_),Static,[param(Id(rL),ArrayType(97,ArrayType(72,FloatType))),param(Id(c4),ClassType(Id(P__))),param(Id(_Q639V),FloatType),param(Id(_),ClassType(Id(_V))),param(Id(_3EuT),ClassType(Id(_V))),param(Id(N),ClassType(Id(_V))),param(Id(_),ArrayType(17,ArrayType(97,ArrayType(3,ArrayType(17,ArrayType(96,ArrayType(4,ArrayType(97,BoolType)))))))),param(Id(_),ArrayType(17,ArrayType(97,ArrayType(3,ArrayType(17,ArrayType(96,ArrayType(4,ArrayType(97,BoolType))))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 779))

    def test_780(self):
        line = '''Class e{Constructor (){} }Class m:yi{Constructor (){Continue ;{}Continue ;}$_s(W:Array [Array [Boolean ,044],0b10001];_a8a,b:Array [Int ,0b10]){} }Class __{Val $D_Ir:Array [Float ,0X4_2_ED8_E];Val $_G0:Array [Float ,0X23];}'''
        expect = '''Program([ClassDecl(Id(e),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(m),Id(yi),[MethodDecl(Id(Constructor),Instance,[],Block([Continue,Block([]),Continue])),MethodDecl(Id($_s),Static,[param(Id(W),ArrayType(17,ArrayType(36,BoolType))),param(Id(_a8a),ArrayType(2,IntType)),param(Id(b),ArrayType(2,IntType))],Block([]))]),ClassDecl(Id(__),[AttributeDecl(Static,ConstDecl(Id($D_Ir),ArrayType(4386190,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($_G0),ArrayType(35,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 780))

    def test_781(self):
        line = '''Class _{Destructor (){}Destructor (){} }Class _{}Class _1X4{Val $41_:__P;Val E_:Array [Array [Array [Array [Array [Array [Float ,0X5_1],0B1_1_0_0],0b1000001],3_8],0b1000001],0xBF];}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_1X4),[AttributeDecl(Static,ConstDecl(Id($41_),ClassType(Id(__P)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(E_),ArrayType(191,ArrayType(65,ArrayType(38,ArrayType(65,ArrayType(12,ArrayType(81,FloatType)))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 781))

    def test_782(self):
        line = '''Class _:_5E_3_p{}Class _:_y{Val WL4:Array [Int ,0B1_0];Destructor (){}Val $_:Boolean ;Constructor (v:_;_r,_5_:Array [String ,0x38]){Return ;Break ;}_Ut(h8:Array [Boolean ,0xA];_fT:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_5E_3_p),[]),ClassDecl(Id(_),Id(_y),[AttributeDecl(Instance,ConstDecl(Id(WL4),ArrayType(2,IntType),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(v),ClassType(Id(_))),param(Id(_r),ArrayType(56,StringType)),param(Id(_5_),ArrayType(56,StringType))],Block([Return(),Break])),MethodDecl(Id(_Ut),Instance,[param(Id(h8),ArrayType(10,BoolType)),param(Id(_fT),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 782))

    def test_783(self):
        line = '''Class H_{}Class _{}Class u3{Constructor (_nG_7o_:Array [String ,6];X_2,k:Array [Array [Float ,05],4];_:Array [String ,0727]){}Var $__K,$z,$b:Array [Array [Array [String ,05],0B1_1],0X7];}Class M2:_9E__W{Destructor (){}Destructor (){}Constructor (){Break ;} }Class B:_{Val _:_h;}Class _9_:x{}Class Q{Val $5:Array [Boolean ,0xA_D];Val k:Array [Array [Array [Boolean ,04],0B1],0x31];}'''
        expect = '''Program([ClassDecl(Id(H_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(u3),[MethodDecl(Id(Constructor),Instance,[param(Id(_nG_7o_),ArrayType(6,StringType)),param(Id(X_2),ArrayType(4,ArrayType(5,FloatType))),param(Id(k),ArrayType(4,ArrayType(5,FloatType))),param(Id(_),ArrayType(471,StringType))],Block([])),AttributeDecl(Static,VarDecl(Id($__K),ArrayType(7,ArrayType(3,ArrayType(5,StringType))))),AttributeDecl(Static,VarDecl(Id($z),ArrayType(7,ArrayType(3,ArrayType(5,StringType))))),AttributeDecl(Static,VarDecl(Id($b),ArrayType(7,ArrayType(3,ArrayType(5,StringType)))))]),ClassDecl(Id(M2),Id(_9E__W),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Break]))]),ClassDecl(Id(B),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_h)),NullLiteral()))]),ClassDecl(Id(_9_),Id(x),[]),ClassDecl(Id(Q),[AttributeDecl(Static,ConstDecl(Id($5),ArrayType(173,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(k),ArrayType(49,ArrayType(1,ArrayType(4,BoolType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 783))

    def test_784(self):
        line = '''Class z__:C{_(){} }Class _:s__{Constructor (){} }Class O{W(NP__,M5_n5k,__YB4_L_:Array [Array [String ,0xDE_9],57];q,X_:_){} }Class Z3{}Class _:Z23{Var $1,Y:Array [Array [Boolean ,0B1010010],067];Val $0DR:Array [Boolean ,3_7_2_9];Var $_,$_u7_:Array [String ,0X4];}Class _:_C5_{}'''
        expect = '''Program([ClassDecl(Id(z__),Id(C),[MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(_),Id(s__),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(O),[MethodDecl(Id(W),Instance,[param(Id(NP__),ArrayType(57,ArrayType(3561,StringType))),param(Id(M5_n5k),ArrayType(57,ArrayType(3561,StringType))),param(Id(__YB4_L_),ArrayType(57,ArrayType(3561,StringType))),param(Id(q),ClassType(Id(_))),param(Id(X_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(Z3),[]),ClassDecl(Id(_),Id(Z23),[AttributeDecl(Static,VarDecl(Id($1),ArrayType(55,ArrayType(82,BoolType)))),AttributeDecl(Instance,VarDecl(Id(Y),ArrayType(55,ArrayType(82,BoolType)))),AttributeDecl(Static,ConstDecl(Id($0DR),ArrayType(3729,BoolType),None)),AttributeDecl(Static,VarDecl(Id($_),ArrayType(4,StringType))),AttributeDecl(Static,VarDecl(Id($_u7_),ArrayType(4,StringType)))]),ClassDecl(Id(_),Id(_C5_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 784))

    def test_785(self):
        line = '''Class G:X{Constructor (C:_){Break ;} }Class _:a6{Var $x8Av09,$o,$0:Boolean ;Destructor (){}$_(S,g_,G,__:S_;_5:Array [Array [Array [Int ,060],7_1],060];_9,B,_,O:Boolean ;ce,r:Float ){} }'''
        expect = '''Program([ClassDecl(Id(G),Id(X),[MethodDecl(Id(Constructor),Instance,[param(Id(C),ClassType(Id(_)))],Block([Break]))]),ClassDecl(Id(_),Id(a6),[AttributeDecl(Static,VarDecl(Id($x8Av09),BoolType)),AttributeDecl(Static,VarDecl(Id($o),BoolType)),AttributeDecl(Static,VarDecl(Id($0),BoolType)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_),Static,[param(Id(S),ClassType(Id(S_))),param(Id(g_),ClassType(Id(S_))),param(Id(G),ClassType(Id(S_))),param(Id(__),ClassType(Id(S_))),param(Id(_5),ArrayType(48,ArrayType(71,ArrayType(48,IntType)))),param(Id(_9),BoolType),param(Id(B),BoolType),param(Id(_),BoolType),param(Id(O),BoolType),param(Id(ce),FloatType),param(Id(r),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 785))

    def test_786(self):
        line = '''Class ___3{Val pL:Int ;Constructor (_:Array [Boolean ,0B10111]){}Val $Y,$40m_6,R:_4__;}Class __7V{}Class _{Var $_0:Array [Int ,0b101110];$_D(_z,F_:VX){Break ;}Constructor (){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(___3),[AttributeDecl(Instance,ConstDecl(Id(pL),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(23,BoolType))],Block([])),AttributeDecl(Static,ConstDecl(Id($Y),ClassType(Id(_4__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($40m_6),ClassType(Id(_4__)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(R),ClassType(Id(_4__)),NullLiteral()))]),ClassDecl(Id(__7V),[]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($_0),ArrayType(46,IntType))),MethodDecl(Id($_D),Static,[param(Id(_z),ClassType(Id(VX))),param(Id(F_),ClassType(Id(VX)))],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 786))

    def test_787(self):
        line = '''Class _:R{Val _,$e:Array [Float ,0b1];}Class K_:gI{}Class G{}Class _8:_V_v_0_{}Class c:X1{}Class _:n{Destructor (){Continue ;} }Class b_:jP{Constructor (B:Int ;_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,42],020],42],0x8],07],0b1],0B1_1],0B1],3_1_86_8_6_8]){}Val $D,$1R_8,$_GC,_0w:z;}'''
        expect = '''Program([ClassDecl(Id(_),Id(R),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($e),ArrayType(1,FloatType),None))]),ClassDecl(Id(K_),Id(gI),[]),ClassDecl(Id(G),[]),ClassDecl(Id(_8),Id(_V_v_0_),[]),ClassDecl(Id(c),Id(X1),[]),ClassDecl(Id(_),Id(n),[MethodDecl(Id(Destructor),Instance,[],Block([Continue]))]),ClassDecl(Id(b_),Id(jP),[MethodDecl(Id(Constructor),Instance,[param(Id(B),IntType),param(Id(_),ArrayType(3186868,ArrayType(1,ArrayType(3,ArrayType(1,ArrayType(7,ArrayType(8,ArrayType(42,ArrayType(16,ArrayType(42,BoolType))))))))))],Block([])),AttributeDecl(Static,ConstDecl(Id($D),ClassType(Id(z)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($1R_8),ClassType(Id(z)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_GC),ClassType(Id(z)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_0w),ClassType(Id(z)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 787))

    def test_788(self):
        line = '''Class lk_:l4{}Class _{}Class __n{}Class Q{Val $G:uD3;Constructor (_m5jp,P,_:Array [String ,0b1110];u:Float ;_Ue3,_2J:S4;_u:G36){Break ;Continue ;}Val $_,$_9w:String ;}Class I:F{}Class X{Destructor (){}$_(){} }Class __{}'''
        expect = '''Program([ClassDecl(Id(lk_),Id(l4),[]),ClassDecl(Id(_),[]),ClassDecl(Id(__n),[]),ClassDecl(Id(Q),[AttributeDecl(Static,ConstDecl(Id($G),ClassType(Id(uD3)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_m5jp),ArrayType(14,StringType)),param(Id(P),ArrayType(14,StringType)),param(Id(_),ArrayType(14,StringType)),param(Id(u),FloatType),param(Id(_Ue3),ClassType(Id(S4))),param(Id(_2J),ClassType(Id(S4))),param(Id(_u),ClassType(Id(G36)))],Block([Break,Continue])),AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_9w),StringType,None))]),ClassDecl(Id(I),Id(F),[]),ClassDecl(Id(X),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_),Static,[],Block([]))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 788))

    def test_789(self):
        line = '''Class _{}Class C:n{}Class _M2:_2{Constructor (_m:Array [Array [Float ,0B1_11_1],05_75_31]){} }Class R___{Val $8,_,$7W8:__;Var $U:Int ;Constructor (P:String ;_,____,_j:_){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(C),Id(n),[]),ClassDecl(Id(_M2),Id(_2),[MethodDecl(Id(Constructor),Instance,[param(Id(_m),ArrayType(24409,ArrayType(15,FloatType)))],Block([]))]),ClassDecl(Id(R___),[AttributeDecl(Static,ConstDecl(Id($8),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($7W8),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($U),IntType)),MethodDecl(Id(Constructor),Instance,[param(Id(P),StringType),param(Id(_),ClassType(Id(_))),param(Id(____),ClassType(Id(_))),param(Id(_j),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 789))

    def test_790(self):
        line = '''Class t:q_{$z(v,C:Boolean ){} }Class _{Val $u__,$8:Float ;Var $Q:Array [Array [Array [Array [String ,0x11],0XB],6],0112];Val $_:Float ;Val c5k,$_:Int ;Constructor (_:e4;_,__:Boolean ){}Destructor (){} }Class __2{Var $0__Y05,Z_,Q73,$xv,$0,$_l,S:Array [Array [Array [Array [Array [Boolean ,0b1],05_6],0x11],0XF],95];Constructor (L:Int ;x:Float ;n:Array [Array [String ,0B1100000],2];y_:Boolean ){Var _,f:__28H;} }Class G6{}Class _5Dk2k7:_{Val $C:_;}'''
        expect = '''Program([ClassDecl(Id(t),Id(q_),[MethodDecl(Id($z),Static,[param(Id(v),BoolType),param(Id(C),BoolType)],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($u__),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($8),FloatType,None)),AttributeDecl(Static,VarDecl(Id($Q),ArrayType(74,ArrayType(6,ArrayType(11,ArrayType(17,StringType)))))),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(c5k),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(e4))),param(Id(_),BoolType),param(Id(__),BoolType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__2),[AttributeDecl(Static,VarDecl(Id($0__Y05),ArrayType(95,ArrayType(15,ArrayType(17,ArrayType(46,ArrayType(1,BoolType))))))),AttributeDecl(Instance,VarDecl(Id(Z_),ArrayType(95,ArrayType(15,ArrayType(17,ArrayType(46,ArrayType(1,BoolType))))))),AttributeDecl(Instance,VarDecl(Id(Q73),ArrayType(95,ArrayType(15,ArrayType(17,ArrayType(46,ArrayType(1,BoolType))))))),AttributeDecl(Static,VarDecl(Id($xv),ArrayType(95,ArrayType(15,ArrayType(17,ArrayType(46,ArrayType(1,BoolType))))))),AttributeDecl(Static,VarDecl(Id($0),ArrayType(95,ArrayType(15,ArrayType(17,ArrayType(46,ArrayType(1,BoolType))))))),AttributeDecl(Static,VarDecl(Id($_l),ArrayType(95,ArrayType(15,ArrayType(17,ArrayType(46,ArrayType(1,BoolType))))))),AttributeDecl(Instance,VarDecl(Id(S),ArrayType(95,ArrayType(15,ArrayType(17,ArrayType(46,ArrayType(1,BoolType))))))),MethodDecl(Id(Constructor),Instance,[param(Id(L),IntType),param(Id(x),FloatType),param(Id(n),ArrayType(2,ArrayType(96,StringType))),param(Id(y_),BoolType)],Block([VarDecl(Id(_),ClassType(Id(__28H)),NullLiteral()),VarDecl(Id(f),ClassType(Id(__28H)),NullLiteral())]))]),ClassDecl(Id(G6),[]),ClassDecl(Id(_5Dk2k7),Id(_),[AttributeDecl(Static,ConstDecl(Id($C),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 790))

    def test_791(self):
        line = '''Class An:__{Val $z27G,$_D:Boolean ;}Class _:HH{Val _,_:Array [Float ,0X53];Destructor (){}Var _y3o,u:Array [Boolean ,076];}Class _H{Destructor (){ {}Val z_,_,_9v,o:Float ;}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(An),Id(__),[AttributeDecl(Static,ConstDecl(Id($z27G),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_D),BoolType,None))]),ClassDecl(Id(_),Id(HH),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(83,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(83,FloatType),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_y3o),ArrayType(62,BoolType))),AttributeDecl(Instance,VarDecl(Id(u),ArrayType(62,BoolType)))]),ClassDecl(Id(_H),[MethodDecl(Id(Destructor),Instance,[],Block([Block([]),ConstDecl(Id(z_),FloatType,None),ConstDecl(Id(_),FloatType,None),ConstDecl(Id(_9v),FloatType,None),ConstDecl(Id(o),FloatType,None)])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 791))

    def test_792(self):
        line = '''Class Y5_a_4_{Var X,F:_;Val $_:Array [Boolean ,0x3D];Var $I,$9_84:Boolean ;}Class _{$9(){} }Class _zu4:_{Val __8,_,$7_8_:U;Constructor (_:_;UL_:X){}Var k,$l,$_b_51r:Float ;}'''
        expect = '''Program([ClassDecl(Id(Y5_a_4_),[AttributeDecl(Instance,VarDecl(Id(X),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(F),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(61,BoolType),None)),AttributeDecl(Static,VarDecl(Id($I),BoolType)),AttributeDecl(Static,VarDecl(Id($9_84),BoolType))]),ClassDecl(Id(_),[MethodDecl(Id($9),Static,[],Block([]))]),ClassDecl(Id(_zu4),Id(_),[AttributeDecl(Instance,ConstDecl(Id(__8),ClassType(Id(U)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(U)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($7_8_),ClassType(Id(U)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(UL_),ClassType(Id(X)))],Block([])),AttributeDecl(Instance,VarDecl(Id(k),FloatType)),AttributeDecl(Static,VarDecl(Id($l),FloatType)),AttributeDecl(Static,VarDecl(Id($_b_51r),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 792))

    def test_793(self):
        line = '''Class B:__{Constructor (I:Boolean ;__,_gb,u,__,_00lNo97:Array [Array [Array [Array [Float ,1],1],01],1]){Break ;Continue ;}Constructor (){} }Class m{Val $b:v5;Constructor (_,_,_,C_S_:Array [Array [Float ,044],0x9];_0R:__){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(B),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(I),BoolType),param(Id(__),ArrayType(1,ArrayType(1,ArrayType(1,ArrayType(1,FloatType))))),param(Id(_gb),ArrayType(1,ArrayType(1,ArrayType(1,ArrayType(1,FloatType))))),param(Id(u),ArrayType(1,ArrayType(1,ArrayType(1,ArrayType(1,FloatType))))),param(Id(__),ArrayType(1,ArrayType(1,ArrayType(1,ArrayType(1,FloatType))))),param(Id(_00lNo97),ArrayType(1,ArrayType(1,ArrayType(1,ArrayType(1,FloatType)))))],Block([Break,Continue])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(m),[AttributeDecl(Static,ConstDecl(Id($b),ClassType(Id(v5)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(9,ArrayType(36,FloatType))),param(Id(_),ArrayType(9,ArrayType(36,FloatType))),param(Id(_),ArrayType(9,ArrayType(36,FloatType))),param(Id(C_S_),ArrayType(9,ArrayType(36,FloatType))),param(Id(_0R),ClassType(Id(__)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 793))

    def test_794(self):
        line = '''Class y:Y{Constructor (v,R:Boolean ;z6_:Float ){}Constructor (h,_,Y:Array [Array [Array [Array [Array [Array [Boolean ,0B11],03],0X3],05],074],0b1100010];ro,_:Float ){_::$6S();} }'''
        expect = '''Program([ClassDecl(Id(y),Id(Y),[MethodDecl(Id(Constructor),Instance,[param(Id(v),BoolType),param(Id(R),BoolType),param(Id(z6_),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(h),ArrayType(98,ArrayType(60,ArrayType(5,ArrayType(3,ArrayType(3,ArrayType(3,BoolType))))))),param(Id(_),ArrayType(98,ArrayType(60,ArrayType(5,ArrayType(3,ArrayType(3,ArrayType(3,BoolType))))))),param(Id(Y),ArrayType(98,ArrayType(60,ArrayType(5,ArrayType(3,ArrayType(3,ArrayType(3,BoolType))))))),param(Id(ro),FloatType),param(Id(_),FloatType)],Block([Call(Id(_),Id($6S),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 794))

    def test_795(self):
        line = '''Class __{}Class _:_d{Val Q_DPD,$_,u_,$iC:_;Val $jU,$__0:j;Constructor (N_c_Z,CY,yxC,__:Array [Array [Array [Array [Float ,59_1_97],0107],0xC],0107]){ {}Break ;Continue ;}Val __:Array [Array [Float ,0107],0b1];}Class N_{Var $_B:Array [String ,7_85];}Class _S{}'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(_),Id(_d),[AttributeDecl(Instance,ConstDecl(Id(Q_DPD),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(u_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($iC),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($jU),ClassType(Id(j)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($__0),ClassType(Id(j)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(N_c_Z),ArrayType(71,ArrayType(12,ArrayType(71,ArrayType(59197,FloatType))))),param(Id(CY),ArrayType(71,ArrayType(12,ArrayType(71,ArrayType(59197,FloatType))))),param(Id(yxC),ArrayType(71,ArrayType(12,ArrayType(71,ArrayType(59197,FloatType))))),param(Id(__),ArrayType(71,ArrayType(12,ArrayType(71,ArrayType(59197,FloatType)))))],Block([Block([]),Break,Continue])),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(1,ArrayType(71,FloatType)),None))]),ClassDecl(Id(N_),[AttributeDecl(Static,VarDecl(Id($_B),ArrayType(785,StringType)))]),ClassDecl(Id(_S),[])])'''
        self.assertTrue(TestAST.test(line, expect, 795))

    def test_796(self):
        line = '''Class g{Constructor (JGO,p,x:Array [Int ,0652323];M_:String ;R_:Array [Array [Boolean ,0B1_01],94];w:_;_,gNJ,__2:k;J:_0_){}Val $S_:Array [Array [Array [Boolean ,042],0x5B],0B1001111];Val $59,$fu9_h5:String ;}'''
        expect = '''Program([ClassDecl(Id(g),[MethodDecl(Id(Constructor),Instance,[param(Id(JGO),ArrayType(218323,IntType)),param(Id(p),ArrayType(218323,IntType)),param(Id(x),ArrayType(218323,IntType)),param(Id(M_),StringType),param(Id(R_),ArrayType(94,ArrayType(5,BoolType))),param(Id(w),ClassType(Id(_))),param(Id(_),ClassType(Id(k))),param(Id(gNJ),ClassType(Id(k))),param(Id(__2),ClassType(Id(k))),param(Id(J),ClassType(Id(_0_)))],Block([])),AttributeDecl(Static,ConstDecl(Id($S_),ArrayType(79,ArrayType(91,ArrayType(34,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($59),StringType,None)),AttributeDecl(Static,ConstDecl(Id($fu9_h5),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 796))

    def test_797(self):
        line = '''Class _:_6{}Class _{Var P:Array [String ,0X3_4];Val jv,$Pq:Array [Array [Array [String ,1_7],053],0X1_7_FD_0];Constructor (q,N_A_5w:Boolean ;P9,Yv8O_:Int ;_33,Q___,c_,L:F){} }Class X{Destructor (){Val N9:Array [Float ,06];} }Class O_2:R_7{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_6),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(P),ArrayType(52,StringType))),AttributeDecl(Instance,ConstDecl(Id(jv),ArrayType(98256,ArrayType(43,ArrayType(17,StringType))),None)),AttributeDecl(Static,ConstDecl(Id($Pq),ArrayType(98256,ArrayType(43,ArrayType(17,StringType))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(q),BoolType),param(Id(N_A_5w),BoolType),param(Id(P9),IntType),param(Id(Yv8O_),IntType),param(Id(_33),ClassType(Id(F))),param(Id(Q___),ClassType(Id(F))),param(Id(c_),ClassType(Id(F))),param(Id(L),ClassType(Id(F)))],Block([]))]),ClassDecl(Id(X),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(N9),ArrayType(6,FloatType),None)]))]),ClassDecl(Id(O_2),Id(R_7),[])])'''
        self.assertTrue(TestAST.test(line, expect, 797))

    def test_798(self):
        line = '''Class _{_(w:_;T,z,_L,J__V___,_:Array [Array [Array [Array [Int ,076],0B1101],9],076];S,__2,m:Array [Array [Array [Array [Boolean ,0B1101],0x1E],0x1E],10];_,h:Array [Array [Float ,0b1],060]){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[param(Id(w),ClassType(Id(_))),param(Id(T),ArrayType(62,ArrayType(9,ArrayType(13,ArrayType(62,IntType))))),param(Id(z),ArrayType(62,ArrayType(9,ArrayType(13,ArrayType(62,IntType))))),param(Id(_L),ArrayType(62,ArrayType(9,ArrayType(13,ArrayType(62,IntType))))),param(Id(J__V___),ArrayType(62,ArrayType(9,ArrayType(13,ArrayType(62,IntType))))),param(Id(_),ArrayType(62,ArrayType(9,ArrayType(13,ArrayType(62,IntType))))),param(Id(S),ArrayType(10,ArrayType(30,ArrayType(30,ArrayType(13,BoolType))))),param(Id(__2),ArrayType(10,ArrayType(30,ArrayType(30,ArrayType(13,BoolType))))),param(Id(m),ArrayType(10,ArrayType(30,ArrayType(30,ArrayType(13,BoolType))))),param(Id(_),ArrayType(48,ArrayType(1,FloatType))),param(Id(h),ArrayType(48,ArrayType(1,FloatType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 798))

    def test_799(self):
        line = '''Class __{}Class f{Destructor (){}Val $4,$_,$_,$1,W_:String ;Constructor (){} }Class J:K_{Destructor (){}Val H:Array [Array [Array [Array [Boolean ,0b110100],0B1],0x2E],0x2E];Destructor (){ {} }}'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(f),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($4),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($1),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(W_),StringType,None)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(J),Id(K_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(H),ArrayType(46,ArrayType(46,ArrayType(1,ArrayType(52,BoolType)))),None)),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 799))

    def test_800(self):
        line = '''Class __9:_0h{Val $8,f:Float ;}Class G8{$_(){}Constructor (_S,t0,J__gD,r,w:Boolean ;Xc,gU,Q_4,_1:Array [Array [Array [Array [Boolean ,0x60],0b111],8],0b1];__x:Array [Array [Array [Array [Int ,0B1],0x7_A],8],07]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(__9),Id(_0h),[AttributeDecl(Static,ConstDecl(Id($8),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(f),FloatType,None))]),ClassDecl(Id(G8),[MethodDecl(Id($_),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_S),BoolType),param(Id(t0),BoolType),param(Id(J__gD),BoolType),param(Id(r),BoolType),param(Id(w),BoolType),param(Id(Xc),ArrayType(1,ArrayType(8,ArrayType(7,ArrayType(96,BoolType))))),param(Id(gU),ArrayType(1,ArrayType(8,ArrayType(7,ArrayType(96,BoolType))))),param(Id(Q_4),ArrayType(1,ArrayType(8,ArrayType(7,ArrayType(96,BoolType))))),param(Id(_1),ArrayType(1,ArrayType(8,ArrayType(7,ArrayType(96,BoolType))))),param(Id(__x),ArrayType(7,ArrayType(8,ArrayType(122,ArrayType(1,IntType)))))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 800))

    def test_801(self):
        line = '''Class _{}Class _h2__9v{}Class _nc:_z_13e{$R(_,l,_55,_5:_;_o,_s,_:____a_;p4:Array [Array [String ,0X9_64_B],0B1]){}Val C:Array [Array [Array [Int ,0B101100],031],0XE];$l(__,o458_,E5__R11:Array [Array [Float ,0B101100],13]){ {} }}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_h2__9v),[]),ClassDecl(Id(_nc),Id(_z_13e),[MethodDecl(Id($R),Static,[param(Id(_),ClassType(Id(_))),param(Id(l),ClassType(Id(_))),param(Id(_55),ClassType(Id(_))),param(Id(_5),ClassType(Id(_))),param(Id(_o),ClassType(Id(____a_))),param(Id(_s),ClassType(Id(____a_))),param(Id(_),ClassType(Id(____a_))),param(Id(p4),ArrayType(1,ArrayType(38475,StringType)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(C),ArrayType(14,ArrayType(25,ArrayType(44,IntType))),None)),MethodDecl(Id($l),Static,[param(Id(__),ArrayType(13,ArrayType(44,FloatType))),param(Id(o458_),ArrayType(13,ArrayType(44,FloatType))),param(Id(E5__R11),ArrayType(13,ArrayType(44,FloatType)))],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 801))

    def test_802(self):
        line = '''Class H{Val $9:Float ;}Class L:__{Val $_,_,$48:Q_;Constructor (){Break ;}Var $3:p;$___(H1,P,_S,_,L9,S:Array [Array [Array [String ,82],01],399_2];Y,t:String ){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(H),[AttributeDecl(Static,ConstDecl(Id($9),FloatType,None))]),ClassDecl(Id(L),Id(__),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(Q_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(Q_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($48),ClassType(Id(Q_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([Break])),AttributeDecl(Static,VarDecl(Id($3),ClassType(Id(p)),NullLiteral())),MethodDecl(Id($___),Static,[param(Id(H1),ArrayType(3992,ArrayType(1,ArrayType(82,StringType)))),param(Id(P),ArrayType(3992,ArrayType(1,ArrayType(82,StringType)))),param(Id(_S),ArrayType(3992,ArrayType(1,ArrayType(82,StringType)))),param(Id(_),ArrayType(3992,ArrayType(1,ArrayType(82,StringType)))),param(Id(L9),ArrayType(3992,ArrayType(1,ArrayType(82,StringType)))),param(Id(S),ArrayType(3992,ArrayType(1,ArrayType(82,StringType)))),param(Id(Y),StringType),param(Id(t),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 802))

    def test_803(self):
        line = '''Class _{F(){}js(f5:_78;nn_E,v0J,_35:Array [String ,053];s:Array [Array [Array [Array [Float ,0X89F6F_9],75],0B100_10],5];_,Q_,_31:String ;J3,_W:String ;_b,r2:f){Val __:Array [Array [String ,07_1_0],0X4D];} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(F),Instance,[],Block([])),MethodDecl(Id(js),Instance,[param(Id(f5),ClassType(Id(_78))),param(Id(nn_E),ArrayType(43,StringType)),param(Id(v0J),ArrayType(43,StringType)),param(Id(_35),ArrayType(43,StringType)),param(Id(s),ArrayType(5,ArrayType(18,ArrayType(75,ArrayType(9041657,FloatType))))),param(Id(_),StringType),param(Id(Q_),StringType),param(Id(_31),StringType),param(Id(J3),StringType),param(Id(_W),StringType),param(Id(_b),ClassType(Id(f))),param(Id(r2),ClassType(Id(f)))],Block([ConstDecl(Id(__),ArrayType(77,ArrayType(456,StringType)),None)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 803))

    def test_804(self):
        line = '''Class _:_Q_MF{}Class n0T:_64n{Val $j_8:_t23;Var $2__,$_m:M_;}Class Q_b:t{$5(ikfj_7:String ;_,_,_,__,lRP__i:_;h_,__1,_T,S:Array [Int ,75];E2V:String ;i,M_:r;_:_23;jPC,_7,_,u6:Float ;N:Array [Array [Array [Array [Array [Array [String ,02],02_1_3_0235_2],0B1010101],03],0X5BC8],75]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_Q_MF),[]),ClassDecl(Id(n0T),Id(_64n),[AttributeDecl(Static,ConstDecl(Id($j_8),ClassType(Id(_t23)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($2__),ClassType(Id(M_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_m),ClassType(Id(M_)),NullLiteral()))]),ClassDecl(Id(Q_b),Id(t),[MethodDecl(Id($5),Static,[param(Id(ikfj_7),StringType),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(lRP__i),ClassType(Id(_))),param(Id(h_),ArrayType(75,IntType)),param(Id(__1),ArrayType(75,IntType)),param(Id(_T),ArrayType(75,IntType)),param(Id(S),ArrayType(75,IntType)),param(Id(E2V),StringType),param(Id(i),ClassType(Id(r))),param(Id(M_),ClassType(Id(r))),param(Id(_),ClassType(Id(_23))),param(Id(jPC),FloatType),param(Id(_7),FloatType),param(Id(_),FloatType),param(Id(u6),FloatType),param(Id(N),ArrayType(75,ArrayType(23496,ArrayType(3,ArrayType(85,ArrayType(4556010,ArrayType(2,StringType)))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 804))

    def test_805(self):
        line = '''Class m_2{}Class w:____{Destructor (){Continue ;Return ;}Val _:Array [Boolean ,6_8];$9(q,y:y;_:_){}Val _,$s,$8P_:Array [Array [String ,0x1],67_2004_1_1];Var $M:Boolean ;M(bO,_f6:Array [Array [Boolean ,074],0B1000110]){} }Class j:_15_{Val $F_5,_,__:Float ;}Class _{}Class _L:_6_2{}'''
        expect = '''Program([ClassDecl(Id(m_2),[]),ClassDecl(Id(w),Id(____),[MethodDecl(Id(Destructor),Instance,[],Block([Continue,Return()])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(68,BoolType),None)),MethodDecl(Id($9),Static,[param(Id(q),ClassType(Id(y))),param(Id(y),ClassType(Id(y))),param(Id(_),ClassType(Id(_)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(67200411,ArrayType(1,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($s),ArrayType(67200411,ArrayType(1,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($8P_),ArrayType(67200411,ArrayType(1,StringType)),None)),AttributeDecl(Static,VarDecl(Id($M),BoolType)),MethodDecl(Id(M),Instance,[param(Id(bO),ArrayType(70,ArrayType(60,BoolType))),param(Id(_f6),ArrayType(70,ArrayType(60,BoolType)))],Block([]))]),ClassDecl(Id(j),Id(_15_),[AttributeDecl(Static,ConstDecl(Id($F_5),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(__),FloatType,None))]),ClassDecl(Id(_),[]),ClassDecl(Id(_L),Id(_6_2),[])])'''
        self.assertTrue(TestAST.test(line, expect, 805))

    def test_806(self):
        line = '''Class tOM_:s{Val $dvd:Array [String ,97];}Class _:C_{_(_:Dt9;d,TB,_4_:Array [Int ,97]){}Constructor (){} }Class _59{}Class __f_:d{}Class fT6_Q4_T_{Val _,$15:Array [String ,97];}'''
        expect = '''Program([ClassDecl(Id(tOM_),Id(s),[AttributeDecl(Static,ConstDecl(Id($dvd),ArrayType(97,StringType),None))]),ClassDecl(Id(_),Id(C_),[MethodDecl(Id(_),Instance,[param(Id(_),ClassType(Id(Dt9))),param(Id(d),ArrayType(97,IntType)),param(Id(TB),ArrayType(97,IntType)),param(Id(_4_),ArrayType(97,IntType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_59),[]),ClassDecl(Id(__f_),Id(d),[]),ClassDecl(Id(fT6_Q4_T_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(97,StringType),None)),AttributeDecl(Static,ConstDecl(Id($15),ArrayType(97,StringType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 806))

    def test_807(self):
        line = '''Class K{Destructor (){}__Th121(C,_:_M_;__:Float ;T9,_:_;_,r,vO_S:Array [Array [Boolean ,01],026];q,Gx_3:Array [Array [Int ,03_40_0],8];_:Boolean ;LJ,_H2,l:Int ;_:_8n__){Continue ;} }Class j_{}Class _w{}Class S{}Class _{}Class r_6:_0{$X(IS,w:x){Break ;} }Class g____{}'''
        expect = '''Program([ClassDecl(Id(K),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(__Th121),Instance,[param(Id(C),ClassType(Id(_M_))),param(Id(_),ClassType(Id(_M_))),param(Id(__),FloatType),param(Id(T9),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(22,ArrayType(1,BoolType))),param(Id(r),ArrayType(22,ArrayType(1,BoolType))),param(Id(vO_S),ArrayType(22,ArrayType(1,BoolType))),param(Id(q),ArrayType(8,ArrayType(1792,IntType))),param(Id(Gx_3),ArrayType(8,ArrayType(1792,IntType))),param(Id(_),BoolType),param(Id(LJ),IntType),param(Id(_H2),IntType),param(Id(l),IntType),param(Id(_),ClassType(Id(_8n__)))],Block([Continue]))]),ClassDecl(Id(j_),[]),ClassDecl(Id(_w),[]),ClassDecl(Id(S),[]),ClassDecl(Id(_),[]),ClassDecl(Id(r_6),Id(_0),[MethodDecl(Id($X),Static,[param(Id(IS),ClassType(Id(x))),param(Id(w),ClassType(Id(x)))],Block([Break]))]),ClassDecl(Id(g____),[])])'''
        self.assertTrue(TestAST.test(line, expect, 807))

    def test_808(self):
        line = '''Class _{$0Ss6F(A,a_,_,o,C:_0_;Qt:_;__6:Boolean ;_C:_;o,_,D3:Array [Array [Float ,0x5B],77];H5,y:BU5;_1G0Z,z,__:Array [Array [Float ,06_0_1],0x5B]){} }Class M{}Class _:_{Constructor (_w37,n_d4__k90_:Array [Array [Array [Int ,0x5B],0b10010],01_1];___f:Array [Array [Array [Boolean ,0X23],0132],0132];_B_:Int ;S,_095,l_7n,V,__,_:Boolean ;h:T_O;_:k){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($0Ss6F),Static,[param(Id(A),ClassType(Id(_0_))),param(Id(a_),ClassType(Id(_0_))),param(Id(_),ClassType(Id(_0_))),param(Id(o),ClassType(Id(_0_))),param(Id(C),ClassType(Id(_0_))),param(Id(Qt),ClassType(Id(_))),param(Id(__6),BoolType),param(Id(_C),ClassType(Id(_))),param(Id(o),ArrayType(77,ArrayType(91,FloatType))),param(Id(_),ArrayType(77,ArrayType(91,FloatType))),param(Id(D3),ArrayType(77,ArrayType(91,FloatType))),param(Id(H5),ClassType(Id(BU5))),param(Id(y),ClassType(Id(BU5))),param(Id(_1G0Z),ArrayType(91,ArrayType(385,FloatType))),param(Id(z),ArrayType(91,ArrayType(385,FloatType))),param(Id(__),ArrayType(91,ArrayType(385,FloatType)))],Block([]))]),ClassDecl(Id(M),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_w37),ArrayType(9,ArrayType(18,ArrayType(91,IntType)))),param(Id(n_d4__k90_),ArrayType(9,ArrayType(18,ArrayType(91,IntType)))),param(Id(___f),ArrayType(90,ArrayType(90,ArrayType(35,BoolType)))),param(Id(_B_),IntType),param(Id(S),BoolType),param(Id(_095),BoolType),param(Id(l_7n),BoolType),param(Id(V),BoolType),param(Id(__),BoolType),param(Id(_),BoolType),param(Id(h),ClassType(Id(T_O))),param(Id(_),ClassType(Id(k)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 808))

    def test_809(self):
        line = '''Class _:_T_{Var _:Array [Float ,0542];}Class a47dri{Constructor (e:Array [Float ,144_4];Y,_,j3:i;__h:Int ;_:Array [Array [Array [Array [Array [Array [String ,69_75],04],0b1_1_1_1_10],06],0X2D],04]){}Destructor (){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_T_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(354,FloatType)))]),ClassDecl(Id(a47dri),[MethodDecl(Id(Constructor),Instance,[param(Id(e),ArrayType(1444,FloatType)),param(Id(Y),ClassType(Id(i))),param(Id(_),ClassType(Id(i))),param(Id(j3),ClassType(Id(i))),param(Id(__h),IntType),param(Id(_),ArrayType(4,ArrayType(45,ArrayType(6,ArrayType(62,ArrayType(4,ArrayType(6975,StringType)))))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 809))

    def test_810(self):
        line = '''Class __X__{Var _:Array [Array [Array [Array [Boolean ,0b1_1_11_1],7],4_1],0X8];Val Q:String ;}Class __{Val g7__XP6:ew__5;}Class o{}Class _X_:KU{}Class a{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(__X__),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(8,ArrayType(41,ArrayType(7,ArrayType(31,BoolType)))))),AttributeDecl(Instance,ConstDecl(Id(Q),StringType,None))]),ClassDecl(Id(__),[AttributeDecl(Instance,ConstDecl(Id(g7__XP6),ClassType(Id(ew__5)),NullLiteral()))]),ClassDecl(Id(o),[]),ClassDecl(Id(_X_),Id(KU),[]),ClassDecl(Id(a),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 810))

    def test_811(self):
        line = '''Class b_{Val $5_,X,v:Array [Array [Array [Array [Array [Boolean ,82],0B10011],0b1],0106],0X72];}Class V7_:D{Var __x_2:Array [Array [Array [Array [Array [Float ,0106],0xB8],0X27],05],0X1_1A];}'''
        expect = '''Program([ClassDecl(Id(b_),[AttributeDecl(Static,ConstDecl(Id($5_),ArrayType(114,ArrayType(70,ArrayType(1,ArrayType(19,ArrayType(82,BoolType))))),None)),AttributeDecl(Instance,ConstDecl(Id(X),ArrayType(114,ArrayType(70,ArrayType(1,ArrayType(19,ArrayType(82,BoolType))))),None)),AttributeDecl(Instance,ConstDecl(Id(v),ArrayType(114,ArrayType(70,ArrayType(1,ArrayType(19,ArrayType(82,BoolType))))),None))]),ClassDecl(Id(V7_),Id(D),[AttributeDecl(Instance,VarDecl(Id(__x_2),ArrayType(282,ArrayType(5,ArrayType(39,ArrayType(184,ArrayType(70,FloatType)))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 811))

    def test_812(self):
        line = '''Class _:q130{}Class _:_{}Class Q:l{Constructor (_QS__9u,_:Array [Array [Array [Int ,26],26],0b1011000]){}Val _1:Array [Boolean ,0B1000];}Class H:A__{}Class W_P{$7(){}Constructor (){} }Class _:__3243_q{}Class l{}'''
        expect = '''Program([ClassDecl(Id(_),Id(q130),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(Q),Id(l),[MethodDecl(Id(Constructor),Instance,[param(Id(_QS__9u),ArrayType(88,ArrayType(26,ArrayType(26,IntType)))),param(Id(_),ArrayType(88,ArrayType(26,ArrayType(26,IntType))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_1),ArrayType(8,BoolType),None))]),ClassDecl(Id(H),Id(A__),[]),ClassDecl(Id(W_P),[MethodDecl(Id($7),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(__3243_q),[]),ClassDecl(Id(l),[])])'''
        self.assertTrue(TestAST.test(line, expect, 812))

    def test_813(self):
        line = '''Class G{Var _d_,$_:Array [Array [Float ,0132],0x2F];Destructor (){}Var $_e7_:String ;F_u(l:_;__,t,t,M0,_,j0__3:String ){Break ;Break ;}Constructor (_:Array [Array [Array [Array [Array [Int ,073],0b1],02],2],0B1101]){}$D(_:_Y;p37,x,_Z:P;d9,__0_8,_M:Int ){Break ;}Val $__:Int ;}Class t_:_0{}'''
        expect = '''Program([ClassDecl(Id(G),[AttributeDecl(Instance,VarDecl(Id(_d_),ArrayType(47,ArrayType(90,FloatType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(47,ArrayType(90,FloatType)))),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_e7_),StringType)),MethodDecl(Id(F_u),Instance,[param(Id(l),ClassType(Id(_))),param(Id(__),StringType),param(Id(t),StringType),param(Id(t),StringType),param(Id(M0),StringType),param(Id(_),StringType),param(Id(j0__3),StringType)],Block([Break,Break])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(13,ArrayType(2,ArrayType(2,ArrayType(1,ArrayType(59,IntType))))))],Block([])),MethodDecl(Id($D),Static,[param(Id(_),ClassType(Id(_Y))),param(Id(p37),ClassType(Id(P))),param(Id(x),ClassType(Id(P))),param(Id(_Z),ClassType(Id(P))),param(Id(d9),IntType),param(Id(__0_8),IntType),param(Id(_M),IntType)],Block([Break])),AttributeDecl(Static,ConstDecl(Id($__),IntType,None))]),ClassDecl(Id(t_),Id(_0),[])])'''
        self.assertTrue(TestAST.test(line, expect, 813))

    def test_814(self):
        line = '''Class pG:_{Destructor (){} }Class __{Destructor (){} }Class DP{}Class r8V___:_{Constructor (A_354,g:Z;A,_,Q,P4C:Boolean ;e_A:Int ;b_:d8j;_,_,_0___50,B,M_:Array [Int ,0x4B];_,G:I){Return ;Break ;{} }}Class _Z{}Class __{}'''
        expect = '''Program([ClassDecl(Id(pG),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(DP),[]),ClassDecl(Id(r8V___),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(A_354),ClassType(Id(Z))),param(Id(g),ClassType(Id(Z))),param(Id(A),BoolType),param(Id(_),BoolType),param(Id(Q),BoolType),param(Id(P4C),BoolType),param(Id(e_A),IntType),param(Id(b_),ClassType(Id(d8j))),param(Id(_),ArrayType(75,IntType)),param(Id(_),ArrayType(75,IntType)),param(Id(_0___50),ArrayType(75,IntType)),param(Id(B),ArrayType(75,IntType)),param(Id(M_),ArrayType(75,IntType)),param(Id(_),ClassType(Id(I))),param(Id(G),ClassType(Id(I)))],Block([Return(),Break,Block([])]))]),ClassDecl(Id(_Z),[]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 814))

    def test_815(self):
        line = '''Class _V_:__{}Class __9{}Class __2:M{}Class _G_:u_8r7{y(Y,r,__,W:Array [Boolean ,77];_:_x8g;A_:_;D:d;__:Float ){} }Class b_{}Class _e__{Constructor (_:Array [Array [Array [Int ,07542_7],0B1],0B1];__,_P:Array [Array [String ,0b1],0B111100];a:_){Var _:Array [Array [Array [Array [String ,0B1_1],0xF5],77],77];} }Class _:_6{}'''
        expect = '''Program([ClassDecl(Id(_V_),Id(__),[]),ClassDecl(Id(__9),[]),ClassDecl(Id(__2),Id(M),[]),ClassDecl(Id(_G_),Id(u_8r7),[MethodDecl(Id(y),Instance,[param(Id(Y),ArrayType(77,BoolType)),param(Id(r),ArrayType(77,BoolType)),param(Id(__),ArrayType(77,BoolType)),param(Id(W),ArrayType(77,BoolType)),param(Id(_),ClassType(Id(_x8g))),param(Id(A_),ClassType(Id(_))),param(Id(D),ClassType(Id(d))),param(Id(__),FloatType)],Block([]))]),ClassDecl(Id(b_),[]),ClassDecl(Id(_e__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,ArrayType(1,ArrayType(31511,IntType)))),param(Id(__),ArrayType(60,ArrayType(1,StringType))),param(Id(_P),ArrayType(60,ArrayType(1,StringType))),param(Id(a),ClassType(Id(_)))],Block([VarDecl(Id(_),ArrayType(77,ArrayType(77,ArrayType(245,ArrayType(3,StringType)))))]))]),ClassDecl(Id(_),Id(_6),[])])'''
        self.assertTrue(TestAST.test(line, expect, 815))

    def test_816(self):
        line = '''Class qF:h__0{}Class Y6_:JG{Constructor (Z:Array [Array [Array [Array [Array [Float ,0x1E],0xD],0X297],0xA],0654_0_1_5];__6:Array [Array [Array [String ,07],036],14]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(qF),Id(h__0),[]),ClassDecl(Id(Y6_),Id(JG),[MethodDecl(Id(Constructor),Instance,[param(Id(Z),ArrayType(219149,ArrayType(10,ArrayType(663,ArrayType(13,ArrayType(30,FloatType)))))),param(Id(__6),ArrayType(14,ArrayType(30,ArrayType(7,StringType))))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 816))

    def test_817(self):
        line = '''Class _a{$__s_(_:Int ;_0,N0:Array [Array [String ,0B1011],0x9];WR_9:Array [String ,0X46];_21,_:Array [Int ,0B1_1_10011_1_11_1];N,_,_20:Float ){}Val $j:Array [String ,79];}'''
        expect = '''Program([ClassDecl(Id(_a),[MethodDecl(Id($__s_),Static,[param(Id(_),IntType),param(Id(_0),ArrayType(9,ArrayType(11,StringType))),param(Id(N0),ArrayType(9,ArrayType(11,StringType))),param(Id(WR_9),ArrayType(70,StringType)),param(Id(_21),ArrayType(1855,IntType)),param(Id(_),ArrayType(1855,IntType)),param(Id(N),FloatType),param(Id(_),FloatType),param(Id(_20),FloatType)],Block([])),AttributeDecl(Static,ConstDecl(Id($j),ArrayType(79,StringType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 817))

    def test_818(self):
        line = '''Class P{}Class _:j{C5(_4z,_9___,_:Array [Float ,0b111010];_,p:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0B1],0xA],71],0b1],0x54],0x54],0B11],0x54];__:_7_){} }'''
        expect = '''Program([ClassDecl(Id(P),[]),ClassDecl(Id(_),Id(j),[MethodDecl(Id(C5),Instance,[param(Id(_4z),ArrayType(58,FloatType)),param(Id(_9___),ArrayType(58,FloatType)),param(Id(_),ArrayType(58,FloatType)),param(Id(_),ArrayType(84,ArrayType(3,ArrayType(84,ArrayType(84,ArrayType(1,ArrayType(71,ArrayType(10,ArrayType(1,FloatType))))))))),param(Id(p),ArrayType(84,ArrayType(3,ArrayType(84,ArrayType(84,ArrayType(1,ArrayType(71,ArrayType(10,ArrayType(1,FloatType))))))))),param(Id(__),ClassType(Id(_7_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 818))

    def test_819(self):
        line = '''Class W3_D{$__A(_:Array [Array [Int ,01_4],0X44];_Fs9,_:Array [Array [Array [Int ,0x7_A],80],044];n,XL,BB7:Array [Array [Array [Float ,73_76_18],044],044];_E:_0;__,E:String ){}Val $8:Float ;}Class _{Var $_,VP_,W:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(W3_D),[MethodDecl(Id($__A),Static,[param(Id(_),ArrayType(68,ArrayType(12,IntType))),param(Id(_Fs9),ArrayType(36,ArrayType(80,ArrayType(122,IntType)))),param(Id(_),ArrayType(36,ArrayType(80,ArrayType(122,IntType)))),param(Id(n),ArrayType(36,ArrayType(36,ArrayType(737618,FloatType)))),param(Id(XL),ArrayType(36,ArrayType(36,ArrayType(737618,FloatType)))),param(Id(BB7),ArrayType(36,ArrayType(36,ArrayType(737618,FloatType)))),param(Id(_E),ClassType(Id(_0))),param(Id(__),StringType),param(Id(E),StringType)],Block([])),AttributeDecl(Static,ConstDecl(Id($8),FloatType,None))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Instance,VarDecl(Id(VP_),BoolType)),AttributeDecl(Instance,VarDecl(Id(W),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 819))

    def test_820(self):
        line = '''Class P9{}Class __:h{Constructor (R3:Array [Array [Boolean ,0102],0b10];M_,_04,_1:ZZ;_:Array [Array [Array [String ,0xD_9],0xB],54];_O,_:p;z,_:Array [Array [Float ,0X9_1],54]){} }Class _:_{z3dS(){} }Class I{Destructor (){} }Class W{Var $7,Un4,G:String ;}Class s_{}'''
        expect = '''Program([ClassDecl(Id(P9),[]),ClassDecl(Id(__),Id(h),[MethodDecl(Id(Constructor),Instance,[param(Id(R3),ArrayType(2,ArrayType(66,BoolType))),param(Id(M_),ClassType(Id(ZZ))),param(Id(_04),ClassType(Id(ZZ))),param(Id(_1),ClassType(Id(ZZ))),param(Id(_),ArrayType(54,ArrayType(11,ArrayType(217,StringType)))),param(Id(_O),ClassType(Id(p))),param(Id(_),ClassType(Id(p))),param(Id(z),ArrayType(54,ArrayType(145,FloatType))),param(Id(_),ArrayType(54,ArrayType(145,FloatType)))],Block([]))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(z3dS),Instance,[],Block([]))]),ClassDecl(Id(I),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(W),[AttributeDecl(Static,VarDecl(Id($7),StringType)),AttributeDecl(Instance,VarDecl(Id(Un4),StringType)),AttributeDecl(Instance,VarDecl(Id(G),StringType))]),ClassDecl(Id(s_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 820))

    def test_821(self):
        line = '''Class _{$W27(_0:_6_P;_N_n5_0_,z:Array [Float ,0b1100001];J7:_;_a_:Array [Float ,0X17];A_K_H6_,r_G_,_,_,X,__C___7,C9,_c1:X_){} }Class rd5_r{Constructor (y:Array [String ,052]){}_R(d_,fC,_,_9_Q,m:Array [Boolean ,052];__9,_:String ;Z_,AN:Array [Array [Float ,0xF],0X17]){Return ;} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($W27),Static,[param(Id(_0),ClassType(Id(_6_P))),param(Id(_N_n5_0_),ArrayType(97,FloatType)),param(Id(z),ArrayType(97,FloatType)),param(Id(J7),ClassType(Id(_))),param(Id(_a_),ArrayType(23,FloatType)),param(Id(A_K_H6_),ClassType(Id(X_))),param(Id(r_G_),ClassType(Id(X_))),param(Id(_),ClassType(Id(X_))),param(Id(_),ClassType(Id(X_))),param(Id(X),ClassType(Id(X_))),param(Id(__C___7),ClassType(Id(X_))),param(Id(C9),ClassType(Id(X_))),param(Id(_c1),ClassType(Id(X_)))],Block([]))]),ClassDecl(Id(rd5_r),[MethodDecl(Id(Constructor),Instance,[param(Id(y),ArrayType(42,StringType))],Block([])),MethodDecl(Id(_R),Instance,[param(Id(d_),ArrayType(42,BoolType)),param(Id(fC),ArrayType(42,BoolType)),param(Id(_),ArrayType(42,BoolType)),param(Id(_9_Q),ArrayType(42,BoolType)),param(Id(m),ArrayType(42,BoolType)),param(Id(__9),StringType),param(Id(_),StringType),param(Id(Z_),ArrayType(23,ArrayType(15,FloatType))),param(Id(AN),ArrayType(23,ArrayType(15,FloatType)))],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 821))

    def test_822(self):
        line = '''Class _11DO{Var _J,$_:Array [Array [Int ,81],0B1100001];}Class e:D{}Class D69z_J{Var $DuDi934_,$_,$8,a,$IV_5:Array [String ,0x3E];}Class _2h{Constructor (a:Array [String ,0117];H_:Array [Array [Float ,72],65];G_qA:_){} }'''
        expect = '''Program([ClassDecl(Id(_11DO),[AttributeDecl(Instance,VarDecl(Id(_J),ArrayType(97,ArrayType(81,IntType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(97,ArrayType(81,IntType))))]),ClassDecl(Id(e),Id(D),[]),ClassDecl(Id(D69z_J),[AttributeDecl(Static,VarDecl(Id($DuDi934_),ArrayType(62,StringType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(62,StringType))),AttributeDecl(Static,VarDecl(Id($8),ArrayType(62,StringType))),AttributeDecl(Instance,VarDecl(Id(a),ArrayType(62,StringType))),AttributeDecl(Static,VarDecl(Id($IV_5),ArrayType(62,StringType)))]),ClassDecl(Id(_2h),[MethodDecl(Id(Constructor),Instance,[param(Id(a),ArrayType(79,StringType)),param(Id(H_),ArrayType(65,ArrayType(72,FloatType))),param(Id(G_qA),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 822))

    def test_823(self):
        line = '''Class _:D3{Constructor (){Break ;}Destructor (){}Constructor (_:_U_38;_:tD_;__:_4__8;xCo__1,_8,_B:Array [Array [Float ,7_4_0],0X1]){Break ;}Constructor (O:Array [Boolean ,0441]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(D3),[MethodDecl(Id(Constructor),Instance,[],Block([Break])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_U_38))),param(Id(_),ClassType(Id(tD_))),param(Id(__),ClassType(Id(_4__8))),param(Id(xCo__1),ArrayType(1,ArrayType(740,FloatType))),param(Id(_8),ArrayType(1,ArrayType(740,FloatType))),param(Id(_B),ArrayType(1,ArrayType(740,FloatType)))],Block([Break])),MethodDecl(Id(Constructor),Instance,[param(Id(O),ArrayType(289,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 823))

    def test_824(self):
        line = '''Class __:R{$k(_:Boolean ;s,W9461:I;m:XBxX_v;_:__;_2_:Array [Array [Array [String ,67],06],0B1];_:y60;U:Array [Array [Int ,0B100100],0X3]){}Destructor (){}Val _X_5:Int ;Val h:String ;Destructor (){ {}Continue ;} }'''
        expect = '''Program([ClassDecl(Id(__),Id(R),[MethodDecl(Id($k),Static,[param(Id(_),BoolType),param(Id(s),ClassType(Id(I))),param(Id(W9461),ClassType(Id(I))),param(Id(m),ClassType(Id(XBxX_v))),param(Id(_),ClassType(Id(__))),param(Id(_2_),ArrayType(1,ArrayType(6,ArrayType(67,StringType)))),param(Id(_),ClassType(Id(y60))),param(Id(U),ArrayType(3,ArrayType(36,IntType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_X_5),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(h),StringType,None)),MethodDecl(Id(Destructor),Instance,[],Block([Block([]),Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 824))

    def test_825(self):
        line = '''Class Giu{Val _:Array [Boolean ,0B10011];Var _:Array [Array [Boolean ,0x1],0b11];Destructor (){}Constructor (F:_N;_,_Q:Array [Array [Boolean ,65],65];T__9:V_){}Constructor (_:_){}Val $7,Fh,$GB,$1,$_1,$9_,$_8,$6,$0,j,$_,$5L,J68,DZ,$NB:__8;Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(Giu),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(19,BoolType),None)),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,ArrayType(1,BoolType)))),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(F),ClassType(Id(_N))),param(Id(_),ArrayType(65,ArrayType(65,BoolType))),param(Id(_Q),ArrayType(65,ArrayType(65,BoolType))),param(Id(T__9),ClassType(Id(V_)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_)))],Block([])),AttributeDecl(Static,ConstDecl(Id($7),ClassType(Id(__8)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(Fh),ClassType(Id(__8)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($GB),ClassType(Id(__8)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($1),ClassType(Id(__8)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_1),ClassType(Id(__8)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($9_),ClassType(Id(__8)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_8),ClassType(Id(__8)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($6),ClassType(Id(__8)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($0),ClassType(Id(__8)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(j),ClassType(Id(__8)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(__8)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($5L),ClassType(Id(__8)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(J68),ClassType(Id(__8)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(DZ),ClassType(Id(__8)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($NB),ClassType(Id(__8)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 825))

    def test_826(self):
        line = '''Class N_{W(__:Array [Array [String ,0B1_1_0_101],07]){ {} }}Class _:_{}Class __{}Class _{Var _:Int =o_::$ot_8;}Class _:_51{}Class l340D:Hi5{}Class _lM1_:_1_H{Var _:_;Constructor (){Return ;} }Class _0_{}'''
        expect = '''Program([ClassDecl(Id(N_),[MethodDecl(Id(W),Instance,[param(Id(__),ArrayType(7,ArrayType(53,StringType)))],Block([Block([])]))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(__),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_),IntType,FieldAccess(Id(o_),Id($ot_8))))]),ClassDecl(Id(_),Id(_51),[]),ClassDecl(Id(l340D),Id(Hi5),[]),ClassDecl(Id(_lM1_),Id(_1_H),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([Return()]))]),ClassDecl(Id(_0_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 826))

    def test_827(self):
        line = '''Class _MD:_9{Constructor (S,__,_9,C:R_z;_:Array [Array [Array [Float ,0B1010110],0XC_1],0B10]){Continue ;}$_(X7,___:n){}_d4bO(D:DQ_8_;O,W_,J__B,q:Boolean ;h_U:Array [Array [Float ,061],05];_v:Float ){}q__(_:_c6N1;__,_7,C:__3c){} }'''
        expect = '''Program([ClassDecl(Id(_MD),Id(_9),[MethodDecl(Id(Constructor),Instance,[param(Id(S),ClassType(Id(R_z))),param(Id(__),ClassType(Id(R_z))),param(Id(_9),ClassType(Id(R_z))),param(Id(C),ClassType(Id(R_z))),param(Id(_),ArrayType(2,ArrayType(193,ArrayType(86,FloatType))))],Block([Continue])),MethodDecl(Id($_),Static,[param(Id(X7),ClassType(Id(n))),param(Id(___),ClassType(Id(n)))],Block([])),MethodDecl(Id(_d4bO),Instance,[param(Id(D),ClassType(Id(DQ_8_))),param(Id(O),BoolType),param(Id(W_),BoolType),param(Id(J__B),BoolType),param(Id(q),BoolType),param(Id(h_U),ArrayType(5,ArrayType(49,FloatType))),param(Id(_v),FloatType)],Block([])),MethodDecl(Id(q__),Instance,[param(Id(_),ClassType(Id(_c6N1))),param(Id(__),ClassType(Id(__3c))),param(Id(_7),ClassType(Id(__3c))),param(Id(C),ClassType(Id(__3c)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 827))

    def test_828(self):
        line = '''Class _S{$H1(M,c:Array [Array [Array [Array [Int ,0b110111],4],0B1000001],0B1000001];_,J:d;K,_,n_6:Int ;c,_,t:_5;t6,_j_,_6:Array [Array [Array [Array [Boolean ,0xE_A_D],0B1],0x48],05_4]){} }'''
        expect = '''Program([ClassDecl(Id(_S),[MethodDecl(Id($H1),Static,[param(Id(M),ArrayType(65,ArrayType(65,ArrayType(4,ArrayType(55,IntType))))),param(Id(c),ArrayType(65,ArrayType(65,ArrayType(4,ArrayType(55,IntType))))),param(Id(_),ClassType(Id(d))),param(Id(J),ClassType(Id(d))),param(Id(K),IntType),param(Id(_),IntType),param(Id(n_6),IntType),param(Id(c),ClassType(Id(_5))),param(Id(_),ClassType(Id(_5))),param(Id(t),ClassType(Id(_5))),param(Id(t6),ArrayType(44,ArrayType(72,ArrayType(1,ArrayType(3757,BoolType))))),param(Id(_j_),ArrayType(44,ArrayType(72,ArrayType(1,ArrayType(3757,BoolType))))),param(Id(_6),ArrayType(44,ArrayType(72,ArrayType(1,ArrayType(3757,BoolType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 828))

    def test_829(self):
        line = '''Class _:_{Var $3:_;Constructor (b:Array [Array [Int ,05_3_7_620],0x31];_4_:h__){Return ;{} }Var $e,$6_:Array [Float ,0B1];_w9G(J:Array [String ,06];__3:Array [Array [Array [Array [Array [Array [Float ,0X1],0b11],98],03],03],0X6F5_4]){}$uxi_(){}Val L:P2_;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($3),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(b),ArrayType(49,ArrayType(180112,IntType))),param(Id(_4_),ClassType(Id(h__)))],Block([Return(),Block([])])),AttributeDecl(Static,VarDecl(Id($e),ArrayType(1,FloatType))),AttributeDecl(Static,VarDecl(Id($6_),ArrayType(1,FloatType))),MethodDecl(Id(_w9G),Instance,[param(Id(J),ArrayType(6,StringType)),param(Id(__3),ArrayType(28500,ArrayType(3,ArrayType(3,ArrayType(98,ArrayType(3,ArrayType(1,FloatType)))))))],Block([])),MethodDecl(Id($uxi_),Static,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(L),ClassType(Id(P2_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 829))

    def test_830(self):
        line = '''Class _:bV{Constructor (_:Array [Array [Array [String ,3789_3],0XF],01];_:String ){} }Class D{}Class sOH:f{r1__1(_,_i1__,oe,_,j_,Ws_:Boolean ;gx39_,s:rT){}$0_0(_E:Array [Array [Boolean ,0XE],9];_:_;N_:Array [Array [String ,021],03_3];PG,__,zz2,_0:Boolean ){}Constructor (_s3__,f:Float ;_c:Boolean ;Z4_z:Array [Array [Array [Boolean ,0B111010],17],021]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(bV),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,ArrayType(15,ArrayType(37893,StringType)))),param(Id(_),StringType)],Block([]))]),ClassDecl(Id(D),[]),ClassDecl(Id(sOH),Id(f),[MethodDecl(Id(r1__1),Instance,[param(Id(_),BoolType),param(Id(_i1__),BoolType),param(Id(oe),BoolType),param(Id(_),BoolType),param(Id(j_),BoolType),param(Id(Ws_),BoolType),param(Id(gx39_),ClassType(Id(rT))),param(Id(s),ClassType(Id(rT)))],Block([])),MethodDecl(Id($0_0),Static,[param(Id(_E),ArrayType(9,ArrayType(14,BoolType))),param(Id(_),ClassType(Id(_))),param(Id(N_),ArrayType(27,ArrayType(17,StringType))),param(Id(PG),BoolType),param(Id(__),BoolType),param(Id(zz2),BoolType),param(Id(_0),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_s3__),FloatType),param(Id(f),FloatType),param(Id(_c),BoolType),param(Id(Z4_z),ArrayType(17,ArrayType(17,ArrayType(58,BoolType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 830))

    def test_831(self):
        line = '''Class __l{Constructor (Ke_,_9:Int ;vQd:Array [Array [Array [Array [Array [Float ,0b1],030],0b1],030],0xA];h6_1I06__,i_7,_c2,__:Array [Array [Int ,0x16],5_054_87]){}yJ(d,C0:S84;_:_42_2v;_,_D2,_5_,_Fx0:Qv){} }'''
        expect = '''Program([ClassDecl(Id(__l),[MethodDecl(Id(Constructor),Instance,[param(Id(Ke_),IntType),param(Id(_9),IntType),param(Id(vQd),ArrayType(10,ArrayType(24,ArrayType(1,ArrayType(24,ArrayType(1,FloatType)))))),param(Id(h6_1I06__),ArrayType(505487,ArrayType(22,IntType))),param(Id(i_7),ArrayType(505487,ArrayType(22,IntType))),param(Id(_c2),ArrayType(505487,ArrayType(22,IntType))),param(Id(__),ArrayType(505487,ArrayType(22,IntType)))],Block([])),MethodDecl(Id(yJ),Instance,[param(Id(d),ClassType(Id(S84))),param(Id(C0),ClassType(Id(S84))),param(Id(_),ClassType(Id(_42_2v))),param(Id(_),ClassType(Id(Qv))),param(Id(_D2),ClassType(Id(Qv))),param(Id(_5_),ClassType(Id(Qv))),param(Id(_Fx0),ClassType(Id(Qv)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 831))

    def test_832(self):
        line = '''Class SP_:_6{Constructor (_0,_,V,_:m;_,_:_;_,_CL3M:Array [Array [Array [Int ,56],02],0X12];_8:Float ;Q,__x7,_:Array [Boolean ,040];s0tU,_:Array [Boolean ,0xF3];_3A:Array [Array [Array [Int ,2],56],0x53]){Return ;} }'''
        expect = '''Program([ClassDecl(Id(SP_),Id(_6),[MethodDecl(Id(Constructor),Instance,[param(Id(_0),ClassType(Id(m))),param(Id(_),ClassType(Id(m))),param(Id(V),ClassType(Id(m))),param(Id(_),ClassType(Id(m))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(18,ArrayType(2,ArrayType(56,IntType)))),param(Id(_CL3M),ArrayType(18,ArrayType(2,ArrayType(56,IntType)))),param(Id(_8),FloatType),param(Id(Q),ArrayType(32,BoolType)),param(Id(__x7),ArrayType(32,BoolType)),param(Id(_),ArrayType(32,BoolType)),param(Id(s0tU),ArrayType(243,BoolType)),param(Id(_),ArrayType(243,BoolType)),param(Id(_3A),ArrayType(83,ArrayType(56,ArrayType(2,IntType))))],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 832))

    def test_833(self):
        line = '''Class W:_2g_{}Class _:_q{Destructor (){Val w_3_,A,Y5_,mts_U,_,_WEsd,u:_W_;}Val $_:Array [String ,01_75];Destructor (){Break ;Continue ;}_(_94:Float ;_g:B2){} }Class _:__{Destructor (){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(W),Id(_2g_),[]),ClassDecl(Id(_),Id(_q),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(w_3_),ClassType(Id(_W_)),NullLiteral()),ConstDecl(Id(A),ClassType(Id(_W_)),NullLiteral()),ConstDecl(Id(Y5_),ClassType(Id(_W_)),NullLiteral()),ConstDecl(Id(mts_U),ClassType(Id(_W_)),NullLiteral()),ConstDecl(Id(_),ClassType(Id(_W_)),NullLiteral()),ConstDecl(Id(_WEsd),ClassType(Id(_W_)),NullLiteral()),ConstDecl(Id(u),ClassType(Id(_W_)),NullLiteral())])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(125,StringType),None)),MethodDecl(Id(Destructor),Instance,[],Block([Break,Continue])),MethodDecl(Id(_),Instance,[param(Id(_94),FloatType),param(Id(_g),ClassType(Id(B2)))],Block([]))]),ClassDecl(Id(_),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 833))

    def test_834(self):
        line = '''Class g:_{Val $_,$_:Array [Array [Array [Boolean ,0b11011],0x20],01];$2_(F,jn_,m:Array [Array [Array [Array [Boolean ,0130],0X37],2],0445_0];_,_,b_,__8:CrMz;f,_3u,G,_8_8k:Array [Array [Array [Boolean ,0X37],6_8],05];io,_:Array [Array [Array [Array [Boolean ,0xA7],0130],0x9],0X37];_:Array [Int ,79];__:Array [String ,0x1]){} }'''
        expect = '''Program([ClassDecl(Id(g),Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(1,ArrayType(32,ArrayType(27,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(1,ArrayType(32,ArrayType(27,BoolType))),None)),MethodDecl(Id($2_),Static,[param(Id(F),ArrayType(2344,ArrayType(2,ArrayType(55,ArrayType(88,BoolType))))),param(Id(jn_),ArrayType(2344,ArrayType(2,ArrayType(55,ArrayType(88,BoolType))))),param(Id(m),ArrayType(2344,ArrayType(2,ArrayType(55,ArrayType(88,BoolType))))),param(Id(_),ClassType(Id(CrMz))),param(Id(_),ClassType(Id(CrMz))),param(Id(b_),ClassType(Id(CrMz))),param(Id(__8),ClassType(Id(CrMz))),param(Id(f),ArrayType(5,ArrayType(68,ArrayType(55,BoolType)))),param(Id(_3u),ArrayType(5,ArrayType(68,ArrayType(55,BoolType)))),param(Id(G),ArrayType(5,ArrayType(68,ArrayType(55,BoolType)))),param(Id(_8_8k),ArrayType(5,ArrayType(68,ArrayType(55,BoolType)))),param(Id(io),ArrayType(55,ArrayType(9,ArrayType(88,ArrayType(167,BoolType))))),param(Id(_),ArrayType(55,ArrayType(9,ArrayType(88,ArrayType(167,BoolType))))),param(Id(_),ArrayType(79,IntType)),param(Id(__),ArrayType(1,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 834))

    def test_835(self):
        line = '''Class l05_z{Destructor (){Var C,_I_2_66,D:_o;}Val $dl,_,$tr_,$0:Int ;}Class k_:_5{Var A__,$R8,$C___:Array [Array [Float ,0140],0140];}Class J{Constructor (B5,_,J__:Array [String ,0X1C]){}Val $_37:Array [Int ,0B111];}'''
        expect = '''Program([ClassDecl(Id(l05_z),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(C),ClassType(Id(_o)),NullLiteral()),VarDecl(Id(_I_2_66),ClassType(Id(_o)),NullLiteral()),VarDecl(Id(D),ClassType(Id(_o)),NullLiteral())])),AttributeDecl(Static,ConstDecl(Id($dl),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($tr_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($0),IntType,None))]),ClassDecl(Id(k_),Id(_5),[AttributeDecl(Instance,VarDecl(Id(A__),ArrayType(96,ArrayType(96,FloatType)))),AttributeDecl(Static,VarDecl(Id($R8),ArrayType(96,ArrayType(96,FloatType)))),AttributeDecl(Static,VarDecl(Id($C___),ArrayType(96,ArrayType(96,FloatType))))]),ClassDecl(Id(J),[MethodDecl(Id(Constructor),Instance,[param(Id(B5),ArrayType(28,StringType)),param(Id(_),ArrayType(28,StringType)),param(Id(J__),ArrayType(28,StringType))],Block([])),AttributeDecl(Static,ConstDecl(Id($_37),ArrayType(7,IntType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 835))

    def test_836(self):
        line = '''Class G{$0(w:Array [Boolean ,69];q,BS:Array [Array [Float ,0XE3],0b1110];_:Float ){Continue ;} }Class __{Constructor (O:Float ;__FG:yl78){} }Class M{Var $_,$6_,_h:Array [Boolean ,7];}'''
        expect = '''Program([ClassDecl(Id(G),[MethodDecl(Id($0),Static,[param(Id(w),ArrayType(69,BoolType)),param(Id(q),ArrayType(14,ArrayType(227,FloatType))),param(Id(BS),ArrayType(14,ArrayType(227,FloatType))),param(Id(_),FloatType)],Block([Continue]))]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(O),FloatType),param(Id(__FG),ClassType(Id(yl78)))],Block([]))]),ClassDecl(Id(M),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(7,BoolType))),AttributeDecl(Static,VarDecl(Id($6_),ArrayType(7,BoolType))),AttributeDecl(Instance,VarDecl(Id(_h),ArrayType(7,BoolType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 836))

    def test_837(self):
        line = '''Class z{}Class __{Constructor (T,FS:Array [String ,5];P:String ;_,kS9S,_:l;Ht:__){Var _P7:d;}Destructor (){} }Class cI_{$D(){__::$L20_69();}Val $X65,$G9Ju,$_,o:Array [Boolean ,0B1000111];}'''
        expect = '''Program([ClassDecl(Id(z),[]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(T),ArrayType(5,StringType)),param(Id(FS),ArrayType(5,StringType)),param(Id(P),StringType),param(Id(_),ClassType(Id(l))),param(Id(kS9S),ClassType(Id(l))),param(Id(_),ClassType(Id(l))),param(Id(Ht),ClassType(Id(__)))],Block([VarDecl(Id(_P7),ClassType(Id(d)),NullLiteral())])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(cI_),[MethodDecl(Id($D),Static,[],Block([Call(Id(__),Id($L20_69),[])])),AttributeDecl(Static,ConstDecl(Id($X65),ArrayType(71,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($G9Ju),ArrayType(71,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(71,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(o),ArrayType(71,BoolType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 837))

    def test_838(self):
        line = '''Class T{Constructor (_2,C:Array [Array [String ,0x63],0b110]){}Constructor (_9:Float ;t,_:Array [String ,0B1];rw,_5,_V:Array [Int ,0B1_101_00];_3:Array [Boolean ,0XB]){} }Class _w:T_b{Var $9U,W,$N__:Array [Array [Array [Array [Array [Boolean ,0XA],0xF],05],01],0b110];}'''
        expect = '''Program([ClassDecl(Id(T),[MethodDecl(Id(Constructor),Instance,[param(Id(_2),ArrayType(6,ArrayType(99,StringType))),param(Id(C),ArrayType(6,ArrayType(99,StringType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_9),FloatType),param(Id(t),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(rw),ArrayType(52,IntType)),param(Id(_5),ArrayType(52,IntType)),param(Id(_V),ArrayType(52,IntType)),param(Id(_3),ArrayType(11,BoolType))],Block([]))]),ClassDecl(Id(_w),Id(T_b),[AttributeDecl(Static,VarDecl(Id($9U),ArrayType(6,ArrayType(1,ArrayType(5,ArrayType(15,ArrayType(10,BoolType))))))),AttributeDecl(Instance,VarDecl(Id(W),ArrayType(6,ArrayType(1,ArrayType(5,ArrayType(15,ArrayType(10,BoolType))))))),AttributeDecl(Static,VarDecl(Id($N__),ArrayType(6,ArrayType(1,ArrayType(5,ArrayType(15,ArrayType(10,BoolType)))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 838))

    def test_839(self):
        line = '''Class _{}Class w{}Class g0{Destructor (){}Var $_,$__,$1_,_,$5_,_:Array [Float ,03];Constructor (_J_:Array [Float ,68]){I::$__m();}Destructor (){} }Class _{Destructor (){ {} }}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(w),[]),ClassDecl(Id(g0),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(3,FloatType))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(3,FloatType))),AttributeDecl(Static,VarDecl(Id($1_),ArrayType(3,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,FloatType))),AttributeDecl(Static,VarDecl(Id($5_),ArrayType(3,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,FloatType))),MethodDecl(Id(Constructor),Instance,[param(Id(_J_),ArrayType(68,FloatType))],Block([Call(Id(I),Id($__m),[])])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 839))

    def test_840(self):
        line = '''Class U:_{}Class kJ{}Class ___:_2j{A(){}_XC9__(F31:Int ){w.Nr();} }Class _{}Class A5_{Constructor (_,_:_2B9;_7Q:ViL;I_,N:Float ;_:_;_83,X,_:Array [Array [Array [Int ,65],0X5A],0143];V1:Int ;F:CCJ9_){Val __,v:_;}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(U),Id(_),[]),ClassDecl(Id(kJ),[]),ClassDecl(Id(___),Id(_2j),[MethodDecl(Id(A),Instance,[],Block([])),MethodDecl(Id(_XC9__),Instance,[param(Id(F31),IntType)],Block([Call(Id(w),Id(Nr),[])]))]),ClassDecl(Id(_),[]),ClassDecl(Id(A5_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_2B9))),param(Id(_),ClassType(Id(_2B9))),param(Id(_7Q),ClassType(Id(ViL))),param(Id(I_),FloatType),param(Id(N),FloatType),param(Id(_),ClassType(Id(_))),param(Id(_83),ArrayType(99,ArrayType(90,ArrayType(65,IntType)))),param(Id(X),ArrayType(99,ArrayType(90,ArrayType(65,IntType)))),param(Id(_),ArrayType(99,ArrayType(90,ArrayType(65,IntType)))),param(Id(V1),IntType),param(Id(F),ClassType(Id(CCJ9_)))],Block([ConstDecl(Id(__),ClassType(Id(_)),NullLiteral()),ConstDecl(Id(v),ClassType(Id(_)),NullLiteral())])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 840))

    def test_841(self):
        line = '''Class _:_{$_(GvDF_:Array [Float ,0104];_,m7,kh:Array [Array [Array [Float ,0X12],0104],22];Y__x:Array [Array [Array [Float ,0B1],01],0b1001];_:Array [Array [Array [Int ,0X12],5],0X12]){ {}Return ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id($_),Static,[param(Id(GvDF_),ArrayType(68,FloatType)),param(Id(_),ArrayType(22,ArrayType(68,ArrayType(18,FloatType)))),param(Id(m7),ArrayType(22,ArrayType(68,ArrayType(18,FloatType)))),param(Id(kh),ArrayType(22,ArrayType(68,ArrayType(18,FloatType)))),param(Id(Y__x),ArrayType(9,ArrayType(1,ArrayType(1,FloatType)))),param(Id(_),ArrayType(18,ArrayType(5,ArrayType(18,IntType))))],Block([Block([]),Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 841))

    def test_842(self):
        line = '''Class _:L{}Class T0l3{_p(c,S_3,M_:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0B1],0X2B],0b11],0x5A],0b10],0B1],0105],0b11]){Continue ;Continue ;}$_(_:__;_E:Boolean ;Pm:Boolean ){} }Class _K:_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(L),[]),ClassDecl(Id(T0l3),[MethodDecl(Id(_p),Instance,[param(Id(c),ArrayType(3,ArrayType(69,ArrayType(1,ArrayType(2,ArrayType(90,ArrayType(3,ArrayType(43,ArrayType(1,FloatType))))))))),param(Id(S_3),ArrayType(3,ArrayType(69,ArrayType(1,ArrayType(2,ArrayType(90,ArrayType(3,ArrayType(43,ArrayType(1,FloatType))))))))),param(Id(M_),ArrayType(3,ArrayType(69,ArrayType(1,ArrayType(2,ArrayType(90,ArrayType(3,ArrayType(43,ArrayType(1,FloatType)))))))))],Block([Continue,Continue])),MethodDecl(Id($_),Static,[param(Id(_),ClassType(Id(__))),param(Id(_E),BoolType),param(Id(Pm),BoolType)],Block([]))]),ClassDecl(Id(_K),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 842))

    def test_843(self):
        line = '''Class s:U2y{Var $7_,$f,$1:String ;}Class _:_{Val $_,r:__;_(__:z_x9iH_;_,_:Array [Array [Int ,027],0XF_1_C];c,_:Boolean ;Q2_3_0z3_u3,_,c:Array [Int ,8];A,T1,__,_:Boolean ){} }Class s8:M{Constructor (){} }Class o9:_{}Class __{}'''
        expect = '''Program([ClassDecl(Id(s),Id(U2y),[AttributeDecl(Static,VarDecl(Id($7_),StringType)),AttributeDecl(Static,VarDecl(Id($f),StringType)),AttributeDecl(Static,VarDecl(Id($1),StringType))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(r),ClassType(Id(__)),NullLiteral())),MethodDecl(Id(_),Instance,[param(Id(__),ClassType(Id(z_x9iH_))),param(Id(_),ArrayType(3868,ArrayType(23,IntType))),param(Id(_),ArrayType(3868,ArrayType(23,IntType))),param(Id(c),BoolType),param(Id(_),BoolType),param(Id(Q2_3_0z3_u3),ArrayType(8,IntType)),param(Id(_),ArrayType(8,IntType)),param(Id(c),ArrayType(8,IntType)),param(Id(A),BoolType),param(Id(T1),BoolType),param(Id(__),BoolType),param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(s8),Id(M),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(o9),Id(_),[]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 843))

    def test_844(self):
        line = '''Class y7{Var $1:Array [Array [Array [Array [Array [Array [Int ,03_3],0B1000011],8],0XD],0X9],022];}Class _:_{_(F:_65;c,____,__,_6,P_x_,m,y_p,_4X_0:Array [Array [String ,26],0B1_10101]){} }'''
        expect = '''Program([ClassDecl(Id(y7),[AttributeDecl(Static,VarDecl(Id($1),ArrayType(18,ArrayType(9,ArrayType(13,ArrayType(8,ArrayType(67,ArrayType(27,IntType))))))))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(_),Instance,[param(Id(F),ClassType(Id(_65))),param(Id(c),ArrayType(53,ArrayType(26,StringType))),param(Id(____),ArrayType(53,ArrayType(26,StringType))),param(Id(__),ArrayType(53,ArrayType(26,StringType))),param(Id(_6),ArrayType(53,ArrayType(26,StringType))),param(Id(P_x_),ArrayType(53,ArrayType(26,StringType))),param(Id(m),ArrayType(53,ArrayType(26,StringType))),param(Id(y_p),ArrayType(53,ArrayType(26,StringType))),param(Id(_4X_0),ArrayType(53,ArrayType(26,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 844))

    def test_845(self):
        line = '''Class _{}Class z:_E_{Constructor (r:Array [Array [Array [Array [Array [Float ,0X1C],021],0X1C],45],45];i,_,_:Int ){}Destructor (){} }Class A06t_:w__7{}Class F{}Class Q:X{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(z),Id(_E_),[MethodDecl(Id(Constructor),Instance,[param(Id(r),ArrayType(45,ArrayType(45,ArrayType(28,ArrayType(17,ArrayType(28,FloatType)))))),param(Id(i),IntType),param(Id(_),IntType),param(Id(_),IntType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(A06t_),Id(w__7),[]),ClassDecl(Id(F),[]),ClassDecl(Id(Q),Id(X),[])])'''
        self.assertTrue(TestAST.test(line, expect, 845))

    def test_846(self):
        line = '''Class _6:C{}Class C:_{}Class NS_O0_:_{Constructor (_,_,M,___8_V5_59_,_:Array [Array [String ,0X4],0b1]){} }Class _{Constructor (Bg,u,_:String ;_:Float ;B:Array [Array [Float ,0B11000],3];J:Array [Array [String ,0b1110],055];J,_:A){} }Class _{}Class _:De_{}'''
        expect = '''Program([ClassDecl(Id(_6),Id(C),[]),ClassDecl(Id(C),Id(_),[]),ClassDecl(Id(NS_O0_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,ArrayType(4,StringType))),param(Id(_),ArrayType(1,ArrayType(4,StringType))),param(Id(M),ArrayType(1,ArrayType(4,StringType))),param(Id(___8_V5_59_),ArrayType(1,ArrayType(4,StringType))),param(Id(_),ArrayType(1,ArrayType(4,StringType)))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(Bg),StringType),param(Id(u),StringType),param(Id(_),StringType),param(Id(_),FloatType),param(Id(B),ArrayType(3,ArrayType(24,FloatType))),param(Id(J),ArrayType(45,ArrayType(14,StringType))),param(Id(J),ClassType(Id(A))),param(Id(_),ClassType(Id(A)))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(De_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 846))

    def test_847(self):
        line = '''Class G{}Class _:_1{Var $s:Array [Array [Boolean ,0x34],87];Constructor (_,_:Array [Array [Array [Array [Array [Array [Int ,2],87],01_4],0B1],0B11011],0x8_79]){}Destructor (){}Var $1,$q__:Array [Array [Boolean ,063],0B1];}Class _4{Var $c:Float ;}Class _{}'''
        expect = '''Program([ClassDecl(Id(G),[]),ClassDecl(Id(_),Id(_1),[AttributeDecl(Static,VarDecl(Id($s),ArrayType(87,ArrayType(52,BoolType)))),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(2169,ArrayType(27,ArrayType(1,ArrayType(12,ArrayType(87,ArrayType(2,IntType))))))),param(Id(_),ArrayType(2169,ArrayType(27,ArrayType(1,ArrayType(12,ArrayType(87,ArrayType(2,IntType)))))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($1),ArrayType(1,ArrayType(51,BoolType)))),AttributeDecl(Static,VarDecl(Id($q__),ArrayType(1,ArrayType(51,BoolType))))]),ClassDecl(Id(_4),[AttributeDecl(Static,VarDecl(Id($c),FloatType))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 847))

    def test_848(self):
        line = '''Class _:Iz8{Var $_:Array [Array [Array [String ,21],21],21];}Class _2_5__{}Class R{Constructor (nA:E1;_:Int ){ {Val _,_,f,_K:Boolean ;Break ;} }Val $5,$_1_:Array [Array [Boolean ,0xF],046];}'''
        expect = '''Program([ClassDecl(Id(_),Id(Iz8),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(21,ArrayType(21,ArrayType(21,StringType)))))]),ClassDecl(Id(_2_5__),[]),ClassDecl(Id(R),[MethodDecl(Id(Constructor),Instance,[param(Id(nA),ClassType(Id(E1))),param(Id(_),IntType)],Block([Block([ConstDecl(Id(_),BoolType,None),ConstDecl(Id(_),BoolType,None),ConstDecl(Id(f),BoolType,None),ConstDecl(Id(_K),BoolType,None),Break])])),AttributeDecl(Static,ConstDecl(Id($5),ArrayType(38,ArrayType(15,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($_1_),ArrayType(38,ArrayType(15,BoolType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 848))

    def test_849(self):
        line = '''Class _{Var $1,_,$6_,__497:Array [Int ,0x14];Constructor (rjc:Array [Array [String ,5],98];_y:String ;_:Array [Float ,034];I:Float ;_,_44,_:_;_:Array [Float ,0B110010]){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($1),ArrayType(20,IntType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(20,IntType))),AttributeDecl(Static,VarDecl(Id($6_),ArrayType(20,IntType))),AttributeDecl(Instance,VarDecl(Id(__497),ArrayType(20,IntType))),MethodDecl(Id(Constructor),Instance,[param(Id(rjc),ArrayType(98,ArrayType(5,StringType))),param(Id(_y),StringType),param(Id(_),ArrayType(28,FloatType)),param(Id(I),FloatType),param(Id(_),ClassType(Id(_))),param(Id(_44),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(50,FloatType))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 849))

    def test_850(self):
        line = '''Class Z4:g{}Class _:m_{Constructor (){}Constructor (_w_:Float ;_U0,S5w_:Array [Array [Array [Boolean ,922_1],0xE24],0B100101];_4,_6:Array [Array [Boolean ,014],0B100101];_:Array [Int ,07]){} }'''
        expect = '''Program([ClassDecl(Id(Z4),Id(g),[]),ClassDecl(Id(_),Id(m_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_w_),FloatType),param(Id(_U0),ArrayType(37,ArrayType(3620,ArrayType(9221,BoolType)))),param(Id(S5w_),ArrayType(37,ArrayType(3620,ArrayType(9221,BoolType)))),param(Id(_4),ArrayType(37,ArrayType(12,BoolType))),param(Id(_6),ArrayType(37,ArrayType(12,BoolType))),param(Id(_),ArrayType(7,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 850))

    def test_851(self):
        line = '''Class W2{}Class _{Var _8:_;Var _:Array [Array [Float ,0B11],25];Val _,K,__:Array [Array [Array [Array [Array [Array [Array [String ,0X3],0b1],18],0x4D],0B111001],0b1_1],03061];}'''
        expect = '''Program([ClassDecl(Id(W2),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_8),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(25,ArrayType(3,FloatType)))),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1585,ArrayType(3,ArrayType(57,ArrayType(77,ArrayType(18,ArrayType(1,ArrayType(3,StringType))))))),None)),AttributeDecl(Instance,ConstDecl(Id(K),ArrayType(1585,ArrayType(3,ArrayType(57,ArrayType(77,ArrayType(18,ArrayType(1,ArrayType(3,StringType))))))),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(1585,ArrayType(3,ArrayType(57,ArrayType(77,ArrayType(18,ArrayType(1,ArrayType(3,StringType))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 851))

    def test_852(self):
        line = '''Class bpl:Y4242{Constructor (){} }Class _:_5_0_9{}Class _6:_{Constructor (){}Constructor (__,P:Array [Float ,27];_,G8E,_Q_38_1:_;q_:Array [String ,02];M2_:String ){} }Class L{}'''
        expect = '''Program([ClassDecl(Id(bpl),Id(Y4242),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_5_0_9),[]),ClassDecl(Id(_6),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(27,FloatType)),param(Id(P),ArrayType(27,FloatType)),param(Id(_),ClassType(Id(_))),param(Id(G8E),ClassType(Id(_))),param(Id(_Q_38_1),ClassType(Id(_))),param(Id(q_),ArrayType(2,StringType)),param(Id(M2_),StringType)],Block([]))]),ClassDecl(Id(L),[])])'''
        self.assertTrue(TestAST.test(line, expect, 852))

    def test_853(self):
        line = '''Class _:G{c(_:ZH_;U,S,nm5:Array [Array [Array [Array [Array [String ,010],010],0B101001],06_1],0xA];e:Int ;_:___lS){Continue ;}Var $e,k,$_I,$Rc,$Z,$_:_;Constructor (_:p;X_N_,E3qEYN__31,R:Array [Float ,0B101001];__:Int ;_,_,r:Boolean ){Break ;}Val ZU,$RS:Array [Int ,0b100101];}Class G{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_),Id(G),[MethodDecl(Id(c),Instance,[param(Id(_),ClassType(Id(ZH_))),param(Id(U),ArrayType(10,ArrayType(49,ArrayType(41,ArrayType(8,ArrayType(8,StringType)))))),param(Id(S),ArrayType(10,ArrayType(49,ArrayType(41,ArrayType(8,ArrayType(8,StringType)))))),param(Id(nm5),ArrayType(10,ArrayType(49,ArrayType(41,ArrayType(8,ArrayType(8,StringType)))))),param(Id(e),IntType),param(Id(_),ClassType(Id(___lS)))],Block([Continue])),AttributeDecl(Static,VarDecl(Id($e),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(k),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_I),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($Rc),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($Z),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(p))),param(Id(X_N_),ArrayType(41,FloatType)),param(Id(E3qEYN__31),ArrayType(41,FloatType)),param(Id(R),ArrayType(41,FloatType)),param(Id(__),IntType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(r),BoolType)],Block([Break])),AttributeDecl(Instance,ConstDecl(Id(ZU),ArrayType(37,IntType),None)),AttributeDecl(Static,ConstDecl(Id($RS),ArrayType(37,IntType),None))]),ClassDecl(Id(G),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 853))

    def test_854(self):
        line = '''Class _:J{}Class p9:N_{Constructor (){}Constructor (_6,_0:q6;q,_40,__:Float ){}Constructor (_2:_53__;Wo1,__,rz:m;_r:String ;_:_8_;__e__Q__,Ptp,_:Array [Array [Array [Float ,1277],03_5_7_6],8];_Q_kk:G){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(J),[]),ClassDecl(Id(p9),Id(N_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_6),ClassType(Id(q6))),param(Id(_0),ClassType(Id(q6))),param(Id(q),FloatType),param(Id(_40),FloatType),param(Id(__),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_2),ClassType(Id(_53__))),param(Id(Wo1),ClassType(Id(m))),param(Id(__),ClassType(Id(m))),param(Id(rz),ClassType(Id(m))),param(Id(_r),StringType),param(Id(_),ClassType(Id(_8_))),param(Id(__e__Q__),ArrayType(8,ArrayType(1918,ArrayType(1277,FloatType)))),param(Id(Ptp),ArrayType(8,ArrayType(1918,ArrayType(1277,FloatType)))),param(Id(_),ArrayType(8,ArrayType(1918,ArrayType(1277,FloatType)))),param(Id(_Q_kk),ClassType(Id(G)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 854))

    def test_855(self):
        line = '''Class s{Constructor (_,_,_q,_,_:J_;_v_5,_0:ir;_:Array [Float ,9_5];_,T,_:C;_,__:_;k0_:Array [String ,6];Yf,__0:Array [Array [Array [String ,0b1001100],05_2],37];_:q_){}Val _3,n_J__2,$v,$__:__2;Val TI:Q;}'''
        expect = '''Program([ClassDecl(Id(s),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(J_))),param(Id(_),ClassType(Id(J_))),param(Id(_q),ClassType(Id(J_))),param(Id(_),ClassType(Id(J_))),param(Id(_),ClassType(Id(J_))),param(Id(_v_5),ClassType(Id(ir))),param(Id(_0),ClassType(Id(ir))),param(Id(_),ArrayType(95,FloatType)),param(Id(_),ClassType(Id(C))),param(Id(T),ClassType(Id(C))),param(Id(_),ClassType(Id(C))),param(Id(_),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(k0_),ArrayType(6,StringType)),param(Id(Yf),ArrayType(37,ArrayType(42,ArrayType(76,StringType)))),param(Id(__0),ArrayType(37,ArrayType(42,ArrayType(76,StringType)))),param(Id(_),ClassType(Id(q_)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_3),ClassType(Id(__2)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(n_J__2),ClassType(Id(__2)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($v),ClassType(Id(__2)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(__2)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(TI),ClassType(Id(Q)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 855))

    def test_856(self):
        line = '''Class _{Val $j,____,$T0,_:String ;Var $_:_m_;Destructor (){Val F:String ;}Val $_,$____U,d,$6x,$Fb:Array [Boolean ,0x4F];}Class _T{Var p9_,$do9s27_p_8,_b:Array [Float ,6];}Class V_:nGL{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($j),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(____),StringType,None)),AttributeDecl(Static,ConstDecl(Id($T0),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_m_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(F),StringType,None)])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(79,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($____U),ArrayType(79,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(d),ArrayType(79,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($6x),ArrayType(79,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($Fb),ArrayType(79,BoolType),None))]),ClassDecl(Id(_T),[AttributeDecl(Instance,VarDecl(Id(p9_),ArrayType(6,FloatType))),AttributeDecl(Static,VarDecl(Id($do9s27_p_8),ArrayType(6,FloatType))),AttributeDecl(Instance,VarDecl(Id(_b),ArrayType(6,FloatType)))]),ClassDecl(Id(V_),Id(nGL),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 856))

    def test_857(self):
        line = '''Class _{Destructor (){} }Class v:V{Var _,S:Float ;Var o_:Array [Float ,076];}Class s{}Class sa{}Class e__5:_{}Class j:v_{}Class R:l3{}Class __:_{}Class Ut:__4{}Class __:_{Var $__m_97Ur_01,$_83:Int ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(v),Id(V),[AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Instance,VarDecl(Id(S),FloatType)),AttributeDecl(Instance,VarDecl(Id(o_),ArrayType(62,FloatType)))]),ClassDecl(Id(s),[]),ClassDecl(Id(sa),[]),ClassDecl(Id(e__5),Id(_),[]),ClassDecl(Id(j),Id(v_),[]),ClassDecl(Id(R),Id(l3),[]),ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(Ut),Id(__4),[]),ClassDecl(Id(__),Id(_),[AttributeDecl(Static,VarDecl(Id($__m_97Ur_01),IntType)),AttributeDecl(Static,VarDecl(Id($_83),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 857))

    def test_858(self):
        line = '''Class _:e{Constructor (A,_:Int ;XXA1Ja_,Q_5K__,e:Array [Array [String ,0b110110],0X29];p,q,x,I1Q:__C_;Q_:Array [Array [Array [Array [Array [Array [Boolean ,0104],0XF],01],0B1011011],0X9],42]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(e),[MethodDecl(Id(Constructor),Instance,[param(Id(A),IntType),param(Id(_),IntType),param(Id(XXA1Ja_),ArrayType(41,ArrayType(54,StringType))),param(Id(Q_5K__),ArrayType(41,ArrayType(54,StringType))),param(Id(e),ArrayType(41,ArrayType(54,StringType))),param(Id(p),ClassType(Id(__C_))),param(Id(q),ClassType(Id(__C_))),param(Id(x),ClassType(Id(__C_))),param(Id(I1Q),ClassType(Id(__C_))),param(Id(Q_),ArrayType(42,ArrayType(9,ArrayType(91,ArrayType(1,ArrayType(15,ArrayType(68,BoolType)))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 858))

    def test_859(self):
        line = '''Class _cr:q_{Var X_,$_dD5,_,$a:Array [Array [Array [Array [Array [String ,0B111111],0XB],0b1],57],01];}Class _b_:_OP_{Destructor (){}Val $F,$_,_,K_7_h:Array [Array [Array [Array [Array [Int ,0XB],0B111111],065],06],17];}Class w{$_(_:I;_7,H:_OTy){} }Class __{}Class __:__8d{}'''
        expect = '''Program([ClassDecl(Id(_cr),Id(q_),[AttributeDecl(Instance,VarDecl(Id(X_),ArrayType(1,ArrayType(57,ArrayType(1,ArrayType(11,ArrayType(63,StringType))))))),AttributeDecl(Static,VarDecl(Id($_dD5),ArrayType(1,ArrayType(57,ArrayType(1,ArrayType(11,ArrayType(63,StringType))))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,ArrayType(57,ArrayType(1,ArrayType(11,ArrayType(63,StringType))))))),AttributeDecl(Static,VarDecl(Id($a),ArrayType(1,ArrayType(57,ArrayType(1,ArrayType(11,ArrayType(63,StringType)))))))]),ClassDecl(Id(_b_),Id(_OP_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($F),ArrayType(17,ArrayType(6,ArrayType(53,ArrayType(63,ArrayType(11,IntType))))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(17,ArrayType(6,ArrayType(53,ArrayType(63,ArrayType(11,IntType))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(17,ArrayType(6,ArrayType(53,ArrayType(63,ArrayType(11,IntType))))),None)),AttributeDecl(Instance,ConstDecl(Id(K_7_h),ArrayType(17,ArrayType(6,ArrayType(53,ArrayType(63,ArrayType(11,IntType))))),None))]),ClassDecl(Id(w),[MethodDecl(Id($_),Static,[param(Id(_),ClassType(Id(I))),param(Id(_7),ClassType(Id(_OTy))),param(Id(H),ClassType(Id(_OTy)))],Block([]))]),ClassDecl(Id(__),[]),ClassDecl(Id(__),Id(__8d),[])])'''
        self.assertTrue(TestAST.test(line, expect, 859))

    def test_860(self):
        line = '''Class _6{Destructor (){} }Class t0_{Val $_1:Array [Float ,0X56];}Class _:_{Var _:Array [Boolean ,0b11111];Val $n8:Array [String ,0B100010];}Class _F:_{}Class mAD8H3:_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_6),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(t0_),[AttributeDecl(Static,ConstDecl(Id($_1),ArrayType(86,FloatType),None))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(31,BoolType))),AttributeDecl(Static,ConstDecl(Id($n8),ArrayType(34,StringType),None))]),ClassDecl(Id(_F),Id(_),[]),ClassDecl(Id(mAD8H3),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 860))

    def test_861(self):
        line = '''Class jR{}Class __{Destructor (){Continue ;}Destructor (){} }Class U:_{}Class v8_{}Class d_{z(){} }Class SEJ{Destructor (){}$g6(g:Array [String ,0B10100];h,_3_:Boolean ){}Val _,_,$_,_nV2__,S:_;$t0Q4(_k_G8:Array [Boolean ,0137]){} }'''
        expect = '''Program([ClassDecl(Id(jR),[]),ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(U),Id(_),[]),ClassDecl(Id(v8_),[]),ClassDecl(Id(d_),[MethodDecl(Id(z),Instance,[],Block([]))]),ClassDecl(Id(SEJ),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($g6),Static,[param(Id(g),ArrayType(20,StringType)),param(Id(h),BoolType),param(Id(_3_),BoolType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_nV2__),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(S),ClassType(Id(_)),NullLiteral())),MethodDecl(Id($t0Q4),Static,[param(Id(_k_G8),ArrayType(95,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 861))

    def test_862(self):
        line = '''Class _F{}Class __BN{}Class K_9{}Class _:st2{Constructor (){} }Class ___rg9_m:_R{Val __2:k;Constructor (){}Constructor (){}Var E,_0_9,$6:Array [Boolean ,89];Val M5B,_:String ;}'''
        expect = '''Program([ClassDecl(Id(_F),[]),ClassDecl(Id(__BN),[]),ClassDecl(Id(K_9),[]),ClassDecl(Id(_),Id(st2),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(___rg9_m),Id(_R),[AttributeDecl(Instance,ConstDecl(Id(__2),ClassType(Id(k)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(E),ArrayType(89,BoolType))),AttributeDecl(Instance,VarDecl(Id(_0_9),ArrayType(89,BoolType))),AttributeDecl(Static,VarDecl(Id($6),ArrayType(89,BoolType))),AttributeDecl(Instance,ConstDecl(Id(M5B),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 862))

    def test_863(self):
        line = '''Class N0{Var _O20,_,$qh8w__:Array [Array [Array [Array [Float ,06],0112],0x93],11];$4(_:Array [Float ,03]){} }Class _9{Val _,pvH:Array [Array [Boolean ,3_3],0b110011];}Class _{}'''
        expect = '''Program([ClassDecl(Id(N0),[AttributeDecl(Instance,VarDecl(Id(_O20),ArrayType(11,ArrayType(147,ArrayType(74,ArrayType(6,FloatType)))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(11,ArrayType(147,ArrayType(74,ArrayType(6,FloatType)))))),AttributeDecl(Static,VarDecl(Id($qh8w__),ArrayType(11,ArrayType(147,ArrayType(74,ArrayType(6,FloatType)))))),MethodDecl(Id($4),Static,[param(Id(_),ArrayType(3,FloatType))],Block([]))]),ClassDecl(Id(_9),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(51,ArrayType(33,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(pvH),ArrayType(51,ArrayType(33,BoolType)),None))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 863))

    def test_864(self):
        line = '''Class ___2__0_:X8T{}Class _:Y{}Class f85__i3_:r{Var _a:Boolean ;}Class i{_(y__,_M_:Array [Array [Int ,04],5_15];T__:Array [Array [Array [Array [String ,0B100000],59],0B100000],0105];_:Array [Array [Array [Float ,2],0b1011001],0X3]){Return ;_::$_43_();Continue ;Break ;} }'''
        expect = '''Program([ClassDecl(Id(___2__0_),Id(X8T),[]),ClassDecl(Id(_),Id(Y),[]),ClassDecl(Id(f85__i3_),Id(r),[AttributeDecl(Instance,VarDecl(Id(_a),BoolType))]),ClassDecl(Id(i),[MethodDecl(Id(_),Instance,[param(Id(y__),ArrayType(515,ArrayType(4,IntType))),param(Id(_M_),ArrayType(515,ArrayType(4,IntType))),param(Id(T__),ArrayType(69,ArrayType(32,ArrayType(59,ArrayType(32,StringType))))),param(Id(_),ArrayType(3,ArrayType(89,ArrayType(2,FloatType))))],Block([Return(),Call(Id(_),Id($_43_),[]),Continue,Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 864))

    def test_865(self):
        line = '''Class z8_{}Class o{Val $__,_,$3,$X,$B97:Array [Boolean ,0X22];Destructor (){}Val _h,cg:L;__nw(A_906:Array [Boolean ,0x1D];_N:Array [Array [Float ,0X22],027];b2:Int ;H:Boolean ;A4b,__w_:Array [Float ,15]){} }'''
        expect = '''Program([ClassDecl(Id(z8_),[]),ClassDecl(Id(o),[AttributeDecl(Static,ConstDecl(Id($__),ArrayType(34,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(34,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($3),ArrayType(34,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($X),ArrayType(34,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($B97),ArrayType(34,BoolType),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_h),ClassType(Id(L)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(cg),ClassType(Id(L)),NullLiteral())),MethodDecl(Id(__nw),Instance,[param(Id(A_906),ArrayType(29,BoolType)),param(Id(_N),ArrayType(23,ArrayType(34,FloatType))),param(Id(b2),IntType),param(Id(H),BoolType),param(Id(A4b),ArrayType(15,FloatType)),param(Id(__w_),ArrayType(15,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 865))

    def test_866(self):
        line = '''Class ___1D{Var __,$__:_1;}Class T3:_37c_266{Val _,_4:Int ;Constructor (G_,_3,k6_8,AU,G,_:Array [Boolean ,0x8];b,i,o:Boolean ;___5WI_0_5s:Int ){}Var v_2,$U:_R_;Var _:Array [Float ,0b1_0_1_1];_(){}Constructor (n,C9_:y_){}Val $c:Array [Boolean ,85];}'''
        expect = '''Program([ClassDecl(Id(___1D),[AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(_1)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(_1)),NullLiteral()))]),ClassDecl(Id(T3),Id(_37c_266),[AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_4),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(G_),ArrayType(8,BoolType)),param(Id(_3),ArrayType(8,BoolType)),param(Id(k6_8),ArrayType(8,BoolType)),param(Id(AU),ArrayType(8,BoolType)),param(Id(G),ArrayType(8,BoolType)),param(Id(_),ArrayType(8,BoolType)),param(Id(b),BoolType),param(Id(i),BoolType),param(Id(o),BoolType),param(Id(___5WI_0_5s),IntType)],Block([])),AttributeDecl(Instance,VarDecl(Id(v_2),ClassType(Id(_R_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($U),ClassType(Id(_R_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(11,FloatType))),MethodDecl(Id(_),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(n),ClassType(Id(y_))),param(Id(C9_),ClassType(Id(y_)))],Block([])),AttributeDecl(Static,ConstDecl(Id($c),ArrayType(85,BoolType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 866))

    def test_867(self):
        line = '''Class Q{Constructor (_0:Int ;_,z,_2:Boolean ;__:Int ;_:Array [Int ,066];d3s:Array [Array [Boolean ,0X2A],0xA1]){}Val _:String ;__(c_Uv:Array [Boolean ,41];qf__:K_2fJ){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(Q),[MethodDecl(Id(Constructor),Instance,[param(Id(_0),IntType),param(Id(_),BoolType),param(Id(z),BoolType),param(Id(_2),BoolType),param(Id(__),IntType),param(Id(_),ArrayType(54,IntType)),param(Id(d3s),ArrayType(161,ArrayType(42,BoolType)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),MethodDecl(Id(__),Instance,[param(Id(c_Uv),ArrayType(41,BoolType)),param(Id(qf__),ClassType(Id(K_2fJ)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 867))

    def test_868(self):
        line = '''Class ___k5__K_5_0{}Class _6Xc:u6O{$_t(_,_:Array [String ,0X4E]){}Val $_2:_;Var $8_,$U:Array [Array [String ,0xA],0x9];}Class A48A:t{}Class _:N{Var $_:Int ;Destructor (){} }Class m{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(___k5__K_5_0),[]),ClassDecl(Id(_6Xc),Id(u6O),[MethodDecl(Id($_t),Static,[param(Id(_),ArrayType(78,StringType)),param(Id(_),ArrayType(78,StringType))],Block([])),AttributeDecl(Static,ConstDecl(Id($_2),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($8_),ArrayType(9,ArrayType(10,StringType)))),AttributeDecl(Static,VarDecl(Id($U),ArrayType(9,ArrayType(10,StringType))))]),ClassDecl(Id(A48A),Id(t),[]),ClassDecl(Id(_),Id(N),[AttributeDecl(Static,VarDecl(Id($_),IntType)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(m),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 868))

    def test_869(self):
        line = '''Class j2{Val $Si,D_:Array [Float ,0XF];Var g:String ;}Class _:W{}Class Uzb_3:__u_{Constructor (b8:E;_,_:Array [Array [Boolean ,0x3D],85]){Return ;}Val e__,X_3,$_35_5x:Int ;}Class d{}Class _:_O{}'''
        expect = '''Program([ClassDecl(Id(j2),[AttributeDecl(Static,ConstDecl(Id($Si),ArrayType(15,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(D_),ArrayType(15,FloatType),None)),AttributeDecl(Instance,VarDecl(Id(g),StringType))]),ClassDecl(Id(_),Id(W),[]),ClassDecl(Id(Uzb_3),Id(__u_),[MethodDecl(Id(Constructor),Instance,[param(Id(b8),ClassType(Id(E))),param(Id(_),ArrayType(85,ArrayType(61,BoolType))),param(Id(_),ArrayType(85,ArrayType(61,BoolType)))],Block([Return()])),AttributeDecl(Instance,ConstDecl(Id(e__),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(X_3),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_35_5x),IntType,None))]),ClassDecl(Id(d),[]),ClassDecl(Id(_),Id(_O),[])])'''
        self.assertTrue(TestAST.test(line, expect, 869))

    def test_870(self):
        line = '''Class v{}Class SO_H0{}Class r_:e_{Y(__:Int ;O_,v5:_;ke3,_We,E2_9__C:_L;T,I,_,K,_6Z,iJ,_g6_v,O,AI,U5,_,_,VF57_:Array [Boolean ,0b1];_,V_,F8:Array [Array [String ,0b10011],032];_:k98;_,_Gb_:_){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(v),[]),ClassDecl(Id(SO_H0),[]),ClassDecl(Id(r_),Id(e_),[MethodDecl(Id(Y),Instance,[param(Id(__),IntType),param(Id(O_),ClassType(Id(_))),param(Id(v5),ClassType(Id(_))),param(Id(ke3),ClassType(Id(_L))),param(Id(_We),ClassType(Id(_L))),param(Id(E2_9__C),ClassType(Id(_L))),param(Id(T),ArrayType(1,BoolType)),param(Id(I),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType)),param(Id(K),ArrayType(1,BoolType)),param(Id(_6Z),ArrayType(1,BoolType)),param(Id(iJ),ArrayType(1,BoolType)),param(Id(_g6_v),ArrayType(1,BoolType)),param(Id(O),ArrayType(1,BoolType)),param(Id(AI),ArrayType(1,BoolType)),param(Id(U5),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType)),param(Id(VF57_),ArrayType(1,BoolType)),param(Id(_),ArrayType(26,ArrayType(19,StringType))),param(Id(V_),ArrayType(26,ArrayType(19,StringType))),param(Id(F8),ArrayType(26,ArrayType(19,StringType))),param(Id(_),ClassType(Id(k98))),param(Id(_),ClassType(Id(_))),param(Id(_Gb_),ClassType(Id(_)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 870))

    def test_871(self):
        line = '''Class _:T8{Destructor (){} }Class i:_4{Var I5,N:Array [Float ,012];_3(l:String ;_:e;z_r2j,m,_:Array [Array [Float ,0b1010110],72];_,_:_;_,_:Int ){}Constructor (){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(T8),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(i),Id(_4),[AttributeDecl(Instance,VarDecl(Id(I5),ArrayType(10,FloatType))),AttributeDecl(Instance,VarDecl(Id(N),ArrayType(10,FloatType))),MethodDecl(Id(_3),Instance,[param(Id(l),StringType),param(Id(_),ClassType(Id(e))),param(Id(z_r2j),ArrayType(72,ArrayType(86,FloatType))),param(Id(m),ArrayType(72,ArrayType(86,FloatType))),param(Id(_),ArrayType(72,ArrayType(86,FloatType))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),IntType),param(Id(_),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 871))

    def test_872(self):
        line = '''Class J8:I{$3(Q19_,_3:Array [Array [String ,0B1100000],0x3D];__,___Q66,g,_6_0s:Array [Boolean ,0xC]){}Val l:Float ;}Class _:LD{}Class C:_H_{Val $_J,W:Array [Array [Int ,0x6_F],23];}'''
        expect = '''Program([ClassDecl(Id(J8),Id(I),[MethodDecl(Id($3),Static,[param(Id(Q19_),ArrayType(61,ArrayType(96,StringType))),param(Id(_3),ArrayType(61,ArrayType(96,StringType))),param(Id(__),ArrayType(12,BoolType)),param(Id(___Q66),ArrayType(12,BoolType)),param(Id(g),ArrayType(12,BoolType)),param(Id(_6_0s),ArrayType(12,BoolType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(l),FloatType,None))]),ClassDecl(Id(_),Id(LD),[]),ClassDecl(Id(C),Id(_H_),[AttributeDecl(Static,ConstDecl(Id($_J),ArrayType(23,ArrayType(111,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(W),ArrayType(23,ArrayType(111,IntType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 872))

    def test_873(self):
        line = '''Class _q:_{}Class _{Val zv_:Array [Array [Array [Array [Int ,0B111_01_11],0B110_00_1_0],6],0b1_1_0]=!0.8E56.bL.x().jL.m().HQ._b29._B7._;Constructor (_0_a_:b;g:Float ;_,C,YEP3,_64,B:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_q),Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(zv_),ArrayType(6,ArrayType(6,ArrayType(98,ArrayType(119,IntType)))),UnaryOp(!,FieldAccess(FieldAccess(FieldAccess(FieldAccess(CallExpr(FieldAccess(CallExpr(FieldAccess(FloatLit(8e+55),Id(bL)),Id(x),[]),Id(jL)),Id(m),[]),Id(HQ)),Id(_b29)),Id(_B7)),Id(_))))),MethodDecl(Id(Constructor),Instance,[param(Id(_0_a_),ClassType(Id(b))),param(Id(g),FloatType),param(Id(_),IntType),param(Id(C),IntType),param(Id(YEP3),IntType),param(Id(_64),IntType),param(Id(B),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 873))

    def test_874(self):
        line = '''Class _:_{Destructor (){} }Class A_Ao:IPT{V(X,_N:Float ;_,__h,XdW2vr,_,T_:Float ;t,d:Array [Array [Boolean ,0B101],0B1]){ {Val H:Array [Array [Array [Int ,045],21],0X12];} }}Class K_:P6{Val $_Pn:Array [Array [Boolean ,06],046_4_0_1_42_5];Val $1:Float ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(A_Ao),Id(IPT),[MethodDecl(Id(V),Instance,[param(Id(X),FloatType),param(Id(_N),FloatType),param(Id(_),FloatType),param(Id(__h),FloatType),param(Id(XdW2vr),FloatType),param(Id(_),FloatType),param(Id(T_),FloatType),param(Id(t),ArrayType(1,ArrayType(5,BoolType))),param(Id(d),ArrayType(1,ArrayType(5,BoolType)))],Block([Block([ConstDecl(Id(H),ArrayType(18,ArrayType(21,ArrayType(37,IntType))),None)])]))]),ClassDecl(Id(K_),Id(P6),[AttributeDecl(Static,ConstDecl(Id($_Pn),ArrayType(10093333,ArrayType(6,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($1),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 874))

    def test_875(self):
        line = '''Class _:__7_E0{Val $_45,_:Hn_;}Class V{Destructor (){} }Class __:__S{Constructor (__Y7:_f;_39:_;w,c:Array [String ,0x3F];O:etu){Continue ;}Constructor (_PR_:A){Var g:Array [Array [Float ,2_4],0xF_0];} }Class _:_Y{}'''
        expect = '''Program([ClassDecl(Id(_),Id(__7_E0),[AttributeDecl(Static,ConstDecl(Id($_45),ClassType(Id(Hn_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(Hn_)),NullLiteral()))]),ClassDecl(Id(V),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),Id(__S),[MethodDecl(Id(Constructor),Instance,[param(Id(__Y7),ClassType(Id(_f))),param(Id(_39),ClassType(Id(_))),param(Id(w),ArrayType(63,StringType)),param(Id(c),ArrayType(63,StringType)),param(Id(O),ClassType(Id(etu)))],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_PR_),ClassType(Id(A)))],Block([VarDecl(Id(g),ArrayType(240,ArrayType(24,FloatType)))]))]),ClassDecl(Id(_),Id(_Y),[])])'''
        self.assertTrue(TestAST.test(line, expect, 875))

    def test_876(self):
        line = '''Class _7h24:M{}Class __4_{}Class z{Var $2z1,_,$_,$_6_,_,_:j;Constructor (S7:Array [Array [Array [Array [Float ,0115],0x5C],0b1111],0B11010]){}Val d:Float ;Destructor (){} }Class bj{}'''
        expect = '''Program([ClassDecl(Id(_7h24),Id(M),[]),ClassDecl(Id(__4_),[]),ClassDecl(Id(z),[AttributeDecl(Static,VarDecl(Id($2z1),ClassType(Id(j)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(j)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(j)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_6_),ClassType(Id(j)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(j)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(j)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(S7),ArrayType(26,ArrayType(15,ArrayType(92,ArrayType(77,FloatType)))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(d),FloatType,None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(bj),[])])'''
        self.assertTrue(TestAST.test(line, expect, 876))

    def test_877(self):
        line = '''Class _1__v:P{Constructor (__N:u;_:Boolean ;_,WA:Boolean ;z1_:Array [Float ,59];W,__8__202:_5;g_,_n1p,_,_,___5:String ;_,_,R:a_;_N4,MW:Int ){}Val h_,__:Float ;}Class _l_5C2{}Class t{}Class _:L{}'''
        expect = '''Program([ClassDecl(Id(_1__v),Id(P),[MethodDecl(Id(Constructor),Instance,[param(Id(__N),ClassType(Id(u))),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(WA),BoolType),param(Id(z1_),ArrayType(59,FloatType)),param(Id(W),ClassType(Id(_5))),param(Id(__8__202),ClassType(Id(_5))),param(Id(g_),StringType),param(Id(_n1p),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(___5),StringType),param(Id(_),ClassType(Id(a_))),param(Id(_),ClassType(Id(a_))),param(Id(R),ClassType(Id(a_))),param(Id(_N4),IntType),param(Id(MW),IntType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(h_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(__),FloatType,None))]),ClassDecl(Id(_l_5C2),[]),ClassDecl(Id(t),[]),ClassDecl(Id(_),Id(L),[])])'''
        self.assertTrue(TestAST.test(line, expect, 877))

    def test_878(self):
        line = '''Class __:f{Var y,$9,$5_,$9,_:Boolean ;$_(j2:Int ;U0N1,P:Float ;b,lSK:Array [Array [Boolean ,0B100],0x62];W:Array [Boolean ,0b11]){} }Class _6{Val _Y:Array [Int ,0B1];}Class x_:_q5{Var n:_;Constructor (){Var R_wAH:Boolean ;Break ;} }'''
        expect = '''Program([ClassDecl(Id(__),Id(f),[AttributeDecl(Instance,VarDecl(Id(y),BoolType)),AttributeDecl(Static,VarDecl(Id($9),BoolType)),AttributeDecl(Static,VarDecl(Id($5_),BoolType)),AttributeDecl(Static,VarDecl(Id($9),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),MethodDecl(Id($_),Static,[param(Id(j2),IntType),param(Id(U0N1),FloatType),param(Id(P),FloatType),param(Id(b),ArrayType(98,ArrayType(4,BoolType))),param(Id(lSK),ArrayType(98,ArrayType(4,BoolType))),param(Id(W),ArrayType(3,BoolType))],Block([]))]),ClassDecl(Id(_6),[AttributeDecl(Instance,ConstDecl(Id(_Y),ArrayType(1,IntType),None))]),ClassDecl(Id(x_),Id(_q5),[AttributeDecl(Instance,VarDecl(Id(n),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([VarDecl(Id(R_wAH),BoolType),Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 878))

    def test_879(self):
        line = '''Class sydq:_{Var $4Z,E,$0:Array [Array [Array [String ,33],01],0X2];$_(){}Constructor (){Val _:String ;Return ;}Constructor (_W____d:_m){}Constructor (){}Var $y___0:u;}'''
        expect = '''Program([ClassDecl(Id(sydq),Id(_),[AttributeDecl(Static,VarDecl(Id($4Z),ArrayType(2,ArrayType(1,ArrayType(33,StringType))))),AttributeDecl(Instance,VarDecl(Id(E),ArrayType(2,ArrayType(1,ArrayType(33,StringType))))),AttributeDecl(Static,VarDecl(Id($0),ArrayType(2,ArrayType(1,ArrayType(33,StringType))))),MethodDecl(Id($_),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([ConstDecl(Id(_),StringType,None),Return()])),MethodDecl(Id(Constructor),Instance,[param(Id(_W____d),ClassType(Id(_m)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($y___0),ClassType(Id(u)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 879))

    def test_880(self):
        line = '''Class MV{Constructor (oIt:Boolean ;_6:Array [Boolean ,0B1];LO_:_;_:Array [Array [Array [Boolean ,1],03_3],05_6];L2___,H,__:Float ;Q_,_:Array [Array [Array [String ,7_5],0134],0b101110];Fa:_;_0B:Boolean ;g2S_:_;_,_,_6E,__53_7,M:F;Y:Array [String ,0B10100];ZJ_4,_,_,_9:B47z;Y:t_;_76_nh_J5,N2:Array [String ,0B10100]){} }'''
        expect = '''Program([ClassDecl(Id(MV),[MethodDecl(Id(Constructor),Instance,[param(Id(oIt),BoolType),param(Id(_6),ArrayType(1,BoolType)),param(Id(LO_),ClassType(Id(_))),param(Id(_),ArrayType(46,ArrayType(27,ArrayType(1,BoolType)))),param(Id(L2___),FloatType),param(Id(H),FloatType),param(Id(__),FloatType),param(Id(Q_),ArrayType(46,ArrayType(92,ArrayType(75,StringType)))),param(Id(_),ArrayType(46,ArrayType(92,ArrayType(75,StringType)))),param(Id(Fa),ClassType(Id(_))),param(Id(_0B),BoolType),param(Id(g2S_),ClassType(Id(_))),param(Id(_),ClassType(Id(F))),param(Id(_),ClassType(Id(F))),param(Id(_6E),ClassType(Id(F))),param(Id(__53_7),ClassType(Id(F))),param(Id(M),ClassType(Id(F))),param(Id(Y),ArrayType(20,StringType)),param(Id(ZJ_4),ClassType(Id(B47z))),param(Id(_),ClassType(Id(B47z))),param(Id(_),ClassType(Id(B47z))),param(Id(_9),ClassType(Id(B47z))),param(Id(Y),ClassType(Id(t_))),param(Id(_76_nh_J5),ArrayType(20,StringType)),param(Id(N2),ArrayType(20,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 880))

    def test_881(self):
        line = '''Class w:_{}Class _:KWd{C__(t_:Array [Array [Array [String ,85],85],0x21_73D]){Val _30:Array [Int ,0B1];}Constructor (_,___RU_,_,_,T,_,g3:Float ;ht:Array [Array [Boolean ,5],0x1A]){Return ;} }Class V:I_C11_{Var $9,P_19hd2v1H,__R,_:Array [Array [Array [Array [Array [Int ,6362_0],0x1A],04_6_2],0B111101],85];}Class j{}Class q_112:___{Val v,__g:Array [Boolean ,0b1001010];}'''
        expect = '''Program([ClassDecl(Id(w),Id(_),[]),ClassDecl(Id(_),Id(KWd),[MethodDecl(Id(C__),Instance,[param(Id(t_),ArrayType(137021,ArrayType(85,ArrayType(85,StringType))))],Block([ConstDecl(Id(_30),ArrayType(1,IntType),None)])),MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(___RU_),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(T),FloatType),param(Id(_),FloatType),param(Id(g3),FloatType),param(Id(ht),ArrayType(26,ArrayType(5,BoolType)))],Block([Return()]))]),ClassDecl(Id(V),Id(I_C11_),[AttributeDecl(Static,VarDecl(Id($9),ArrayType(85,ArrayType(61,ArrayType(306,ArrayType(26,ArrayType(63620,IntType))))))),AttributeDecl(Instance,VarDecl(Id(P_19hd2v1H),ArrayType(85,ArrayType(61,ArrayType(306,ArrayType(26,ArrayType(63620,IntType))))))),AttributeDecl(Instance,VarDecl(Id(__R),ArrayType(85,ArrayType(61,ArrayType(306,ArrayType(26,ArrayType(63620,IntType))))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(85,ArrayType(61,ArrayType(306,ArrayType(26,ArrayType(63620,IntType)))))))]),ClassDecl(Id(j),[]),ClassDecl(Id(q_112),Id(___),[AttributeDecl(Instance,ConstDecl(Id(v),ArrayType(74,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(__g),ArrayType(74,BoolType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 881))

    def test_882(self):
        line = '''Class _{T(y4,M3Qx:Q6;lL:Boolean ;u:Array [Array [Array [Array [Boolean ,0b1],01_12],0x37],40]){} }Class n:s{}Class _GP_{$oW(G_:u__j_9;E,__:Boolean ){}S_(_:Array [Int ,01];_6:Array [String ,0XC_4_90_2_B]){}Var $5__mY:__;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(T),Instance,[param(Id(y4),ClassType(Id(Q6))),param(Id(M3Qx),ClassType(Id(Q6))),param(Id(lL),BoolType),param(Id(u),ArrayType(40,ArrayType(55,ArrayType(74,ArrayType(1,BoolType)))))],Block([]))]),ClassDecl(Id(n),Id(s),[]),ClassDecl(Id(_GP_),[MethodDecl(Id($oW),Static,[param(Id(G_),ClassType(Id(u__j_9))),param(Id(E),BoolType),param(Id(__),BoolType)],Block([])),MethodDecl(Id(S_),Instance,[param(Id(_),ArrayType(1,IntType)),param(Id(_6),ArrayType(12881963,StringType))],Block([])),AttributeDecl(Static,VarDecl(Id($5__mY),ClassType(Id(__)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 882))

    def test_883(self):
        line = '''Class y:_{Constructor (gN4,_,_:Array [String ,010];f:Array [Array [String ,0XD],33];J_0,TF,_:Float ;v:String ;_L_0:Array [Float ,063];W,_:Array [Array [Array [String ,0b1000000],0x5],0b1_1];V:_;Ad,_:s__;_1O7:Boolean ){Var A,_,_0__,_,g,_:Int ;} }'''
        expect = '''Program([ClassDecl(Id(y),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(gN4),ArrayType(8,StringType)),param(Id(_),ArrayType(8,StringType)),param(Id(_),ArrayType(8,StringType)),param(Id(f),ArrayType(33,ArrayType(13,StringType))),param(Id(J_0),FloatType),param(Id(TF),FloatType),param(Id(_),FloatType),param(Id(v),StringType),param(Id(_L_0),ArrayType(51,FloatType)),param(Id(W),ArrayType(3,ArrayType(5,ArrayType(64,StringType)))),param(Id(_),ArrayType(3,ArrayType(5,ArrayType(64,StringType)))),param(Id(V),ClassType(Id(_))),param(Id(Ad),ClassType(Id(s__))),param(Id(_),ClassType(Id(s__))),param(Id(_1O7),BoolType)],Block([VarDecl(Id(A),IntType),VarDecl(Id(_),IntType),VarDecl(Id(_0__),IntType),VarDecl(Id(_),IntType),VarDecl(Id(g),IntType),VarDecl(Id(_),IntType)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 883))

    def test_884(self):
        line = '''Class X{}Class _02_{}Class fT_8:_Kx{Val ___9M,$__:Array [Array [Array [Array [Array [Array [String ,075],5_4_7],0b1_0],0B1],0b1],0b1110];}Class _{Var $0,$_,_U7:Array [String ,54];}'''
        expect = '''Program([ClassDecl(Id(X),[]),ClassDecl(Id(_02_),[]),ClassDecl(Id(fT_8),Id(_Kx),[AttributeDecl(Instance,ConstDecl(Id(___9M),ArrayType(14,ArrayType(1,ArrayType(1,ArrayType(2,ArrayType(547,ArrayType(61,StringType)))))),None)),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(14,ArrayType(1,ArrayType(1,ArrayType(2,ArrayType(547,ArrayType(61,StringType)))))),None))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($0),ArrayType(54,StringType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(54,StringType))),AttributeDecl(Instance,VarDecl(Id(_U7),ArrayType(54,StringType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 884))

    def test_885(self):
        line = '''Class E_{Constructor (_2l,_N:Array [Array [Array [Array [Boolean ,87],05],87],0b11100];__2,L:Float ;B:_){Return ;}Val $4VW_:Array [Boolean ,036];_(){} }Class _:___{$48(){}Val _,J:_;}Class _:_{}Class _t{}Class _:N{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(E_),[MethodDecl(Id(Constructor),Instance,[param(Id(_2l),ArrayType(28,ArrayType(87,ArrayType(5,ArrayType(87,BoolType))))),param(Id(_N),ArrayType(28,ArrayType(87,ArrayType(5,ArrayType(87,BoolType))))),param(Id(__2),FloatType),param(Id(L),FloatType),param(Id(B),ClassType(Id(_)))],Block([Return()])),AttributeDecl(Static,ConstDecl(Id($4VW_),ArrayType(30,BoolType),None)),MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(_),Id(___),[MethodDecl(Id($48),Static,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(J),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_t),[]),ClassDecl(Id(_),Id(N),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 885))

    def test_886(self):
        line = '''Class _7_{Val $_,$w9M:Int ;$O(L_:Array [String ,0B1]){ {}Return ;Break ;Continue ;{} }Destructor (){}$__(V_j3,r,_K,___u,_f:J;_U,F:Int ;_5_:Array [Float ,0X5_61A]){} }'''
        expect = '''Program([ClassDecl(Id(_7_),[AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($w9M),IntType,None)),MethodDecl(Id($O),Static,[param(Id(L_),ArrayType(1,StringType))],Block([Block([]),Return(),Break,Continue,Block([])])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($__),Static,[param(Id(V_j3),ClassType(Id(J))),param(Id(r),ClassType(Id(J))),param(Id(_K),ClassType(Id(J))),param(Id(___u),ClassType(Id(J))),param(Id(_f),ClassType(Id(J))),param(Id(_U),IntType),param(Id(F),IntType),param(Id(_5_),ArrayType(22042,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 886))

    def test_887(self):
        line = '''Class o{$_X(_,d,_:Array [Array [Int ,014],0b1010000];s,KA:Int ;O,x0y_,I___,_43,M:H0;C:Float ){}Constructor (_0:Array [String ,0b1010000];TQ,z:_){} }Class _7{}Class __{}Class BdEiC:_4j{}'''
        expect = '''Program([ClassDecl(Id(o),[MethodDecl(Id($_X),Static,[param(Id(_),ArrayType(80,ArrayType(12,IntType))),param(Id(d),ArrayType(80,ArrayType(12,IntType))),param(Id(_),ArrayType(80,ArrayType(12,IntType))),param(Id(s),IntType),param(Id(KA),IntType),param(Id(O),ClassType(Id(H0))),param(Id(x0y_),ClassType(Id(H0))),param(Id(I___),ClassType(Id(H0))),param(Id(_43),ClassType(Id(H0))),param(Id(M),ClassType(Id(H0))),param(Id(C),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_0),ArrayType(80,StringType)),param(Id(TQ),ClassType(Id(_))),param(Id(z),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_7),[]),ClassDecl(Id(__),[]),ClassDecl(Id(BdEiC),Id(_4j),[])])'''
        self.assertTrue(TestAST.test(line, expect, 887))

    def test_888(self):
        line = '''Class __:Q{Val $_DE8:Int ;Var $_,I,$7v:Array [String ,0B1_1];Constructor (){ {Return ;} }$8(){} }Class __T{Constructor (){} }Class o:A_{__0L(_Fb5,d:h;_,_:Boolean ){Val ___:Array [Array [Array [Array [Boolean ,064334],8],0XF_D_9],0XD];Break ;}Var z_,$6:Array [String ,19];}Class __9:cy{}'''
        expect = '''Program([ClassDecl(Id(__),Id(Q),[AttributeDecl(Static,ConstDecl(Id($_DE8),IntType,None)),AttributeDecl(Static,VarDecl(Id($_),ArrayType(3,StringType))),AttributeDecl(Instance,VarDecl(Id(I),ArrayType(3,StringType))),AttributeDecl(Static,VarDecl(Id($7v),ArrayType(3,StringType))),MethodDecl(Id(Constructor),Instance,[],Block([Block([Return()])])),MethodDecl(Id($8),Static,[],Block([]))]),ClassDecl(Id(__T),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(o),Id(A_),[MethodDecl(Id(__0L),Instance,[param(Id(_Fb5),ClassType(Id(h))),param(Id(d),ClassType(Id(h))),param(Id(_),BoolType),param(Id(_),BoolType)],Block([ConstDecl(Id(___),ArrayType(13,ArrayType(4057,ArrayType(8,ArrayType(26844,BoolType)))),None),Break])),AttributeDecl(Instance,VarDecl(Id(z_),ArrayType(19,StringType))),AttributeDecl(Static,VarDecl(Id($6),ArrayType(19,StringType)))]),ClassDecl(Id(__9),Id(cy),[])])'''
        self.assertTrue(TestAST.test(line, expect, 888))

    def test_889(self):
        line = '''Class M{Constructor (__:Boolean ){Break ;} }Class P:_g52{Val _:_;Constructor (p:Float ){ {}Return ;}Val $_5:Float ;$_(){}Constructor (){} }Class U:W{Var a2,_:Array [Array [Array [Array [Array [Array [Int ,075],0116],0B1],6],0x53],0116];Var h:Array [Array [Boolean ,26],0B1100001];}Class B:_{}Class RRG2{}'''
        expect = '''Program([ClassDecl(Id(M),[MethodDecl(Id(Constructor),Instance,[param(Id(__),BoolType)],Block([Break]))]),ClassDecl(Id(P),Id(_g52),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(p),FloatType)],Block([Block([]),Return()])),AttributeDecl(Static,ConstDecl(Id($_5),FloatType,None)),MethodDecl(Id($_),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(U),Id(W),[AttributeDecl(Instance,VarDecl(Id(a2),ArrayType(78,ArrayType(83,ArrayType(6,ArrayType(1,ArrayType(78,ArrayType(61,IntType)))))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(78,ArrayType(83,ArrayType(6,ArrayType(1,ArrayType(78,ArrayType(61,IntType)))))))),AttributeDecl(Instance,VarDecl(Id(h),ArrayType(97,ArrayType(26,BoolType))))]),ClassDecl(Id(B),Id(_),[]),ClassDecl(Id(RRG2),[])])'''
        self.assertTrue(TestAST.test(line, expect, 889))

    def test_890(self):
        line = '''Class P8O5w__:_{Val $__b0__Y,_,_,$5_,$h_,$3O_K:String ;}Class k{n(){Continue ;}Destructor (){}Val X,$e_,$R,_,_:_4;}Class Q:r{$2(){}Val $___:String ;}Class d7:F4{}'''
        expect = '''Program([ClassDecl(Id(P8O5w__),Id(_),[AttributeDecl(Static,ConstDecl(Id($__b0__Y),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($5_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($h_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($3O_K),StringType,None))]),ClassDecl(Id(k),[MethodDecl(Id(n),Instance,[],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(X),ClassType(Id(_4)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($e_),ClassType(Id(_4)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($R),ClassType(Id(_4)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_4)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_4)),NullLiteral()))]),ClassDecl(Id(Q),Id(r),[MethodDecl(Id($2),Static,[],Block([])),AttributeDecl(Static,ConstDecl(Id($___),StringType,None))]),ClassDecl(Id(d7),Id(F4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 890))

    def test_891(self):
        line = '''Class H{Constructor (__h9:Array [Array [Array [Array [Float ,0x2_8C_4_8],43],0B1],43];b2L:e0l4;Bq_uP5n322:Boolean ;_,G,_:Boolean ){} }Class LB6:g{}Class _{Destructor (){}$_(){}Val _,__:__l_4;}'''
        expect = '''Program([ClassDecl(Id(H),[MethodDecl(Id(Constructor),Instance,[param(Id(__h9),ArrayType(43,ArrayType(1,ArrayType(43,ArrayType(166984,FloatType))))),param(Id(b2L),ClassType(Id(e0l4))),param(Id(Bq_uP5n322),BoolType),param(Id(_),BoolType),param(Id(G),BoolType),param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(LB6),Id(g),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_),Static,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(__l_4)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(__l_4)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 891))

    def test_892(self):
        line = '''Class _:G_{}Class _{Destructor (){ {Continue ;}Val V_126:Array [Array [Int ,4_5],0104];}$_(z,F_:Boolean ;gU3:Boolean ;_,_lU0:Array [Float ,0B1100010];P,B,k,_,_,_,L:Array [Array [Float ,0XD],77]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(G_),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Block([Continue]),ConstDecl(Id(V_126),ArrayType(68,ArrayType(45,IntType)),None)])),MethodDecl(Id($_),Static,[param(Id(z),BoolType),param(Id(F_),BoolType),param(Id(gU3),BoolType),param(Id(_),ArrayType(98,FloatType)),param(Id(_lU0),ArrayType(98,FloatType)),param(Id(P),ArrayType(77,ArrayType(13,FloatType))),param(Id(B),ArrayType(77,ArrayType(13,FloatType))),param(Id(k),ArrayType(77,ArrayType(13,FloatType))),param(Id(_),ArrayType(77,ArrayType(13,FloatType))),param(Id(_),ArrayType(77,ArrayType(13,FloatType))),param(Id(_),ArrayType(77,ArrayType(13,FloatType))),param(Id(L),ArrayType(77,ArrayType(13,FloatType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 892))

    def test_893(self):
        line = '''Class _66NNM:k{Constructor (_,z,v:Boolean ;_8,_:Boolean ;G9c:String ){} }Class YK3{}Class _{}Class c:_C{Var j,_BT,$_c,A:_9;Destructor (){Continue ;}Destructor (){} }Class ____:_{}'''
        expect = '''Program([ClassDecl(Id(_66NNM),Id(k),[MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(z),BoolType),param(Id(v),BoolType),param(Id(_8),BoolType),param(Id(_),BoolType),param(Id(G9c),StringType)],Block([]))]),ClassDecl(Id(YK3),[]),ClassDecl(Id(_),[]),ClassDecl(Id(c),Id(_C),[AttributeDecl(Instance,VarDecl(Id(j),ClassType(Id(_9)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_BT),ClassType(Id(_9)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_c),ClassType(Id(_9)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(A),ClassType(Id(_9)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(____),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 893))

    def test_894(self):
        line = '''Class _:_{Constructor (_r2,c__:Array [Array [Array [Array [Float ,0B1100000],0X7],06_2_1],0116]){Return ;}Var _:Array [Array [String ,0b101010],0X3];Destructor (){}Var _P,$_6,$7:Array [String ,0116];}Class i:_5{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_r2),ArrayType(78,ArrayType(401,ArrayType(7,ArrayType(96,FloatType))))),param(Id(c__),ArrayType(78,ArrayType(401,ArrayType(7,ArrayType(96,FloatType)))))],Block([Return()])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,ArrayType(42,StringType)))),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_P),ArrayType(78,StringType))),AttributeDecl(Static,VarDecl(Id($_6),ArrayType(78,StringType))),AttributeDecl(Static,VarDecl(Id($7),ArrayType(78,StringType)))]),ClassDecl(Id(i),Id(_5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 894))

    def test_895(self):
        line = '''Class __:b{}Class _:N_{}Class _:_42{}Class C:y7{Constructor (__j,_8_D_V__4:F_X57;_:Float ){}Destructor (){} }Class _i__{}Class _:__{Constructor (_9:__B_0){} }Class _{$W(){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(b),[]),ClassDecl(Id(_),Id(N_),[]),ClassDecl(Id(_),Id(_42),[]),ClassDecl(Id(C),Id(y7),[MethodDecl(Id(Constructor),Instance,[param(Id(__j),ClassType(Id(F_X57))),param(Id(_8_D_V__4),ClassType(Id(F_X57))),param(Id(_),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_i__),[]),ClassDecl(Id(_),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_9),ClassType(Id(__B_0)))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id($W),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 895))

    def test_896(self):
        line = '''Class _{Destructor (){Return ;} }Class _3q:_{Val _:Array [Array [Array [Array [Array [Array [Array [Int ,11_8],65],65],65],8_8_0],0x8D_1_2],0xD];}Class S{}Class J4:_p{}Class ___:_{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Return()]))]),ClassDecl(Id(_3q),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(13,ArrayType(36114,ArrayType(880,ArrayType(65,ArrayType(65,ArrayType(65,ArrayType(118,IntType))))))),None))]),ClassDecl(Id(S),[]),ClassDecl(Id(J4),Id(_p),[]),ClassDecl(Id(___),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 896))

    def test_897(self):
        line = '''Class N:__{Constructor (r_:I8M;_:Array [Array [Boolean ,0x95],90_0]){}Constructor (){} }Class HY:l5{}Class U39{}Class _B_m{}Class z7_6:u{}Class S6:_{}Class _{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(N),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(r_),ClassType(Id(I8M))),param(Id(_),ArrayType(900,ArrayType(149,BoolType)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(HY),Id(l5),[]),ClassDecl(Id(U39),[]),ClassDecl(Id(_B_m),[]),ClassDecl(Id(z7_6),Id(u),[]),ClassDecl(Id(S6),Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 897))

    def test_898(self):
        line = '''Class Z1:_k{Var $8,$_JBA:Boolean ;Constructor (E_a8:Array [Int ,0x55];h:P_;_,_1_4_:Array [Array [Array [Boolean ,0X5C],0X5C],0166];Js68:o;__,k:Boolean ){}Constructor (j:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(Z1),Id(_k),[AttributeDecl(Static,VarDecl(Id($8),BoolType)),AttributeDecl(Static,VarDecl(Id($_JBA),BoolType)),MethodDecl(Id(Constructor),Instance,[param(Id(E_a8),ArrayType(85,IntType)),param(Id(h),ClassType(Id(P_))),param(Id(_),ArrayType(118,ArrayType(92,ArrayType(92,BoolType)))),param(Id(_1_4_),ArrayType(118,ArrayType(92,ArrayType(92,BoolType)))),param(Id(Js68),ClassType(Id(o))),param(Id(__),BoolType),param(Id(k),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(j),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 898))

    def test_899(self):
        line = '''Class h{Var _6,J,_:Boolean ;Destructor (){Break ;}$t(E_X,N:CWL;__:Gv8;_5_z,_S6:Int ;x:Array [String ,056];s:Array [Int ,3_2_1];g,Rb:Array [Array [Array [String ,0X54],0xD_3],0x46];_f:Float ;_,v_,kJ6,_0:String ){} }'''
        expect = '''Program([ClassDecl(Id(h),[AttributeDecl(Instance,VarDecl(Id(_6),BoolType)),AttributeDecl(Instance,VarDecl(Id(J),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),MethodDecl(Id(Destructor),Instance,[],Block([Break])),MethodDecl(Id($t),Static,[param(Id(E_X),ClassType(Id(CWL))),param(Id(N),ClassType(Id(CWL))),param(Id(__),ClassType(Id(Gv8))),param(Id(_5_z),IntType),param(Id(_S6),IntType),param(Id(x),ArrayType(46,StringType)),param(Id(s),ArrayType(321,IntType)),param(Id(g),ArrayType(70,ArrayType(211,ArrayType(84,StringType)))),param(Id(Rb),ArrayType(70,ArrayType(211,ArrayType(84,StringType)))),param(Id(_f),FloatType),param(Id(_),StringType),param(Id(v_),StringType),param(Id(kJ6),StringType),param(Id(_0),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 899))

    def test_900(self):
        line = '''Class _:_{}Class d:y5W{Val $_1_5:i;_1(){Continue ;} }Class T:_DAg18{Var x:Int ;Constructor (_OM_,_:String ){} }Class d:___GPE4{Val $_Gy7,$__O,$__,$_,_O:Array [Boolean ,0103];}Class _:_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(d),Id(y5W),[AttributeDecl(Static,ConstDecl(Id($_1_5),ClassType(Id(i)),NullLiteral())),MethodDecl(Id(_1),Instance,[],Block([Continue]))]),ClassDecl(Id(T),Id(_DAg18),[AttributeDecl(Instance,VarDecl(Id(x),IntType)),MethodDecl(Id(Constructor),Instance,[param(Id(_OM_),StringType),param(Id(_),StringType)],Block([]))]),ClassDecl(Id(d),Id(___GPE4),[AttributeDecl(Static,ConstDecl(Id($_Gy7),ArrayType(67,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($__O),ArrayType(67,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(67,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(67,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_O),ArrayType(67,BoolType),None))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 900))

    def test_901(self):
        line = '''Class nD2_{Constructor (_,_p_:Array [Array [Array [Array [Array [Array [Array [Int ,0B10],0X5C],0X5C],05],044],0X5C],24];_,__,A,_L:Array [Array [Array [Int ,0b1001],03_6_6],035];_:Int ;B___:String ){}Val __1,j,$_w__:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0X7],0xF5C],0x4B],05],0b1001],0x4B],9_8],0x718E2];}Class y{}'''
        expect = '''Program([ClassDecl(Id(nD2_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(24,ArrayType(92,ArrayType(36,ArrayType(5,ArrayType(92,ArrayType(92,ArrayType(2,IntType)))))))),param(Id(_p_),ArrayType(24,ArrayType(92,ArrayType(36,ArrayType(5,ArrayType(92,ArrayType(92,ArrayType(2,IntType)))))))),param(Id(_),ArrayType(29,ArrayType(246,ArrayType(9,IntType)))),param(Id(__),ArrayType(29,ArrayType(246,ArrayType(9,IntType)))),param(Id(A),ArrayType(29,ArrayType(246,ArrayType(9,IntType)))),param(Id(_L),ArrayType(29,ArrayType(246,ArrayType(9,IntType)))),param(Id(_),IntType),param(Id(B___),StringType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(__1),ArrayType(465122,ArrayType(98,ArrayType(75,ArrayType(9,ArrayType(5,ArrayType(75,ArrayType(3932,ArrayType(7,IntType)))))))),None)),AttributeDecl(Instance,ConstDecl(Id(j),ArrayType(465122,ArrayType(98,ArrayType(75,ArrayType(9,ArrayType(5,ArrayType(75,ArrayType(3932,ArrayType(7,IntType)))))))),None)),AttributeDecl(Static,ConstDecl(Id($_w__),ArrayType(465122,ArrayType(98,ArrayType(75,ArrayType(9,ArrayType(5,ArrayType(75,ArrayType(3932,ArrayType(7,IntType)))))))),None))]),ClassDecl(Id(y),[])])'''
        self.assertTrue(TestAST.test(line, expect, 901))

    def test_902(self):
        line = '''Class _:K{}Class _:_{Var _,_M,_h__1:x117v;Val F_,$c:Array [Array [Array [Array [String ,0XD_5_6_65_B],0B10111],0x39],04_2];Val __:String ;Val $I_,N,$_,$_,Q_8:Array [Array [Array [Boolean ,051],8],040_1];}Class _1:Y{}'''
        expect = '''Program([ClassDecl(Id(_),Id(K),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(x117v)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_M),ClassType(Id(x117v)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_h__1),ClassType(Id(x117v)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(F_),ArrayType(34,ArrayType(57,ArrayType(23,ArrayType(13985371,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($c),ArrayType(34,ArrayType(57,ArrayType(23,ArrayType(13985371,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(__),StringType,None)),AttributeDecl(Static,ConstDecl(Id($I_),ArrayType(257,ArrayType(8,ArrayType(41,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(N),ArrayType(257,ArrayType(8,ArrayType(41,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(257,ArrayType(8,ArrayType(41,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(257,ArrayType(8,ArrayType(41,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(Q_8),ArrayType(257,ArrayType(8,ArrayType(41,BoolType))),None))]),ClassDecl(Id(_1),Id(Y),[])])'''
        self.assertTrue(TestAST.test(line, expect, 902))

    def test_903(self):
        line = '''Class ___4:P{Var $3Q:Array [Array [String ,0b1],0X96];Constructor (_ib1h_4:_;__,c,g_9,_,__,T,_,B,_X,f_:Array [Array [Array [Array [Array [Array [String ,05],0X62],0x3_3],6_5],0x48],0b1];a7_,_R:_;_,_:String ){} }'''
        expect = '''Program([ClassDecl(Id(___4),Id(P),[AttributeDecl(Static,VarDecl(Id($3Q),ArrayType(150,ArrayType(1,StringType)))),MethodDecl(Id(Constructor),Instance,[param(Id(_ib1h_4),ClassType(Id(_))),param(Id(__),ArrayType(1,ArrayType(72,ArrayType(65,ArrayType(51,ArrayType(98,ArrayType(5,StringType))))))),param(Id(c),ArrayType(1,ArrayType(72,ArrayType(65,ArrayType(51,ArrayType(98,ArrayType(5,StringType))))))),param(Id(g_9),ArrayType(1,ArrayType(72,ArrayType(65,ArrayType(51,ArrayType(98,ArrayType(5,StringType))))))),param(Id(_),ArrayType(1,ArrayType(72,ArrayType(65,ArrayType(51,ArrayType(98,ArrayType(5,StringType))))))),param(Id(__),ArrayType(1,ArrayType(72,ArrayType(65,ArrayType(51,ArrayType(98,ArrayType(5,StringType))))))),param(Id(T),ArrayType(1,ArrayType(72,ArrayType(65,ArrayType(51,ArrayType(98,ArrayType(5,StringType))))))),param(Id(_),ArrayType(1,ArrayType(72,ArrayType(65,ArrayType(51,ArrayType(98,ArrayType(5,StringType))))))),param(Id(B),ArrayType(1,ArrayType(72,ArrayType(65,ArrayType(51,ArrayType(98,ArrayType(5,StringType))))))),param(Id(_X),ArrayType(1,ArrayType(72,ArrayType(65,ArrayType(51,ArrayType(98,ArrayType(5,StringType))))))),param(Id(f_),ArrayType(1,ArrayType(72,ArrayType(65,ArrayType(51,ArrayType(98,ArrayType(5,StringType))))))),param(Id(a7_),ClassType(Id(_))),param(Id(_R),ClassType(Id(_))),param(Id(_),StringType),param(Id(_),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 903))

    def test_904(self):
        line = '''Class P50n{Destructor (){Break ;}__(_O:_;_8,E,___,__,___D_9:F2;hs0:Float ){}Var $td_G,$kF7:_;}Class __1:__Lw{Constructor (_,K:Array [Array [Array [Array [Float ,0106],0x57],0x5],0x8];t_,K:_n;e,_X,_w_:String ;eK:Array [Array [Array [Array [Array [Boolean ,0X5C],0b1001110],06],1],1]){} }'''
        expect = '''Program([ClassDecl(Id(P50n),[MethodDecl(Id(Destructor),Instance,[],Block([Break])),MethodDecl(Id(__),Instance,[param(Id(_O),ClassType(Id(_))),param(Id(_8),ClassType(Id(F2))),param(Id(E),ClassType(Id(F2))),param(Id(___),ClassType(Id(F2))),param(Id(__),ClassType(Id(F2))),param(Id(___D_9),ClassType(Id(F2))),param(Id(hs0),FloatType)],Block([])),AttributeDecl(Static,VarDecl(Id($td_G),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($kF7),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(__1),Id(__Lw),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(8,ArrayType(5,ArrayType(87,ArrayType(70,FloatType))))),param(Id(K),ArrayType(8,ArrayType(5,ArrayType(87,ArrayType(70,FloatType))))),param(Id(t_),ClassType(Id(_n))),param(Id(K),ClassType(Id(_n))),param(Id(e),StringType),param(Id(_X),StringType),param(Id(_w_),StringType),param(Id(eK),ArrayType(1,ArrayType(1,ArrayType(6,ArrayType(78,ArrayType(92,BoolType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 904))

    def test_905(self):
        line = '''Class _:_0{__9(){}Destructor (){} }Class h__v:o8{}Class J:_9X{_M(n4,z:Array [Array [Array [String ,0b11],22],04];p:Array [Array [Array [Float ,020],0B1010000],0B1010000]){} }Class p{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_0),[MethodDecl(Id(__9),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(h__v),Id(o8),[]),ClassDecl(Id(J),Id(_9X),[MethodDecl(Id(_M),Instance,[param(Id(n4),ArrayType(4,ArrayType(22,ArrayType(3,StringType)))),param(Id(z),ArrayType(4,ArrayType(22,ArrayType(3,StringType)))),param(Id(p),ArrayType(80,ArrayType(80,ArrayType(16,FloatType))))],Block([]))]),ClassDecl(Id(p),[])])'''
        self.assertTrue(TestAST.test(line, expect, 905))

    def test_906(self):
        line = '''Class _J{Constructor (_,y_P__,__615,_op:q;Q_9,_66:h;FbmLY_:_;_,_,_2,tGr,_,E,a:Array [Array [String ,7_3440_6_0],0B1_0];__4:Vx6;_,_:Float ;o__,h,___3b,U:ygPo){ {} }}Class f:O{}'''
        expect = '''Program([ClassDecl(Id(_J),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(q))),param(Id(y_P__),ClassType(Id(q))),param(Id(__615),ClassType(Id(q))),param(Id(_op),ClassType(Id(q))),param(Id(Q_9),ClassType(Id(h))),param(Id(_66),ClassType(Id(h))),param(Id(FbmLY_),ClassType(Id(_))),param(Id(_),ArrayType(2,ArrayType(7344060,StringType))),param(Id(_),ArrayType(2,ArrayType(7344060,StringType))),param(Id(_2),ArrayType(2,ArrayType(7344060,StringType))),param(Id(tGr),ArrayType(2,ArrayType(7344060,StringType))),param(Id(_),ArrayType(2,ArrayType(7344060,StringType))),param(Id(E),ArrayType(2,ArrayType(7344060,StringType))),param(Id(a),ArrayType(2,ArrayType(7344060,StringType))),param(Id(__4),ClassType(Id(Vx6))),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(o__),ClassType(Id(ygPo))),param(Id(h),ClassType(Id(ygPo))),param(Id(___3b),ClassType(Id(ygPo))),param(Id(U),ClassType(Id(ygPo)))],Block([Block([])]))]),ClassDecl(Id(f),Id(O),[])])'''
        self.assertTrue(TestAST.test(line, expect, 906))

    def test_907(self):
        line = '''Class __{Constructor (_,RM,T,_:N;P_:String ;H_:MP;_P:Array [Int ,0x44]){}Var $4:String ;Val $O,$4,_69o:h;F__(){}$4O(__:Float ;_6:Boolean ;i8,__,_,d,j,d:Array [Array [Array [Float ,0X3],0b110101],0b110101];xD:Array [Int ,0b1];Q:String ){Continue ;} }Class o1:_{Var N0_,$9_27,$67L,$S2v:Array [Array [Int ,55],03_4_0];Constructor (m:g){} }Class t{Val $B,_26Yz,$w_,n,K:l_;}Class on1:L1{Var $P:N___;}Class Z:_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(N))),param(Id(RM),ClassType(Id(N))),param(Id(T),ClassType(Id(N))),param(Id(_),ClassType(Id(N))),param(Id(P_),StringType),param(Id(H_),ClassType(Id(MP))),param(Id(_P),ArrayType(68,IntType))],Block([])),AttributeDecl(Static,VarDecl(Id($4),StringType)),AttributeDecl(Static,ConstDecl(Id($O),ClassType(Id(h)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($4),ClassType(Id(h)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_69o),ClassType(Id(h)),NullLiteral())),MethodDecl(Id(F__),Instance,[],Block([])),MethodDecl(Id($4O),Static,[param(Id(__),FloatType),param(Id(_6),BoolType),param(Id(i8),ArrayType(53,ArrayType(53,ArrayType(3,FloatType)))),param(Id(__),ArrayType(53,ArrayType(53,ArrayType(3,FloatType)))),param(Id(_),ArrayType(53,ArrayType(53,ArrayType(3,FloatType)))),param(Id(d),ArrayType(53,ArrayType(53,ArrayType(3,FloatType)))),param(Id(j),ArrayType(53,ArrayType(53,ArrayType(3,FloatType)))),param(Id(d),ArrayType(53,ArrayType(53,ArrayType(3,FloatType)))),param(Id(xD),ArrayType(1,IntType)),param(Id(Q),StringType)],Block([Continue]))]),ClassDecl(Id(o1),Id(_),[AttributeDecl(Instance,VarDecl(Id(N0_),ArrayType(224,ArrayType(55,IntType)))),AttributeDecl(Static,VarDecl(Id($9_27),ArrayType(224,ArrayType(55,IntType)))),AttributeDecl(Static,VarDecl(Id($67L),ArrayType(224,ArrayType(55,IntType)))),AttributeDecl(Static,VarDecl(Id($S2v),ArrayType(224,ArrayType(55,IntType)))),MethodDecl(Id(Constructor),Instance,[param(Id(m),ClassType(Id(g)))],Block([]))]),ClassDecl(Id(t),[AttributeDecl(Static,ConstDecl(Id($B),ClassType(Id(l_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_26Yz),ClassType(Id(l_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($w_),ClassType(Id(l_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(n),ClassType(Id(l_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(K),ClassType(Id(l_)),NullLiteral()))]),ClassDecl(Id(on1),Id(L1),[AttributeDecl(Static,VarDecl(Id($P),ClassType(Id(N___)),NullLiteral()))]),ClassDecl(Id(Z),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 907))

    def test_908(self):
        line = '''Class _J91{_(_,_,A410U5,z_rq_:__4_;SsL46_,_:Int ;_W:Array [Int ,0XC];_882,kh,__G,hL,_:Array [Array [Int ,04],0X1];c1,_,_w:_6;D:Array [Boolean ,19_13];E4,Z,l,__,__,_9:Float ;z:_3){} }Class __:bn{}'''
        expect = '''Program([ClassDecl(Id(_J91),[MethodDecl(Id(_),Instance,[param(Id(_),ClassType(Id(__4_))),param(Id(_),ClassType(Id(__4_))),param(Id(A410U5),ClassType(Id(__4_))),param(Id(z_rq_),ClassType(Id(__4_))),param(Id(SsL46_),IntType),param(Id(_),IntType),param(Id(_W),ArrayType(12,IntType)),param(Id(_882),ArrayType(1,ArrayType(4,IntType))),param(Id(kh),ArrayType(1,ArrayType(4,IntType))),param(Id(__G),ArrayType(1,ArrayType(4,IntType))),param(Id(hL),ArrayType(1,ArrayType(4,IntType))),param(Id(_),ArrayType(1,ArrayType(4,IntType))),param(Id(c1),ClassType(Id(_6))),param(Id(_),ClassType(Id(_6))),param(Id(_w),ClassType(Id(_6))),param(Id(D),ArrayType(1913,BoolType)),param(Id(E4),FloatType),param(Id(Z),FloatType),param(Id(l),FloatType),param(Id(__),FloatType),param(Id(__),FloatType),param(Id(_9),FloatType),param(Id(z),ClassType(Id(_3)))],Block([]))]),ClassDecl(Id(__),Id(bn),[])])'''
        self.assertTrue(TestAST.test(line, expect, 908))

    def test_909(self):
        line = '''Class _x8{}Class fC4:P{_(__846:F4w;R:_;__,_:Array [Array [Array [Array [Float ,1_55],037],0x4],01]){Val E,V,_:Array [Boolean ,27];{} }Var $7,_i:Array [Array [String ,0X14_9],037];}'''
        expect = '''Program([ClassDecl(Id(_x8),[]),ClassDecl(Id(fC4),Id(P),[MethodDecl(Id(_),Instance,[param(Id(__846),ClassType(Id(F4w))),param(Id(R),ClassType(Id(_))),param(Id(__),ArrayType(1,ArrayType(4,ArrayType(31,ArrayType(155,FloatType))))),param(Id(_),ArrayType(1,ArrayType(4,ArrayType(31,ArrayType(155,FloatType)))))],Block([ConstDecl(Id(E),ArrayType(27,BoolType),None),ConstDecl(Id(V),ArrayType(27,BoolType),None),ConstDecl(Id(_),ArrayType(27,BoolType),None),Block([])])),AttributeDecl(Static,VarDecl(Id($7),ArrayType(31,ArrayType(329,StringType)))),AttributeDecl(Instance,VarDecl(Id(_i),ArrayType(31,ArrayType(329,StringType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 909))

    def test_910(self):
        line = '''Class _:_4s6{}Class W_1o_:_{}Class _:_{}Class c:_{}Class H:_s{}Class U_{Destructor (){}$0(){}Constructor (_03,B,_:Boolean ){} }Class Ys:b{Val $R,$_W:Float ;}Class W:r{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_4s6),[]),ClassDecl(Id(W_1o_),Id(_),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(c),Id(_),[]),ClassDecl(Id(H),Id(_s),[]),ClassDecl(Id(U_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($0),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_03),BoolType),param(Id(B),BoolType),param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(Ys),Id(b),[AttributeDecl(Static,ConstDecl(Id($R),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_W),FloatType,None))]),ClassDecl(Id(W),Id(r),[])])'''
        self.assertTrue(TestAST.test(line, expect, 910))

    def test_911(self):
        line = '''Class _0Z_:C31_{}Class Lw{Constructor (g:Boolean ;_:String ;_13,y_,FyzB:Float ;_8:Array [Array [Float ,0B1],34];_,apP6,O43:QMs;h_r,_Q5,z,WB:String ;F2,_k:Array [Array [Array [String ,0x5D],34],0x588_E];_b:Float ;Z,K:Boolean ;O:Array [Array [Boolean ,0b1_101_1_1],04]){} }'''
        expect = '''Program([ClassDecl(Id(_0Z_),Id(C31_),[]),ClassDecl(Id(Lw),[MethodDecl(Id(Constructor),Instance,[param(Id(g),BoolType),param(Id(_),StringType),param(Id(_13),FloatType),param(Id(y_),FloatType),param(Id(FyzB),FloatType),param(Id(_8),ArrayType(34,ArrayType(1,FloatType))),param(Id(_),ClassType(Id(QMs))),param(Id(apP6),ClassType(Id(QMs))),param(Id(O43),ClassType(Id(QMs))),param(Id(h_r),StringType),param(Id(_Q5),StringType),param(Id(z),StringType),param(Id(WB),StringType),param(Id(F2),ArrayType(22670,ArrayType(34,ArrayType(93,StringType)))),param(Id(_k),ArrayType(22670,ArrayType(34,ArrayType(93,StringType)))),param(Id(_b),FloatType),param(Id(Z),BoolType),param(Id(K),BoolType),param(Id(O),ArrayType(4,ArrayType(55,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 911))

    def test_912(self):
        line = '''Class T4m{}Class _6{Var $7_,$wb_,$O0,$8,U,_:_;Destructor (){}Var __:Array [Array [Array [Array [Array [Array [Boolean ,0x21],0X2_0_4_6],0b1],93],05151],031];}Class _{Constructor (j,c,N5_:w;_n,Z:Array [Boolean ,0xA_6];_:U;_:Array [Array [Array [Array [Float ,3],0b10111],0x21],0B1];H,o0,_M,_L_4AUW:G_3){Continue ;}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(T4m),[]),ClassDecl(Id(_6),[AttributeDecl(Static,VarDecl(Id($7_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($wb_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($O0),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($8),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(U),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(25,ArrayType(2665,ArrayType(93,ArrayType(1,ArrayType(8262,ArrayType(33,BoolType))))))))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(j),ClassType(Id(w))),param(Id(c),ClassType(Id(w))),param(Id(N5_),ClassType(Id(w))),param(Id(_n),ArrayType(166,BoolType)),param(Id(Z),ArrayType(166,BoolType)),param(Id(_),ClassType(Id(U))),param(Id(_),ArrayType(1,ArrayType(33,ArrayType(23,ArrayType(3,FloatType))))),param(Id(H),ClassType(Id(G_3))),param(Id(o0),ClassType(Id(G_3))),param(Id(_M),ClassType(Id(G_3))),param(Id(_L_4AUW),ClassType(Id(G_3)))],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 912))

    def test_913(self):
        line = '''Class _:kY84{}Class z{_(){Continue ;}Constructor (_,_3_:Array [Array [Array [Array [Boolean ,0x3_0],01_7_0],0B110_000],0x76D6A];_4:Array [Array [Int ,0b1],4];_2,V:Array [Float ,4];j4,_,_51_:Array [Int ,04];Y,_1:M8){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(kY84),[]),ClassDecl(Id(z),[MethodDecl(Id(_),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(486762,ArrayType(48,ArrayType(120,ArrayType(48,BoolType))))),param(Id(_3_),ArrayType(486762,ArrayType(48,ArrayType(120,ArrayType(48,BoolType))))),param(Id(_4),ArrayType(4,ArrayType(1,IntType))),param(Id(_2),ArrayType(4,FloatType)),param(Id(V),ArrayType(4,FloatType)),param(Id(j4),ArrayType(4,IntType)),param(Id(_),ArrayType(4,IntType)),param(Id(_51_),ArrayType(4,IntType)),param(Id(Y),ClassType(Id(M8))),param(Id(_1),ClassType(Id(M8)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 913))

    def test_914(self):
        line = '''Class w2:I{Var $T,$_9,Kj:Array [Array [Array [Array [Array [Array [Boolean ,46],044],0X56],46],04],04_5_0_6];Constructor (){} }Class Pq:Z{Constructor (u:Array [Boolean ,021]){Break ;} }Class _h{}Class _{}'''
        expect = '''Program([ClassDecl(Id(w2),Id(I),[AttributeDecl(Static,VarDecl(Id($T),ArrayType(2374,ArrayType(4,ArrayType(46,ArrayType(86,ArrayType(36,ArrayType(46,BoolType)))))))),AttributeDecl(Static,VarDecl(Id($_9),ArrayType(2374,ArrayType(4,ArrayType(46,ArrayType(86,ArrayType(36,ArrayType(46,BoolType)))))))),AttributeDecl(Instance,VarDecl(Id(Kj),ArrayType(2374,ArrayType(4,ArrayType(46,ArrayType(86,ArrayType(36,ArrayType(46,BoolType)))))))),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(Pq),Id(Z),[MethodDecl(Id(Constructor),Instance,[param(Id(u),ArrayType(17,BoolType))],Block([Break]))]),ClassDecl(Id(_h),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 914))

    def test_915(self):
        line = '''Class _:_{Var $_,__a,n,_:Array [Boolean ,8];}Class A19:c_{Constructor (T__,Y_T,Y_:Int ;__6:Array [Array [Array [Array [Array [Array [Array [Boolean ,0xDA_8EC5],0x3F],0B110011],8],056],0B110011],0B10];edx:Array [Array [Array [Array [Boolean ,0B1_1],0x3F],014],0x9]){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(8,BoolType))),AttributeDecl(Instance,VarDecl(Id(__a),ArrayType(8,BoolType))),AttributeDecl(Instance,VarDecl(Id(n),ArrayType(8,BoolType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(8,BoolType)))]),ClassDecl(Id(A19),Id(c_),[MethodDecl(Id(Constructor),Instance,[param(Id(T__),IntType),param(Id(Y_T),IntType),param(Id(Y_),IntType),param(Id(__6),ArrayType(2,ArrayType(51,ArrayType(46,ArrayType(8,ArrayType(51,ArrayType(63,ArrayType(14323397,BoolType)))))))),param(Id(edx),ArrayType(9,ArrayType(12,ArrayType(63,ArrayType(3,BoolType)))))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 915))

    def test_916(self):
        line = '''Class _UX{}Class _:v3{Constructor (_,Oi,ex,p34:Array [Float ,0B1_01];_1m_:Float ;__,n_u2,Y_____f_:Int ;_:Array [Array [Array [Array [Array [Array [String ,03],1],7_807_4],46],2],0xF]){} }'''
        expect = '''Program([ClassDecl(Id(_UX),[]),ClassDecl(Id(_),Id(v3),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(5,FloatType)),param(Id(Oi),ArrayType(5,FloatType)),param(Id(ex),ArrayType(5,FloatType)),param(Id(p34),ArrayType(5,FloatType)),param(Id(_1m_),FloatType),param(Id(__),IntType),param(Id(n_u2),IntType),param(Id(Y_____f_),IntType),param(Id(_),ArrayType(15,ArrayType(2,ArrayType(46,ArrayType(78074,ArrayType(1,ArrayType(3,StringType)))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 916))

    def test_917(self):
        line = '''Class _{}Class nF:_{}Class z_{_w(__2,K:d6G;_:Boolean ;_:Array [Array [Array [Array [Array [Array [String ,0b1000001],045],51_6],045],0b1000001],0x57];v:Int ;vQ7:n4_n3T;_J_,Cg,_,__,_,_4:Ld){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(nF),Id(_),[]),ClassDecl(Id(z_),[MethodDecl(Id(_w),Instance,[param(Id(__2),ClassType(Id(d6G))),param(Id(K),ClassType(Id(d6G))),param(Id(_),BoolType),param(Id(_),ArrayType(87,ArrayType(65,ArrayType(37,ArrayType(516,ArrayType(37,ArrayType(65,StringType))))))),param(Id(v),IntType),param(Id(vQ7),ClassType(Id(n4_n3T))),param(Id(_J_),ClassType(Id(Ld))),param(Id(Cg),ClassType(Id(Ld))),param(Id(_),ClassType(Id(Ld))),param(Id(__),ClassType(Id(Ld))),param(Id(_),ClassType(Id(Ld))),param(Id(_4),ClassType(Id(Ld)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 917))

    def test_918(self):
        line = '''Class m_{c(){Var r6:Array [Array [Array [Int ,050],0B1010],0xC];}Val $6:Int ;}Class _{Destructor (){} }Class P:R3{Val $k_,_,$__,$J:_;Constructor (Dn,L:String ;_:String ;Y:Boolean ){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(m_),[MethodDecl(Id(c),Instance,[],Block([VarDecl(Id(r6),ArrayType(12,ArrayType(10,ArrayType(40,IntType))))])),AttributeDecl(Static,ConstDecl(Id($6),IntType,None))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(P),Id(R3),[AttributeDecl(Static,ConstDecl(Id($k_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($J),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(Dn),StringType),param(Id(L),StringType),param(Id(_),StringType),param(Id(Y),BoolType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 918))

    def test_919(self):
        line = '''Class B:c{Destructor (){Break ;Val dO,w,u_,_:Array [Array [Array [String ,0B1010],0B1],0b1];}Var B7,$G,_7V,qd:Array [Array [Boolean ,041],0XA];Destructor (){ {} }}Class _{Constructor (){} }Class _{Constructor (){Var _D:__;} }'''
        expect = '''Program([ClassDecl(Id(B),Id(c),[MethodDecl(Id(Destructor),Instance,[],Block([Break,ConstDecl(Id(dO),ArrayType(1,ArrayType(1,ArrayType(10,StringType))),None),ConstDecl(Id(w),ArrayType(1,ArrayType(1,ArrayType(10,StringType))),None),ConstDecl(Id(u_),ArrayType(1,ArrayType(1,ArrayType(10,StringType))),None),ConstDecl(Id(_),ArrayType(1,ArrayType(1,ArrayType(10,StringType))),None)])),AttributeDecl(Instance,VarDecl(Id(B7),ArrayType(10,ArrayType(33,BoolType)))),AttributeDecl(Static,VarDecl(Id($G),ArrayType(10,ArrayType(33,BoolType)))),AttributeDecl(Instance,VarDecl(Id(_7V),ArrayType(10,ArrayType(33,BoolType)))),AttributeDecl(Instance,VarDecl(Id(qd),ArrayType(10,ArrayType(33,BoolType)))),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([VarDecl(Id(_D),ClassType(Id(__)),NullLiteral())]))])])'''
        self.assertTrue(TestAST.test(line, expect, 919))

    def test_920(self):
        line = '''Class l6:_{Destructor (){}Constructor (_:Array [Array [Array [Array [String ,5],63],0xD],49];f,B:Boolean ;LH,N,_1,h:Array [Array [Array [Array [Array [Int ,49],0X8_5A],064],49],04]){} }'''
        expect = '''Program([ClassDecl(Id(l6),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(49,ArrayType(13,ArrayType(63,ArrayType(5,StringType))))),param(Id(f),BoolType),param(Id(B),BoolType),param(Id(LH),ArrayType(4,ArrayType(49,ArrayType(52,ArrayType(2138,ArrayType(49,IntType)))))),param(Id(N),ArrayType(4,ArrayType(49,ArrayType(52,ArrayType(2138,ArrayType(49,IntType)))))),param(Id(_1),ArrayType(4,ArrayType(49,ArrayType(52,ArrayType(2138,ArrayType(49,IntType)))))),param(Id(h),ArrayType(4,ArrayType(49,ArrayType(52,ArrayType(2138,ArrayType(49,IntType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 920))

    def test_921(self):
        line = '''Class Y{Constructor (){Continue ;}Constructor (Lt,_2,_:Array [Float ,07];_:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0B1_00],0X8],0b10_1],0b10],0b1_1_1],0132],0X35],0432];o,o__,I2:Array [Array [Float ,0xFA],0X789_9];s:_){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(Y),[MethodDecl(Id(Constructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(Lt),ArrayType(7,FloatType)),param(Id(_2),ArrayType(7,FloatType)),param(Id(_),ArrayType(7,FloatType)),param(Id(_),ArrayType(282,ArrayType(53,ArrayType(90,ArrayType(7,ArrayType(2,ArrayType(5,ArrayType(8,ArrayType(4,IntType))))))))),param(Id(o),ArrayType(30873,ArrayType(250,FloatType))),param(Id(o__),ArrayType(30873,ArrayType(250,FloatType))),param(Id(I2),ArrayType(30873,ArrayType(250,FloatType))),param(Id(s),ClassType(Id(_)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 921))

    def test_922(self):
        line = '''Class __{Constructor (){} }Class m{Var F,J2:z4;Var $_56:__1_;M(p,P,_X,_e_:Array [Float ,0144];E:Array [Array [String ,0b10],01_6_0];_,_,__,_,h,__:Array [Array [Boolean ,05],0x31];_,X,B,r:Int ;k80:String ;z:Boolean ;_,u:_){} }Class __7_:_25{}Class LX__{}'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(m),[AttributeDecl(Instance,VarDecl(Id(F),ClassType(Id(z4)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(J2),ClassType(Id(z4)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_56),ClassType(Id(__1_)),NullLiteral())),MethodDecl(Id(M),Instance,[param(Id(p),ArrayType(100,FloatType)),param(Id(P),ArrayType(100,FloatType)),param(Id(_X),ArrayType(100,FloatType)),param(Id(_e_),ArrayType(100,FloatType)),param(Id(E),ArrayType(112,ArrayType(2,StringType))),param(Id(_),ArrayType(49,ArrayType(5,BoolType))),param(Id(_),ArrayType(49,ArrayType(5,BoolType))),param(Id(__),ArrayType(49,ArrayType(5,BoolType))),param(Id(_),ArrayType(49,ArrayType(5,BoolType))),param(Id(h),ArrayType(49,ArrayType(5,BoolType))),param(Id(__),ArrayType(49,ArrayType(5,BoolType))),param(Id(_),IntType),param(Id(X),IntType),param(Id(B),IntType),param(Id(r),IntType),param(Id(k80),StringType),param(Id(z),BoolType),param(Id(_),ClassType(Id(_))),param(Id(u),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(__7_),Id(_25),[]),ClassDecl(Id(LX__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 922))

    def test_923(self):
        line = '''Class s:_{}Class _{II(){}Var $_4v:r;$0_(){}Constructor (LN9_:x3;_,_24Vsz2:Array [Array [Array [Boolean ,0B10000],0b10],0b1011111];w:Array [Float ,01]){}Val _2W__8,$I1_,$u,$_N:b;}'''
        expect = '''Program([ClassDecl(Id(s),Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id(II),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_4v),ClassType(Id(r)),NullLiteral())),MethodDecl(Id($0_),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(LN9_),ClassType(Id(x3))),param(Id(_),ArrayType(95,ArrayType(2,ArrayType(16,BoolType)))),param(Id(_24Vsz2),ArrayType(95,ArrayType(2,ArrayType(16,BoolType)))),param(Id(w),ArrayType(1,FloatType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_2W__8),ClassType(Id(b)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($I1_),ClassType(Id(b)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($u),ClassType(Id(b)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_N),ClassType(Id(b)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 923))

    def test_924(self):
        line = '''Class y:_Q{Val $I:Int ;}Class __E9{Var j3,Z:D__;}Class _f_:u{}Class B9:F2{Destructor (){New __().F.E()._WJU_._j_.u34_();}Constructor (_1ip1,M,Z:Float ){ {} }}Class d:u_{}'''
        expect = '''Program([ClassDecl(Id(y),Id(_Q),[AttributeDecl(Static,ConstDecl(Id($I),IntType,None))]),ClassDecl(Id(__E9),[AttributeDecl(Instance,VarDecl(Id(j3),ClassType(Id(D__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Z),ClassType(Id(D__)),NullLiteral()))]),ClassDecl(Id(_f_),Id(u),[]),ClassDecl(Id(B9),Id(F2),[MethodDecl(Id(Destructor),Instance,[],Block([Call(FieldAccess(FieldAccess(CallExpr(FieldAccess(NewExpr(Id(__),[]),Id(F)),Id(E),[]),Id(_WJU_)),Id(_j_)),Id(u34_),[])])),MethodDecl(Id(Constructor),Instance,[param(Id(_1ip1),FloatType),param(Id(M),FloatType),param(Id(Z),FloatType)],Block([Block([])]))]),ClassDecl(Id(d),Id(u_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 924))

    def test_925(self):
        line = '''Class f{Destructor (){ {} }Destructor (){ {Var l,_79,_4,_,__H:Int ;} }}Class b:__s{Destructor (){}Constructor (){Return ;Return ;}Constructor (){Continue ;Continue ;}N(A:Boolean ){} }Class s:E48__{}Class _:d_f1_{}Class _1_{}Class _o5{}'''
        expect = '''Program([ClassDecl(Id(f),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),MethodDecl(Id(Destructor),Instance,[],Block([Block([VarDecl(Id(l),IntType),VarDecl(Id(_79),IntType),VarDecl(Id(_4),IntType),VarDecl(Id(_),IntType),VarDecl(Id(__H),IntType)])]))]),ClassDecl(Id(b),Id(__s),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Return(),Return()])),MethodDecl(Id(Constructor),Instance,[],Block([Continue,Continue])),MethodDecl(Id(N),Instance,[param(Id(A),BoolType)],Block([]))]),ClassDecl(Id(s),Id(E48__),[]),ClassDecl(Id(_),Id(d_f1_),[]),ClassDecl(Id(_1_),[]),ClassDecl(Id(_o5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 925))

    def test_926(self):
        line = '''Class Bg_{Val $42_,$4U0,Iw,$668:_;Constructor (Y9,r54034_:Array [String ,02];z,_0T_7:Array [Array [String ,0b1],99];l4,i:_;_H,T:Array [Array [Array [Array [Array [Array [Float ,0B1],03],05],99],0b111101],0B1100011]){}Var m2,D:__8f7_03;}Class t:_{}'''
        expect = '''Program([ClassDecl(Id(Bg_),[AttributeDecl(Static,ConstDecl(Id($42_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($4U0),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(Iw),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($668),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(Y9),ArrayType(2,StringType)),param(Id(r54034_),ArrayType(2,StringType)),param(Id(z),ArrayType(99,ArrayType(1,StringType))),param(Id(_0T_7),ArrayType(99,ArrayType(1,StringType))),param(Id(l4),ClassType(Id(_))),param(Id(i),ClassType(Id(_))),param(Id(_H),ArrayType(99,ArrayType(61,ArrayType(99,ArrayType(5,ArrayType(3,ArrayType(1,FloatType))))))),param(Id(T),ArrayType(99,ArrayType(61,ArrayType(99,ArrayType(5,ArrayType(3,ArrayType(1,FloatType)))))))],Block([])),AttributeDecl(Instance,VarDecl(Id(m2),ClassType(Id(__8f7_03)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(D),ClassType(Id(__8f7_03)),NullLiteral()))]),ClassDecl(Id(t),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 926))

    def test_927(self):
        line = '''Class V:R{}Class t:K{}Class _{Val $__IjH3__:Boolean ;}Class g_{Constructor (_0_9,O_Rw,z:Array [Array [Array [String ,27],0B1],2_9_5];y_:Array [Array [Array [Array [Array [Array [Float ,01_7_412],0B1],27],0B1],0B11010],0x5F];_:__6){}Destructor (){} }Class _d6:_{Val $y5:_;}Class ___94_k_{__(){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(V),Id(R),[]),ClassDecl(Id(t),Id(K),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($__IjH3__),BoolType,None))]),ClassDecl(Id(g_),[MethodDecl(Id(Constructor),Instance,[param(Id(_0_9),ArrayType(295,ArrayType(1,ArrayType(27,StringType)))),param(Id(O_Rw),ArrayType(295,ArrayType(1,ArrayType(27,StringType)))),param(Id(z),ArrayType(295,ArrayType(1,ArrayType(27,StringType)))),param(Id(y_),ArrayType(95,ArrayType(26,ArrayType(1,ArrayType(27,ArrayType(1,ArrayType(7946,FloatType))))))),param(Id(_),ClassType(Id(__6)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_d6),Id(_),[AttributeDecl(Static,ConstDecl(Id($y5),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(___94_k_),[MethodDecl(Id(__),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 927))

    def test_928(self):
        line = '''Class F36{}Class p:z{_C(_:Array [Int ,942_364_5_9_0];JC4_648:Float ;__Z_1,_,_9:Float ){}Constructor (u,n47p,PY:E_){}s_(){Continue ;}W__(jz__:Int ){Break ;{}Continue ;}Destructor (){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(F36),[]),ClassDecl(Id(p),Id(z),[MethodDecl(Id(_C),Instance,[param(Id(_),ArrayType(942364590,IntType)),param(Id(JC4_648),FloatType),param(Id(__Z_1),FloatType),param(Id(_),FloatType),param(Id(_9),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(u),ClassType(Id(E_))),param(Id(n47p),ClassType(Id(E_))),param(Id(PY),ClassType(Id(E_)))],Block([])),MethodDecl(Id(s_),Instance,[],Block([Continue])),MethodDecl(Id(W__),Instance,[param(Id(jz__),IntType)],Block([Break,Block([]),Continue])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 928))

    def test_929(self):
        line = '''Class a{}Class _:_{}Class o:__{Destructor (){Break ;}Val $5,$z:_6;Constructor (hf,D:Array [Array [Array [Float ,0B1_1],0x5_5_5],01_2];Iu,__,__,kk:Array [Array [Array [Float ,0b1100],0x4_E_6],0xB_9_C_1A];_E:_;_,J__,aU,gh5,_,_:_){} }'''
        expect = '''Program([ClassDecl(Id(a),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(o),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([Break])),AttributeDecl(Static,ConstDecl(Id($5),ClassType(Id(_6)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($z),ClassType(Id(_6)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(hf),ArrayType(10,ArrayType(1365,ArrayType(3,FloatType)))),param(Id(D),ArrayType(10,ArrayType(1365,ArrayType(3,FloatType)))),param(Id(Iu),ArrayType(760858,ArrayType(1254,ArrayType(12,FloatType)))),param(Id(__),ArrayType(760858,ArrayType(1254,ArrayType(12,FloatType)))),param(Id(__),ArrayType(760858,ArrayType(1254,ArrayType(12,FloatType)))),param(Id(kk),ArrayType(760858,ArrayType(1254,ArrayType(12,FloatType)))),param(Id(_E),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(J__),ClassType(Id(_))),param(Id(aU),ClassType(Id(_))),param(Id(gh5),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 929))

    def test_930(self):
        line = '''Class __{Constructor (_:R_M8_){}_W(z_,_8:Z_6;u,___99:Array [Array [Boolean ,11],11];N:_;_mP:_8;ya:H;_:___o;_:Array [Int ,2]){Return ;Var _,_:Array [Array [Boolean ,072],0B1010111];} }'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(R_M8_)))],Block([])),MethodDecl(Id(_W),Instance,[param(Id(z_),ClassType(Id(Z_6))),param(Id(_8),ClassType(Id(Z_6))),param(Id(u),ArrayType(11,ArrayType(11,BoolType))),param(Id(___99),ArrayType(11,ArrayType(11,BoolType))),param(Id(N),ClassType(Id(_))),param(Id(_mP),ClassType(Id(_8))),param(Id(ya),ClassType(Id(H))),param(Id(_),ClassType(Id(___o))),param(Id(_),ArrayType(2,IntType))],Block([Return(),VarDecl(Id(_),ArrayType(87,ArrayType(58,BoolType))),VarDecl(Id(_),ArrayType(87,ArrayType(58,BoolType)))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 930))

    def test_931(self):
        line = '''Class _{Var $05p,$c2_:j_;Var $9,c,$_:Array [String ,037_1];$N(__2_:cA){Break ;} }Class _3:W{}Class f{}Class _9{Val sRY,$_,d,_:Float ;$K4(j0__:_;_,d5l_b_C10,SUy:Array [Array [Array [Array [Float ,12],057],0xB0_7],0X35]){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($05p),ClassType(Id(j_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($c2_),ClassType(Id(j_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($9),ArrayType(249,StringType))),AttributeDecl(Instance,VarDecl(Id(c),ArrayType(249,StringType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(249,StringType))),MethodDecl(Id($N),Static,[param(Id(__2_),ClassType(Id(cA)))],Block([Break]))]),ClassDecl(Id(_3),Id(W),[]),ClassDecl(Id(f),[]),ClassDecl(Id(_9),[AttributeDecl(Instance,ConstDecl(Id(sRY),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(d),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),MethodDecl(Id($K4),Static,[param(Id(j0__),ClassType(Id(_))),param(Id(_),ArrayType(53,ArrayType(2823,ArrayType(47,ArrayType(12,FloatType))))),param(Id(d5l_b_C10),ArrayType(53,ArrayType(2823,ArrayType(47,ArrayType(12,FloatType))))),param(Id(SUy),ArrayType(53,ArrayType(2823,ArrayType(47,ArrayType(12,FloatType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 931))

    def test_932(self):
        line = '''Class O:c_{Constructor (_,d__:_;_,_1,_v,_2TY_c81:String ){}Q(__,_C,__m:Float ;_:Float ){}Var _,_,o,$c5,Jq8u:X;_8(_,u3_:_37__0;U_:_;S:Array [Array [String ,0117],0B101001]){} }'''
        expect = '''Program([ClassDecl(Id(O),Id(c_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(d__),ClassType(Id(_))),param(Id(_),StringType),param(Id(_1),StringType),param(Id(_v),StringType),param(Id(_2TY_c81),StringType)],Block([])),MethodDecl(Id(Q),Instance,[param(Id(__),FloatType),param(Id(_C),FloatType),param(Id(__m),FloatType),param(Id(_),FloatType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(X)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(X)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(o),ClassType(Id(X)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($c5),ClassType(Id(X)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Jq8u),ClassType(Id(X)),NullLiteral())),MethodDecl(Id(_8),Instance,[param(Id(_),ClassType(Id(_37__0))),param(Id(u3_),ClassType(Id(_37__0))),param(Id(U_),ClassType(Id(_))),param(Id(S),ArrayType(41,ArrayType(79,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 932))

    def test_933(self):
        line = '''Class aB__D:__8{Val _x,$1,$78,G:o;Constructor (__,n,_:Array [Array [Boolean ,9],0b101101]){a__::$G()._._();} }Class p_8{Val $7_:Array [Array [Array [Array [String ,0X21],0b1],0B1],0b1];Var v,$p_9,$P,$_:_0;}'''
        expect = '''Program([ClassDecl(Id(aB__D),Id(__8),[AttributeDecl(Instance,ConstDecl(Id(_x),ClassType(Id(o)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($1),ClassType(Id(o)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($78),ClassType(Id(o)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(G),ClassType(Id(o)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(45,ArrayType(9,BoolType))),param(Id(n),ArrayType(45,ArrayType(9,BoolType))),param(Id(_),ArrayType(45,ArrayType(9,BoolType)))],Block([Call(FieldAccess(CallExpr(Id(a__),Id($G),[]),Id(_)),Id(_),[])]))]),ClassDecl(Id(p_8),[AttributeDecl(Static,ConstDecl(Id($7_),ArrayType(1,ArrayType(1,ArrayType(1,ArrayType(33,StringType)))),None)),AttributeDecl(Instance,VarDecl(Id(v),ClassType(Id(_0)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($p_9),ClassType(Id(_0)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($P),ClassType(Id(_0)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_0)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 933))

    def test_934(self):
        line = '''Class _:_{}Class _5{}Class H:P3___{}Class d_:_n5{Var Q_0ux,$o2_:Array [String ,34];}Class E{}Class V_{c18_(){}Constructor (X:Array [Array [Array [String ,0x89],0X52],076]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_5),[]),ClassDecl(Id(H),Id(P3___),[]),ClassDecl(Id(d_),Id(_n5),[AttributeDecl(Instance,VarDecl(Id(Q_0ux),ArrayType(34,StringType))),AttributeDecl(Static,VarDecl(Id($o2_),ArrayType(34,StringType)))]),ClassDecl(Id(E),[]),ClassDecl(Id(V_),[MethodDecl(Id(c18_),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(X),ArrayType(62,ArrayType(82,ArrayType(137,StringType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 934))

    def test_935(self):
        line = '''Class vj:a3u{C_(_:Array [Boolean ,62];Q7:_;H:Array [Array [Array [Array [String ,0xD_496],0104],0104],62];O,_,uy,r_:_h){Val _,_,_,_,A1,_,_:u__0;Var hq,_w_L8,i61:Boolean ;} }'''
        expect = '''Program([ClassDecl(Id(vj),Id(a3u),[MethodDecl(Id(C_),Instance,[param(Id(_),ArrayType(62,BoolType)),param(Id(Q7),ClassType(Id(_))),param(Id(H),ArrayType(62,ArrayType(68,ArrayType(68,ArrayType(54422,StringType))))),param(Id(O),ClassType(Id(_h))),param(Id(_),ClassType(Id(_h))),param(Id(uy),ClassType(Id(_h))),param(Id(r_),ClassType(Id(_h)))],Block([ConstDecl(Id(_),ClassType(Id(u__0)),NullLiteral()),ConstDecl(Id(_),ClassType(Id(u__0)),NullLiteral()),ConstDecl(Id(_),ClassType(Id(u__0)),NullLiteral()),ConstDecl(Id(_),ClassType(Id(u__0)),NullLiteral()),ConstDecl(Id(A1),ClassType(Id(u__0)),NullLiteral()),ConstDecl(Id(_),ClassType(Id(u__0)),NullLiteral()),ConstDecl(Id(_),ClassType(Id(u__0)),NullLiteral()),VarDecl(Id(hq),BoolType),VarDecl(Id(_w_L8),BoolType),VarDecl(Id(i61),BoolType)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 935))

    def test_936(self):
        line = '''Class X4_{$D(__8:String ;d,x__:Boolean ;u_q__5,_z,_,_,x,X___:Array [String ,0b101100]){}$qa_1_(_:Float ;_:Array [Array [Array [String ,39],0132],05];___6_,P,L5,J4:S_){Continue ;{} }}Class __:_t30_{Constructor (){}$3__7q6(){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(X4_),[MethodDecl(Id($D),Static,[param(Id(__8),StringType),param(Id(d),BoolType),param(Id(x__),BoolType),param(Id(u_q__5),ArrayType(44,StringType)),param(Id(_z),ArrayType(44,StringType)),param(Id(_),ArrayType(44,StringType)),param(Id(_),ArrayType(44,StringType)),param(Id(x),ArrayType(44,StringType)),param(Id(X___),ArrayType(44,StringType))],Block([])),MethodDecl(Id($qa_1_),Static,[param(Id(_),FloatType),param(Id(_),ArrayType(5,ArrayType(90,ArrayType(39,StringType)))),param(Id(___6_),ClassType(Id(S_))),param(Id(P),ClassType(Id(S_))),param(Id(L5),ClassType(Id(S_))),param(Id(J4),ClassType(Id(S_)))],Block([Continue,Block([])]))]),ClassDecl(Id(__),Id(_t30_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($3__7q6),Static,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 936))

    def test_937(self):
        line = '''Class P_x42_{}Class _{}Class O:_x{Val $8,D_,$4_:X;}Class B{ei(__654_066s,_3e__89,_66,_3_:Array [Array [Array [Array [Array [String ,0x3_6],0107],0B1],0B1100],0B1100];X:_;_F_W:Array [Boolean ,0107]){Continue ;{} }}Class _V9__{}Class __6{}Class Q1:X{}'''
        expect = '''Program([ClassDecl(Id(P_x42_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(O),Id(_x),[AttributeDecl(Static,ConstDecl(Id($8),ClassType(Id(X)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(D_),ClassType(Id(X)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($4_),ClassType(Id(X)),NullLiteral()))]),ClassDecl(Id(B),[MethodDecl(Id(ei),Instance,[param(Id(__654_066s),ArrayType(12,ArrayType(12,ArrayType(1,ArrayType(71,ArrayType(54,StringType)))))),param(Id(_3e__89),ArrayType(12,ArrayType(12,ArrayType(1,ArrayType(71,ArrayType(54,StringType)))))),param(Id(_66),ArrayType(12,ArrayType(12,ArrayType(1,ArrayType(71,ArrayType(54,StringType)))))),param(Id(_3_),ArrayType(12,ArrayType(12,ArrayType(1,ArrayType(71,ArrayType(54,StringType)))))),param(Id(X),ClassType(Id(_))),param(Id(_F_W),ArrayType(71,BoolType))],Block([Continue,Block([])]))]),ClassDecl(Id(_V9__),[]),ClassDecl(Id(__6),[]),ClassDecl(Id(Q1),Id(X),[])])'''
        self.assertTrue(TestAST.test(line, expect, 937))

    def test_938(self):
        line = '''Class _{Var Xq_w:Array [Array [Float ,0xB],0b1];Var $_4c_:Boolean ;_(P2_W_,Wr9___0:Int ;Mw8r,h1:Boolean ){Break ;}Var j:c_J__;Constructor (_6,F__:Array [Float ,0b1_10];bn:dH;l:Array [Array [Array [Array [Array [Array [Array [String ,01],0B1],065],0b10],0X51],6019_3],45]){Continue ;{} }}Class _{}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(Xq_w),ArrayType(1,ArrayType(11,FloatType)))),AttributeDecl(Static,VarDecl(Id($_4c_),BoolType)),MethodDecl(Id(_),Instance,[param(Id(P2_W_),IntType),param(Id(Wr9___0),IntType),param(Id(Mw8r),BoolType),param(Id(h1),BoolType)],Block([Break])),AttributeDecl(Instance,VarDecl(Id(j),ClassType(Id(c_J__)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_6),ArrayType(6,FloatType)),param(Id(F__),ArrayType(6,FloatType)),param(Id(bn),ClassType(Id(dH))),param(Id(l),ArrayType(45,ArrayType(60193,ArrayType(81,ArrayType(2,ArrayType(53,ArrayType(1,ArrayType(1,StringType))))))))],Block([Continue,Block([])]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 938))

    def test_939(self):
        line = '''Class Y7:S{$3(_,____:Boolean ;F,_,o2YS:Array [Int ,0x2C];_,__,_,_,R,_:Array [Float ,0x9_3];_3:_){} }Class F{Constructor (i1,p_:U_1){Break ;} }Class _{}Class N6K:B{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(Y7),Id(S),[MethodDecl(Id($3),Static,[param(Id(_),BoolType),param(Id(____),BoolType),param(Id(F),ArrayType(44,IntType)),param(Id(_),ArrayType(44,IntType)),param(Id(o2YS),ArrayType(44,IntType)),param(Id(_),ArrayType(147,FloatType)),param(Id(__),ArrayType(147,FloatType)),param(Id(_),ArrayType(147,FloatType)),param(Id(_),ArrayType(147,FloatType)),param(Id(R),ArrayType(147,FloatType)),param(Id(_),ArrayType(147,FloatType)),param(Id(_3),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(F),[MethodDecl(Id(Constructor),Instance,[param(Id(i1),ClassType(Id(U_1))),param(Id(p_),ClassType(Id(U_1)))],Block([Break]))]),ClassDecl(Id(_),[]),ClassDecl(Id(N6K),Id(B),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 939))

    def test_940(self):
        line = '''Class A0A3Q:L_5{Destructor (){} }Class O:D{Var _,$s,$_:Array [Array [Array [Array [Float ,07],06],56],56];}Class ____{}Class Q3P{}Class Z5:_{Val $1_X0:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,96],0X45],56],0b1000010],047],0b1],0X45],56];}Class T{}Class uV_6:_{}Class O:__{}Class __o:i{}'''
        expect = '''Program([ClassDecl(Id(A0A3Q),Id(L_5),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(O),Id(D),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(56,ArrayType(56,ArrayType(6,ArrayType(7,FloatType)))))),AttributeDecl(Static,VarDecl(Id($s),ArrayType(56,ArrayType(56,ArrayType(6,ArrayType(7,FloatType)))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(56,ArrayType(56,ArrayType(6,ArrayType(7,FloatType))))))]),ClassDecl(Id(____),[]),ClassDecl(Id(Q3P),[]),ClassDecl(Id(Z5),Id(_),[AttributeDecl(Static,ConstDecl(Id($1_X0),ArrayType(56,ArrayType(69,ArrayType(1,ArrayType(39,ArrayType(66,ArrayType(56,ArrayType(69,ArrayType(96,BoolType)))))))),None))]),ClassDecl(Id(T),[]),ClassDecl(Id(uV_6),Id(_),[]),ClassDecl(Id(O),Id(__),[]),ClassDecl(Id(__o),Id(i),[])])'''
        self.assertTrue(TestAST.test(line, expect, 940))

    def test_941(self):
        line = '''Class _{}Class _9{Constructor (bv94,U9,_:B_0FP_;_,D:A91;n_,d34,KT,N,U_0:Float ;C,z9,E:Array [String ,0xB];_:Array [Array [Int ,01_5],0B110110]){}Constructor (x6:Float ;U:Array [Int ,0B110110];_s:String ;__,q_:Array [Int ,8]){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_9),[MethodDecl(Id(Constructor),Instance,[param(Id(bv94),ClassType(Id(B_0FP_))),param(Id(U9),ClassType(Id(B_0FP_))),param(Id(_),ClassType(Id(B_0FP_))),param(Id(_),ClassType(Id(A91))),param(Id(D),ClassType(Id(A91))),param(Id(n_),FloatType),param(Id(d34),FloatType),param(Id(KT),FloatType),param(Id(N),FloatType),param(Id(U_0),FloatType),param(Id(C),ArrayType(11,StringType)),param(Id(z9),ArrayType(11,StringType)),param(Id(E),ArrayType(11,StringType)),param(Id(_),ArrayType(54,ArrayType(13,IntType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(x6),FloatType),param(Id(U),ArrayType(54,IntType)),param(Id(_s),StringType),param(Id(__),ArrayType(8,IntType)),param(Id(q_),ArrayType(8,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 941))

    def test_942(self):
        line = '''Class _8{}Class _n_01:Cex_7y{}Class _:i{}Class B:_{}Class L__{Destructor (){}Var _:Array [Int ,0b1010];Constructor (){} }Class A1{Constructor (){} }Class Rp_:U7{Val $_:Array [Array [Array [Float ,0X11],7_6_9],98];}'''
        expect = '''Program([ClassDecl(Id(_8),[]),ClassDecl(Id(_n_01),Id(Cex_7y),[]),ClassDecl(Id(_),Id(i),[]),ClassDecl(Id(B),Id(_),[]),ClassDecl(Id(L__),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(10,IntType))),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(A1),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(Rp_),Id(U7),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(98,ArrayType(769,ArrayType(17,FloatType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 942))

    def test_943(self):
        line = '''Class _:x{Val $6xm:Array [Array [Array [Array [Array [Int ,30],0B10101],0b1_1],02],9_0];Constructor (_:Array [String ,0x16];c_:Array [Array [Boolean ,02],0B11_1];_0__,_H:String ;_7PH9:Boolean ;_u,n:_3;QD:Array [Boolean ,0B10101]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(x),[AttributeDecl(Static,ConstDecl(Id($6xm),ArrayType(90,ArrayType(2,ArrayType(3,ArrayType(21,ArrayType(30,IntType))))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(22,StringType)),param(Id(c_),ArrayType(7,ArrayType(2,BoolType))),param(Id(_0__),StringType),param(Id(_H),StringType),param(Id(_7PH9),BoolType),param(Id(_u),ClassType(Id(_3))),param(Id(n),ClassType(Id(_3))),param(Id(QD),ArrayType(21,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 943))

    def test_944(self):
        line = '''Class l{Destructor (){}Constructor (DN:Array [Array [Array [Array [Array [String ,8],0x62],0XD],0b1_01],85];__U:Boolean ){}Destructor (){}Val $t_2:z_3;}Class _:__5{}'''
        expect = '''Program([ClassDecl(Id(l),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(DN),ArrayType(85,ArrayType(5,ArrayType(13,ArrayType(98,ArrayType(8,StringType)))))),param(Id(__U),BoolType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($t_2),ClassType(Id(z_3)),NullLiteral()))]),ClassDecl(Id(_),Id(__5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 944))

    def test_945(self):
        line = '''Class _{Var $0G_____:Float =!!!!!p4::$9I__().Q8_J()._().E._().__()%!!l::$q();Val __5n,_R,$6:_;}Class O:_{Var $4:Int ;Constructor (__,__,Z:Array [Array [Array [Int ,0715],0104],0b1];_:String ){} }Class _5_7:y{}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($0G_____),FloatType,BinaryOp(%,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,CallExpr(CallExpr(FieldAccess(CallExpr(CallExpr(CallExpr(Id(p4),Id($9I__),[]),Id(Q8_J),[]),Id(_),[]),Id(E)),Id(_),[]),Id(__),[])))))),UnaryOp(!,UnaryOp(!,CallExpr(Id(l),Id($q),[])))))),AttributeDecl(Instance,ConstDecl(Id(__5n),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_R),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($6),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(O),Id(_),[AttributeDecl(Static,VarDecl(Id($4),IntType)),MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(1,ArrayType(68,ArrayType(461,IntType)))),param(Id(__),ArrayType(1,ArrayType(68,ArrayType(461,IntType)))),param(Id(Z),ArrayType(1,ArrayType(68,ArrayType(461,IntType)))),param(Id(_),StringType)],Block([]))]),ClassDecl(Id(_5_7),Id(y),[])])'''
        self.assertTrue(TestAST.test(line, expect, 945))

    def test_946(self):
        line = '''Class D:C{Var $__,$_,b,$_,$70,$7,_:Array [Array [Boolean ,0X41],0B101101];Val $8_,$47EW2,_6y:F5;Constructor (s1,N3:String ;_,D:Array [Array [Array [String ,0b1000100],71],0x55]){} }'''
        expect = '''Program([ClassDecl(Id(D),Id(C),[AttributeDecl(Static,VarDecl(Id($__),ArrayType(45,ArrayType(65,BoolType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(45,ArrayType(65,BoolType)))),AttributeDecl(Instance,VarDecl(Id(b),ArrayType(45,ArrayType(65,BoolType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(45,ArrayType(65,BoolType)))),AttributeDecl(Static,VarDecl(Id($70),ArrayType(45,ArrayType(65,BoolType)))),AttributeDecl(Static,VarDecl(Id($7),ArrayType(45,ArrayType(65,BoolType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(45,ArrayType(65,BoolType)))),AttributeDecl(Static,ConstDecl(Id($8_),ClassType(Id(F5)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($47EW2),ClassType(Id(F5)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_6y),ClassType(Id(F5)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(s1),StringType),param(Id(N3),StringType),param(Id(_),ArrayType(85,ArrayType(71,ArrayType(68,StringType)))),param(Id(D),ArrayType(85,ArrayType(71,ArrayType(68,StringType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 946))

    def test_947(self):
        line = '''Class g1:_{Constructor (_:Array [Array [Array [Boolean ,0x5A],024],0B10];W5,j,_F:Float ;q_:v;_,_:_;_,A,n7l,_W__:j_2){}_o(){} }Class _4:n{}Class _V:Q3H{$iH(){}Var $Q:Array [Array [Array [Array [Int ,01],0XE7_2],024],0XF_D_1];}'''
        expect = '''Program([ClassDecl(Id(g1),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(2,ArrayType(20,ArrayType(90,BoolType)))),param(Id(W5),FloatType),param(Id(j),FloatType),param(Id(_F),FloatType),param(Id(q_),ClassType(Id(v))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(j_2))),param(Id(A),ClassType(Id(j_2))),param(Id(n7l),ClassType(Id(j_2))),param(Id(_W__),ClassType(Id(j_2)))],Block([])),MethodDecl(Id(_o),Instance,[],Block([]))]),ClassDecl(Id(_4),Id(n),[]),ClassDecl(Id(_V),Id(Q3H),[MethodDecl(Id($iH),Static,[],Block([])),AttributeDecl(Static,VarDecl(Id($Q),ArrayType(4049,ArrayType(20,ArrayType(3698,ArrayType(1,IntType))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 947))

    def test_948(self):
        line = '''Class K:J{$J(_,__:Array [Array [Array [String ,0b1],0b1011110],03]){}Val R_,$NXA:Array [Array [Int ,88],044];}Class _:__D{}Class _{Constructor (_0_W:String ;_,S,_,_9,_6_:F){}Var $_,$_82,$E9:v;Val _3,u:Q;}'''
        expect = '''Program([ClassDecl(Id(K),Id(J),[MethodDecl(Id($J),Static,[param(Id(_),ArrayType(3,ArrayType(94,ArrayType(1,StringType)))),param(Id(__),ArrayType(3,ArrayType(94,ArrayType(1,StringType))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(R_),ArrayType(36,ArrayType(88,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($NXA),ArrayType(36,ArrayType(88,IntType)),None))]),ClassDecl(Id(_),Id(__D),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_0_W),StringType),param(Id(_),ClassType(Id(F))),param(Id(S),ClassType(Id(F))),param(Id(_),ClassType(Id(F))),param(Id(_9),ClassType(Id(F))),param(Id(_6_),ClassType(Id(F)))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(v)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_82),ClassType(Id(v)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($E9),ClassType(Id(v)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_3),ClassType(Id(Q)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(u),ClassType(Id(Q)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 948))

    def test_949(self):
        line = '''Class i:b{Destructor (){}Constructor (_Z78d:W3;_w6,__549f:Array [Int ,0X3_2_ED_7];_x:Array [Int ,0X4A];_:B;__U3_,y:T;af_,V__5:Array [Array [String ,05],0b1010100]){}e_up(){}Var U_:Boolean ;Val $D:String ;Constructor (f,_t,U:L_;_,_,_,nkz:Array [String ,0b1010100]){Break ;{} }}'''
        expect = '''Program([ClassDecl(Id(i),Id(b),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_Z78d),ClassType(Id(W3))),param(Id(_w6),ArrayType(208599,IntType)),param(Id(__549f),ArrayType(208599,IntType)),param(Id(_x),ArrayType(74,IntType)),param(Id(_),ClassType(Id(B))),param(Id(__U3_),ClassType(Id(T))),param(Id(y),ClassType(Id(T))),param(Id(af_),ArrayType(84,ArrayType(5,StringType))),param(Id(V__5),ArrayType(84,ArrayType(5,StringType)))],Block([])),MethodDecl(Id(e_up),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(U_),BoolType)),AttributeDecl(Static,ConstDecl(Id($D),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(f),ClassType(Id(L_))),param(Id(_t),ClassType(Id(L_))),param(Id(U),ClassType(Id(L_))),param(Id(_),ArrayType(84,StringType)),param(Id(_),ArrayType(84,StringType)),param(Id(_),ArrayType(84,StringType)),param(Id(nkz),ArrayType(84,StringType))],Block([Break,Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 949))

    def test_950(self):
        line = '''Class V{$_(__:Boolean ){Break ;Continue ;} }Class q{$5c(by,qV,B:Array [Array [Array [Int ,96],0X5F],0XA4]){Continue ;}hI(){} }Class _{Destructor (){Return ;}$y9__3_0(__jN_1:Float ;J:_;A:Array [String ,0X5F];__,z:R){} }'''
        expect = '''Program([ClassDecl(Id(V),[MethodDecl(Id($_),Static,[param(Id(__),BoolType)],Block([Break,Continue]))]),ClassDecl(Id(q),[MethodDecl(Id($5c),Static,[param(Id(by),ArrayType(164,ArrayType(95,ArrayType(96,IntType)))),param(Id(qV),ArrayType(164,ArrayType(95,ArrayType(96,IntType)))),param(Id(B),ArrayType(164,ArrayType(95,ArrayType(96,IntType))))],Block([Continue])),MethodDecl(Id(hI),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Return()])),MethodDecl(Id($y9__3_0),Static,[param(Id(__jN_1),FloatType),param(Id(J),ClassType(Id(_))),param(Id(A),ArrayType(95,StringType)),param(Id(__),ClassType(Id(R))),param(Id(z),ClassType(Id(R)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 950))

    def test_951(self):
        line = '''Class P:q{}Class z4{Constructor (_1,N___,_,v0,b,a,_:Array [Array [Array [String ,07],82],0B110]){}Constructor (){Continue ;}Val $_:__;}Class _:__2q_{Val $k:Array [Array [String ,0X8],0x35];}'''
        expect = '''Program([ClassDecl(Id(P),Id(q),[]),ClassDecl(Id(z4),[MethodDecl(Id(Constructor),Instance,[param(Id(_1),ArrayType(6,ArrayType(82,ArrayType(7,StringType)))),param(Id(N___),ArrayType(6,ArrayType(82,ArrayType(7,StringType)))),param(Id(_),ArrayType(6,ArrayType(82,ArrayType(7,StringType)))),param(Id(v0),ArrayType(6,ArrayType(82,ArrayType(7,StringType)))),param(Id(b),ArrayType(6,ArrayType(82,ArrayType(7,StringType)))),param(Id(a),ArrayType(6,ArrayType(82,ArrayType(7,StringType)))),param(Id(_),ArrayType(6,ArrayType(82,ArrayType(7,StringType))))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(__)),None))]),ClassDecl(Id(_),Id(__2q_),[AttributeDecl(Static,ConstDecl(Id($k),ArrayType(53,ArrayType(8,StringType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 951))

    def test_952(self):
        line = '''Class _{}Class __8:a8_{Constructor (_73:Float ;o,_2K,_,gm,_K,o:Array [Int ,03_3_0]){} }Class _3{}Class U7Oq_:P33{Var __,_,$4IWj:String ;B(){Val Y:Array [String ,0B1_0_0_1];} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(__8),Id(a8_),[MethodDecl(Id(Constructor),Instance,[param(Id(_73),FloatType),param(Id(o),ArrayType(216,IntType)),param(Id(_2K),ArrayType(216,IntType)),param(Id(_),ArrayType(216,IntType)),param(Id(gm),ArrayType(216,IntType)),param(Id(_K),ArrayType(216,IntType)),param(Id(o),ArrayType(216,IntType))],Block([]))]),ClassDecl(Id(_3),[]),ClassDecl(Id(U7Oq_),Id(P33),[AttributeDecl(Instance,VarDecl(Id(__),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Static,VarDecl(Id($4IWj),StringType)),MethodDecl(Id(B),Instance,[],Block([ConstDecl(Id(Y),ArrayType(9,StringType),None)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 952))

    def test_953(self):
        line = '''Class F:_{}Class KR{$_f(){}Constructor (L_2:Array [Array [Float ,0x64],0XD];m_:Float ;_,__:Array [Array [Array [Float ,0X5],3],0B1001100];_,V,e:_){} }Class k:_{Var $_,_:String ;}'''
        expect = '''Program([ClassDecl(Id(F),Id(_),[]),ClassDecl(Id(KR),[MethodDecl(Id($_f),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(L_2),ArrayType(13,ArrayType(100,FloatType))),param(Id(m_),FloatType),param(Id(_),ArrayType(76,ArrayType(3,ArrayType(5,FloatType)))),param(Id(__),ArrayType(76,ArrayType(3,ArrayType(5,FloatType)))),param(Id(_),ClassType(Id(_))),param(Id(V),ClassType(Id(_))),param(Id(e),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(k),Id(_),[AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 953))

    def test_954(self):
        line = '''Class Tu:_{}Class _:P5_{}Class _:_{Constructor (_w,p,_:Boolean ;___,Q:C2_6;__:String ;_s,_2:Array [Array [Array [Int ,0x64],0b110011],0X61]){Val o:Float ;Break ;Return ;} }Class _:R3{}Class tC_av_:v_s___{}'''
        expect = '''Program([ClassDecl(Id(Tu),Id(_),[]),ClassDecl(Id(_),Id(P5_),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_w),BoolType),param(Id(p),BoolType),param(Id(_),BoolType),param(Id(___),ClassType(Id(C2_6))),param(Id(Q),ClassType(Id(C2_6))),param(Id(__),StringType),param(Id(_s),ArrayType(97,ArrayType(51,ArrayType(100,IntType)))),param(Id(_2),ArrayType(97,ArrayType(51,ArrayType(100,IntType))))],Block([ConstDecl(Id(o),FloatType,None),Break,Return()]))]),ClassDecl(Id(_),Id(R3),[]),ClassDecl(Id(tC_av_),Id(v_s___),[])])'''
        self.assertTrue(TestAST.test(line, expect, 954))

    def test_955(self):
        line = '''Class I:d2{}Class t___i_p{}Class b:__S_{Destructor (){}Constructor (){Return ;} }Class _4:_{}Class y{}Class M_:m_7{}Class _6_m{Var $2P,$P:Boolean ;}Class _6:Qi{}Class o1z{}'''
        expect = '''Program([ClassDecl(Id(I),Id(d2),[]),ClassDecl(Id(t___i_p),[]),ClassDecl(Id(b),Id(__S_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Return()]))]),ClassDecl(Id(_4),Id(_),[]),ClassDecl(Id(y),[]),ClassDecl(Id(M_),Id(m_7),[]),ClassDecl(Id(_6_m),[AttributeDecl(Static,VarDecl(Id($2P),BoolType)),AttributeDecl(Static,VarDecl(Id($P),BoolType))]),ClassDecl(Id(_6),Id(Qi),[]),ClassDecl(Id(o1z),[])])'''
        self.assertTrue(TestAST.test(line, expect, 955))

    def test_956(self):
        line = '''Class ___:_4C{}Class ndD:I{Var $6,$e:N;Val P:Array [Float ,0x1];}Class _x_e0{C(_1,iV,k:Array [Array [Array [Int ,0B100011],13],5_11];ow__,d:Boolean ;j3,I:Array [Array [Array [Array [Array [Array [Array [Array [String ,0x26],0B1_0],0X61],0b1010001],0b1010001],0x26],61],03_4_0];___h:Float ){} }'''
        expect = '''Program([ClassDecl(Id(___),Id(_4C),[]),ClassDecl(Id(ndD),Id(I),[AttributeDecl(Static,VarDecl(Id($6),ClassType(Id(N)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($e),ClassType(Id(N)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(P),ArrayType(1,FloatType),None))]),ClassDecl(Id(_x_e0),[MethodDecl(Id(C),Instance,[param(Id(_1),ArrayType(511,ArrayType(13,ArrayType(35,IntType)))),param(Id(iV),ArrayType(511,ArrayType(13,ArrayType(35,IntType)))),param(Id(k),ArrayType(511,ArrayType(13,ArrayType(35,IntType)))),param(Id(ow__),BoolType),param(Id(d),BoolType),param(Id(j3),ArrayType(224,ArrayType(61,ArrayType(38,ArrayType(81,ArrayType(81,ArrayType(97,ArrayType(2,ArrayType(38,StringType))))))))),param(Id(I),ArrayType(224,ArrayType(61,ArrayType(38,ArrayType(81,ArrayType(81,ArrayType(97,ArrayType(2,ArrayType(38,StringType))))))))),param(Id(___h),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 956))

    def test_957(self):
        line = '''Class z{}Class h:_dA0{Constructor (){}$_(_:yu;a:String ;__H,m:String ;Z9,_v,_16,VU,_,_:Array [Array [Array [Int ,45],0x3C],45];__f_Q:Int ;D:Boolean ){}Val $_2_,$3,$p,$_:Array [Boolean ,0B1];$29(C_13Y:_D_;_705:Int ){}ku(){}Var C,$t:Array [Array [Array [Array [Array [Int ,996_6],4],0X63],47_6],0x3C];}Class _{}'''
        expect = '''Program([ClassDecl(Id(z),[]),ClassDecl(Id(h),Id(_dA0),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($_),Static,[param(Id(_),ClassType(Id(yu))),param(Id(a),StringType),param(Id(__H),StringType),param(Id(m),StringType),param(Id(Z9),ArrayType(45,ArrayType(60,ArrayType(45,IntType)))),param(Id(_v),ArrayType(45,ArrayType(60,ArrayType(45,IntType)))),param(Id(_16),ArrayType(45,ArrayType(60,ArrayType(45,IntType)))),param(Id(VU),ArrayType(45,ArrayType(60,ArrayType(45,IntType)))),param(Id(_),ArrayType(45,ArrayType(60,ArrayType(45,IntType)))),param(Id(_),ArrayType(45,ArrayType(60,ArrayType(45,IntType)))),param(Id(__f_Q),IntType),param(Id(D),BoolType)],Block([])),AttributeDecl(Static,ConstDecl(Id($_2_),ArrayType(1,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($3),ArrayType(1,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($p),ArrayType(1,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(1,BoolType),None)),MethodDecl(Id($29),Static,[param(Id(C_13Y),ClassType(Id(_D_))),param(Id(_705),IntType)],Block([])),MethodDecl(Id(ku),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(C),ArrayType(60,ArrayType(476,ArrayType(99,ArrayType(4,ArrayType(9966,IntType))))))),AttributeDecl(Static,VarDecl(Id($t),ArrayType(60,ArrayType(476,ArrayType(99,ArrayType(4,ArrayType(9966,IntType)))))))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 957))

    def test_958(self):
        line = '''Class p{}Class _q{}Class Z7_b:_{}Class F{}Class _:N{$h_(){}Var I,O0y:B;Var w69:Array [Boolean ,77];__(v,_G:Array [Array [Float ,77],77];L,_r1:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,3],0X4D],0b1001000],0x34],8],8_7],046],0x1],61];_R,t,_:__){} }'''
        expect = '''Program([ClassDecl(Id(p),[]),ClassDecl(Id(_q),[]),ClassDecl(Id(Z7_b),Id(_),[]),ClassDecl(Id(F),[]),ClassDecl(Id(_),Id(N),[MethodDecl(Id($h_),Static,[],Block([])),AttributeDecl(Instance,VarDecl(Id(I),ClassType(Id(B)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(O0y),ClassType(Id(B)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(w69),ArrayType(77,BoolType))),MethodDecl(Id(__),Instance,[param(Id(v),ArrayType(77,ArrayType(77,FloatType))),param(Id(_G),ArrayType(77,ArrayType(77,FloatType))),param(Id(L),ArrayType(61,ArrayType(1,ArrayType(38,ArrayType(87,ArrayType(8,ArrayType(52,ArrayType(72,ArrayType(77,ArrayType(3,IntType)))))))))),param(Id(_r1),ArrayType(61,ArrayType(1,ArrayType(38,ArrayType(87,ArrayType(8,ArrayType(52,ArrayType(72,ArrayType(77,ArrayType(3,IntType)))))))))),param(Id(_R),ClassType(Id(__))),param(Id(t),ClassType(Id(__))),param(Id(_),ClassType(Id(__)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 958))

    def test_959(self):
        line = '''Class K77A:w{Val _,$1_,c:Float ;}Class d:F{O(){} }Class __Sd6Q:t6t5{Val $Dv_,$y:w;Var _31:Array [Array [Float ,0107],0x55];}Class _P:_1_Xn7{}Class __:_{Val W:Array [Float ,39];}Class _:_7cRU5{}'''
        expect = '''Program([ClassDecl(Id(K77A),Id(w),[AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($1_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(c),FloatType,None))]),ClassDecl(Id(d),Id(F),[MethodDecl(Id(O),Instance,[],Block([]))]),ClassDecl(Id(__Sd6Q),Id(t6t5),[AttributeDecl(Static,ConstDecl(Id($Dv_),ClassType(Id(w)),None)),AttributeDecl(Static,ConstDecl(Id($y),ClassType(Id(w)),None)),AttributeDecl(Instance,VarDecl(Id(_31),ArrayType(85,ArrayType(71,FloatType))))]),ClassDecl(Id(_P),Id(_1_Xn7),[]),ClassDecl(Id(__),Id(_),[AttributeDecl(Instance,ConstDecl(Id(W),ArrayType(39,FloatType),None))]),ClassDecl(Id(_),Id(_7cRU5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 959))

    def test_960(self):
        line = '''Class _{$_7(__,_,V,j:Int ;r,t,GwqB:Int ;_,L,_t__:N;nO_9__:Array [Array [Array [Array [Int ,0B1011111],5],0126],0X24];W_rX__88,GO,U,V,Z3,k,p32:Array [Int ,0xCC];_,uq_,B,_2:Array [Float ,03_6_2];c,_,_,_:Array [Boolean ,99];_,_:Boolean ){} }Class s:_3{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($_7),Static,[param(Id(__),IntType),param(Id(_),IntType),param(Id(V),IntType),param(Id(j),IntType),param(Id(r),IntType),param(Id(t),IntType),param(Id(GwqB),IntType),param(Id(_),ClassType(Id(N))),param(Id(L),ClassType(Id(N))),param(Id(_t__),ClassType(Id(N))),param(Id(nO_9__),ArrayType(36,ArrayType(86,ArrayType(5,ArrayType(95,IntType))))),param(Id(W_rX__88),ArrayType(204,IntType)),param(Id(GO),ArrayType(204,IntType)),param(Id(U),ArrayType(204,IntType)),param(Id(V),ArrayType(204,IntType)),param(Id(Z3),ArrayType(204,IntType)),param(Id(k),ArrayType(204,IntType)),param(Id(p32),ArrayType(204,IntType)),param(Id(_),ArrayType(242,FloatType)),param(Id(uq_),ArrayType(242,FloatType)),param(Id(B),ArrayType(242,FloatType)),param(Id(_2),ArrayType(242,FloatType)),param(Id(c),ArrayType(99,BoolType)),param(Id(_),ArrayType(99,BoolType)),param(Id(_),ArrayType(99,BoolType)),param(Id(_),ArrayType(99,BoolType)),param(Id(_),BoolType),param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(s),Id(_3),[])])'''
        self.assertTrue(TestAST.test(line, expect, 960))

    def test_961(self):
        line = '''Class n:_{Constructor (_:Array [Array [Boolean ,0X5A],0B1000101]){}Val $3:Array [Array [Int ,0x2],03];}Class _znon:pZwe{}Class _{}Class K_d_{Constructor (_,__:Array [Float ,9];o,B_X,T1,_:Ha7o0;_,_,Q_,_:Array [Float ,80];l_,__:_W_){}Var _a:_WR_F;Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(n),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(69,ArrayType(90,BoolType)))],Block([])),AttributeDecl(Static,ConstDecl(Id($3),ArrayType(3,ArrayType(2,IntType)),None))]),ClassDecl(Id(_znon),Id(pZwe),[]),ClassDecl(Id(_),[]),ClassDecl(Id(K_d_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(9,FloatType)),param(Id(__),ArrayType(9,FloatType)),param(Id(o),ClassType(Id(Ha7o0))),param(Id(B_X),ClassType(Id(Ha7o0))),param(Id(T1),ClassType(Id(Ha7o0))),param(Id(_),ClassType(Id(Ha7o0))),param(Id(_),ArrayType(80,FloatType)),param(Id(_),ArrayType(80,FloatType)),param(Id(Q_),ArrayType(80,FloatType)),param(Id(_),ArrayType(80,FloatType)),param(Id(l_),ClassType(Id(_W_))),param(Id(__),ClassType(Id(_W_)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_a),ClassType(Id(_WR_F)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 961))

    def test_962(self):
        line = '''Class _6_w:N{Var $F_j9:I_;Destructor (){}Constructor (_,B_U,_4:String ;y,I,_0:Array [Array [Array [Array [Array [Float ,0X23],0B1],0X23],0b111100],0b1_01_0_0]){Continue ;Return ;} }Class D8:_j8T{}'''
        expect = '''Program([ClassDecl(Id(_6_w),Id(N),[AttributeDecl(Static,VarDecl(Id($F_j9),ClassType(Id(I_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(B_U),StringType),param(Id(_4),StringType),param(Id(y),ArrayType(20,ArrayType(60,ArrayType(35,ArrayType(1,ArrayType(35,FloatType)))))),param(Id(I),ArrayType(20,ArrayType(60,ArrayType(35,ArrayType(1,ArrayType(35,FloatType)))))),param(Id(_0),ArrayType(20,ArrayType(60,ArrayType(35,ArrayType(1,ArrayType(35,FloatType))))))],Block([Continue,Return()]))]),ClassDecl(Id(D8),Id(_j8T),[])])'''
        self.assertTrue(TestAST.test(line, expect, 962))

    def test_963(self):
        line = '''Class _H:H{$_1(m,x:Int ;_z,b5_,_27:_s;__S2,_:Array [Array [Boolean ,0B1],0X2A];t,z,R:w){}Constructor (q__:Array [String ,0X7];_,s1:Int ){} }Class w:__w{Constructor (_,E:Array [Int ,22];YM7,Sfg56:Array [Array [Float ,03320],22]){} }Class ___{}Class T{}Class c7:y{}'''
        expect = '''Program([ClassDecl(Id(_H),Id(H),[MethodDecl(Id($_1),Static,[param(Id(m),IntType),param(Id(x),IntType),param(Id(_z),ClassType(Id(_s))),param(Id(b5_),ClassType(Id(_s))),param(Id(_27),ClassType(Id(_s))),param(Id(__S2),ArrayType(42,ArrayType(1,BoolType))),param(Id(_),ArrayType(42,ArrayType(1,BoolType))),param(Id(t),ClassType(Id(w))),param(Id(z),ClassType(Id(w))),param(Id(R),ClassType(Id(w)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(q__),ArrayType(7,StringType)),param(Id(_),IntType),param(Id(s1),IntType)],Block([]))]),ClassDecl(Id(w),Id(__w),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(22,IntType)),param(Id(E),ArrayType(22,IntType)),param(Id(YM7),ArrayType(22,ArrayType(1744,FloatType))),param(Id(Sfg56),ArrayType(22,ArrayType(1744,FloatType)))],Block([]))]),ClassDecl(Id(___),[]),ClassDecl(Id(T),[]),ClassDecl(Id(c7),Id(y),[])])'''
        self.assertTrue(TestAST.test(line, expect, 963))

    def test_964(self):
        line = '''Class __K0{Constructor (_,V_k:Int ;_L3:Array [Boolean ,03];__D_nzb,_drM4_,_,Z,_5:Boolean ;k,_2,t,_,M_,d4,z6,_,I:Array [Boolean ,0X561];__:Int ){} }Class _{}Class I_:v__{}Class __sS{Val $_:Float ;}'''
        expect = '''Program([ClassDecl(Id(__K0),[MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(V_k),IntType),param(Id(_L3),ArrayType(3,BoolType)),param(Id(__D_nzb),BoolType),param(Id(_drM4_),BoolType),param(Id(_),BoolType),param(Id(Z),BoolType),param(Id(_5),BoolType),param(Id(k),ArrayType(1377,BoolType)),param(Id(_2),ArrayType(1377,BoolType)),param(Id(t),ArrayType(1377,BoolType)),param(Id(_),ArrayType(1377,BoolType)),param(Id(M_),ArrayType(1377,BoolType)),param(Id(d4),ArrayType(1377,BoolType)),param(Id(z6),ArrayType(1377,BoolType)),param(Id(_),ArrayType(1377,BoolType)),param(Id(I),ArrayType(1377,BoolType)),param(Id(__),IntType)],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(I_),Id(v__),[]),ClassDecl(Id(__sS),[AttributeDecl(Static,ConstDecl(Id($_),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 964))

    def test_965(self):
        line = '''Class A{$nqg(SRK_K,C8,tE,_:_;b:String ;_,q,e:Array [Array [Array [String ,0xAF],46],050_5];_3:GN){}Val $D,_9:Array [Array [Array [Array [Array [Array [Boolean ,0b1001101],02_4],06],0b1001101],9],054];Var $6h,$U:Array [String ,054];_(_,rQ2:Float ){} }'''
        expect = '''Program([ClassDecl(Id(A),[MethodDecl(Id($nqg),Static,[param(Id(SRK_K),ClassType(Id(_))),param(Id(C8),ClassType(Id(_))),param(Id(tE),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(b),StringType),param(Id(_),ArrayType(325,ArrayType(46,ArrayType(175,StringType)))),param(Id(q),ArrayType(325,ArrayType(46,ArrayType(175,StringType)))),param(Id(e),ArrayType(325,ArrayType(46,ArrayType(175,StringType)))),param(Id(_3),ClassType(Id(GN)))],Block([])),AttributeDecl(Static,ConstDecl(Id($D),ArrayType(44,ArrayType(9,ArrayType(77,ArrayType(6,ArrayType(20,ArrayType(77,BoolType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(_9),ArrayType(44,ArrayType(9,ArrayType(77,ArrayType(6,ArrayType(20,ArrayType(77,BoolType)))))),None)),AttributeDecl(Static,VarDecl(Id($6h),ArrayType(44,StringType))),AttributeDecl(Static,VarDecl(Id($U),ArrayType(44,StringType))),MethodDecl(Id(_),Instance,[param(Id(_),FloatType),param(Id(rQ2),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 965))

    def test_966(self):
        line = '''Class __:S_{Var $g_E_,OL,$F3:n;_(P1_:Array [Array [Float ,0130],02]){Return -----Self .f.ac._0;Val t_:Array [Array [Array [Array [Boolean ,0b1010111],0X51],0X2],0b1];}Destructor (){}Destructor (){Continue ;} }Class _{}Class _:_0{Destructor (){}Destructor (){} }Class mk:N{}'''
        expect = '''Program([ClassDecl(Id(__),Id(S_),[AttributeDecl(Static,VarDecl(Id($g_E_),ClassType(Id(n)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(OL),ClassType(Id(n)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($F3),ClassType(Id(n)),NullLiteral())),MethodDecl(Id(_),Instance,[param(Id(P1_),ArrayType(2,ArrayType(88,FloatType)))],Block([Return(UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,FieldAccess(FieldAccess(FieldAccess(Self(),Id(f)),Id(ac)),Id(_0)))))))),ConstDecl(Id(t_),ArrayType(1,ArrayType(2,ArrayType(81,ArrayType(87,BoolType)))),None)])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(_0),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(mk),Id(N),[])])'''
        self.assertTrue(TestAST.test(line, expect, 966))

    def test_967(self):
        line = '''Class _13_:_{Constructor (){}Var n3:e;}Class H_9:L{Var _09,$_V0:Array [Int ,43];Var $__:q;}Class _:_{Var $_,Ef,$0_4_xl:Array [Array [Int ,05],0115];Constructor (n,C,_,_98,B:q){}Val $J0:_;}Class _:Z_E{}'''
        expect = '''Program([ClassDecl(Id(_13_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(n3),ClassType(Id(e)),NullLiteral()))]),ClassDecl(Id(H_9),Id(L),[AttributeDecl(Instance,VarDecl(Id(_09),ArrayType(43,IntType))),AttributeDecl(Static,VarDecl(Id($_V0),ArrayType(43,IntType))),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(q)),NullLiteral()))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(77,ArrayType(5,IntType)))),AttributeDecl(Instance,VarDecl(Id(Ef),ArrayType(77,ArrayType(5,IntType)))),AttributeDecl(Static,VarDecl(Id($0_4_xl),ArrayType(77,ArrayType(5,IntType)))),MethodDecl(Id(Constructor),Instance,[param(Id(n),ClassType(Id(q))),param(Id(C),ClassType(Id(q))),param(Id(_),ClassType(Id(q))),param(Id(_98),ClassType(Id(q))),param(Id(B),ClassType(Id(q)))],Block([])),AttributeDecl(Static,ConstDecl(Id($J0),ClassType(Id(_)),None))]),ClassDecl(Id(_),Id(Z_E),[])])'''
        self.assertTrue(TestAST.test(line, expect, 967))

    def test_968(self):
        line = '''Class Q:yg_8h75D7415m7_{}Class _{Val $t6,_,_d:Array [Array [Array [Array [Array [String ,0XC_69],20],0124],0B1010000],183];}Class SD:x{}Class r8:VC6{}Class __{Val $7,$_,$0:N_;}Class v{Constructor (){} }Class na:_Ef{Val $4:Array [Array [Array [Array [Array [Array [Float ,0x44],0xB_31],0X48],0B10],0b1010010],20];}'''
        expect = '''Program([ClassDecl(Id(Q),Id(yg_8h75D7415m7_),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($t6),ArrayType(183,ArrayType(80,ArrayType(84,ArrayType(20,ArrayType(3177,StringType))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(183,ArrayType(80,ArrayType(84,ArrayType(20,ArrayType(3177,StringType))))),None)),AttributeDecl(Instance,ConstDecl(Id(_d),ArrayType(183,ArrayType(80,ArrayType(84,ArrayType(20,ArrayType(3177,StringType))))),None))]),ClassDecl(Id(SD),Id(x),[]),ClassDecl(Id(r8),Id(VC6),[]),ClassDecl(Id(__),[AttributeDecl(Static,ConstDecl(Id($7),ClassType(Id(N_)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(N_)),None)),AttributeDecl(Static,ConstDecl(Id($0),ClassType(Id(N_)),None))]),ClassDecl(Id(v),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(na),Id(_Ef),[AttributeDecl(Static,ConstDecl(Id($4),ArrayType(20,ArrayType(82,ArrayType(2,ArrayType(72,ArrayType(2865,ArrayType(68,FloatType)))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 968))

    def test_969(self):
        line = '''Class V{$54(__,P5,_9,s:B;p_f,F,i,_,_:C_9;_37__W:Array [Array [String ,2_5],545]){}$_I(_:Array [Array [Array [Array [Float ,671],9_3],0b11000],0x16];k,Z,U,_,II8:Array [Float ,0XB];J2,j_,D_:Float ;__,N:x){} }Class l:a1_1X{}'''
        expect = '''Program([ClassDecl(Id(V),[MethodDecl(Id($54),Static,[param(Id(__),ClassType(Id(B))),param(Id(P5),ClassType(Id(B))),param(Id(_9),ClassType(Id(B))),param(Id(s),ClassType(Id(B))),param(Id(p_f),ClassType(Id(C_9))),param(Id(F),ClassType(Id(C_9))),param(Id(i),ClassType(Id(C_9))),param(Id(_),ClassType(Id(C_9))),param(Id(_),ClassType(Id(C_9))),param(Id(_37__W),ArrayType(545,ArrayType(25,StringType)))],Block([])),MethodDecl(Id($_I),Static,[param(Id(_),ArrayType(22,ArrayType(24,ArrayType(93,ArrayType(671,FloatType))))),param(Id(k),ArrayType(11,FloatType)),param(Id(Z),ArrayType(11,FloatType)),param(Id(U),ArrayType(11,FloatType)),param(Id(_),ArrayType(11,FloatType)),param(Id(II8),ArrayType(11,FloatType)),param(Id(J2),FloatType),param(Id(j_),FloatType),param(Id(D_),FloatType),param(Id(__),ClassType(Id(x))),param(Id(N),ClassType(Id(x)))],Block([]))]),ClassDecl(Id(l),Id(a1_1X),[])])'''
        self.assertTrue(TestAST.test(line, expect, 969))

    def test_970(self):
        line = '''Class _U_{}Class o{_0(_B:Float ){}$_(B6,O201_eP,m_:Float ;_:Array [Array [Array [Array [Array [Array [Boolean ,31_0_2_7],22],0X48],07],0103],0b1];w,u_:Boolean ;pg:Array [String ,0x6]){} }'''
        expect = '''Program([ClassDecl(Id(_U_),[]),ClassDecl(Id(o),[MethodDecl(Id(_0),Instance,[param(Id(_B),FloatType)],Block([])),MethodDecl(Id($_),Static,[param(Id(B6),FloatType),param(Id(O201_eP),FloatType),param(Id(m_),FloatType),param(Id(_),ArrayType(1,ArrayType(67,ArrayType(7,ArrayType(72,ArrayType(22,ArrayType(31027,BoolType))))))),param(Id(w),BoolType),param(Id(u_),BoolType),param(Id(pg),ArrayType(6,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 970))

    def test_971(self):
        line = '''Class _36:B{Destructor (){Return ;}$7T_45H_(O8,_,L:Array [Array [Boolean ,0B1000110],0xFC];_,P,__:Array [Float ,0135]){}Constructor (_,_:Boolean ;h4h4_w,X,r,_,n_,_Q:Array [Array [Array [Array [Array [Array [Int ,0b1],0165_4],0XE8_91B_42],0B1000110],8],0b10]){}Val $e7,$__,$5_,_:_;}Class B:_{Val $3,P,j:Array [Array [Int ,0xA],0x25];Constructor (){} }Class I{}'''
        expect = '''Program([ClassDecl(Id(_36),Id(B),[MethodDecl(Id(Destructor),Instance,[],Block([Return()])),MethodDecl(Id($7T_45H_),Static,[param(Id(O8),ArrayType(252,ArrayType(70,BoolType))),param(Id(_),ArrayType(252,ArrayType(70,BoolType))),param(Id(L),ArrayType(252,ArrayType(70,BoolType))),param(Id(_),ArrayType(93,FloatType)),param(Id(P),ArrayType(93,FloatType)),param(Id(__),ArrayType(93,FloatType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(_),BoolType),param(Id(h4h4_w),ArrayType(2,ArrayType(8,ArrayType(70,ArrayType(243866434,ArrayType(940,ArrayType(1,IntType))))))),param(Id(X),ArrayType(2,ArrayType(8,ArrayType(70,ArrayType(243866434,ArrayType(940,ArrayType(1,IntType))))))),param(Id(r),ArrayType(2,ArrayType(8,ArrayType(70,ArrayType(243866434,ArrayType(940,ArrayType(1,IntType))))))),param(Id(_),ArrayType(2,ArrayType(8,ArrayType(70,ArrayType(243866434,ArrayType(940,ArrayType(1,IntType))))))),param(Id(n_),ArrayType(2,ArrayType(8,ArrayType(70,ArrayType(243866434,ArrayType(940,ArrayType(1,IntType))))))),param(Id(_Q),ArrayType(2,ArrayType(8,ArrayType(70,ArrayType(243866434,ArrayType(940,ArrayType(1,IntType)))))))],Block([])),AttributeDecl(Static,ConstDecl(Id($e7),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($5_),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None))]),ClassDecl(Id(B),Id(_),[AttributeDecl(Static,ConstDecl(Id($3),ArrayType(37,ArrayType(10,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(P),ArrayType(37,ArrayType(10,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(j),ArrayType(37,ArrayType(10,IntType)),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(I),[])])'''
        self.assertTrue(TestAST.test(line, expect, 971))

    def test_972(self):
        line = '''Class Qu_{Destructor (){}Constructor (_:String ;J,T,K,Gq_58,_q_:W__;__9:Int ;F_:Array [Array [Float ,0107],0107];_r03:Boolean ;_:_E1;u7,_:Boolean ){}_(_:Array [Int ,3_3_5];N,E5,_,P,l__6_:Array [Array [Array [Array [Float ,061],0107],66],0b110101];N__21_,c:_){} }Class __8z:Shv{$9__(){ {}Val KV_8_k6:oN;}__(_:Array [Int ,045]){} }Class T1{}'''
        expect = '''Program([ClassDecl(Id(Qu_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(J),ClassType(Id(W__))),param(Id(T),ClassType(Id(W__))),param(Id(K),ClassType(Id(W__))),param(Id(Gq_58),ClassType(Id(W__))),param(Id(_q_),ClassType(Id(W__))),param(Id(__9),IntType),param(Id(F_),ArrayType(71,ArrayType(71,FloatType))),param(Id(_r03),BoolType),param(Id(_),ClassType(Id(_E1))),param(Id(u7),BoolType),param(Id(_),BoolType)],Block([])),MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(335,IntType)),param(Id(N),ArrayType(53,ArrayType(66,ArrayType(71,ArrayType(49,FloatType))))),param(Id(E5),ArrayType(53,ArrayType(66,ArrayType(71,ArrayType(49,FloatType))))),param(Id(_),ArrayType(53,ArrayType(66,ArrayType(71,ArrayType(49,FloatType))))),param(Id(P),ArrayType(53,ArrayType(66,ArrayType(71,ArrayType(49,FloatType))))),param(Id(l__6_),ArrayType(53,ArrayType(66,ArrayType(71,ArrayType(49,FloatType))))),param(Id(N__21_),ClassType(Id(_))),param(Id(c),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(__8z),Id(Shv),[MethodDecl(Id($9__),Static,[],Block([Block([]),ConstDecl(Id(KV_8_k6),ClassType(Id(oN)),None)])),MethodDecl(Id(__),Instance,[param(Id(_),ArrayType(37,IntType))],Block([]))]),ClassDecl(Id(T1),[])])'''
        self.assertTrue(TestAST.test(line, expect, 972))

    def test_973(self):
        line = '''Class _:v{Constructor (_2_,_7:Array [Array [Array [String ,0x2D],0b1_1_0],0b11010];_:Array [Int ,0xD];_:Array [Array [Array [Float ,6],057],0B1];_4,W:Array [Array [Int ,0b11010],0b1]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(v),[MethodDecl(Id(Constructor),Instance,[param(Id(_2_),ArrayType(26,ArrayType(6,ArrayType(45,StringType)))),param(Id(_7),ArrayType(26,ArrayType(6,ArrayType(45,StringType)))),param(Id(_),ArrayType(13,IntType)),param(Id(_),ArrayType(1,ArrayType(47,ArrayType(6,FloatType)))),param(Id(_4),ArrayType(1,ArrayType(26,IntType))),param(Id(W),ArrayType(1,ArrayType(26,IntType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 973))

    def test_974(self):
        line = '''Class ls{Constructor (x,s_T3C,Yl:Array [String ,6_2];_L0_,_,_EM,__1,m:Float ;T8,_,U9:Float ;u9_t_:Array [Array [Array [Float ,18],0b1],0X7]){Val _:Array [Boolean ,0X22];}Var _d,JgW,$4:Array [String ,03_077];}'''
        expect = '''Program([ClassDecl(Id(ls),[MethodDecl(Id(Constructor),Instance,[param(Id(x),ArrayType(62,StringType)),param(Id(s_T3C),ArrayType(62,StringType)),param(Id(Yl),ArrayType(62,StringType)),param(Id(_L0_),FloatType),param(Id(_),FloatType),param(Id(_EM),FloatType),param(Id(__1),FloatType),param(Id(m),FloatType),param(Id(T8),FloatType),param(Id(_),FloatType),param(Id(U9),FloatType),param(Id(u9_t_),ArrayType(7,ArrayType(1,ArrayType(18,FloatType))))],Block([ConstDecl(Id(_),ArrayType(34,BoolType),None)])),AttributeDecl(Instance,VarDecl(Id(_d),ArrayType(1599,StringType))),AttributeDecl(Instance,VarDecl(Id(JgW),ArrayType(1599,StringType))),AttributeDecl(Static,VarDecl(Id($4),ArrayType(1599,StringType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 974))

    def test_975(self):
        line = '''Class _6{Constructor (H,e:Ypy;_l23u_,V,g,_0Zw8:Array [Array [Array [Array [Float ,03],0X1C],0B110],0b1];_:_;_t4:Int ){}Constructor (f0,cvSd:_;_,b,w:Boolean ;_,_0__,r,_m2_:Int ;_,_:Array [Array [Array [Array [Array [Int ,96],0B110],0B110],0X21],03];kr73,_Cq,hH:_0t8_){Continue ;} }Class N:C_5{}'''
        expect = '''Program([ClassDecl(Id(_6),[MethodDecl(Id(Constructor),Instance,[param(Id(H),ClassType(Id(Ypy))),param(Id(e),ClassType(Id(Ypy))),param(Id(_l23u_),ArrayType(1,ArrayType(6,ArrayType(28,ArrayType(3,FloatType))))),param(Id(V),ArrayType(1,ArrayType(6,ArrayType(28,ArrayType(3,FloatType))))),param(Id(g),ArrayType(1,ArrayType(6,ArrayType(28,ArrayType(3,FloatType))))),param(Id(_0Zw8),ArrayType(1,ArrayType(6,ArrayType(28,ArrayType(3,FloatType))))),param(Id(_),ClassType(Id(_))),param(Id(_t4),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(f0),ClassType(Id(_))),param(Id(cvSd),ClassType(Id(_))),param(Id(_),BoolType),param(Id(b),BoolType),param(Id(w),BoolType),param(Id(_),IntType),param(Id(_0__),IntType),param(Id(r),IntType),param(Id(_m2_),IntType),param(Id(_),ArrayType(3,ArrayType(33,ArrayType(6,ArrayType(6,ArrayType(96,IntType)))))),param(Id(_),ArrayType(3,ArrayType(33,ArrayType(6,ArrayType(6,ArrayType(96,IntType)))))),param(Id(kr73),ClassType(Id(_0t8_))),param(Id(_Cq),ClassType(Id(_0t8_))),param(Id(hH),ClassType(Id(_0t8_)))],Block([Continue]))]),ClassDecl(Id(N),Id(C_5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 975))

    def test_976(self):
        line = '''Class Oh5135{Destructor (){}w___4_(w:String ){}Var _j,$6_,c,$06:Float ;_(Tf___,_9:String ;_P,U__:_u;I47:Array [Array [Int ,0B1_1],0b1001]){} }Class H:n{_(){}L(){}_(){Return ;_.b_w()._t5._j_F();} }'''
        expect = '''Program([ClassDecl(Id(Oh5135),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(w___4_),Instance,[param(Id(w),StringType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_j),FloatType)),AttributeDecl(Static,VarDecl(Id($6_),FloatType)),AttributeDecl(Instance,VarDecl(Id(c),FloatType)),AttributeDecl(Static,VarDecl(Id($06),FloatType)),MethodDecl(Id(_),Instance,[param(Id(Tf___),StringType),param(Id(_9),StringType),param(Id(_P),ClassType(Id(_u))),param(Id(U__),ClassType(Id(_u))),param(Id(I47),ArrayType(9,ArrayType(3,IntType)))],Block([]))]),ClassDecl(Id(H),Id(n),[MethodDecl(Id(_),Instance,[],Block([])),MethodDecl(Id(L),Instance,[],Block([])),MethodDecl(Id(_),Instance,[],Block([Return(),Call(FieldAccess(CallExpr(Id(_),Id(b_w),[]),Id(_t5)),Id(_j_F),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 976))

    def test_977(self):
        line = '''Class P{$_85(_,p,e:Float ){} }Class d0{$D(_8,u:R__C3sR;_,K,__:Array [Int ,012]){}_(_:Array [Float ,0X3F];L_,_,_y__Q,_:Array [Array [Array [Array [Array [Array [Array [Float ,0x49],056],4_09],0x4],0b1],0x2_C9F_C],0XB];V,_,_:Array [Int ,0x49];_Nd,c:Float ;k,_,_,Ep:Array [Boolean ,97_9];__6_,__,D,_:Array [Boolean ,0B1];_7_U_y_:Bdw){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(P),[MethodDecl(Id($_85),Static,[param(Id(_),FloatType),param(Id(p),FloatType),param(Id(e),FloatType)],Block([]))]),ClassDecl(Id(d0),[MethodDecl(Id($D),Static,[param(Id(_8),ClassType(Id(R__C3sR))),param(Id(u),ClassType(Id(R__C3sR))),param(Id(_),ArrayType(10,IntType)),param(Id(K),ArrayType(10,IntType)),param(Id(__),ArrayType(10,IntType))],Block([])),MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(63,FloatType)),param(Id(L_),ArrayType(11,ArrayType(182780,ArrayType(1,ArrayType(4,ArrayType(409,ArrayType(46,ArrayType(73,FloatType)))))))),param(Id(_),ArrayType(11,ArrayType(182780,ArrayType(1,ArrayType(4,ArrayType(409,ArrayType(46,ArrayType(73,FloatType)))))))),param(Id(_y__Q),ArrayType(11,ArrayType(182780,ArrayType(1,ArrayType(4,ArrayType(409,ArrayType(46,ArrayType(73,FloatType)))))))),param(Id(_),ArrayType(11,ArrayType(182780,ArrayType(1,ArrayType(4,ArrayType(409,ArrayType(46,ArrayType(73,FloatType)))))))),param(Id(V),ArrayType(73,IntType)),param(Id(_),ArrayType(73,IntType)),param(Id(_),ArrayType(73,IntType)),param(Id(_Nd),FloatType),param(Id(c),FloatType),param(Id(k),ArrayType(979,BoolType)),param(Id(_),ArrayType(979,BoolType)),param(Id(_),ArrayType(979,BoolType)),param(Id(Ep),ArrayType(979,BoolType)),param(Id(__6_),ArrayType(1,BoolType)),param(Id(__),ArrayType(1,BoolType)),param(Id(D),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType)),param(Id(_7_U_y_),ClassType(Id(Bdw)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 977))

    def test_978(self):
        line = '''Class _____2A4C{}Class _:_{}Class _6:h5_8{}Class w_5{Val __,$U,_6_:Array [Int ,0x72];Val iQ,$f_:Int ;Val e,v,__F,J_,Nl__:Array [Float ,0x55];Destructor (){} }Class X8:Z_K{}'''
        expect = '''Program([ClassDecl(Id(_____2A4C),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_6),Id(h5_8),[]),ClassDecl(Id(w_5),[AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(114,IntType),None)),AttributeDecl(Static,ConstDecl(Id($U),ArrayType(114,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_6_),ArrayType(114,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(iQ),IntType,None)),AttributeDecl(Static,ConstDecl(Id($f_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(e),ArrayType(85,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(v),ArrayType(85,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(__F),ArrayType(85,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(J_),ArrayType(85,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(Nl__),ArrayType(85,FloatType),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(X8),Id(Z_K),[])])'''
        self.assertTrue(TestAST.test(line, expect, 978))

    def test_979(self):
        line = '''Class w3{Constructor (z:Array [String ,0B110001];__1,_:Array [Array [String ,0B110],0B110001]){Break ;__::$_N8_1.S.u()._.p_().iH();Continue ;} }Class PW:_21{Constructor (_57_3A8:Array [Array [Array [Array [Array [Array [Boolean ,8],25],0X4],0B110001],07],70_4]){} }Class f7{Constructor (_kL:Array [Array [Array [Array [Array [Int ,0X53],051],25],2_51],06]){} }'''
        expect = '''Program([ClassDecl(Id(w3),[MethodDecl(Id(Constructor),Instance,[param(Id(z),ArrayType(49,StringType)),param(Id(__1),ArrayType(49,ArrayType(6,StringType))),param(Id(_),ArrayType(49,ArrayType(6,StringType)))],Block([Break,Call(CallExpr(FieldAccess(CallExpr(FieldAccess(FieldAccess(Id(__),Id($_N8_1)),Id(S)),Id(u),[]),Id(_)),Id(p_),[]),Id(iH),[]),Continue]))]),ClassDecl(Id(PW),Id(_21),[MethodDecl(Id(Constructor),Instance,[param(Id(_57_3A8),ArrayType(704,ArrayType(7,ArrayType(49,ArrayType(4,ArrayType(25,ArrayType(8,BoolType)))))))],Block([]))]),ClassDecl(Id(f7),[MethodDecl(Id(Constructor),Instance,[param(Id(_kL),ArrayType(6,ArrayType(251,ArrayType(25,ArrayType(41,ArrayType(83,IntType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 979))

    def test_980(self):
        line = '''Class o_3:jr6{Destructor (){Continue ;Val g3,e,_Z_,_:Array [Array [Array [Boolean ,0b100110],1],0b1];}Val $381__:y;Var $2___,$___T9,_S,$1:__0;Destructor (){}Constructor (_83_:J;S_,_4,_,a,UY:x;_:Array [Array [Float ,0B1_10],0B10];__Q_:Q;_,_2s:h;_:Boolean ;l_5:e){} }'''
        expect = '''Program([ClassDecl(Id(o_3),Id(jr6),[MethodDecl(Id(Destructor),Instance,[],Block([Continue,ConstDecl(Id(g3),ArrayType(1,ArrayType(1,ArrayType(38,BoolType))),None),ConstDecl(Id(e),ArrayType(1,ArrayType(1,ArrayType(38,BoolType))),None),ConstDecl(Id(_Z_),ArrayType(1,ArrayType(1,ArrayType(38,BoolType))),None),ConstDecl(Id(_),ArrayType(1,ArrayType(1,ArrayType(38,BoolType))),None)])),AttributeDecl(Static,ConstDecl(Id($381__),ClassType(Id(y)),None)),AttributeDecl(Static,VarDecl(Id($2___),ClassType(Id(__0)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($___T9),ClassType(Id(__0)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_S),ClassType(Id(__0)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($1),ClassType(Id(__0)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_83_),ClassType(Id(J))),param(Id(S_),ClassType(Id(x))),param(Id(_4),ClassType(Id(x))),param(Id(_),ClassType(Id(x))),param(Id(a),ClassType(Id(x))),param(Id(UY),ClassType(Id(x))),param(Id(_),ArrayType(2,ArrayType(6,FloatType))),param(Id(__Q_),ClassType(Id(Q))),param(Id(_),ClassType(Id(h))),param(Id(_2s),ClassType(Id(h))),param(Id(_),BoolType),param(Id(l_5),ClassType(Id(e)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 980))

    def test_981(self):
        line = '''Class Z4y__:o6_{Val _8,U_,_:Array [Array [Array [Float ,06_3],07_370],072_5];Constructor (){}Var $_:Array [Array [Boolean ,01],0X3_D0_0];}Class __U3{}Class ___h_{Constructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(Z4y__),Id(o6_),[AttributeDecl(Instance,ConstDecl(Id(_8),ArrayType(469,ArrayType(3832,ArrayType(51,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(U_),ArrayType(469,ArrayType(3832,ArrayType(51,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(469,ArrayType(3832,ArrayType(51,FloatType))),None)),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(15616,ArrayType(1,BoolType))))]),ClassDecl(Id(__U3),[]),ClassDecl(Id(___h_),[MethodDecl(Id(Constructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 981))

    def test_982(self):
        line = '''Class h:VG{Constructor (_:Int ;V__:Array [Array [Boolean ,0B101010],0B1]){}$_(_,Q:Array [String ,0b1]){Continue ;}Constructor (_3_,H,_4:Array [Array [Array [Array [Array [Float ,0b1000110],0b1000110],040],0XC],12]){} }Class R_{}'''
        expect = '''Program([ClassDecl(Id(h),Id(VG),[MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(V__),ArrayType(1,ArrayType(42,BoolType)))],Block([])),MethodDecl(Id($_),Static,[param(Id(_),ArrayType(1,StringType)),param(Id(Q),ArrayType(1,StringType))],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_3_),ArrayType(12,ArrayType(12,ArrayType(32,ArrayType(70,ArrayType(70,FloatType)))))),param(Id(H),ArrayType(12,ArrayType(12,ArrayType(32,ArrayType(70,ArrayType(70,FloatType)))))),param(Id(_4),ArrayType(12,ArrayType(12,ArrayType(32,ArrayType(70,ArrayType(70,FloatType))))))],Block([]))]),ClassDecl(Id(R_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 982))

    def test_983(self):
        line = '''Class _X:_{Var $6,$11:Array [Array [Array [Array [String ,61],0133],0xA],0133];}Class C{}Class _:_{Constructor (_,r:_5;_:Array [Array [String ,1],0x57];b_9c9,Y:Array [Float ,5];xh,Ae40:_){} }Class K{Val x8_6:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_X),Id(_),[AttributeDecl(Static,VarDecl(Id($6),ArrayType(91,ArrayType(10,ArrayType(91,ArrayType(61,StringType)))))),AttributeDecl(Static,VarDecl(Id($11),ArrayType(91,ArrayType(10,ArrayType(91,ArrayType(61,StringType))))))]),ClassDecl(Id(C),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_5))),param(Id(r),ClassType(Id(_5))),param(Id(_),ArrayType(87,ArrayType(1,StringType))),param(Id(b_9c9),ArrayType(5,FloatType)),param(Id(Y),ArrayType(5,FloatType)),param(Id(xh),ClassType(Id(_))),param(Id(Ae40),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(K),[AttributeDecl(Instance,ConstDecl(Id(x8_6),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 983))

    def test_984(self):
        line = '''Class jX_w{Constructor (V_,M:Array [Array [Float ,84],0b10_1];t9P_6g:Array [Array [Int ,0B1101],03];_J_J,i,_:Int ;v,_2D_9g,_,_9tq:h_7___1;_,_3,c,l57U:String ;k,_T:Array [Boolean ,0X33];____D:Array [Array [Array [Float ,0B110001],0x41],045];r,v_,P,_:_){} }'''
        expect = '''Program([ClassDecl(Id(jX_w),[MethodDecl(Id(Constructor),Instance,[param(Id(V_),ArrayType(5,ArrayType(84,FloatType))),param(Id(M),ArrayType(5,ArrayType(84,FloatType))),param(Id(t9P_6g),ArrayType(3,ArrayType(13,IntType))),param(Id(_J_J),IntType),param(Id(i),IntType),param(Id(_),IntType),param(Id(v),ClassType(Id(h_7___1))),param(Id(_2D_9g),ClassType(Id(h_7___1))),param(Id(_),ClassType(Id(h_7___1))),param(Id(_9tq),ClassType(Id(h_7___1))),param(Id(_),StringType),param(Id(_3),StringType),param(Id(c),StringType),param(Id(l57U),StringType),param(Id(k),ArrayType(51,BoolType)),param(Id(_T),ArrayType(51,BoolType)),param(Id(____D),ArrayType(37,ArrayType(65,ArrayType(49,FloatType)))),param(Id(r),ClassType(Id(_))),param(Id(v_),ClassType(Id(_))),param(Id(P),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 984))

    def test_985(self):
        line = '''Class S{Destructor (){} }Class b{Val _6:String ;}Class C0:_5x79{Destructor (){}_K(w0,k,h:Array [Boolean ,0b1_0_0];P:Array [String ,01];wz6,_:Float ){} }Class _B{Destructor (){Continue ;Continue ;} }Class _{$x3(__6,_c2R,_:Array [Array [Array [Array [Int ,0XC],0XC],92],0B1]){Break ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(S),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(b),[AttributeDecl(Instance,ConstDecl(Id(_6),StringType,None))]),ClassDecl(Id(C0),Id(_5x79),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_K),Instance,[param(Id(w0),ArrayType(4,BoolType)),param(Id(k),ArrayType(4,BoolType)),param(Id(h),ArrayType(4,BoolType)),param(Id(P),ArrayType(1,StringType)),param(Id(wz6),FloatType),param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(_B),[MethodDecl(Id(Destructor),Instance,[],Block([Continue,Continue]))]),ClassDecl(Id(_),[MethodDecl(Id($x3),Static,[param(Id(__6),ArrayType(1,ArrayType(92,ArrayType(12,ArrayType(12,IntType))))),param(Id(_c2R),ArrayType(1,ArrayType(92,ArrayType(12,ArrayType(12,IntType))))),param(Id(_),ArrayType(1,ArrayType(92,ArrayType(12,ArrayType(12,IntType)))))],Block([Break,Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 985))

    def test_986(self):
        line = '''Class q{}Class _S{Constructor (_9,_c_,K:Array [Array [Array [Array [String ,0x62],011],0B100111],0XE];_B,_,_3_,Z__a1:Array [Array [Array [Float ,0X48],0x62],0X8_F_B];A4:Array [Array [Int ,0x2_51],0b1];lXc,iSW,rJ2,_:Array [Boolean ,02]){} }'''
        expect = '''Program([ClassDecl(Id(q),[]),ClassDecl(Id(_S),[MethodDecl(Id(Constructor),Instance,[param(Id(_9),ArrayType(14,ArrayType(39,ArrayType(9,ArrayType(98,StringType))))),param(Id(_c_),ArrayType(14,ArrayType(39,ArrayType(9,ArrayType(98,StringType))))),param(Id(K),ArrayType(14,ArrayType(39,ArrayType(9,ArrayType(98,StringType))))),param(Id(_B),ArrayType(2299,ArrayType(98,ArrayType(72,FloatType)))),param(Id(_),ArrayType(2299,ArrayType(98,ArrayType(72,FloatType)))),param(Id(_3_),ArrayType(2299,ArrayType(98,ArrayType(72,FloatType)))),param(Id(Z__a1),ArrayType(2299,ArrayType(98,ArrayType(72,FloatType)))),param(Id(A4),ArrayType(1,ArrayType(593,IntType))),param(Id(lXc),ArrayType(2,BoolType)),param(Id(iSW),ArrayType(2,BoolType)),param(Id(rJ2),ArrayType(2,BoolType)),param(Id(_),ArrayType(2,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 986))

    def test_987(self):
        line = '''Class _:d{}Class __:V_4{$8_(){}Var $9_:_;Constructor (w,__:Array [Array [Boolean ,02],0B1_00];_0:Array [String ,0x29]){Return ;}Val $_y:Array [Array [Int ,0x29],030];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(d),[]),ClassDecl(Id(__),Id(V_4),[MethodDecl(Id($8_),Static,[],Block([])),AttributeDecl(Static,VarDecl(Id($9_),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(w),ArrayType(4,ArrayType(2,BoolType))),param(Id(__),ArrayType(4,ArrayType(2,BoolType))),param(Id(_0),ArrayType(41,StringType))],Block([Return()])),AttributeDecl(Static,ConstDecl(Id($_y),ArrayType(24,ArrayType(41,IntType)),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 987))

    def test_988(self):
        line = '''Class N5{_5(_:Array [Int ,0b1_0];Sn_,V,_:E){}Val _:Array [Array [Array [Int ,0B100010],80],0B100010];Constructor (_:Fx0){}Jr(h:String ;_IU:Int ){_Z_9::$0F_i();}Destructor (){} }Class I:Zuq1{Val $_,P,$_,M,$_:Float ;}Class _f:HR1_{}Class _:v{Destructor (){}Val i,_,$__,$B:String ;}'''
        expect = '''Program([ClassDecl(Id(N5),[MethodDecl(Id(_5),Instance,[param(Id(_),ArrayType(2,IntType)),param(Id(Sn_),ClassType(Id(E))),param(Id(V),ClassType(Id(E))),param(Id(_),ClassType(Id(E)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(34,ArrayType(80,ArrayType(34,IntType))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(Fx0)))],Block([])),MethodDecl(Id(Jr),Instance,[param(Id(h),StringType),param(Id(_IU),IntType)],Block([Call(Id(_Z_9),Id($0F_i),[])])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(I),Id(Zuq1),[AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(P),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(M),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None))]),ClassDecl(Id(_f),Id(HR1_),[]),ClassDecl(Id(_),Id(v),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(i),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($__),StringType,None)),AttributeDecl(Static,ConstDecl(Id($B),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 988))

    def test_989(self):
        line = '''Class l{Var k:Array [Array [Array [Array [Boolean ,2],34],0B1],6_76_8];}Class _30tG_94:Z{}Class f:__{Var $_:Array [String ,0XFBBB];}Class __:_3{Var $_,$q:_H85Y1;Var $_:Array [Int ,0X21];}Class X:_{}Class __MdZ:__R{}'''
        expect = '''Program([ClassDecl(Id(l),[AttributeDecl(Instance,VarDecl(Id(k),ArrayType(6768,ArrayType(1,ArrayType(34,ArrayType(2,BoolType))))))]),ClassDecl(Id(_30tG_94),Id(Z),[]),ClassDecl(Id(f),Id(__),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(64443,StringType)))]),ClassDecl(Id(__),Id(_3),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_H85Y1)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($q),ClassType(Id(_H85Y1)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ArrayType(33,IntType)))]),ClassDecl(Id(X),Id(_),[]),ClassDecl(Id(__MdZ),Id(__R),[])])'''
        self.assertTrue(TestAST.test(line, expect, 989))

    def test_990(self):
        line = '''Class _{Constructor (___,_l7_0,ly,U:_;y,B5_,k:Array [Array [Float ,03],03];_i,g_:_0kM2;_:_){} }Class S{Constructor (cj,I,_,_:_;Q,_:Array [Array [Array [Array [String ,03],0b1001111],03],07]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(___),ClassType(Id(_))),param(Id(_l7_0),ClassType(Id(_))),param(Id(ly),ClassType(Id(_))),param(Id(U),ClassType(Id(_))),param(Id(y),ArrayType(3,ArrayType(3,FloatType))),param(Id(B5_),ArrayType(3,ArrayType(3,FloatType))),param(Id(k),ArrayType(3,ArrayType(3,FloatType))),param(Id(_i),ClassType(Id(_0kM2))),param(Id(g_),ClassType(Id(_0kM2))),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(S),[MethodDecl(Id(Constructor),Instance,[param(Id(cj),ClassType(Id(_))),param(Id(I),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(Q),ArrayType(7,ArrayType(3,ArrayType(79,ArrayType(3,StringType))))),param(Id(_),ArrayType(7,ArrayType(3,ArrayType(79,ArrayType(3,StringType)))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 990))

    def test_991(self):
        line = '''Class _{Constructor (q,I_2:Array [Float ,3_24];F:Array [String ,99];_,J:Array [Float ,0B1001101]){}Constructor (){}Var $N:e;}Class _:_54{I(_S,_x5,FPG,_L,___Z:_;_:Boolean ){} }Class k{}Class e_8E:r{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(q),ArrayType(324,FloatType)),param(Id(I_2),ArrayType(324,FloatType)),param(Id(F),ArrayType(99,StringType)),param(Id(_),ArrayType(77,FloatType)),param(Id(J),ArrayType(77,FloatType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($N),ClassType(Id(e)),NullLiteral()))]),ClassDecl(Id(_),Id(_54),[MethodDecl(Id(I),Instance,[param(Id(_S),ClassType(Id(_))),param(Id(_x5),ClassType(Id(_))),param(Id(FPG),ClassType(Id(_))),param(Id(_L),ClassType(Id(_))),param(Id(___Z),ClassType(Id(_))),param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(k),[]),ClassDecl(Id(e_8E),Id(r),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 991))

    def test_992(self):
        line = '''Class V{}Class S_3H_{$7(){Var D7:String ;}Constructor (){}Constructor (go,_,A:Float ;_6D,_,r:Array [Boolean ,0757];_:Array [Array [Array [Array [Array [Array [Array [Array [Float ,015],1],0b1000110],0x43],0b10_1],0b1000110],05_1_3],14]){} }'''
        expect = '''Program([ClassDecl(Id(V),[]),ClassDecl(Id(S_3H_),[MethodDecl(Id($7),Static,[],Block([VarDecl(Id(D7),StringType)])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(go),FloatType),param(Id(_),FloatType),param(Id(A),FloatType),param(Id(_6D),ArrayType(495,BoolType)),param(Id(_),ArrayType(495,BoolType)),param(Id(r),ArrayType(495,BoolType)),param(Id(_),ArrayType(14,ArrayType(331,ArrayType(70,ArrayType(5,ArrayType(67,ArrayType(70,ArrayType(1,ArrayType(13,FloatType)))))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 992))

    def test_993(self):
        line = '''Class e{Constructor (e9_,_n,_q,__:Array [Array [Int ,32],012_1_4_5];R_C,h_,IZ:Boolean ;eN:String ){} }Class __4:IN_{}Class D4hC:_4{Constructor (Z:u){}_(c:Array [Array [String ,0X63],0B1001111];_:_){} }Class _8:_{}'''
        expect = '''Program([ClassDecl(Id(e),[MethodDecl(Id(Constructor),Instance,[param(Id(e9_),ArrayType(5221,ArrayType(32,IntType))),param(Id(_n),ArrayType(5221,ArrayType(32,IntType))),param(Id(_q),ArrayType(5221,ArrayType(32,IntType))),param(Id(__),ArrayType(5221,ArrayType(32,IntType))),param(Id(R_C),BoolType),param(Id(h_),BoolType),param(Id(IZ),BoolType),param(Id(eN),StringType)],Block([]))]),ClassDecl(Id(__4),Id(IN_),[]),ClassDecl(Id(D4hC),Id(_4),[MethodDecl(Id(Constructor),Instance,[param(Id(Z),ClassType(Id(u)))],Block([])),MethodDecl(Id(_),Instance,[param(Id(c),ArrayType(79,ArrayType(99,StringType))),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_8),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 993))

    def test_994(self):
        line = '''Class __:__{Var $f87_,D0,$R,$E:Array [Array [Array [Array [Array [Array [Array [String ,656],0X5C],0X5C],0B1000010],01],0XB],04];Val $9_:N;}Class _:_{}Class Eq3oQ7:_85P6{}Class _:_{}'''
        expect = '''Program([ClassDecl(Id(__),Id(__),[AttributeDecl(Static,VarDecl(Id($f87_),ArrayType(4,ArrayType(11,ArrayType(1,ArrayType(66,ArrayType(92,ArrayType(92,ArrayType(656,StringType))))))))),AttributeDecl(Instance,VarDecl(Id(D0),ArrayType(4,ArrayType(11,ArrayType(1,ArrayType(66,ArrayType(92,ArrayType(92,ArrayType(656,StringType))))))))),AttributeDecl(Static,VarDecl(Id($R),ArrayType(4,ArrayType(11,ArrayType(1,ArrayType(66,ArrayType(92,ArrayType(92,ArrayType(656,StringType))))))))),AttributeDecl(Static,VarDecl(Id($E),ArrayType(4,ArrayType(11,ArrayType(1,ArrayType(66,ArrayType(92,ArrayType(92,ArrayType(656,StringType))))))))),AttributeDecl(Static,ConstDecl(Id($9_),ClassType(Id(N)),None))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(Eq3oQ7),Id(_85P6),[]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 994))

    def test_995(self):
        line = '''Class K{Constructor (C:Array [Array [Array [Array [Array [String ,73],0b100001],4],73],73]){} }Class _{Destructor (){}Constructor (){}$8l(){}_N_(_,_,b_5,__:Array [Int ,73]){} }'''
        expect = '''Program([ClassDecl(Id(K),[MethodDecl(Id(Constructor),Instance,[param(Id(C),ArrayType(73,ArrayType(73,ArrayType(4,ArrayType(33,ArrayType(73,StringType))))))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($8l),Static,[],Block([])),MethodDecl(Id(_N_),Instance,[param(Id(_),ArrayType(73,IntType)),param(Id(_),ArrayType(73,IntType)),param(Id(b_5),ArrayType(73,IntType)),param(Id(__),ArrayType(73,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 995))

    def test_996(self):
        line = '''Class D8{Destructor (){Break ;} }Class D:N_{}Class _:_{Destructor (){ {} }$S(y_:Boolean ;N8,T_,__56,Q:Boolean ;__,_:Array [Boolean ,071];K6_qU_:Boolean ;_,U_:Array [Float ,0b10];O_C,_:R;_,_,_:_;U,u6,_,I_:Array [Array [Array [Float ,071],0X3C],03]){} }'''
        expect = '''Program([ClassDecl(Id(D8),[MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(D),Id(N_),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),MethodDecl(Id($S),Static,[param(Id(y_),BoolType),param(Id(N8),BoolType),param(Id(T_),BoolType),param(Id(__56),BoolType),param(Id(Q),BoolType),param(Id(__),ArrayType(57,BoolType)),param(Id(_),ArrayType(57,BoolType)),param(Id(K6_qU_),BoolType),param(Id(_),ArrayType(2,FloatType)),param(Id(U_),ArrayType(2,FloatType)),param(Id(O_C),ClassType(Id(R))),param(Id(_),ClassType(Id(R))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(U),ArrayType(3,ArrayType(60,ArrayType(57,FloatType)))),param(Id(u6),ArrayType(3,ArrayType(60,ArrayType(57,FloatType)))),param(Id(_),ArrayType(3,ArrayType(60,ArrayType(57,FloatType)))),param(Id(I_),ArrayType(3,ArrayType(60,ArrayType(57,FloatType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 996))

    def test_997(self):
        line = '''Class __:Y{}Class Q{}Class _:q{}Class s_E:_{}Class _b{}Class a{}Class a_:_{$4(){Return ;} }Class Zg3{Constructor (_,_,B_wr,_76:Array [Float ,03]){Return ;} }Class W_{Val _g_,_,T3F4,$6_:Boolean ;}Class _:__{}'''
        expect = '''Program([ClassDecl(Id(__),Id(Y),[]),ClassDecl(Id(Q),[]),ClassDecl(Id(_),Id(q),[]),ClassDecl(Id(s_E),Id(_),[]),ClassDecl(Id(_b),[]),ClassDecl(Id(a),[]),ClassDecl(Id(a_),Id(_),[MethodDecl(Id($4),Static,[],Block([Return()]))]),ClassDecl(Id(Zg3),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(3,FloatType)),param(Id(_),ArrayType(3,FloatType)),param(Id(B_wr),ArrayType(3,FloatType)),param(Id(_76),ArrayType(3,FloatType))],Block([Return()]))]),ClassDecl(Id(W_),[AttributeDecl(Instance,ConstDecl(Id(_g_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(T3F4),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($6_),BoolType,None))]),ClassDecl(Id(_),Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 997))

    def test_998(self):
        line = '''Class _:_dW_{}Class _:_6l{}Class T{$9(_:Boolean ;_:_gl6_){}$o(_:Array [Array [Float ,1],0B11110]){} }Class __W5:_{Constructor (){ {Continue ;} }Constructor (ZB,_:Array [Array [Array [Array [String ,01],0B10],1],1]){Continue ;}__(_:Array [Array [Array [Boolean ,6],0X5],0134]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_dW_),[]),ClassDecl(Id(_),Id(_6l),[]),ClassDecl(Id(T),[MethodDecl(Id($9),Static,[param(Id(_),BoolType),param(Id(_),ClassType(Id(_gl6_)))],Block([])),MethodDecl(Id($o),Static,[param(Id(_),ArrayType(30,ArrayType(1,FloatType)))],Block([]))]),ClassDecl(Id(__W5),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([Block([Continue])])),MethodDecl(Id(Constructor),Instance,[param(Id(ZB),ArrayType(1,ArrayType(1,ArrayType(2,ArrayType(1,StringType))))),param(Id(_),ArrayType(1,ArrayType(1,ArrayType(2,ArrayType(1,StringType)))))],Block([Continue])),MethodDecl(Id(__),Instance,[param(Id(_),ArrayType(92,ArrayType(5,ArrayType(6,BoolType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 998))

    def test_999(self):
        line = '''Class _o{Val o,$W,QTA,_9:String ;
        Val q__,$3D_,$4,$e__l:Array [Array [Array [Int ,1073],0b11110],0B1001111];
        Val $__,__g_,Q,$Z2:_7;}Class _0:I{Constructor (_i,E:Array [Array [Array [Boolean ,88],7],067]){Continue ;Break ;} }'''
        expect = '''Program([ClassDecl(Id(_o),[AttributeDecl(Instance,ConstDecl(Id(o),StringType,None)),AttributeDecl(Static,ConstDecl(Id($W),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(QTA),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_9),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(q__),ArrayType(79,ArrayType(30,ArrayType(1073,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($3D_),ArrayType(79,ArrayType(30,ArrayType(1073,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($4),ArrayType(79,ArrayType(30,ArrayType(1073,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($e__l),ArrayType(79,ArrayType(30,ArrayType(1073,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(_7)),None)),AttributeDecl(Instance,ConstDecl(Id(__g_),ClassType(Id(_7)),None)),AttributeDecl(Instance,ConstDecl(Id(Q),ClassType(Id(_7)),None)),AttributeDecl(Static,ConstDecl(Id($Z2),ClassType(Id(_7)),None))]),ClassDecl(Id(_0),Id(I),[MethodDecl(Id(Constructor),Instance,[param(Id(_i),ArrayType(55,ArrayType(7,ArrayType(88,BoolType)))),param(Id(E),ArrayType(55,ArrayType(7,ArrayType(88,BoolType))))],Block([Continue,Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 999))

