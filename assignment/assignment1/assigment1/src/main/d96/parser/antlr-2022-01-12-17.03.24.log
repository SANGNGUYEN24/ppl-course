2022-01-12 17:03:23:737 grammar LogManager.java:25 before: (COMBINED_GRAMMAR D96 (RULES (RULE init (BLOCK (ALT STRING_LITERALNESS))) (RULE WHITE_SPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '##' (* (BLOCK (ALT .))) '##') skip))) (RULE BREAK (BLOCK (ALT 'Break'))) (RULE CONTINUE (BLOCK (ALT 'Continue'))) (RULE IF (BLOCK (ALT 'If'))) (RULE ELSE_IF (BLOCK (ALT 'Elseif'))) (RULE ELSE (BLOCK (ALT 'Else'))) (RULE FOR_EACH (BLOCK (ALT 'Foreach'))) (RULE TRUE (BLOCK (ALT 'True'))) (RULE FALSE (BLOCK (ALT 'False'))) (RULE ARRAY (BLOCK (ALT 'Array'))) (RULE IN (BLOCK (ALT 'In'))) (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOLEAN (BLOCK (ALT 'Boolean'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE RETURN (BLOCK (ALT 'Return'))) (RULE NULL (BLOCK (ALT 'Null'))) (RULE CLASS (BLOCK (ALT 'Class'))) (RULE VAL (BLOCK (ALT 'Val'))) (RULE VAR (BLOCK (ALT 'Var'))) (RULE CONSTRUCTOR (BLOCK (ALT 'Constructor'))) (RULE DESTRUCTOR (BLOCK (ALT 'Destructor'))) (RULE NEW (BLOCK (ALT 'New'))) (RULE BY (BLOCK (ALT 'By'))) (RULE LEFT_PAREN (BLOCK (ALT '('))) (RULE RIGHT_PAREN (BLOCK (ALT ')'))) (RULE LEFT_SQUARE_BRACKET (BLOCK (ALT '['))) (RULE RIGHT_SQUARE_BRACKET (BLOCK (ALT ']'))) (RULE DOT (BLOCK (ALT '.'))) (RULE COMMA (BLOCK (ALT ','))) (RULE SEMICOLON (BLOCK (ALT ';'))) (RULE LEFT_CURLY_BRACKET (BLOCK (ALT '{'))) (RULE RIGHT_CURLY_BRACKET (BLOCK (ALT '}'))) (RULE SINGLE_QUOTE (RULEMODIFIERS fragment) (BLOCK (ALT '\''))) (RULE DOUBLE_QUOTE (RULEMODIFIERS fragment) (BLOCK (ALT '"'))) (RULE ESCAPE (BLOCK (ALT '\\"') (ALT '\\\\'))) (RULE OCTAL_NOTATION (RULEMODIFIERS fragment) (BLOCK (ALT '0'))) (RULE HEXA_NOTATION (RULEMODIFIERS fragment) (BLOCK (ALT '0x') (ALT '0X'))) (RULE BINARY_NOTATION (RULEMODIFIERS fragment) (BLOCK (ALT '0b') (ALT '0B'))) (RULE OCTAL_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9a-fA-F]))) (RULE HEXA_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-7]))) (RULE BINARY_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-1]))) (RULE DECIMAL_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE EXPONENT (RULEMODIFIERS fragment) (BLOCK (ALT [eE] (? (BLOCK (ALT [-+]))) (+ (BLOCK (ALT DECIMAL_DIGIT)))))) (RULE INTEGER (BLOCK (ALT (? (BLOCK (ALT [-+]))) (BLOCK (ALT '0') (ALT [1-9] (* (BLOCK (ALT DECIMAL_DIGIT) (ALT '_')))))))) (RULE OCTAL_LITERALNESS (BLOCK (ALT OCTAL_NOTATION OCTAL_DIGIT))) (RULE HEXA_LITERALNESS (BLOCK (ALT HEXA_NOTATION HEXA_DIGIT))) (RULE BINARY_LITERALNESS (BLOCK (ALT BINARY_NOTATION BINARY_DIGIT))) (RULE FLOAT_LITERALNESS (BLOCK (ALT (+ (BLOCK (ALT INTEGER))) DOT (* (BLOCK (ALT DECIMAL_DIGIT))) (? (BLOCK (ALT EXPONENT)))) (ALT (+ (BLOCK (ALT INTEGER))) (? (BLOCK (ALT EXPONENT)))) (ALT DOT (+ (BLOCK (ALT DECIMAL_DIGIT))) (? (BLOCK (ALT EXPONENT)))))) (RULE BOOLEAN_LITERALNESS (BLOCK (ALT TRUE) (ALT FALSE))) (RULE STRING_LITERALNESS (BLOCK (ALT DOUBLE_QUOTE (* (BLOCK (ALT ESCAPE) (ALT (~ (SET ["]))) (ALT (BLOCK (ALT SINGLE_QUOTE '"'))))) DOUBLE_QUOTE)))))
2022-01-12 17:03:23:752 grammar LogManager.java:25 after: (COMBINED_GRAMMAR D96 (RULES (RULE init (BLOCK (ALT STRING_LITERALNESS))) (RULE WHITE_SPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '##' (* (BLOCK (ALT .))) '##') skip))) (RULE BREAK (BLOCK (ALT 'Break'))) (RULE CONTINUE (BLOCK (ALT 'Continue'))) (RULE IF (BLOCK (ALT 'If'))) (RULE ELSE_IF (BLOCK (ALT 'Elseif'))) (RULE ELSE (BLOCK (ALT 'Else'))) (RULE FOR_EACH (BLOCK (ALT 'Foreach'))) (RULE TRUE (BLOCK (ALT 'True'))) (RULE FALSE (BLOCK (ALT 'False'))) (RULE ARRAY (BLOCK (ALT 'Array'))) (RULE IN (BLOCK (ALT 'In'))) (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOLEAN (BLOCK (ALT 'Boolean'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE RETURN (BLOCK (ALT 'Return'))) (RULE NULL (BLOCK (ALT 'Null'))) (RULE CLASS (BLOCK (ALT 'Class'))) (RULE VAL (BLOCK (ALT 'Val'))) (RULE VAR (BLOCK (ALT 'Var'))) (RULE CONSTRUCTOR (BLOCK (ALT 'Constructor'))) (RULE DESTRUCTOR (BLOCK (ALT 'Destructor'))) (RULE NEW (BLOCK (ALT 'New'))) (RULE BY (BLOCK (ALT 'By'))) (RULE LEFT_PAREN (BLOCK (ALT '('))) (RULE RIGHT_PAREN (BLOCK (ALT ')'))) (RULE LEFT_SQUARE_BRACKET (BLOCK (ALT '['))) (RULE RIGHT_SQUARE_BRACKET (BLOCK (ALT ']'))) (RULE DOT (BLOCK (ALT '.'))) (RULE COMMA (BLOCK (ALT ','))) (RULE SEMICOLON (BLOCK (ALT ';'))) (RULE LEFT_CURLY_BRACKET (BLOCK (ALT '{'))) (RULE RIGHT_CURLY_BRACKET (BLOCK (ALT '}'))) (RULE SINGLE_QUOTE (RULEMODIFIERS fragment) (BLOCK (ALT '\''))) (RULE DOUBLE_QUOTE (RULEMODIFIERS fragment) (BLOCK (ALT '"'))) (RULE ESCAPE (BLOCK (ALT '\\"') (ALT '\\\\'))) (RULE OCTAL_NOTATION (RULEMODIFIERS fragment) (BLOCK (ALT '0'))) (RULE HEXA_NOTATION (RULEMODIFIERS fragment) (BLOCK (ALT '0x') (ALT '0X'))) (RULE BINARY_NOTATION (RULEMODIFIERS fragment) (BLOCK (ALT '0b') (ALT '0B'))) (RULE OCTAL_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9a-fA-F]))) (RULE HEXA_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-7]))) (RULE BINARY_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-1]))) (RULE DECIMAL_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE EXPONENT (RULEMODIFIERS fragment) (BLOCK (ALT [eE] (? (BLOCK (ALT [-+]))) (+ (BLOCK (ALT DECIMAL_DIGIT)))))) (RULE INTEGER (BLOCK (ALT (? (BLOCK (ALT [-+]))) (BLOCK (ALT '0') (ALT [1-9] (* (BLOCK (ALT DECIMAL_DIGIT) (ALT '_')))))))) (RULE OCTAL_LITERALNESS (BLOCK (ALT OCTAL_NOTATION OCTAL_DIGIT))) (RULE HEXA_LITERALNESS (BLOCK (ALT HEXA_NOTATION HEXA_DIGIT))) (RULE BINARY_LITERALNESS (BLOCK (ALT BINARY_NOTATION BINARY_DIGIT))) (RULE FLOAT_LITERALNESS (BLOCK (ALT (+ (BLOCK (ALT INTEGER))) DOT (* (BLOCK (ALT DECIMAL_DIGIT))) (? (BLOCK (ALT EXPONENT)))) (ALT (+ (BLOCK (ALT INTEGER))) (? (BLOCK (ALT EXPONENT)))) (ALT DOT (+ (BLOCK (ALT DECIMAL_DIGIT))) (? (BLOCK (ALT EXPONENT)))))) (RULE BOOLEAN_LITERALNESS (BLOCK (ALT TRUE) (ALT FALSE))) (RULE STRING_LITERALNESS (BLOCK (ALT DOUBLE_QUOTE (* (BLOCK (ALT ESCAPE) (ALT (~ (SET ["]))) (ALT (BLOCK (ALT SINGLE_QUOTE '"'))))) DOUBLE_QUOTE)))))
2022-01-12 17:03:23:767 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR D96 (RULES (RULE init (BLOCK (ALT STRING_LITERALNESS)))))
2022-01-12 17:03:23:768 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR D96Lexer (RULES (RULE WHITE_SPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '##' (* (BLOCK (ALT .))) '##') skip))) (RULE BREAK (BLOCK (ALT 'Break'))) (RULE CONTINUE (BLOCK (ALT 'Continue'))) (RULE IF (BLOCK (ALT 'If'))) (RULE ELSE_IF (BLOCK (ALT 'Elseif'))) (RULE ELSE (BLOCK (ALT 'Else'))) (RULE FOR_EACH (BLOCK (ALT 'Foreach'))) (RULE TRUE (BLOCK (ALT 'True'))) (RULE FALSE (BLOCK (ALT 'False'))) (RULE ARRAY (BLOCK (ALT 'Array'))) (RULE IN (BLOCK (ALT 'In'))) (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOLEAN (BLOCK (ALT 'Boolean'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE RETURN (BLOCK (ALT 'Return'))) (RULE NULL (BLOCK (ALT 'Null'))) (RULE CLASS (BLOCK (ALT 'Class'))) (RULE VAL (BLOCK (ALT 'Val'))) (RULE VAR (BLOCK (ALT 'Var'))) (RULE CONSTRUCTOR (BLOCK (ALT 'Constructor'))) (RULE DESTRUCTOR (BLOCK (ALT 'Destructor'))) (RULE NEW (BLOCK (ALT 'New'))) (RULE BY (BLOCK (ALT 'By'))) (RULE LEFT_PAREN (BLOCK (ALT '('))) (RULE RIGHT_PAREN (BLOCK (ALT ')'))) (RULE LEFT_SQUARE_BRACKET (BLOCK (ALT '['))) (RULE RIGHT_SQUARE_BRACKET (BLOCK (ALT ']'))) (RULE DOT (BLOCK (ALT '.'))) (RULE COMMA (BLOCK (ALT ','))) (RULE SEMICOLON (BLOCK (ALT ';'))) (RULE LEFT_CURLY_BRACKET (BLOCK (ALT '{'))) (RULE RIGHT_CURLY_BRACKET (BLOCK (ALT '}'))) (RULE SINGLE_QUOTE (RULEMODIFIERS fragment) (BLOCK (ALT '\''))) (RULE DOUBLE_QUOTE (RULEMODIFIERS fragment) (BLOCK (ALT '"'))) (RULE ESCAPE (BLOCK (ALT '\\"') (ALT '\\\\'))) (RULE OCTAL_NOTATION (RULEMODIFIERS fragment) (BLOCK (ALT '0'))) (RULE HEXA_NOTATION (RULEMODIFIERS fragment) (BLOCK (ALT '0x') (ALT '0X'))) (RULE BINARY_NOTATION (RULEMODIFIERS fragment) (BLOCK (ALT '0b') (ALT '0B'))) (RULE OCTAL_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9a-fA-F]))) (RULE HEXA_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-7]))) (RULE BINARY_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-1]))) (RULE DECIMAL_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE EXPONENT (RULEMODIFIERS fragment) (BLOCK (ALT [eE] (? (BLOCK (ALT [-+]))) (+ (BLOCK (ALT DECIMAL_DIGIT)))))) (RULE INTEGER (BLOCK (ALT (? (BLOCK (ALT [-+]))) (BLOCK (ALT '0') (ALT [1-9] (* (BLOCK (ALT DECIMAL_DIGIT) (ALT '_')))))))) (RULE OCTAL_LITERALNESS (BLOCK (ALT OCTAL_NOTATION OCTAL_DIGIT))) (RULE HEXA_LITERALNESS (BLOCK (ALT HEXA_NOTATION HEXA_DIGIT))) (RULE BINARY_LITERALNESS (BLOCK (ALT BINARY_NOTATION BINARY_DIGIT))) (RULE FLOAT_LITERALNESS (BLOCK (ALT (+ (BLOCK (ALT INTEGER))) DOT (* (BLOCK (ALT DECIMAL_DIGIT))) (? (BLOCK (ALT EXPONENT)))) (ALT (+ (BLOCK (ALT INTEGER))) (? (BLOCK (ALT EXPONENT)))) (ALT DOT (+ (BLOCK (ALT DECIMAL_DIGIT))) (? (BLOCK (ALT EXPONENT)))))) (RULE BOOLEAN_LITERALNESS (BLOCK (ALT TRUE) (ALT FALSE))) (RULE STRING_LITERALNESS (BLOCK (ALT DOUBLE_QUOTE (* (BLOCK (ALT ESCAPE) (ALT (~ (SET ["]))) (ALT (BLOCK (ALT SINGLE_QUOTE '"'))))) DOUBLE_QUOTE)))))
2022-01-12 17:03:23:932 semantics LogManager.java:25 tokens={EOF=-1, WHITE_SPACE=1, COMMENT=2, BREAK=3, CONTINUE=4, IF=5, ELSE_IF=6, ELSE=7, FOR_EACH=8, TRUE=9, FALSE=10, ARRAY=11, IN=12, INT=13, FLOAT=14, BOOLEAN=15, STRING=16, RETURN=17, NULL=18, CLASS=19, VAL=20, VAR=21, CONSTRUCTOR=22, DESTRUCTOR=23, NEW=24, BY=25, LEFT_PAREN=26, RIGHT_PAREN=27, LEFT_SQUARE_BRACKET=28, RIGHT_SQUARE_BRACKET=29, DOT=30, COMMA=31, SEMICOLON=32, LEFT_CURLY_BRACKET=33, RIGHT_CURLY_BRACKET=34, ESCAPE=35, INTEGER=36, OCTAL_LITERALNESS=37, HEXA_LITERALNESS=38, BINARY_LITERALNESS=39, FLOAT_LITERALNESS=40, BOOLEAN_LITERALNESS=41, STRING_LITERALNESS=42}
2022-01-12 17:03:23:932 semantics LogManager.java:25 strings={'Break'=3, 'Continue'=4, 'If'=5, 'Elseif'=6, 'Else'=7, 'Foreach'=8, 'True'=9, 'False'=10, 'Array'=11, 'In'=12, 'Int'=13, 'Float'=14, 'Boolean'=15, 'String'=16, 'Return'=17, 'Null'=18, 'Class'=19, 'Val'=20, 'Var'=21, 'Constructor'=22, 'Destructor'=23, 'New'=24, 'By'=25, '('=26, ')'=27, '['=28, ']'=29, '.'=30, ','=31, ';'=32, '{'=33, '}'=34}
